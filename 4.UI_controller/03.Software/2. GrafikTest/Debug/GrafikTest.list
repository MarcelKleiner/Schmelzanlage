
GrafikTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080030d0  080030d0  000130d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031f4  080031f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080031f4  080031f4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031f4  080031f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080031f4  080031f4  000131f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031fc  080031fc  000131fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000070  08003270  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08003270  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b619  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e4a  00000000  00000000  0003b6b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008c0  00000000  00000000  0003e508  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a8  00000000  00000000  0003edc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bd21  00000000  00000000  0003f570  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b6ad  00000000  00000000  0005b291  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e4f8  00000000  00000000  0006693e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f4e36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c4  00000000  00000000  000f4eb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080030b8 	.word	0x080030b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080030b8 	.word	0x080030b8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <_ZN7AppMainC1Ev>:

//#include<iostream>
#include<string> // for string class
using namespace std;

AppMain::AppMain() {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4618      	mov	r0, r3
 80001e4:	f000 f900 	bl	80003e8 <_ZN9LCDDriverC1Ev>
	// TODO Auto-generated constructor stub

}
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	4618      	mov	r0, r3
 80001ec:	3708      	adds	r7, #8
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
	...

080001f4 <_ZN7AppMain4mainEv>:

void AppMain::main(){
 80001f4:	b590      	push	{r4, r7, lr}
 80001f6:	b0ad      	sub	sp, #180	; 0xb4
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
	lcdDriver.InitLCD();
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4618      	mov	r0, r3
 8000200:	f000 f8fd 	bl	80003fe <_ZN9LCDDriver7InitLCDEv>

	lcdDriver.SetAddressPointer(0, 0);
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2200      	movs	r2, #0
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f000 f9e1 	bl	80005d2 <_ZN9LCDDriver17SetAddressPointerEhh>
	lcdDriver.WriteText("Copyright (C) 1991-2020, B&K System AG");
 8000210:	687c      	ldr	r4, [r7, #4]
 8000212:	f107 0320 	add.w	r3, r7, #32
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fd5e 	bl	8002cd8 <_ZNSaIcEC1Ev>
 800021c:	f107 0220 	add.w	r2, r7, #32
 8000220:	f107 0308 	add.w	r3, r7, #8
 8000224:	496a      	ldr	r1, [pc, #424]	; (80003d0 <_ZN7AppMain4mainEv+0x1dc>)
 8000226:	4618      	mov	r0, r3
 8000228:	f002 fdba 	bl	8002da0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800022c:	f107 0308 	add.w	r3, r7, #8
 8000230:	4619      	mov	r1, r3
 8000232:	4620      	mov	r0, r4
 8000234:	f000 f945 	bl	80004c2 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000238:	f107 0308 	add.w	r3, r7, #8
 800023c:	4618      	mov	r0, r3
 800023e:	f002 fd81 	bl	8002d44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000242:	f107 0320 	add.w	r3, r7, #32
 8000246:	4618      	mov	r0, r3
 8000248:	f002 fd47 	bl	8002cda <_ZNSaIcED1Ev>
	lcdDriver.SetAddressPointer(0, 2);
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2202      	movs	r2, #2
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f000 f9bd 	bl	80005d2 <_ZN9LCDDriver17SetAddressPointerEhh>
	lcdDriver.WriteText("Init System...");
 8000258:	687c      	ldr	r4, [r7, #4]
 800025a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800025e:	4618      	mov	r0, r3
 8000260:	f002 fd3a 	bl	8002cd8 <_ZNSaIcEC1Ev>
 8000264:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800026c:	4959      	ldr	r1, [pc, #356]	; (80003d4 <_ZN7AppMain4mainEv+0x1e0>)
 800026e:	4618      	mov	r0, r3
 8000270:	f002 fd96 	bl	8002da0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000278:	4619      	mov	r1, r3
 800027a:	4620      	mov	r0, r4
 800027c:	f000 f921 	bl	80004c2 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000284:	4618      	mov	r0, r3
 8000286:	f002 fd5d 	bl	8002d44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800028a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800028e:	4618      	mov	r0, r3
 8000290:	f002 fd23 	bl	8002cda <_ZNSaIcED1Ev>
	HAL_Delay(1000);
 8000294:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000298:	f000 ff3a 	bl	8001110 <HAL_Delay>
	lcdDriver.SetAddressPointer(0, 3);
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2203      	movs	r2, #3
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 f995 	bl	80005d2 <_ZN9LCDDriver17SetAddressPointerEhh>
	lcdDriver.WriteText("Booting from internal ROM...");
 80002a8:	687c      	ldr	r4, [r7, #4]
 80002aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002ae:	4618      	mov	r0, r3
 80002b0:	f002 fd12 	bl	8002cd8 <_ZNSaIcEC1Ev>
 80002b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80002b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002bc:	4946      	ldr	r1, [pc, #280]	; (80003d8 <_ZN7AppMain4mainEv+0x1e4>)
 80002be:	4618      	mov	r0, r3
 80002c0:	f002 fd6e 	bl	8002da0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80002c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002c8:	4619      	mov	r1, r3
 80002ca:	4620      	mov	r0, r4
 80002cc:	f000 f8f9 	bl	80004c2 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80002d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002d4:	4618      	mov	r0, r3
 80002d6:	f002 fd35 	bl	8002d44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80002da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 fcfb 	bl	8002cda <_ZNSaIcED1Ev>
	HAL_Delay(800);
 80002e4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80002e8:	f000 ff12 	bl	8001110 <HAL_Delay>
	lcdDriver.SetAddressPointer(0, 5);
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2205      	movs	r2, #5
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 f96d 	bl	80005d2 <_ZN9LCDDriver17SetAddressPointerEhh>
	lcdDriver.WriteText("Main Processor : STM32F303K8");
 80002f8:	687c      	ldr	r4, [r7, #4]
 80002fa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80002fe:	4618      	mov	r0, r3
 8000300:	f002 fcea 	bl	8002cd8 <_ZNSaIcEC1Ev>
 8000304:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000308:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800030c:	4933      	ldr	r1, [pc, #204]	; (80003dc <_ZN7AppMain4mainEv+0x1e8>)
 800030e:	4618      	mov	r0, r3
 8000310:	f002 fd46 	bl	8002da0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000314:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000318:	4619      	mov	r1, r3
 800031a:	4620      	mov	r0, r4
 800031c:	f000 f8d1 	bl	80004c2 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000320:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000324:	4618      	mov	r0, r3
 8000326:	f002 fd0d 	bl	8002d44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800032a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800032e:	4618      	mov	r0, r3
 8000330:	f002 fcd3 	bl	8002cda <_ZNSaIcED1Ev>
	lcdDriver.SetAddressPointer(0, 6);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	2206      	movs	r2, #6
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f000 f949 	bl	80005d2 <_ZN9LCDDriver17SetAddressPointerEhh>
	lcdDriver.WriteText("Memory Testing : 64K OK ");
 8000340:	687c      	ldr	r4, [r7, #4]
 8000342:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000346:	4618      	mov	r0, r3
 8000348:	f002 fcc6 	bl	8002cd8 <_ZNSaIcEC1Ev>
 800034c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8000350:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000354:	4922      	ldr	r1, [pc, #136]	; (80003e0 <_ZN7AppMain4mainEv+0x1ec>)
 8000356:	4618      	mov	r0, r3
 8000358:	f002 fd22 	bl	8002da0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800035c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000360:	4619      	mov	r1, r3
 8000362:	4620      	mov	r0, r4
 8000364:	f000 f8ad 	bl	80004c2 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000368:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800036c:	4618      	mov	r0, r3
 800036e:	f002 fce9 	bl	8002d44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000372:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000376:	4618      	mov	r0, r3
 8000378:	f002 fcaf 	bl	8002cda <_ZNSaIcED1Ev>
	HAL_Delay(800);
 800037c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000380:	f000 fec6 	bl	8001110 <HAL_Delay>
	lcdDriver.SetAddressPointer(0, 15);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	220f      	movs	r2, #15
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f000 f921 	bl	80005d2 <_ZN9LCDDriver17SetAddressPointerEhh>
	lcdDriver.WriteText("Press F1 to enter BIOS...");
 8000390:	687c      	ldr	r4, [r7, #4]
 8000392:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000396:	4618      	mov	r0, r3
 8000398:	f002 fc9e 	bl	8002cd8 <_ZNSaIcEC1Ev>
 800039c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80003a0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80003a4:	490f      	ldr	r1, [pc, #60]	; (80003e4 <_ZN7AppMain4mainEv+0x1f0>)
 80003a6:	4618      	mov	r0, r3
 80003a8:	f002 fcfa 	bl	8002da0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80003ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80003b0:	4619      	mov	r1, r3
 80003b2:	4620      	mov	r0, r4
 80003b4:	f000 f885 	bl	80004c2 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80003b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80003bc:	4618      	mov	r0, r3
 80003be:	f002 fcc1 	bl	8002d44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80003c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80003c6:	4618      	mov	r0, r3
 80003c8:	f002 fc87 	bl	8002cda <_ZNSaIcED1Ev>
	while(1){
 80003cc:	e7fe      	b.n	80003cc <_ZN7AppMain4mainEv+0x1d8>
 80003ce:	bf00      	nop
 80003d0:	080030d0 	.word	0x080030d0
 80003d4:	080030f8 	.word	0x080030f8
 80003d8:	08003108 	.word	0x08003108
 80003dc:	08003128 	.word	0x08003128
 80003e0:	08003148 	.word	0x08003148
 80003e4:	08003164 	.word	0x08003164

080003e8 <_ZN9LCDDriverC1Ev>:
#include "main.h"
#include "i2c.h"
#include "gpio.h"
#include "stdlib.h"

LCDDriver::LCDDriver() {
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4618      	mov	r0, r3
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <_ZN9LCDDriver7InitLCDEv>:


void LCDDriver::InitLCD(){
 80003fe:	b580      	push	{r7, lr}
 8000400:	b082      	sub	sp, #8
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
	Reset();
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f000 fb8e 	bl	8000b28 <_ZN9LCDDriver5ResetEv>
	LCD_RD_SET;
 800040c:	2201      	movs	r2, #1
 800040e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000416:	f001 f90d 	bl	8001634 <HAL_GPIO_WritePin>
	LCD_WR_SET;
 800041a:	2201      	movs	r2, #1
 800041c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000420:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000424:	f001 f906 	bl	8001634 <HAL_GPIO_WritePin>
	SetLCDSize(SIZE_40C);
 8000428:	2100      	movs	r1, #0
 800042a:	6878      	ldr	r0, [r7, #4]
 800042c:	f000 f875 	bl	800051a <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E>


	//init REGISTERS SETTING
	WriteData_16bit(LCD_setCursorPointer,0);
 8000430:	2200      	movs	r2, #0
 8000432:	2121      	movs	r1, #33	; 0x21
 8000434:	6878      	ldr	r0, [r7, #4]
 8000436:	f000 f972 	bl	800071e <_ZN9LCDDriver15WriteData_16bitEht>
	WriteData_16bit(LCD_setAddressPointer, 0);
 800043a:	2200      	movs	r2, #0
 800043c:	2124      	movs	r1, #36	; 0x24
 800043e:	6878      	ldr	r0, [r7, #4]
 8000440:	f000 f96d 	bl	800071e <_ZN9LCDDriver15WriteData_16bitEht>
	WriteData_16bit(LCD_setOffsetRegister, 0);
 8000444:	2200      	movs	r2, #0
 8000446:	2122      	movs	r1, #34	; 0x22
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	f000 f968 	bl	800071e <_ZN9LCDDriver15WriteData_16bitEht>
	//Init SET CONTROL WORD
	WriteData_16bit(LCD_setTextHomeAddress,0);
 800044e:	2200      	movs	r2, #0
 8000450:	2140      	movs	r1, #64	; 0x40
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	f000 f963 	bl	800071e <_ZN9LCDDriver15WriteData_16bitEht>
	WriteData_16bit(LCD_setGraphicHomeAddress, 0);
 8000458:	2200      	movs	r2, #0
 800045a:	2142      	movs	r1, #66	; 0x42
 800045c:	6878      	ldr	r0, [r7, #4]
 800045e:	f000 f95e 	bl	800071e <_ZN9LCDDriver15WriteData_16bitEht>
	WriteData_16bit(LCD_setGraphicArea, 0x0020);
 8000462:	2220      	movs	r2, #32
 8000464:	2143      	movs	r1, #67	; 0x43
 8000466:	6878      	ldr	r0, [r7, #4]
 8000468:	f000 f959 	bl	800071e <_ZN9LCDDriver15WriteData_16bitEht>
	//Init MODE SET
	WriteData_8bit(LCD_EXOR_mode |LCD_InternalCGROM_mode);
 800046c:	2181      	movs	r1, #129	; 0x81
 800046e:	6878      	ldr	r0, [r7, #4]
 8000470:	f000 f8cd 	bl	800060e <_ZN9LCDDriver14WriteData_8bitEh>
	//Init DISPLY MODE
	WriteData_8bit(LCD_cursorOnBlinkON | LCD_textOnGraphicOFF);
 8000474:	2197      	movs	r1, #151	; 0x97
 8000476:	6878      	ldr	r0, [r7, #4]
 8000478:	f000 f8c9 	bl	800060e <_ZN9LCDDriver14WriteData_8bitEh>
	//Init CURSOR PATTERN SELECT
	WriteData_8bit(LCD_1_lineCursor);
 800047c:	21a0      	movs	r1, #160	; 0xa0
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f000 f8c5 	bl	800060e <_ZN9LCDDriver14WriteData_8bitEh>
	//Init DATA AUTO READ/WRITE
	WriteData_8bit(LCD_setDataAutoRead);
 8000484:	21b1      	movs	r1, #177	; 0xb1
 8000486:	6878      	ldr	r0, [r7, #4]
 8000488:	f000 f8c1 	bl	800060e <_ZN9LCDDriver14WriteData_8bitEh>
	//Init SCREEN REVERSE
	WriteData_16bit(LCD_SCREEN_REVERSE, NORMAL_DISPLAY);
 800048c:	2200      	movs	r2, #0
 800048e:	21d0      	movs	r1, #208	; 0xd0
 8000490:	6878      	ldr	r0, [r7, #4]
 8000492:	f000 f944 	bl	800071e <_ZN9LCDDriver15WriteData_16bitEht>
	//Init BLINK TIME
	WriteData_16bit(LCD_BLINK_TIME, BLINK_TIM_0_066);
 8000496:	2200      	movs	r2, #0
 8000498:	2150      	movs	r1, #80	; 0x50
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	f000 f93f 	bl	800071e <_ZN9LCDDriver15WriteData_16bitEht>
	//Init CURSOR AUTO MOVING
	WriteData_16bit(LCD_CursorAutoMoving, AUTO_MOVING_ON);
 80004a0:	2201      	movs	r2, #1
 80004a2:	2160      	movs	r1, #96	; 0x60
 80004a4:	6878      	ldr	r0, [r7, #4]
 80004a6:	f000 f93a 	bl	800071e <_ZN9LCDDriver15WriteData_16bitEht>


	SetAddressPointer(0, 0);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2100      	movs	r1, #0
 80004ae:	6878      	ldr	r0, [r7, #4]
 80004b0:	f000 f88f 	bl	80005d2 <_ZN9LCDDriver17SetAddressPointerEhh>
	ClearDisplay();
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	f000 f86f 	bl	8000598 <_ZN9LCDDriver12ClearDisplayEv>

}
 80004ba:	bf00      	nop
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:


bool LCDDriver::WriteText(string data){
 80004c2:	b580      	push	{r7, lr}
 80004c4:	b084      	sub	sp, #16
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
 80004ca:	6039      	str	r1, [r7, #0]
	uint16_t counter = 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	81fb      	strh	r3, [r7, #14]
	while(data[counter] != '\0'){
 80004d0:	89fb      	ldrh	r3, [r7, #14]
 80004d2:	4619      	mov	r1, r3
 80004d4:	6838      	ldr	r0, [r7, #0]
 80004d6:	f002 fc3b 	bl	8002d50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80004da:	4603      	mov	r3, r0
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	bf14      	ite	ne
 80004e2:	2301      	movne	r3, #1
 80004e4:	2300      	moveq	r3, #0
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d011      	beq.n	8000510 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e>
		WriteData_8bit(LCD_dataWriteAndIncrementADP,(uint8_t)data[counter]-32);
 80004ec:	89fb      	ldrh	r3, [r7, #14]
 80004ee:	4619      	mov	r1, r3
 80004f0:	6838      	ldr	r0, [r7, #0]
 80004f2:	f002 fc2d 	bl	8002d50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80004f6:	4603      	mov	r3, r0
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	3b20      	subs	r3, #32
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	461a      	mov	r2, r3
 8000500:	21c0      	movs	r1, #192	; 0xc0
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f000 f8b8 	bl	8000678 <_ZN9LCDDriver14WriteData_8bitEhh>
		counter++;
 8000508:	89fb      	ldrh	r3, [r7, #14]
 800050a:	3301      	adds	r3, #1
 800050c:	81fb      	strh	r3, [r7, #14]
	while(data[counter] != '\0'){
 800050e:	e7df      	b.n	80004d0 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe>
	}

	return true;
 8000510:	2301      	movs	r3, #1
}
 8000512:	4618      	mov	r0, r3
 8000514:	3710      	adds	r7, #16
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E>:
 * Init the LCD Size (40 Columns / 32 Columns)
 *
 * @param size: LCD Size
 * @return : none
 */
void LCDDriver::SetLCDSize(LCD_SIZE size){
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
 8000522:	460b      	mov	r3, r1
 8000524:	70fb      	strb	r3, [r7, #3]
	if(size == SIZE_40C){
 8000526:	78fb      	ldrb	r3, [r7, #3]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d117      	bne.n	800055c <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E+0x42>
		LCD_SIZE_40;				//set size 40 Columns
 800052c:	2200      	movs	r2, #0
 800052e:	2102      	movs	r1, #2
 8000530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000534:	f001 f87e 	bl	8001634 <HAL_GPIO_WritePin>
		LCD_FONT_68;				//set Fontsize 6x8px
 8000538:	2201      	movs	r2, #1
 800053a:	2101      	movs	r1, #1
 800053c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000540:	f001 f878 	bl	8001634 <HAL_GPIO_WritePin>
		LCD_XY_SIZE.column = 40;	//set LCD size struct to 40 Columns
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2228      	movs	r2, #40	; 0x28
 8000548:	701a      	strb	r2, [r3, #0]
		LCD_XY_SIZE.row = 16;		//set LCD size struct to 16 Row
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2210      	movs	r2, #16
 800054e:	705a      	strb	r2, [r3, #1]
		WriteData_16bit(LCD_setTextArea, 0x0028);	//set TextArea to 32 Columns
 8000550:	2228      	movs	r2, #40	; 0x28
 8000552:	2141      	movs	r1, #65	; 0x41
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f000 f8e2 	bl	800071e <_ZN9LCDDriver15WriteData_16bitEht>
		LCD_FONT_88;				//set Fontsize 6x8px
		LCD_XY_SIZE.column = 32;	//set LCD size struct to 40 Columns
		LCD_XY_SIZE.row = 16;		//set LCD size struct to 16 Row
		WriteData_16bit(LCD_setTextArea, 0x0020);	//set TextArea to 40 Columns
	}
}
 800055a:	e019      	b.n	8000590 <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E+0x76>
	else if(size == SIZE_32C){
 800055c:	78fb      	ldrb	r3, [r7, #3]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d116      	bne.n	8000590 <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E+0x76>
		LCD_SIZE_32;				//set size 40 Columns
 8000562:	2201      	movs	r2, #1
 8000564:	2102      	movs	r1, #2
 8000566:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056a:	f001 f863 	bl	8001634 <HAL_GPIO_WritePin>
		LCD_FONT_88;				//set Fontsize 6x8px
 800056e:	2200      	movs	r2, #0
 8000570:	2101      	movs	r1, #1
 8000572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000576:	f001 f85d 	bl	8001634 <HAL_GPIO_WritePin>
		LCD_XY_SIZE.column = 32;	//set LCD size struct to 40 Columns
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2220      	movs	r2, #32
 800057e:	701a      	strb	r2, [r3, #0]
		LCD_XY_SIZE.row = 16;		//set LCD size struct to 16 Row
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2210      	movs	r2, #16
 8000584:	705a      	strb	r2, [r3, #1]
		WriteData_16bit(LCD_setTextArea, 0x0020);	//set TextArea to 40 Columns
 8000586:	2220      	movs	r2, #32
 8000588:	2141      	movs	r1, #65	; 0x41
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f000 f8c7 	bl	800071e <_ZN9LCDDriver15WriteData_16bitEht>
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <_ZN9LCDDriver12ClearDisplayEv>:
 * clears the whole LCD depending on the selected size
 *
 * @param  : none
 * @return : none
 */
void LCDDriver::ClearDisplay(){
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	for(uint16_t counter = 0; counter<LCD_XY_SIZE.column*LCD_XY_SIZE.row; counter++){
 80005a0:	2300      	movs	r3, #0
 80005a2:	81fb      	strh	r3, [r7, #14]
 80005a4:	89fa      	ldrh	r2, [r7, #14]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	4619      	mov	r1, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	785b      	ldrb	r3, [r3, #1]
 80005b0:	fb03 f301 	mul.w	r3, r3, r1
 80005b4:	429a      	cmp	r2, r3
 80005b6:	da08      	bge.n	80005ca <_ZN9LCDDriver12ClearDisplayEv+0x32>
		WriteData_16bit(LCD_dataWriteAndIncrementADP, 0x00);
 80005b8:	2200      	movs	r2, #0
 80005ba:	21c0      	movs	r1, #192	; 0xc0
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f000 f8ae 	bl	800071e <_ZN9LCDDriver15WriteData_16bitEht>
	for(uint16_t counter = 0; counter<LCD_XY_SIZE.column*LCD_XY_SIZE.row; counter++){
 80005c2:	89fb      	ldrh	r3, [r7, #14]
 80005c4:	3301      	adds	r3, #1
 80005c6:	81fb      	strh	r3, [r7, #14]
 80005c8:	e7ec      	b.n	80005a4 <_ZN9LCDDriver12ClearDisplayEv+0xc>
	}
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <_ZN9LCDDriver17SetAddressPointerEhh>:
 *
 * @param column: the chosen Column
 * @param row: the chosen Row
 * @return : none;
 */
void LCDDriver::SetAddressPointer(uint8_t column, uint8_t row){
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b084      	sub	sp, #16
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
 80005da:	460b      	mov	r3, r1
 80005dc:	70fb      	strb	r3, [r7, #3]
 80005de:	4613      	mov	r3, r2
 80005e0:	70bb      	strb	r3, [r7, #2]
	uint16_t LCDPointer = row*LCD_XY_SIZE.column + column;	//calculate the AdressPointer depending on the selected LCD Size
 80005e2:	78bb      	ldrb	r3, [r7, #2]
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	fb12 f303 	smulbb	r3, r2, r3
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	78fb      	ldrb	r3, [r7, #3]
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	4413      	add	r3, r2
 80005f8:	81fb      	strh	r3, [r7, #14]
	WriteData_16bit(LCD_setAddressPointer, LCDPointer);		//set the AdressPointer
 80005fa:	89fb      	ldrh	r3, [r7, #14]
 80005fc:	461a      	mov	r2, r3
 80005fe:	2124      	movs	r1, #36	; 0x24
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f000 f88c 	bl	800071e <_ZN9LCDDriver15WriteData_16bitEht>
}
 8000606:	bf00      	nop
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <_ZN9LCDDriver14WriteData_8bitEh>:


bool LCDDriver::WriteData_8bit(uint8_t addr){
 800060e:	b580      	push	{r7, lr}
 8000610:	b082      	sub	sp, #8
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
 8000616:	460b      	mov	r3, r1
 8000618:	70fb      	strb	r3, [r7, #3]
	LCD_OUTPUT_ENABLE;
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000624:	f001 f806 	bl	8001634 <HAL_GPIO_WritePin>


	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
 8000628:	2132      	movs	r1, #50	; 0x32
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f000 f90b 	bl	8000846 <_ZN9LCDDriver11CheckStatusEh>
 8000630:	4603      	mov	r3, r0
 8000632:	2b01      	cmp	r3, #1
 8000634:	bf0c      	ite	eq
 8000636:	2301      	moveq	r3, #1
 8000638:	2300      	movne	r3, #0
 800063a:	b2db      	uxtb	r3, r3
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <_ZN9LCDDriver14WriteData_8bitEh+0x36>
		return false;
 8000640:	2300      	movs	r3, #0
 8000642:	e015      	b.n	8000670 <_ZN9LCDDriver14WriteData_8bitEh+0x62>
	}
	WriteDataPin(addr);
 8000644:	78fb      	ldrb	r3, [r7, #3]
 8000646:	4619      	mov	r1, r3
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f000 fa13 	bl	8000a74 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_COMMAND;
 800064e:	2201      	movs	r2, #1
 8000650:	2104      	movs	r1, #4
 8000652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000656:	f000 ffed 	bl	8001634 <HAL_GPIO_WritePin>
	PushData();
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f8d1 	bl	8000802 <_ZN9LCDDriver8PushDataEv>

	LCD_OUTPUT_DISABLE;
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066a:	f000 ffe3 	bl	8001634 <HAL_GPIO_WritePin>
	return true;
 800066e:	2301      	movs	r3, #1
}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <_ZN9LCDDriver14WriteData_8bitEhh>:


bool LCDDriver::WriteData_8bit(uint8_t addr, uint8_t data){
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
 8000684:	4613      	mov	r3, r2
 8000686:	70bb      	strb	r3, [r7, #2]
	LCD_OUTPUT_ENABLE;
 8000688:	2201      	movs	r2, #1
 800068a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800068e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000692:	f000 ffcf 	bl	8001634 <HAL_GPIO_WritePin>

	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
 8000696:	2132      	movs	r1, #50	; 0x32
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f000 f8d4 	bl	8000846 <_ZN9LCDDriver11CheckStatusEh>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	bf0c      	ite	eq
 80006a4:	2301      	moveq	r3, #1
 80006a6:	2300      	movne	r3, #0
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <_ZN9LCDDriver14WriteData_8bitEhh+0x3a>
		return false;
 80006ae:	2300      	movs	r3, #0
 80006b0:	e031      	b.n	8000716 <_ZN9LCDDriver14WriteData_8bitEhh+0x9e>
	}
	WriteDataPin(data);
 80006b2:	78bb      	ldrb	r3, [r7, #2]
 80006b4:	4619      	mov	r1, r3
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 f9dc 	bl	8000a74 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_DATA;
 80006bc:	2200      	movs	r2, #0
 80006be:	2104      	movs	r1, #4
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c4:	f000 ffb6 	bl	8001634 <HAL_GPIO_WritePin>
	PushData();
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f000 f89a 	bl	8000802 <_ZN9LCDDriver8PushDataEv>

	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
 80006ce:	2132      	movs	r1, #50	; 0x32
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f000 f8b8 	bl	8000846 <_ZN9LCDDriver11CheckStatusEh>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b01      	cmp	r3, #1
 80006da:	bf0c      	ite	eq
 80006dc:	2301      	moveq	r3, #1
 80006de:	2300      	movne	r3, #0
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <_ZN9LCDDriver14WriteData_8bitEhh+0x72>
		return false;
 80006e6:	2300      	movs	r3, #0
 80006e8:	e015      	b.n	8000716 <_ZN9LCDDriver14WriteData_8bitEhh+0x9e>
	}
	WriteDataPin(addr);
 80006ea:	78fb      	ldrb	r3, [r7, #3]
 80006ec:	4619      	mov	r1, r3
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f000 f9c0 	bl	8000a74 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_COMMAND;
 80006f4:	2201      	movs	r2, #1
 80006f6:	2104      	movs	r1, #4
 80006f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fc:	f000 ff9a 	bl	8001634 <HAL_GPIO_WritePin>
	PushData();
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f000 f87e 	bl	8000802 <_ZN9LCDDriver8PushDataEv>

	LCD_OUTPUT_DISABLE;
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800070c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000710:	f000 ff90 	bl	8001634 <HAL_GPIO_WritePin>
	return true;
 8000714:	2301      	movs	r3, #1
}
 8000716:	4618      	mov	r0, r3
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <_ZN9LCDDriver15WriteData_16bitEht>:

bool LCDDriver::WriteData_16bit(uint8_t addr, uint16_t data){
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
 8000726:	460b      	mov	r3, r1
 8000728:	70fb      	strb	r3, [r7, #3]
 800072a:	4613      	mov	r3, r2
 800072c:	803b      	strh	r3, [r7, #0]
	LCD_OUTPUT_ENABLE;
 800072e:	2201      	movs	r2, #1
 8000730:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000738:	f000 ff7c 	bl	8001634 <HAL_GPIO_WritePin>

	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
 800073c:	2132      	movs	r1, #50	; 0x32
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f000 f881 	bl	8000846 <_ZN9LCDDriver11CheckStatusEh>
 8000744:	4603      	mov	r3, r0
 8000746:	2b01      	cmp	r3, #1
 8000748:	bf0c      	ite	eq
 800074a:	2301      	moveq	r3, #1
 800074c:	2300      	movne	r3, #0
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <_ZN9LCDDriver15WriteData_16bitEht+0x3a>
		return false;
 8000754:	2300      	movs	r3, #0
 8000756:	e050      	b.n	80007fa <_ZN9LCDDriver15WriteData_16bitEht+0xdc>
	}
	WriteDataPin((uint8_t)data);
 8000758:	883b      	ldrh	r3, [r7, #0]
 800075a:	b2db      	uxtb	r3, r3
 800075c:	4619      	mov	r1, r3
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f000 f988 	bl	8000a74 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_DATA;
 8000764:	2200      	movs	r2, #0
 8000766:	2104      	movs	r1, #4
 8000768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076c:	f000 ff62 	bl	8001634 <HAL_GPIO_WritePin>
	PushData();
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f000 f846 	bl	8000802 <_ZN9LCDDriver8PushDataEv>

	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
 8000776:	2132      	movs	r1, #50	; 0x32
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f000 f864 	bl	8000846 <_ZN9LCDDriver11CheckStatusEh>
 800077e:	4603      	mov	r3, r0
 8000780:	2b01      	cmp	r3, #1
 8000782:	bf0c      	ite	eq
 8000784:	2301      	moveq	r3, #1
 8000786:	2300      	movne	r3, #0
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <_ZN9LCDDriver15WriteData_16bitEht+0x74>
		return false;
 800078e:	2300      	movs	r3, #0
 8000790:	e033      	b.n	80007fa <_ZN9LCDDriver15WriteData_16bitEht+0xdc>
	}
	WriteDataPin((uint8_t)(data>>8));
 8000792:	883b      	ldrh	r3, [r7, #0]
 8000794:	121b      	asrs	r3, r3, #8
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4619      	mov	r1, r3
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f000 f96a 	bl	8000a74 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_DATA;
 80007a0:	2200      	movs	r2, #0
 80007a2:	2104      	movs	r1, #4
 80007a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a8:	f000 ff44 	bl	8001634 <HAL_GPIO_WritePin>
	PushData();
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f000 f828 	bl	8000802 <_ZN9LCDDriver8PushDataEv>

	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
 80007b2:	2132      	movs	r1, #50	; 0x32
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 f846 	bl	8000846 <_ZN9LCDDriver11CheckStatusEh>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b01      	cmp	r3, #1
 80007be:	bf0c      	ite	eq
 80007c0:	2301      	moveq	r3, #1
 80007c2:	2300      	movne	r3, #0
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <_ZN9LCDDriver15WriteData_16bitEht+0xb0>
		return false;
 80007ca:	2300      	movs	r3, #0
 80007cc:	e015      	b.n	80007fa <_ZN9LCDDriver15WriteData_16bitEht+0xdc>
	}
	WriteDataPin(addr);
 80007ce:	78fb      	ldrb	r3, [r7, #3]
 80007d0:	4619      	mov	r1, r3
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f000 f94e 	bl	8000a74 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_COMMAND;
 80007d8:	2201      	movs	r2, #1
 80007da:	2104      	movs	r1, #4
 80007dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e0:	f000 ff28 	bl	8001634 <HAL_GPIO_WritePin>
	PushData();
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f000 f80c 	bl	8000802 <_ZN9LCDDriver8PushDataEv>

	LCD_OUTPUT_DISABLE;
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f4:	f000 ff1e 	bl	8001634 <HAL_GPIO_WritePin>
	return true;
 80007f8:	2301      	movs	r3, #1
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <_ZN9LCDDriver8PushDataEv>:

void LCDDriver::PushData(){
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
	//toggle WR and Enable PIN so that the LCD reads the data
	LCD_WR_RESET;
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000814:	f000 ff0e 	bl	8001634 <HAL_GPIO_WritePin>
	LCD_ENABLE;
 8000818:	2200      	movs	r2, #0
 800081a:	2110      	movs	r1, #16
 800081c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000820:	f000 ff08 	bl	8001634 <HAL_GPIO_WritePin>
	LCD_DISABLE;
 8000824:	2201      	movs	r2, #1
 8000826:	2110      	movs	r1, #16
 8000828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082c:	f000 ff02 	bl	8001634 <HAL_GPIO_WritePin>
	LCD_WR_SET;
 8000830:	2201      	movs	r2, #1
 8000832:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083a:	f000 fefb 	bl	8001634 <HAL_GPIO_WritePin>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <_ZN9LCDDriver11CheckStatusEh>:
 * Checking LCD Status register
 *
 * @param timeOut: timeout for statuscheck
 * @return LCD_STATUS: lcdStatus Error / OK
 */
LCDDriver::LCD_STATUS LCDDriver::CheckStatus(uint8_t timeOut){
 8000846:	b580      	push	{r7, lr}
 8000848:	b082      	sub	sp, #8
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
 800084e:	460b      	mov	r3, r1
 8000850:	70fb      	strb	r3, [r7, #3]
	GPIO_Direction(PIN_INPUT);
 8000852:	2101      	movs	r1, #1
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f000 f8ad 	bl	80009b4 <_ZN9LCDDriver14GPIO_DirectionENS_14PIN_DIRECTION_E>

	LCD_ENABLE;
 800085a:	2200      	movs	r2, #0
 800085c:	2110      	movs	r1, #16
 800085e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000862:	f000 fee7 	bl	8001634 <HAL_GPIO_WritePin>
	LCD_RD_RESET;
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 7100 	mov.w	r1, #512	; 0x200
 800086c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000870:	f000 fee0 	bl	8001634 <HAL_GPIO_WritePin>
	LCD_CD_SET;
 8000874:	2201      	movs	r2, #1
 8000876:	2104      	movs	r1, #4
 8000878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087c:	f000 feda 	bl	8001634 <HAL_GPIO_WritePin>

	while(!(ReadDataPin() | 0x02) && timeOut != 0){
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f000 f825 	bl	80008d0 <_ZN9LCDDriver11ReadDataPinEv>
 8000886:	2300      	movs	r3, #0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d006      	beq.n	800089a <_ZN9LCDDriver11CheckStatusEh+0x54>
		HAL_Delay(1);
 800088c:	2001      	movs	r0, #1
 800088e:	f000 fc3f 	bl	8001110 <HAL_Delay>
		timeOut--;
 8000892:	78fb      	ldrb	r3, [r7, #3]
 8000894:	3b01      	subs	r3, #1
 8000896:	70fb      	strb	r3, [r7, #3]
	while(!(ReadDataPin() | 0x02) && timeOut != 0){
 8000898:	e7f2      	b.n	8000880 <_ZN9LCDDriver11CheckStatusEh+0x3a>
	}

	LCD_DISABLE;
 800089a:	2201      	movs	r2, #1
 800089c:	2110      	movs	r1, #16
 800089e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a2:	f000 fec7 	bl	8001634 <HAL_GPIO_WritePin>
	LCD_RD_SET;
 80008a6:	2201      	movs	r2, #1
 80008a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b0:	f000 fec0 	bl	8001634 <HAL_GPIO_WritePin>
	GPIO_Direction(PIN_OUTPUT);
 80008b4:	2100      	movs	r1, #0
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f000 f87c 	bl	80009b4 <_ZN9LCDDriver14GPIO_DirectionENS_14PIN_DIRECTION_E>

	return timeOut != 0 ? LCD_STATUS_OK:LCD_STATUS_ERROR;
 80008bc:	78fb      	ldrb	r3, [r7, #3]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <_ZN9LCDDriver11CheckStatusEh+0x80>
 80008c2:	2300      	movs	r3, #0
 80008c4:	e000      	b.n	80008c8 <_ZN9LCDDriver11CheckStatusEh+0x82>
 80008c6:	2301      	movs	r3, #1
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <_ZN9LCDDriver11ReadDataPinEv>:
 * Read dataport 0-7
 *
 * @param none
 * @return 8bit data from port 0-7 (msb first)
 */
uint8_t LCDDriver::ReadDataPin(){
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	73fb      	strb	r3, [r7, #15]

	data |= HAL_GPIO_ReadPin(D7_GPIO_Port, D7_Pin);
 80008dc:	2101      	movs	r1, #1
 80008de:	4833      	ldr	r0, [pc, #204]	; (80009ac <_ZN9LCDDriver11ReadDataPinEv+0xdc>)
 80008e0:	f000 fe90 	bl	8001604 <HAL_GPIO_ReadPin>
 80008e4:	4603      	mov	r3, r0
 80008e6:	b25a      	sxtb	r2, r3
 80008e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	73fb      	strb	r3, [r7, #15]
	data = (data<<1) | HAL_GPIO_ReadPin(D6_GPIO_Port, D6_Pin);
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	b25c      	sxtb	r4, r3
 80008f8:	2102      	movs	r1, #2
 80008fa:	482c      	ldr	r0, [pc, #176]	; (80009ac <_ZN9LCDDriver11ReadDataPinEv+0xdc>)
 80008fc:	f000 fe82 	bl	8001604 <HAL_GPIO_ReadPin>
 8000900:	4603      	mov	r3, r0
 8000902:	b25b      	sxtb	r3, r3
 8000904:	4323      	orrs	r3, r4
 8000906:	b25b      	sxtb	r3, r3
 8000908:	73fb      	strb	r3, [r7, #15]
	data = (data<<1) | HAL_GPIO_ReadPin(D5_GPIO_Port, D5_Pin);
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	b25c      	sxtb	r4, r3
 8000910:	2101      	movs	r1, #1
 8000912:	4827      	ldr	r0, [pc, #156]	; (80009b0 <_ZN9LCDDriver11ReadDataPinEv+0xe0>)
 8000914:	f000 fe76 	bl	8001604 <HAL_GPIO_ReadPin>
 8000918:	4603      	mov	r3, r0
 800091a:	b25b      	sxtb	r3, r3
 800091c:	4323      	orrs	r3, r4
 800091e:	b25b      	sxtb	r3, r3
 8000920:	73fb      	strb	r3, [r7, #15]
	data = (data<<1) | HAL_GPIO_ReadPin(D4_GPIO_Port, D4_Pin);
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	b25c      	sxtb	r4, r3
 8000928:	2102      	movs	r1, #2
 800092a:	4821      	ldr	r0, [pc, #132]	; (80009b0 <_ZN9LCDDriver11ReadDataPinEv+0xe0>)
 800092c:	f000 fe6a 	bl	8001604 <HAL_GPIO_ReadPin>
 8000930:	4603      	mov	r3, r0
 8000932:	b25b      	sxtb	r3, r3
 8000934:	4323      	orrs	r3, r4
 8000936:	b25b      	sxtb	r3, r3
 8000938:	73fb      	strb	r3, [r7, #15]
	data = (data<<1) | HAL_GPIO_ReadPin(D3_GPIO_Port, D3_Pin);
 800093a:	7bfb      	ldrb	r3, [r7, #15]
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	b25c      	sxtb	r4, r3
 8000940:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000948:	f000 fe5c 	bl	8001604 <HAL_GPIO_ReadPin>
 800094c:	4603      	mov	r3, r0
 800094e:	b25b      	sxtb	r3, r3
 8000950:	4323      	orrs	r3, r4
 8000952:	b25b      	sxtb	r3, r3
 8000954:	73fb      	strb	r3, [r7, #15]
	data = (data<<1) | HAL_GPIO_ReadPin(D2_GPIO_Port, D2_Pin);
 8000956:	7bfb      	ldrb	r3, [r7, #15]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	b25c      	sxtb	r4, r3
 800095c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000964:	f000 fe4e 	bl	8001604 <HAL_GPIO_ReadPin>
 8000968:	4603      	mov	r3, r0
 800096a:	b25b      	sxtb	r3, r3
 800096c:	4323      	orrs	r3, r4
 800096e:	b25b      	sxtb	r3, r3
 8000970:	73fb      	strb	r3, [r7, #15]
	data = (data<<1) | HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin);
 8000972:	7bfb      	ldrb	r3, [r7, #15]
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	b25c      	sxtb	r4, r3
 8000978:	2120      	movs	r1, #32
 800097a:	480c      	ldr	r0, [pc, #48]	; (80009ac <_ZN9LCDDriver11ReadDataPinEv+0xdc>)
 800097c:	f000 fe42 	bl	8001604 <HAL_GPIO_ReadPin>
 8000980:	4603      	mov	r3, r0
 8000982:	b25b      	sxtb	r3, r3
 8000984:	4323      	orrs	r3, r4
 8000986:	b25b      	sxtb	r3, r3
 8000988:	73fb      	strb	r3, [r7, #15]
	data = (data<<1) | HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin);
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	b25c      	sxtb	r4, r3
 8000990:	2110      	movs	r1, #16
 8000992:	4806      	ldr	r0, [pc, #24]	; (80009ac <_ZN9LCDDriver11ReadDataPinEv+0xdc>)
 8000994:	f000 fe36 	bl	8001604 <HAL_GPIO_ReadPin>
 8000998:	4603      	mov	r3, r0
 800099a:	b25b      	sxtb	r3, r3
 800099c:	4323      	orrs	r3, r4
 800099e:	b25b      	sxtb	r3, r3
 80009a0:	73fb      	strb	r3, [r7, #15]

	return data;
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd90      	pop	{r4, r7, pc}
 80009ac:	48000400 	.word	0x48000400
 80009b0:	48001400 	.word	0x48001400

080009b4 <_ZN9LCDDriver14GPIO_DirectionENS_14PIN_DIRECTION_E>:


void LCDDriver::GPIO_Direction(PIN_DIRECTION pinDirection){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b092      	sub	sp, #72	; 0x48
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	460b      	mov	r3, r1
 80009be:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct_1 = {0};
 80009c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
	GPIO_InitTypeDef GPIO_InitStruct_2 = {0};
 80009d0:	f107 0320 	add.w	r3, r7, #32
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
	GPIO_InitTypeDef GPIO_InitStruct_3 = {0};
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct_1.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct_1.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	643b      	str	r3, [r7, #64]	; 0x40
	GPIO_InitStruct_2.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct_2.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct_3.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct_3.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61bb      	str	r3, [r7, #24]

	GPIO_InitStruct_1.Pin = D5_Pin|D4_Pin;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct_2.Pin = D7_Pin|D6_Pin|D0_Pin|D1_Pin;
 8000a0c:	2333      	movs	r3, #51	; 0x33
 8000a0e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct_3.Pin = D2_Pin|D3_Pin;
 8000a10:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000a14:	60fb      	str	r3, [r7, #12]


	if(pinDirection == PIN_INPUT){
 8000a16:	78fb      	ldrb	r3, [r7, #3]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d106      	bne.n	8000a2a <_ZN9LCDDriver14GPIO_DirectionENS_14PIN_DIRECTION_E+0x76>
		GPIO_InitStruct_1.Mode = GPIO_MODE_INPUT;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct_2.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct_3.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	e008      	b.n	8000a3c <_ZN9LCDDriver14GPIO_DirectionENS_14PIN_DIRECTION_E+0x88>
	}
	else if(pinDirection == PIN_OUTPUT){
 8000a2a:	78fb      	ldrb	r3, [r7, #3]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d105      	bne.n	8000a3c <_ZN9LCDDriver14GPIO_DirectionENS_14PIN_DIRECTION_E+0x88>
		GPIO_InitStruct_1.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct_2.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct_3.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	613b      	str	r3, [r7, #16]
	}

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct_1);
 8000a3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a40:	4619      	mov	r1, r3
 8000a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a46:	f000 fc6b 	bl	8001320 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct_2);
 8000a4a:	f107 0320 	add.w	r3, r7, #32
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4806      	ldr	r0, [pc, #24]	; (8000a6c <_ZN9LCDDriver14GPIO_DirectionENS_14PIN_DIRECTION_E+0xb8>)
 8000a52:	f000 fc65 	bl	8001320 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct_3);
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <_ZN9LCDDriver14GPIO_DirectionENS_14PIN_DIRECTION_E+0xbc>)
 8000a5e:	f000 fc5f 	bl	8001320 <HAL_GPIO_Init>
}
 8000a62:	bf00      	nop
 8000a64:	3748      	adds	r7, #72	; 0x48
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	48000400 	.word	0x48000400
 8000a70:	48001400 	.word	0x48001400

08000a74 <_ZN9LCDDriver12WriteDataPinEh>:


void LCDDriver::WriteDataPin(uint8_t data){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, (GPIO_PinState)(data & 0x01));
 8000a80:	78fb      	ldrb	r3, [r7, #3]
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	461a      	mov	r2, r3
 8000a8a:	2110      	movs	r1, #16
 8000a8c:	4824      	ldr	r0, [pc, #144]	; (8000b20 <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000a8e:	f000 fdd1 	bl	8001634 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, (GPIO_PinState)(data & 0x02));
 8000a92:	78fb      	ldrb	r3, [r7, #3]
 8000a94:	f003 0302 	and.w	r3, r3, #2
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	2120      	movs	r1, #32
 8000a9e:	4820      	ldr	r0, [pc, #128]	; (8000b20 <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000aa0:	f000 fdc8 	bl	8001634 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, (GPIO_PinState)(data & 0x04));
 8000aa4:	78fb      	ldrb	r3, [r7, #3]
 8000aa6:	f003 0304 	and.w	r3, r3, #4
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	461a      	mov	r2, r3
 8000aae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab6:	f000 fdbd 	bl	8001634 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, (GPIO_PinState)(data & 0x08));
 8000aba:	78fb      	ldrb	r3, [r7, #3]
 8000abc:	f003 0308 	and.w	r3, r3, #8
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000acc:	f000 fdb2 	bl	8001634 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (GPIO_PinState)(data & 0x10));
 8000ad0:	78fb      	ldrb	r3, [r7, #3]
 8000ad2:	f003 0310 	and.w	r3, r3, #16
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	461a      	mov	r2, r3
 8000ada:	2102      	movs	r1, #2
 8000adc:	4811      	ldr	r0, [pc, #68]	; (8000b24 <_ZN9LCDDriver12WriteDataPinEh+0xb0>)
 8000ade:	f000 fda9 	bl	8001634 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (GPIO_PinState)(data & 0x20));
 8000ae2:	78fb      	ldrb	r3, [r7, #3]
 8000ae4:	f003 0320 	and.w	r3, r3, #32
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	461a      	mov	r2, r3
 8000aec:	2101      	movs	r1, #1
 8000aee:	480d      	ldr	r0, [pc, #52]	; (8000b24 <_ZN9LCDDriver12WriteDataPinEh+0xb0>)
 8000af0:	f000 fda0 	bl	8001634 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (GPIO_PinState)(data & 0x40));
 8000af4:	78fb      	ldrb	r3, [r7, #3]
 8000af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	461a      	mov	r2, r3
 8000afe:	2102      	movs	r1, #2
 8000b00:	4807      	ldr	r0, [pc, #28]	; (8000b20 <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000b02:	f000 fd97 	bl	8001634 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (GPIO_PinState)(data & 0x80));
 8000b06:	78fb      	ldrb	r3, [r7, #3]
 8000b08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	461a      	mov	r2, r3
 8000b10:	2101      	movs	r1, #1
 8000b12:	4803      	ldr	r0, [pc, #12]	; (8000b20 <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000b14:	f000 fd8e 	bl	8001634 <HAL_GPIO_WritePin>

}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	48000400 	.word	0x48000400
 8000b24:	48001400 	.word	0x48001400

08000b28 <_ZN9LCDDriver5ResetEv>:
 * Reset LCD
 *
 * @param none
 * @return none
 */
void LCDDriver::Reset(){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	LCD_RST_L;
 8000b30:	2200      	movs	r2, #0
 8000b32:	2108      	movs	r1, #8
 8000b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b38:	f000 fd7c 	bl	8001634 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f000 fae7 	bl	8001110 <HAL_Delay>
	LCD_RST_H;
 8000b42:	2201      	movs	r2, #1
 8000b44:	2108      	movs	r1, #8
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4a:	f000 fd73 	bl	8001634 <HAL_GPIO_WritePin>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5e:	f107 030c 	add.w	r3, r7, #12
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b6e:	4b32      	ldr	r3, [pc, #200]	; (8000c38 <MX_GPIO_Init+0xe0>)
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	4a31      	ldr	r2, [pc, #196]	; (8000c38 <MX_GPIO_Init+0xe0>)
 8000b74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b78:	6153      	str	r3, [r2, #20]
 8000b7a:	4b2f      	ldr	r3, [pc, #188]	; (8000c38 <MX_GPIO_Init+0xe0>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	4b2c      	ldr	r3, [pc, #176]	; (8000c38 <MX_GPIO_Init+0xe0>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	4a2b      	ldr	r2, [pc, #172]	; (8000c38 <MX_GPIO_Init+0xe0>)
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b90:	6153      	str	r3, [r2, #20]
 8000b92:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <MX_GPIO_Init+0xe0>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	4b26      	ldr	r3, [pc, #152]	; (8000c38 <MX_GPIO_Init+0xe0>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	4a25      	ldr	r2, [pc, #148]	; (8000c38 <MX_GPIO_Init+0xe0>)
 8000ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ba8:	6153      	str	r3, [r2, #20]
 8000baa:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <MX_GPIO_Init+0xe0>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2103      	movs	r1, #3
 8000bba:	4820      	ldr	r0, [pc, #128]	; (8000c3c <MX_GPIO_Init+0xe4>)
 8000bbc:	f000 fd3a 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FS_Pin|MD2_Pin|CD_Pin|RESET_Pin 
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f641 711f 	movw	r1, #7967	; 0x1f1f
 8000bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bca:	f000 fd33 	bl	8001634 <HAL_GPIO_WritePin>
                          |CE_Pin|D3_Pin|RD_Pin|WR_Pin 
                          |D2_Pin|OE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D6_Pin|D0_Pin|D1_Pin, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2133      	movs	r1, #51	; 0x33
 8000bd2:	481b      	ldr	r0, [pc, #108]	; (8000c40 <MX_GPIO_Init+0xe8>)
 8000bd4:	f000 fd2e 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = D5_Pin|D4_Pin;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000be8:	f107 030c 	add.w	r3, r7, #12
 8000bec:	4619      	mov	r1, r3
 8000bee:	4813      	ldr	r0, [pc, #76]	; (8000c3c <MX_GPIO_Init+0xe4>)
 8000bf0:	f000 fb96 	bl	8001320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = FS_Pin|MD2_Pin|CD_Pin|RESET_Pin 
 8000bf4:	f641 731f 	movw	r3, #7967	; 0x1f1f
 8000bf8:	60fb      	str	r3, [r7, #12]
                          |CE_Pin|D3_Pin|RD_Pin|WR_Pin 
                          |D2_Pin|OE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c10:	f000 fb86 	bl	8001320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D0_Pin|D1_Pin;
 8000c14:	2333      	movs	r3, #51	; 0x33
 8000c16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_GPIO_Init+0xe8>)
 8000c2c:	f000 fb78 	bl	8001320 <HAL_GPIO_Init>

}
 8000c30:	bf00      	nop
 8000c32:	3720      	adds	r7, #32
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	48001400 	.word	0x48001400
 8000c40:	48000400 	.word	0x48000400

08000c44 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <MX_I2C1_Init+0x74>)
 8000c4a:	4a1c      	ldr	r2, [pc, #112]	; (8000cbc <MX_I2C1_Init+0x78>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <MX_I2C1_Init+0x74>)
 8000c50:	4a1b      	ldr	r2, [pc, #108]	; (8000cc0 <MX_I2C1_Init+0x7c>)
 8000c52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c54:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <MX_I2C1_Init+0x74>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c5a:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <MX_I2C1_Init+0x74>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c60:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <MX_I2C1_Init+0x74>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <MX_I2C1_Init+0x74>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <MX_I2C1_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_I2C1_Init+0x74>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <MX_I2C1_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c7e:	480e      	ldr	r0, [pc, #56]	; (8000cb8 <MX_I2C1_Init+0x74>)
 8000c80:	f000 fcf0 	bl	8001664 <HAL_I2C_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c8a:	f000 f8d6 	bl	8000e3a <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <MX_I2C1_Init+0x74>)
 8000c92:	f000 fd76 	bl	8001782 <HAL_I2CEx_ConfigAnalogFilter>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c9c:	f000 f8cd 	bl	8000e3a <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_I2C1_Init+0x74>)
 8000ca4:	f000 fdb8 	bl	8001818 <HAL_I2CEx_ConfigDigitalFilter>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cae:	f000 f8c4 	bl	8000e3a <Error_Handler>
  }

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200000a0 	.word	0x200000a0
 8000cbc:	40005400 	.word	0x40005400
 8000cc0:	00201d2b 	.word	0x00201d2b

08000cc4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <HAL_I2C_MspInit+0x7c>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d127      	bne.n	8000d36 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <HAL_I2C_MspInit+0x80>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	4a16      	ldr	r2, [pc, #88]	; (8000d44 <HAL_I2C_MspInit+0x80>)
 8000cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf0:	6153      	str	r3, [r2, #20]
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <HAL_I2C_MspInit+0x80>)
 8000cf4:	695b      	ldr	r3, [r3, #20]
 8000cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cfe:	23c0      	movs	r3, #192	; 0xc0
 8000d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d02:	2312      	movs	r3, #18
 8000d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d0e:	2304      	movs	r3, #4
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	480b      	ldr	r0, [pc, #44]	; (8000d48 <HAL_I2C_MspInit+0x84>)
 8000d1a:	f000 fb01 	bl	8001320 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <HAL_I2C_MspInit+0x80>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <HAL_I2C_MspInit+0x80>)
 8000d24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d28:	61d3      	str	r3, [r2, #28]
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_I2C_MspInit+0x80>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d36:	bf00      	nop
 8000d38:	3728      	adds	r7, #40	; 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40005400 	.word	0x40005400
 8000d44:	40021000 	.word	0x40021000
 8000d48:	48000400 	.word	0x48000400

08000d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000d50:	f000 f978 	bl	8001044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d54:	f000 f80a 	bl	8000d6c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d58:	f7ff fefe 	bl	8000b58 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d5c:	f7ff ff72 	bl	8000c44 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
 // HAL_I2C_MspInit(&hi2c1);
  appMain.main();
 8000d60:	4801      	ldr	r0, [pc, #4]	; (8000d68 <main+0x1c>)
 8000d62:	f7ff fa47 	bl	80001f4 <_ZN7AppMain4mainEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <main+0x1a>
 8000d68:	2000008c 	.word	0x2000008c

08000d6c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b096      	sub	sp, #88	; 0x58
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d76:	2228      	movs	r2, #40	; 0x28
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f002 f895 	bl	8002eaa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]
 8000d9e:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000da0:	2302      	movs	r3, #2
 8000da2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da4:	2301      	movs	r3, #1
 8000da6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da8:	2310      	movs	r3, #16
 8000daa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dac:	2302      	movs	r3, #2
 8000dae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000db0:	2300      	movs	r3, #0
 8000db2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000db4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000db8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 fd76 	bl	80018b0 <HAL_RCC_OscConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	bf14      	ite	ne
 8000dca:	2301      	movne	r3, #1
 8000dcc:	2300      	moveq	r3, #0
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <_Z18SystemClock_Configv+0x6c>
  {
    Error_Handler();
 8000dd4:	f000 f831 	bl	8000e3a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd8:	230f      	movs	r3, #15
 8000dda:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	2102      	movs	r1, #2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f001 fc63 	bl	80026c0 <HAL_RCC_ClockConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	bf14      	ite	ne
 8000e00:	2301      	movne	r3, #1
 8000e02:	2300      	moveq	r3, #0
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000e0a:	f000 f816 	bl	8000e3a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e0e:	2320      	movs	r3, #32
 8000e10:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f001 fe37 	bl	8002a8c <HAL_RCCEx_PeriphCLKConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	bf14      	ite	ne
 8000e24:	2301      	movne	r3, #1
 8000e26:	2300      	moveq	r3, #0
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 8000e2e:	f000 f804 	bl	8000e3a <Error_Handler>
  }
}
 8000e32:	bf00      	nop
 8000e34:	3758      	adds	r7, #88	; 0x58
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <_Z41__static_initialization_and_destruction_0ii>:
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d107      	bne.n	8000e68 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d102      	bne.n	8000e68 <_Z41__static_initialization_and_destruction_0ii+0x20>
static AppMain appMain;
 8000e62:	4803      	ldr	r0, [pc, #12]	; (8000e70 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000e64:	f7ff f9b8 	bl	80001d8 <_ZN7AppMainC1Ev>
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	2000008c 	.word	0x2000008c

08000e74 <_GLOBAL__sub_I_main>:
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f7ff ffe3 	bl	8000e48 <_Z41__static_initialization_and_destruction_0ii>
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <HAL_MspInit+0x44>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <HAL_MspInit+0x44>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6193      	str	r3, [r2, #24]
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <HAL_MspInit+0x44>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <HAL_MspInit+0x44>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	4a08      	ldr	r2, [pc, #32]	; (8000ec8 <HAL_MspInit+0x44>)
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eac:	61d3      	str	r3, [r2, #28]
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_MspInit+0x44>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40021000 	.word	0x40021000

08000ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <HardFault_Handler+0x4>

08000ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <MemManage_Handler+0x4>

08000ee6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <BusFault_Handler+0x4>

08000eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <UsageFault_Handler+0x4>

08000ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f20:	f000 f8d6 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
	return 1;
 8000f2c:	2301      	movs	r3, #1
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <_kill>:

int _kill(int pid, int sig)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f42:	f001 ff6d 	bl	8002e20 <__errno>
 8000f46:	4602      	mov	r2, r0
 8000f48:	2316      	movs	r3, #22
 8000f4a:	6013      	str	r3, [r2, #0]
	return -1;
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <_exit>:

void _exit (int status)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f60:	f04f 31ff 	mov.w	r1, #4294967295
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ffe7 	bl	8000f38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f6a:	e7fe      	b.n	8000f6a <_exit+0x12>

08000f6c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <_sbrk+0x50>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <_sbrk+0x16>
		heap_end = &end;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <_sbrk+0x50>)
 8000f7e:	4a10      	ldr	r2, [pc, #64]	; (8000fc0 <_sbrk+0x54>)
 8000f80:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <_sbrk+0x50>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <_sbrk+0x50>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4413      	add	r3, r2
 8000f90:	466a      	mov	r2, sp
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d907      	bls.n	8000fa6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f96:	f001 ff43 	bl	8002e20 <__errno>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	230c      	movs	r3, #12
 8000f9e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa4:	e006      	b.n	8000fb4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000fa6:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <_sbrk+0x50>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	4a03      	ldr	r2, [pc, #12]	; (8000fbc <_sbrk+0x50>)
 8000fb0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000090 	.word	0x20000090
 8000fc0:	200000f8 	.word	0x200000f8

08000fc4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <SystemInit+0x28>)
 8000fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fce:	4a07      	ldr	r2, [pc, #28]	; (8000fec <SystemInit+0x28>)
 8000fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <SystemInit+0x28>)
 8000fda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fde:	609a      	str	r2, [r3, #8]
#endif
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001028 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ff4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ff6:	e003      	b.n	8001000 <LoopCopyDataInit>

08000ff8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ffa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ffc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ffe:	3104      	adds	r1, #4

08001000 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001000:	480b      	ldr	r0, [pc, #44]	; (8001030 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001004:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001006:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001008:	d3f6      	bcc.n	8000ff8 <CopyDataInit>
	ldr	r2, =_sbss
 800100a:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <LoopForever+0x12>)
	b	LoopFillZerobss
 800100c:	e002      	b.n	8001014 <LoopFillZerobss>

0800100e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800100e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001010:	f842 3b04 	str.w	r3, [r2], #4

08001014 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <LoopForever+0x16>)
	cmp	r2, r3
 8001016:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001018:	d3f9      	bcc.n	800100e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800101a:	f7ff ffd3 	bl	8000fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800101e:	f001 ff05 	bl	8002e2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001022:	f7ff fe93 	bl	8000d4c <main>

08001026 <LoopForever>:

LoopForever:
    b LoopForever
 8001026:	e7fe      	b.n	8001026 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001028:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800102c:	08003200 	.word	0x08003200
	ldr	r0, =_sdata
 8001030:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001034:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001038:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800103c:	200000f4 	.word	0x200000f4

08001040 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC1_2_IRQHandler>
	...

08001044 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_Init+0x28>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <HAL_Init+0x28>)
 800104e:	f043 0310 	orr.w	r3, r3, #16
 8001052:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001054:	2003      	movs	r0, #3
 8001056:	f000 f92f 	bl	80012b8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800105a:	2000      	movs	r0, #0
 800105c:	f000 f808 	bl	8001070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001060:	f7ff ff10 	bl	8000e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40022000 	.word	0x40022000

08001070 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_InitTick+0x54>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_InitTick+0x58>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	fbb3 f3f1 	udiv	r3, r3, r1
 800108a:	fbb2 f3f3 	udiv	r3, r2, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f939 	bl	8001306 <HAL_SYSTICK_Config>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e00e      	b.n	80010bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	d80a      	bhi.n	80010ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a4:	2200      	movs	r2, #0
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f000 f90f 	bl	80012ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b0:	4a06      	ldr	r2, [pc, #24]	; (80010cc <HAL_InitTick+0x5c>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000008 	.word	0x20000008
 80010cc:	20000004 	.word	0x20000004

080010d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_IncTick+0x20>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_IncTick+0x24>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <HAL_IncTick+0x24>)
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008
 80010f4:	200000ec 	.word	0x200000ec

080010f8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;  
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <HAL_GetTick+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	200000ec 	.word	0x200000ec

08001110 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001118:	f7ff ffee 	bl	80010f8 <HAL_GetTick>
 800111c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001128:	d005      	beq.n	8001136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <HAL_Delay+0x40>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4413      	add	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001136:	bf00      	nop
 8001138:	f7ff ffde 	bl	80010f8 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	429a      	cmp	r2, r3
 8001146:	d8f7      	bhi.n	8001138 <HAL_Delay+0x28>
  {
  }
}
 8001148:	bf00      	nop
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000008 	.word	0x20000008

08001154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001170:	4013      	ands	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800117c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001186:	4a04      	ldr	r2, [pc, #16]	; (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	60d3      	str	r3, [r2, #12]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <__NVIC_GetPriorityGrouping+0x18>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	f003 0307 	and.w	r3, r3, #7
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db0a      	blt.n	80011e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	490c      	ldr	r1, [pc, #48]	; (8001204 <__NVIC_SetPriority+0x4c>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	0112      	lsls	r2, r2, #4
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	440b      	add	r3, r1
 80011dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e0:	e00a      	b.n	80011f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4908      	ldr	r1, [pc, #32]	; (8001208 <__NVIC_SetPriority+0x50>)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	3b04      	subs	r3, #4
 80011f0:	0112      	lsls	r2, r2, #4
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	440b      	add	r3, r1
 80011f6:	761a      	strb	r2, [r3, #24]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000e100 	.word	0xe000e100
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f1c3 0307 	rsb	r3, r3, #7
 8001226:	2b04      	cmp	r3, #4
 8001228:	bf28      	it	cs
 800122a:	2304      	movcs	r3, #4
 800122c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3304      	adds	r3, #4
 8001232:	2b06      	cmp	r3, #6
 8001234:	d902      	bls.n	800123c <NVIC_EncodePriority+0x30>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3b03      	subs	r3, #3
 800123a:	e000      	b.n	800123e <NVIC_EncodePriority+0x32>
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	f04f 32ff 	mov.w	r2, #4294967295
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43d9      	mvns	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	4313      	orrs	r3, r2
         );
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	; 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001284:	d301      	bcc.n	800128a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001286:	2301      	movs	r3, #1
 8001288:	e00f      	b.n	80012aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <SysTick_Config+0x40>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001292:	210f      	movs	r1, #15
 8001294:	f04f 30ff 	mov.w	r0, #4294967295
 8001298:	f7ff ff8e 	bl	80011b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <SysTick_Config+0x40>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <SysTick_Config+0x40>)
 80012a4:	2207      	movs	r2, #7
 80012a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	e000e010 	.word	0xe000e010

080012b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ff47 	bl	8001154 <__NVIC_SetPriorityGrouping>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b086      	sub	sp, #24
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
 80012da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e0:	f7ff ff5c 	bl	800119c <__NVIC_GetPriorityGrouping>
 80012e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	68b9      	ldr	r1, [r7, #8]
 80012ea:	6978      	ldr	r0, [r7, #20]
 80012ec:	f7ff ff8e 	bl	800120c <NVIC_EncodePriority>
 80012f0:	4602      	mov	r2, r0
 80012f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff5d 	bl	80011b8 <__NVIC_SetPriority>
}
 80012fe:	bf00      	nop
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ffb0 	bl	8001274 <SysTick_Config>
 8001314:	4603      	mov	r3, r0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001320:	b480      	push	{r7}
 8001322:	b087      	sub	sp, #28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132e:	e14e      	b.n	80015ce <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	2101      	movs	r1, #1
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	fa01 f303 	lsl.w	r3, r1, r3
 800133c:	4013      	ands	r3, r2
 800133e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 8140 	beq.w	80015c8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b02      	cmp	r3, #2
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x38>
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b12      	cmp	r3, #18
 8001356:	d123      	bne.n	80013a0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	08da      	lsrs	r2, r3, #3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3208      	adds	r2, #8
 8001360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001364:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	220f      	movs	r2, #15
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	691a      	ldr	r2, [r3, #16]
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	08da      	lsrs	r2, r3, #3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3208      	adds	r2, #8
 800139a:	6939      	ldr	r1, [r7, #16]
 800139c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	2203      	movs	r2, #3
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0203 	and.w	r2, r3, #3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d00b      	beq.n	80013f4 <HAL_GPIO_Init+0xd4>
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d007      	beq.n	80013f4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013e8:	2b11      	cmp	r3, #17
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b12      	cmp	r3, #18
 80013f2:	d130      	bne.n	8001456 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	2203      	movs	r2, #3
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800142a:	2201      	movs	r2, #1
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	091b      	lsrs	r3, r3, #4
 8001440:	f003 0201 	and.w	r2, r3, #1
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	2203      	movs	r2, #3
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 809a 	beq.w	80015c8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001494:	4b55      	ldr	r3, [pc, #340]	; (80015ec <HAL_GPIO_Init+0x2cc>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a54      	ldr	r2, [pc, #336]	; (80015ec <HAL_GPIO_Init+0x2cc>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	4b52      	ldr	r3, [pc, #328]	; (80015ec <HAL_GPIO_Init+0x2cc>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014ac:	4a50      	ldr	r2, [pc, #320]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	089b      	lsrs	r3, r3, #2
 80014b2:	3302      	adds	r3, #2
 80014b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	220f      	movs	r2, #15
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014d6:	d013      	beq.n	8001500 <HAL_GPIO_Init+0x1e0>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a46      	ldr	r2, [pc, #280]	; (80015f4 <HAL_GPIO_Init+0x2d4>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d00d      	beq.n	80014fc <HAL_GPIO_Init+0x1dc>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a45      	ldr	r2, [pc, #276]	; (80015f8 <HAL_GPIO_Init+0x2d8>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d007      	beq.n	80014f8 <HAL_GPIO_Init+0x1d8>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a44      	ldr	r2, [pc, #272]	; (80015fc <HAL_GPIO_Init+0x2dc>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d101      	bne.n	80014f4 <HAL_GPIO_Init+0x1d4>
 80014f0:	2303      	movs	r3, #3
 80014f2:	e006      	b.n	8001502 <HAL_GPIO_Init+0x1e2>
 80014f4:	2305      	movs	r3, #5
 80014f6:	e004      	b.n	8001502 <HAL_GPIO_Init+0x1e2>
 80014f8:	2302      	movs	r3, #2
 80014fa:	e002      	b.n	8001502 <HAL_GPIO_Init+0x1e2>
 80014fc:	2301      	movs	r3, #1
 80014fe:	e000      	b.n	8001502 <HAL_GPIO_Init+0x1e2>
 8001500:	2300      	movs	r3, #0
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	f002 0203 	and.w	r2, r2, #3
 8001508:	0092      	lsls	r2, r2, #2
 800150a:	4093      	lsls	r3, r2
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001512:	4937      	ldr	r1, [pc, #220]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	089b      	lsrs	r3, r3, #2
 8001518:	3302      	adds	r3, #2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001520:	4b37      	ldr	r3, [pc, #220]	; (8001600 <HAL_GPIO_Init+0x2e0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	43db      	mvns	r3, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001544:	4a2e      	ldr	r2, [pc, #184]	; (8001600 <HAL_GPIO_Init+0x2e0>)
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800154a:	4b2d      	ldr	r3, [pc, #180]	; (8001600 <HAL_GPIO_Init+0x2e0>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	43db      	mvns	r3, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4313      	orrs	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800156e:	4a24      	ldr	r2, [pc, #144]	; (8001600 <HAL_GPIO_Init+0x2e0>)
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001574:	4b22      	ldr	r3, [pc, #136]	; (8001600 <HAL_GPIO_Init+0x2e0>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	43db      	mvns	r3, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001598:	4a19      	ldr	r2, [pc, #100]	; (8001600 <HAL_GPIO_Init+0x2e0>)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <HAL_GPIO_Init+0x2e0>)
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015c2:	4a0f      	ldr	r2, [pc, #60]	; (8001600 <HAL_GPIO_Init+0x2e0>)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	3301      	adds	r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	fa22 f303 	lsr.w	r3, r2, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f47f aea9 	bne.w	8001330 <HAL_GPIO_Init+0x10>
  }
}
 80015de:	bf00      	nop
 80015e0:	371c      	adds	r7, #28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40010000 	.word	0x40010000
 80015f4:	48000400 	.word	0x48000400
 80015f8:	48000800 	.word	0x48000800
 80015fc:	48000c00 	.word	0x48000c00
 8001600:	40010400 	.word	0x40010400

08001604 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691a      	ldr	r2, [r3, #16]
 8001614:	887b      	ldrh	r3, [r7, #2]
 8001616:	4013      	ands	r3, r2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800161c:	2301      	movs	r3, #1
 800161e:	73fb      	strb	r3, [r7, #15]
 8001620:	e001      	b.n	8001626 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001622:	2300      	movs	r3, #0
 8001624:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001626:	7bfb      	ldrb	r3, [r7, #15]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
 8001640:	4613      	mov	r3, r2
 8001642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001644:	787b      	ldrb	r3, [r7, #1]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800164a:	887a      	ldrh	r2, [r7, #2]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001650:	e002      	b.n	8001658 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001652:	887a      	ldrh	r2, [r7, #2]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e081      	b.n	800177a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d106      	bne.n	8001690 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fb1a 	bl	8000cc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2224      	movs	r2, #36	; 0x24
 8001694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0201 	bic.w	r2, r2, #1
 80016a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d107      	bne.n	80016de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	e006      	b.n	80016ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80016ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d104      	bne.n	80016fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800170c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001710:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001720:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691a      	ldr	r2, [r3, #16]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	ea42 0103 	orr.w	r1, r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	021a      	lsls	r2, r3, #8
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69d9      	ldr	r1, [r3, #28]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a1a      	ldr	r2, [r3, #32]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0201 	orr.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2220      	movs	r2, #32
 8001766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b20      	cmp	r3, #32
 8001796:	d138      	bne.n	800180a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d101      	bne.n	80017a6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80017a2:	2302      	movs	r3, #2
 80017a4:	e032      	b.n	800180c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2224      	movs	r2, #36	; 0x24
 80017b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0201 	bic.w	r2, r2, #1
 80017c4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017d4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6819      	ldr	r1, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f042 0201 	orr.w	r2, r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2220      	movs	r2, #32
 80017fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	e000      	b.n	800180c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800180a:	2302      	movs	r3, #2
  }
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b20      	cmp	r3, #32
 800182c:	d139      	bne.n	80018a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001838:	2302      	movs	r3, #2
 800183a:	e033      	b.n	80018a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2224      	movs	r2, #36	; 0x24
 8001848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0201 	bic.w	r2, r2, #1
 800185a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800186a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4313      	orrs	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f042 0201 	orr.w	r2, r2, #1
 800188c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2220      	movs	r2, #32
 8001892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e000      	b.n	80018a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80018a2:	2302      	movs	r3, #2
  }
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d102      	bne.n	80018ca <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	f000 bef4 	b.w	80026b2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 816a 	beq.w	8001bae <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018da:	4bb3      	ldr	r3, [pc, #716]	; (8001ba8 <HAL_RCC_OscConfig+0x2f8>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	d00c      	beq.n	8001900 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018e6:	4bb0      	ldr	r3, [pc, #704]	; (8001ba8 <HAL_RCC_OscConfig+0x2f8>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d159      	bne.n	80019a6 <HAL_RCC_OscConfig+0xf6>
 80018f2:	4bad      	ldr	r3, [pc, #692]	; (8001ba8 <HAL_RCC_OscConfig+0x2f8>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018fe:	d152      	bne.n	80019a6 <HAL_RCC_OscConfig+0xf6>
 8001900:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001904:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001908:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800190c:	fa93 f3a3 	rbit	r3, r3
 8001910:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001914:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001918:	fab3 f383 	clz	r3, r3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	095b      	lsrs	r3, r3, #5
 8001920:	b2db      	uxtb	r3, r3
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b01      	cmp	r3, #1
 800192a:	d102      	bne.n	8001932 <HAL_RCC_OscConfig+0x82>
 800192c:	4b9e      	ldr	r3, [pc, #632]	; (8001ba8 <HAL_RCC_OscConfig+0x2f8>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	e015      	b.n	800195e <HAL_RCC_OscConfig+0xae>
 8001932:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001936:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800193e:	fa93 f3a3 	rbit	r3, r3
 8001942:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001946:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800194a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800194e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001952:	fa93 f3a3 	rbit	r3, r3
 8001956:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800195a:	4b93      	ldr	r3, [pc, #588]	; (8001ba8 <HAL_RCC_OscConfig+0x2f8>)
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001962:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001966:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800196a:	fa92 f2a2 	rbit	r2, r2
 800196e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001972:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001976:	fab2 f282 	clz	r2, r2
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	f042 0220 	orr.w	r2, r2, #32
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	f002 021f 	and.w	r2, r2, #31
 8001986:	2101      	movs	r1, #1
 8001988:	fa01 f202 	lsl.w	r2, r1, r2
 800198c:	4013      	ands	r3, r2
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 810c 	beq.w	8001bac <HAL_RCC_OscConfig+0x2fc>
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	f040 8106 	bne.w	8001bac <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	f000 be86 	b.w	80026b2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x110>
 80019b2:	4b7d      	ldr	r3, [pc, #500]	; (8001ba8 <HAL_RCC_OscConfig+0x2f8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a7c      	ldr	r2, [pc, #496]	; (8001ba8 <HAL_RCC_OscConfig+0x2f8>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e030      	b.n	8001a22 <HAL_RCC_OscConfig+0x172>
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x134>
 80019ca:	4b77      	ldr	r3, [pc, #476]	; (8001ba8 <HAL_RCC_OscConfig+0x2f8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a76      	ldr	r2, [pc, #472]	; (8001ba8 <HAL_RCC_OscConfig+0x2f8>)
 80019d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b74      	ldr	r3, [pc, #464]	; (8001ba8 <HAL_RCC_OscConfig+0x2f8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a73      	ldr	r2, [pc, #460]	; (8001ba8 <HAL_RCC_OscConfig+0x2f8>)
 80019dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e01e      	b.n	8001a22 <HAL_RCC_OscConfig+0x172>
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ee:	d10c      	bne.n	8001a0a <HAL_RCC_OscConfig+0x15a>
 80019f0:	4b6d      	ldr	r3, [pc, #436]	; (8001ba8 <HAL_RCC_OscConfig+0x2f8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a6c      	ldr	r2, [pc, #432]	; (8001ba8 <HAL_RCC_OscConfig+0x2f8>)
 80019f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	4b6a      	ldr	r3, [pc, #424]	; (8001ba8 <HAL_RCC_OscConfig+0x2f8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a69      	ldr	r2, [pc, #420]	; (8001ba8 <HAL_RCC_OscConfig+0x2f8>)
 8001a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	e00b      	b.n	8001a22 <HAL_RCC_OscConfig+0x172>
 8001a0a:	4b67      	ldr	r3, [pc, #412]	; (8001ba8 <HAL_RCC_OscConfig+0x2f8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a66      	ldr	r2, [pc, #408]	; (8001ba8 <HAL_RCC_OscConfig+0x2f8>)
 8001a10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	4b64      	ldr	r3, [pc, #400]	; (8001ba8 <HAL_RCC_OscConfig+0x2f8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a63      	ldr	r2, [pc, #396]	; (8001ba8 <HAL_RCC_OscConfig+0x2f8>)
 8001a1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a20:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a22:	4b61      	ldr	r3, [pc, #388]	; (8001ba8 <HAL_RCC_OscConfig+0x2f8>)
 8001a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a26:	f023 020f 	bic.w	r2, r3, #15
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	495d      	ldr	r1, [pc, #372]	; (8001ba8 <HAL_RCC_OscConfig+0x2f8>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d059      	beq.n	8001af4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a40:	f7ff fb5a 	bl	80010f8 <HAL_GetTick>
 8001a44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a48:	e00a      	b.n	8001a60 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a4a:	f7ff fb55 	bl	80010f8 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b64      	cmp	r3, #100	; 0x64
 8001a58:	d902      	bls.n	8001a60 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	f000 be29 	b.w	80026b2 <HAL_RCC_OscConfig+0xe02>
 8001a60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a64:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a68:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001a6c:	fa93 f3a3 	rbit	r3, r3
 8001a70:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001a74:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a78:	fab3 f383 	clz	r3, r3
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	095b      	lsrs	r3, r3, #5
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d102      	bne.n	8001a92 <HAL_RCC_OscConfig+0x1e2>
 8001a8c:	4b46      	ldr	r3, [pc, #280]	; (8001ba8 <HAL_RCC_OscConfig+0x2f8>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	e015      	b.n	8001abe <HAL_RCC_OscConfig+0x20e>
 8001a92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a96:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001a9e:	fa93 f3a3 	rbit	r3, r3
 8001aa2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001aa6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aaa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001aae:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001ab2:	fa93 f3a3 	rbit	r3, r3
 8001ab6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001aba:	4b3b      	ldr	r3, [pc, #236]	; (8001ba8 <HAL_RCC_OscConfig+0x2f8>)
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ac2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001ac6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001aca:	fa92 f2a2 	rbit	r2, r2
 8001ace:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001ad2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001ad6:	fab2 f282 	clz	r2, r2
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	f042 0220 	orr.w	r2, r2, #32
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	f002 021f 	and.w	r2, r2, #31
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8001aec:	4013      	ands	r3, r2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0ab      	beq.n	8001a4a <HAL_RCC_OscConfig+0x19a>
 8001af2:	e05c      	b.n	8001bae <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7ff fb00 	bl	80010f8 <HAL_GetTick>
 8001af8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afc:	e00a      	b.n	8001b14 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001afe:	f7ff fafb 	bl	80010f8 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	; 0x64
 8001b0c:	d902      	bls.n	8001b14 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	f000 bdcf 	b.w	80026b2 <HAL_RCC_OscConfig+0xe02>
 8001b14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b18:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001b20:	fa93 f3a3 	rbit	r3, r3
 8001b24:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001b28:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2c:	fab3 f383 	clz	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d102      	bne.n	8001b46 <HAL_RCC_OscConfig+0x296>
 8001b40:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <HAL_RCC_OscConfig+0x2f8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	e015      	b.n	8001b72 <HAL_RCC_OscConfig+0x2c2>
 8001b46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b4a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001b52:	fa93 f3a3 	rbit	r3, r3
 8001b56:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b5e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b62:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001b66:	fa93 f3a3 	rbit	r3, r3
 8001b6a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_RCC_OscConfig+0x2f8>)
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b76:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001b7a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b7e:	fa92 f2a2 	rbit	r2, r2
 8001b82:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001b86:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001b8a:	fab2 f282 	clz	r2, r2
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	f042 0220 	orr.w	r2, r2, #32
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	f002 021f 	and.w	r2, r2, #31
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1ab      	bne.n	8001afe <HAL_RCC_OscConfig+0x24e>
 8001ba6:	e002      	b.n	8001bae <HAL_RCC_OscConfig+0x2fe>
 8001ba8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 816f 	beq.w	8001e9c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bbe:	4bd0      	ldr	r3, [pc, #832]	; (8001f00 <HAL_RCC_OscConfig+0x650>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00b      	beq.n	8001be2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bca:	4bcd      	ldr	r3, [pc, #820]	; (8001f00 <HAL_RCC_OscConfig+0x650>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d16c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x400>
 8001bd6:	4bca      	ldr	r3, [pc, #808]	; (8001f00 <HAL_RCC_OscConfig+0x650>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d166      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x400>
 8001be2:	2302      	movs	r3, #2
 8001be4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001bec:	fa93 f3a3 	rbit	r3, r3
 8001bf0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001bf4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf8:	fab3 f383 	clz	r3, r3
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d102      	bne.n	8001c12 <HAL_RCC_OscConfig+0x362>
 8001c0c:	4bbc      	ldr	r3, [pc, #752]	; (8001f00 <HAL_RCC_OscConfig+0x650>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	e013      	b.n	8001c3a <HAL_RCC_OscConfig+0x38a>
 8001c12:	2302      	movs	r3, #2
 8001c14:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001c1c:	fa93 f3a3 	rbit	r3, r3
 8001c20:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001c24:	2302      	movs	r3, #2
 8001c26:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c2a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001c2e:	fa93 f3a3 	rbit	r3, r3
 8001c32:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001c36:	4bb2      	ldr	r3, [pc, #712]	; (8001f00 <HAL_RCC_OscConfig+0x650>)
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001c40:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c44:	fa92 f2a2 	rbit	r2, r2
 8001c48:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001c4c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001c50:	fab2 f282 	clz	r2, r2
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	f042 0220 	orr.w	r2, r2, #32
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	f002 021f 	and.w	r2, r2, #31
 8001c60:	2101      	movs	r1, #1
 8001c62:	fa01 f202 	lsl.w	r2, r1, r2
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d007      	beq.n	8001c7c <HAL_RCC_OscConfig+0x3cc>
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d002      	beq.n	8001c7c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	f000 bd1b 	b.w	80026b2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7c:	4ba0      	ldr	r3, [pc, #640]	; (8001f00 <HAL_RCC_OscConfig+0x650>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	21f8      	movs	r1, #248	; 0xf8
 8001c8c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c90:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001c94:	fa91 f1a1 	rbit	r1, r1
 8001c98:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001c9c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001ca0:	fab1 f181 	clz	r1, r1
 8001ca4:	b2c9      	uxtb	r1, r1
 8001ca6:	408b      	lsls	r3, r1
 8001ca8:	4995      	ldr	r1, [pc, #596]	; (8001f00 <HAL_RCC_OscConfig+0x650>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cae:	e0f5      	b.n	8001e9c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8085 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x516>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001cce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd2:	fab3 f383 	clz	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cdc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fa06 	bl	80010f8 <HAL_GetTick>
 8001cec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf0:	e00a      	b.n	8001d08 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf2:	f7ff fa01 	bl	80010f8 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d902      	bls.n	8001d08 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	f000 bcd5 	b.w	80026b2 <HAL_RCC_OscConfig+0xe02>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001d1a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	095b      	lsrs	r3, r3, #5
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d102      	bne.n	8001d38 <HAL_RCC_OscConfig+0x488>
 8001d32:	4b73      	ldr	r3, [pc, #460]	; (8001f00 <HAL_RCC_OscConfig+0x650>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	e013      	b.n	8001d60 <HAL_RCC_OscConfig+0x4b0>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d50:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001d54:	fa93 f3a3 	rbit	r3, r3
 8001d58:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001d5c:	4b68      	ldr	r3, [pc, #416]	; (8001f00 <HAL_RCC_OscConfig+0x650>)
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	2202      	movs	r2, #2
 8001d62:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001d66:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001d6a:	fa92 f2a2 	rbit	r2, r2
 8001d6e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001d72:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001d76:	fab2 f282 	clz	r2, r2
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	f042 0220 	orr.w	r2, r2, #32
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	f002 021f 	and.w	r2, r2, #31
 8001d86:	2101      	movs	r1, #1
 8001d88:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0af      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d92:	4b5b      	ldr	r3, [pc, #364]	; (8001f00 <HAL_RCC_OscConfig+0x650>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	21f8      	movs	r1, #248	; 0xf8
 8001da2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001daa:	fa91 f1a1 	rbit	r1, r1
 8001dae:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001db2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001db6:	fab1 f181 	clz	r1, r1
 8001dba:	b2c9      	uxtb	r1, r1
 8001dbc:	408b      	lsls	r3, r1
 8001dbe:	4950      	ldr	r1, [pc, #320]	; (8001f00 <HAL_RCC_OscConfig+0x650>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	600b      	str	r3, [r1, #0]
 8001dc4:	e06a      	b.n	8001e9c <HAL_RCC_OscConfig+0x5ec>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001dd0:	fa93 f3a3 	rbit	r3, r3
 8001dd4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001dd8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ddc:	fab3 f383 	clz	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001de6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	461a      	mov	r2, r3
 8001dee:	2300      	movs	r3, #0
 8001df0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df2:	f7ff f981 	bl	80010f8 <HAL_GetTick>
 8001df6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfa:	e00a      	b.n	8001e12 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dfc:	f7ff f97c 	bl	80010f8 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d902      	bls.n	8001e12 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	f000 bc50 	b.w	80026b2 <HAL_RCC_OscConfig+0xe02>
 8001e12:	2302      	movs	r3, #2
 8001e14:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e28:	fab3 f383 	clz	r3, r3
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d102      	bne.n	8001e42 <HAL_RCC_OscConfig+0x592>
 8001e3c:	4b30      	ldr	r3, [pc, #192]	; (8001f00 <HAL_RCC_OscConfig+0x650>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	e013      	b.n	8001e6a <HAL_RCC_OscConfig+0x5ba>
 8001e42:	2302      	movs	r3, #2
 8001e44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e54:	2302      	movs	r3, #2
 8001e56:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e5a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001e66:	4b26      	ldr	r3, [pc, #152]	; (8001f00 <HAL_RCC_OscConfig+0x650>)
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001e70:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e74:	fa92 f2a2 	rbit	r2, r2
 8001e78:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001e7c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001e80:	fab2 f282 	clz	r2, r2
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	f042 0220 	orr.w	r2, r2, #32
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	f002 021f 	and.w	r2, r2, #31
 8001e90:	2101      	movs	r1, #1
 8001e92:	fa01 f202 	lsl.w	r2, r1, r2
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1af      	bne.n	8001dfc <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 80da 	beq.w	8002060 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d069      	beq.n	8001f8a <HAL_RCC_OscConfig+0x6da>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ecc:	fab3 f383 	clz	r3, r3
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_RCC_OscConfig+0x654>)
 8001ed6:	4413      	add	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	461a      	mov	r2, r3
 8001edc:	2301      	movs	r3, #1
 8001ede:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee0:	f7ff f90a 	bl	80010f8 <HAL_GetTick>
 8001ee4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee8:	e00e      	b.n	8001f08 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eea:	f7ff f905 	bl	80010f8 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d906      	bls.n	8001f08 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e3d9      	b.n	80026b2 <HAL_RCC_OscConfig+0xe02>
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	10908120 	.word	0x10908120
 8001f08:	2302      	movs	r3, #2
 8001f0a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f1a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001f1e:	2202      	movs	r2, #2
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	fa93 f2a3 	rbit	r2, r3
 8001f2c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001f36:	2202      	movs	r2, #2
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	fa93 f2a3 	rbit	r2, r3
 8001f44:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f48:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4a:	4ba5      	ldr	r3, [pc, #660]	; (80021e0 <HAL_RCC_OscConfig+0x930>)
 8001f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f4e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f52:	2102      	movs	r1, #2
 8001f54:	6019      	str	r1, [r3, #0]
 8001f56:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	fa93 f1a3 	rbit	r1, r3
 8001f60:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001f64:	6019      	str	r1, [r3, #0]
  return result;
 8001f66:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	fab3 f383 	clz	r3, r3
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	f003 031f 	and.w	r3, r3, #31
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f82:	4013      	ands	r3, r2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0b0      	beq.n	8001eea <HAL_RCC_OscConfig+0x63a>
 8001f88:	e06a      	b.n	8002060 <HAL_RCC_OscConfig+0x7b0>
 8001f8a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	fa93 f2a3 	rbit	r2, r3
 8001f9c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fa0:	601a      	str	r2, [r3, #0]
  return result;
 8001fa2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fa6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa8:	fab3 f383 	clz	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4b8c      	ldr	r3, [pc, #560]	; (80021e4 <HAL_RCC_OscConfig+0x934>)
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	2300      	movs	r3, #0
 8001fba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fbc:	f7ff f89c 	bl	80010f8 <HAL_GetTick>
 8001fc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc4:	e009      	b.n	8001fda <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc6:	f7ff f897 	bl	80010f8 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e36b      	b.n	80026b2 <HAL_RCC_OscConfig+0xe02>
 8001fda:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001fde:	2202      	movs	r2, #2
 8001fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	fa93 f2a3 	rbit	r2, r3
 8001fec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	fa93 f2a3 	rbit	r2, r3
 8002004:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800200e:	2202      	movs	r2, #2
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	fa93 f2a3 	rbit	r2, r3
 800201c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002020:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002022:	4b6f      	ldr	r3, [pc, #444]	; (80021e0 <HAL_RCC_OscConfig+0x930>)
 8002024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002026:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800202a:	2102      	movs	r1, #2
 800202c:	6019      	str	r1, [r3, #0]
 800202e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	fa93 f1a3 	rbit	r1, r3
 8002038:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800203c:	6019      	str	r1, [r3, #0]
  return result;
 800203e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	fab3 f383 	clz	r3, r3
 8002048:	b2db      	uxtb	r3, r3
 800204a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800204e:	b2db      	uxtb	r3, r3
 8002050:	f003 031f 	and.w	r3, r3, #31
 8002054:	2101      	movs	r1, #1
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	4013      	ands	r3, r2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1b2      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 8158 	beq.w	8002320 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002070:	2300      	movs	r3, #0
 8002072:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002076:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <HAL_RCC_OscConfig+0x930>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d112      	bne.n	80020a8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	4b57      	ldr	r3, [pc, #348]	; (80021e0 <HAL_RCC_OscConfig+0x930>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	4a56      	ldr	r2, [pc, #344]	; (80021e0 <HAL_RCC_OscConfig+0x930>)
 8002088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208c:	61d3      	str	r3, [r2, #28]
 800208e:	4b54      	ldr	r3, [pc, #336]	; (80021e0 <HAL_RCC_OscConfig+0x930>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002096:	f107 0308 	add.w	r3, r7, #8
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	f107 0308 	add.w	r3, r7, #8
 80020a0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80020a2:	2301      	movs	r3, #1
 80020a4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a8:	4b4f      	ldr	r3, [pc, #316]	; (80021e8 <HAL_RCC_OscConfig+0x938>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d11a      	bne.n	80020ea <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020b4:	4b4c      	ldr	r3, [pc, #304]	; (80021e8 <HAL_RCC_OscConfig+0x938>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a4b      	ldr	r2, [pc, #300]	; (80021e8 <HAL_RCC_OscConfig+0x938>)
 80020ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020be:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020c0:	f7ff f81a 	bl	80010f8 <HAL_GetTick>
 80020c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c8:	e009      	b.n	80020de <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ca:	f7ff f815 	bl	80010f8 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b64      	cmp	r3, #100	; 0x64
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e2e9      	b.n	80026b2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020de:	4b42      	ldr	r3, [pc, #264]	; (80021e8 <HAL_RCC_OscConfig+0x938>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0ef      	beq.n	80020ca <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d106      	bne.n	8002102 <HAL_RCC_OscConfig+0x852>
 80020f4:	4b3a      	ldr	r3, [pc, #232]	; (80021e0 <HAL_RCC_OscConfig+0x930>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	4a39      	ldr	r2, [pc, #228]	; (80021e0 <HAL_RCC_OscConfig+0x930>)
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	6213      	str	r3, [r2, #32]
 8002100:	e02f      	b.n	8002162 <HAL_RCC_OscConfig+0x8b2>
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10c      	bne.n	8002126 <HAL_RCC_OscConfig+0x876>
 800210c:	4b34      	ldr	r3, [pc, #208]	; (80021e0 <HAL_RCC_OscConfig+0x930>)
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	4a33      	ldr	r2, [pc, #204]	; (80021e0 <HAL_RCC_OscConfig+0x930>)
 8002112:	f023 0301 	bic.w	r3, r3, #1
 8002116:	6213      	str	r3, [r2, #32]
 8002118:	4b31      	ldr	r3, [pc, #196]	; (80021e0 <HAL_RCC_OscConfig+0x930>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	4a30      	ldr	r2, [pc, #192]	; (80021e0 <HAL_RCC_OscConfig+0x930>)
 800211e:	f023 0304 	bic.w	r3, r3, #4
 8002122:	6213      	str	r3, [r2, #32]
 8002124:	e01d      	b.n	8002162 <HAL_RCC_OscConfig+0x8b2>
 8002126:	1d3b      	adds	r3, r7, #4
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b05      	cmp	r3, #5
 800212e:	d10c      	bne.n	800214a <HAL_RCC_OscConfig+0x89a>
 8002130:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <HAL_RCC_OscConfig+0x930>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	4a2a      	ldr	r2, [pc, #168]	; (80021e0 <HAL_RCC_OscConfig+0x930>)
 8002136:	f043 0304 	orr.w	r3, r3, #4
 800213a:	6213      	str	r3, [r2, #32]
 800213c:	4b28      	ldr	r3, [pc, #160]	; (80021e0 <HAL_RCC_OscConfig+0x930>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4a27      	ldr	r2, [pc, #156]	; (80021e0 <HAL_RCC_OscConfig+0x930>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6213      	str	r3, [r2, #32]
 8002148:	e00b      	b.n	8002162 <HAL_RCC_OscConfig+0x8b2>
 800214a:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <HAL_RCC_OscConfig+0x930>)
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	4a24      	ldr	r2, [pc, #144]	; (80021e0 <HAL_RCC_OscConfig+0x930>)
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	6213      	str	r3, [r2, #32]
 8002156:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <HAL_RCC_OscConfig+0x930>)
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	4a21      	ldr	r2, [pc, #132]	; (80021e0 <HAL_RCC_OscConfig+0x930>)
 800215c:	f023 0304 	bic.w	r3, r3, #4
 8002160:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d06b      	beq.n	8002244 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216c:	f7fe ffc4 	bl	80010f8 <HAL_GetTick>
 8002170:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002174:	e00b      	b.n	800218e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002176:	f7fe ffbf 	bl	80010f8 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	f241 3288 	movw	r2, #5000	; 0x1388
 8002186:	4293      	cmp	r3, r2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e291      	b.n	80026b2 <HAL_RCC_OscConfig+0xe02>
 800218e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002192:	2202      	movs	r2, #2
 8002194:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	fa93 f2a3 	rbit	r2, r3
 80021a0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80021aa:	2202      	movs	r2, #2
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	fa93 f2a3 	rbit	r2, r3
 80021b8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80021bc:	601a      	str	r2, [r3, #0]
  return result;
 80021be:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80021c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c4:	fab3 f383 	clz	r3, r3
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	f043 0302 	orr.w	r3, r3, #2
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d109      	bne.n	80021ec <HAL_RCC_OscConfig+0x93c>
 80021d8:	4b01      	ldr	r3, [pc, #4]	; (80021e0 <HAL_RCC_OscConfig+0x930>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	e014      	b.n	8002208 <HAL_RCC_OscConfig+0x958>
 80021de:	bf00      	nop
 80021e0:	40021000 	.word	0x40021000
 80021e4:	10908120 	.word	0x10908120
 80021e8:	40007000 	.word	0x40007000
 80021ec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80021f0:	2202      	movs	r2, #2
 80021f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	fa93 f2a3 	rbit	r2, r3
 80021fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	4bbb      	ldr	r3, [pc, #748]	; (80024f4 <HAL_RCC_OscConfig+0xc44>)
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800220c:	2102      	movs	r1, #2
 800220e:	6011      	str	r1, [r2, #0]
 8002210:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002214:	6812      	ldr	r2, [r2, #0]
 8002216:	fa92 f1a2 	rbit	r1, r2
 800221a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800221e:	6011      	str	r1, [r2, #0]
  return result;
 8002220:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	fab2 f282 	clz	r2, r2
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	f002 021f 	and.w	r2, r2, #31
 8002236:	2101      	movs	r1, #1
 8002238:	fa01 f202 	lsl.w	r2, r1, r2
 800223c:	4013      	ands	r3, r2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d099      	beq.n	8002176 <HAL_RCC_OscConfig+0x8c6>
 8002242:	e063      	b.n	800230c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002244:	f7fe ff58 	bl	80010f8 <HAL_GetTick>
 8002248:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800224c:	e00b      	b.n	8002266 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800224e:	f7fe ff53 	bl	80010f8 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	f241 3288 	movw	r2, #5000	; 0x1388
 800225e:	4293      	cmp	r3, r2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e225      	b.n	80026b2 <HAL_RCC_OscConfig+0xe02>
 8002266:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800226a:	2202      	movs	r2, #2
 800226c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	fa93 f2a3 	rbit	r2, r3
 8002278:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002282:	2202      	movs	r2, #2
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	fa93 f2a3 	rbit	r2, r3
 8002290:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002294:	601a      	str	r2, [r3, #0]
  return result;
 8002296:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800229a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229c:	fab3 f383 	clz	r3, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	f043 0302 	orr.w	r3, r3, #2
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d102      	bne.n	80022b6 <HAL_RCC_OscConfig+0xa06>
 80022b0:	4b90      	ldr	r3, [pc, #576]	; (80024f4 <HAL_RCC_OscConfig+0xc44>)
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	e00d      	b.n	80022d2 <HAL_RCC_OscConfig+0xa22>
 80022b6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80022ba:	2202      	movs	r2, #2
 80022bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	fa93 f2a3 	rbit	r2, r3
 80022c8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	4b89      	ldr	r3, [pc, #548]	; (80024f4 <HAL_RCC_OscConfig+0xc44>)
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80022d6:	2102      	movs	r1, #2
 80022d8:	6011      	str	r1, [r2, #0]
 80022da:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	fa92 f1a2 	rbit	r1, r2
 80022e4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80022e8:	6011      	str	r1, [r2, #0]
  return result;
 80022ea:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	fab2 f282 	clz	r2, r2
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	f002 021f 	and.w	r2, r2, #31
 8002300:	2101      	movs	r1, #1
 8002302:	fa01 f202 	lsl.w	r2, r1, r2
 8002306:	4013      	ands	r3, r2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1a0      	bne.n	800224e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800230c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002310:	2b01      	cmp	r3, #1
 8002312:	d105      	bne.n	8002320 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002314:	4b77      	ldr	r3, [pc, #476]	; (80024f4 <HAL_RCC_OscConfig+0xc44>)
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	4a76      	ldr	r2, [pc, #472]	; (80024f4 <HAL_RCC_OscConfig+0xc44>)
 800231a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800231e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002320:	1d3b      	adds	r3, r7, #4
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 81c2 	beq.w	80026b0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800232c:	4b71      	ldr	r3, [pc, #452]	; (80024f4 <HAL_RCC_OscConfig+0xc44>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 030c 	and.w	r3, r3, #12
 8002334:	2b08      	cmp	r3, #8
 8002336:	f000 819c 	beq.w	8002672 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	2b02      	cmp	r3, #2
 8002342:	f040 8114 	bne.w	800256e <HAL_RCC_OscConfig+0xcbe>
 8002346:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800234a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800234e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	fa93 f2a3 	rbit	r2, r3
 800235a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800235e:	601a      	str	r2, [r3, #0]
  return result;
 8002360:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002364:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002366:	fab3 f383 	clz	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002370:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	461a      	mov	r2, r3
 8002378:	2300      	movs	r3, #0
 800237a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237c:	f7fe febc 	bl	80010f8 <HAL_GetTick>
 8002380:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002384:	e009      	b.n	800239a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002386:	f7fe feb7 	bl	80010f8 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e18b      	b.n	80026b2 <HAL_RCC_OscConfig+0xe02>
 800239a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800239e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	fa93 f2a3 	rbit	r2, r3
 80023ae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023b2:	601a      	str	r2, [r3, #0]
  return result;
 80023b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	095b      	lsrs	r3, r3, #5
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d102      	bne.n	80023d4 <HAL_RCC_OscConfig+0xb24>
 80023ce:	4b49      	ldr	r3, [pc, #292]	; (80024f4 <HAL_RCC_OscConfig+0xc44>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	e01b      	b.n	800240c <HAL_RCC_OscConfig+0xb5c>
 80023d4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80023d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	fa93 f2a3 	rbit	r2, r3
 80023e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80023f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	fa93 f2a3 	rbit	r2, r3
 8002402:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	4b3a      	ldr	r3, [pc, #232]	; (80024f4 <HAL_RCC_OscConfig+0xc44>)
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002410:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002414:	6011      	str	r1, [r2, #0]
 8002416:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	fa92 f1a2 	rbit	r1, r2
 8002420:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002424:	6011      	str	r1, [r2, #0]
  return result;
 8002426:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	fab2 f282 	clz	r2, r2
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	f042 0220 	orr.w	r2, r2, #32
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	f002 021f 	and.w	r2, r2, #31
 800243c:	2101      	movs	r1, #1
 800243e:	fa01 f202 	lsl.w	r2, r1, r2
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d19e      	bne.n	8002386 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002448:	4b2a      	ldr	r3, [pc, #168]	; (80024f4 <HAL_RCC_OscConfig+0xc44>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002450:	1d3b      	adds	r3, r7, #4
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002456:	1d3b      	adds	r3, r7, #4
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	430b      	orrs	r3, r1
 800245e:	4925      	ldr	r1, [pc, #148]	; (80024f4 <HAL_RCC_OscConfig+0xc44>)
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]
 8002464:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002468:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800246c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	fa93 f2a3 	rbit	r2, r3
 8002478:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800247c:	601a      	str	r2, [r3, #0]
  return result;
 800247e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002482:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002484:	fab3 f383 	clz	r3, r3
 8002488:	b2db      	uxtb	r3, r3
 800248a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800248e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	461a      	mov	r2, r3
 8002496:	2301      	movs	r3, #1
 8002498:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249a:	f7fe fe2d 	bl	80010f8 <HAL_GetTick>
 800249e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a2:	e009      	b.n	80024b8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a4:	f7fe fe28 	bl	80010f8 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e0fc      	b.n	80026b2 <HAL_RCC_OscConfig+0xe02>
 80024b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	fa93 f2a3 	rbit	r2, r3
 80024cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024d0:	601a      	str	r2, [r3, #0]
  return result;
 80024d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024d8:	fab3 f383 	clz	r3, r3
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d105      	bne.n	80024f8 <HAL_RCC_OscConfig+0xc48>
 80024ec:	4b01      	ldr	r3, [pc, #4]	; (80024f4 <HAL_RCC_OscConfig+0xc44>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	e01e      	b.n	8002530 <HAL_RCC_OscConfig+0xc80>
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000
 80024f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002500:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	fa93 f2a3 	rbit	r2, r3
 800250c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002516:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	fa93 f2a3 	rbit	r2, r3
 8002526:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	4b63      	ldr	r3, [pc, #396]	; (80026bc <HAL_RCC_OscConfig+0xe0c>)
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002534:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002538:	6011      	str	r1, [r2, #0]
 800253a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	fa92 f1a2 	rbit	r1, r2
 8002544:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002548:	6011      	str	r1, [r2, #0]
  return result;
 800254a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	fab2 f282 	clz	r2, r2
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	f042 0220 	orr.w	r2, r2, #32
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	f002 021f 	and.w	r2, r2, #31
 8002560:	2101      	movs	r1, #1
 8002562:	fa01 f202 	lsl.w	r2, r1, r2
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d09b      	beq.n	80024a4 <HAL_RCC_OscConfig+0xbf4>
 800256c:	e0a0      	b.n	80026b0 <HAL_RCC_OscConfig+0xe00>
 800256e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002572:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002576:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	fa93 f2a3 	rbit	r2, r3
 8002582:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002586:	601a      	str	r2, [r3, #0]
  return result;
 8002588:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800258c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002598:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	461a      	mov	r2, r3
 80025a0:	2300      	movs	r3, #0
 80025a2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a4:	f7fe fda8 	bl	80010f8 <HAL_GetTick>
 80025a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ac:	e009      	b.n	80025c2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ae:	f7fe fda3 	bl	80010f8 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e077      	b.n	80026b2 <HAL_RCC_OscConfig+0xe02>
 80025c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	fa93 f2a3 	rbit	r2, r3
 80025d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025da:	601a      	str	r2, [r3, #0]
  return result;
 80025dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e2:	fab3 f383 	clz	r3, r3
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d102      	bne.n	80025fc <HAL_RCC_OscConfig+0xd4c>
 80025f6:	4b31      	ldr	r3, [pc, #196]	; (80026bc <HAL_RCC_OscConfig+0xe0c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	e01b      	b.n	8002634 <HAL_RCC_OscConfig+0xd84>
 80025fc:	f107 0320 	add.w	r3, r7, #32
 8002600:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002604:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	f107 0320 	add.w	r3, r7, #32
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	fa93 f2a3 	rbit	r2, r3
 8002610:	f107 031c 	add.w	r3, r7, #28
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	f107 0318 	add.w	r3, r7, #24
 800261a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	f107 0318 	add.w	r3, r7, #24
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	fa93 f2a3 	rbit	r2, r3
 800262a:	f107 0314 	add.w	r3, r7, #20
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	4b22      	ldr	r3, [pc, #136]	; (80026bc <HAL_RCC_OscConfig+0xe0c>)
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	f107 0210 	add.w	r2, r7, #16
 8002638:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800263c:	6011      	str	r1, [r2, #0]
 800263e:	f107 0210 	add.w	r2, r7, #16
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	fa92 f1a2 	rbit	r1, r2
 8002648:	f107 020c 	add.w	r2, r7, #12
 800264c:	6011      	str	r1, [r2, #0]
  return result;
 800264e:	f107 020c 	add.w	r2, r7, #12
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	fab2 f282 	clz	r2, r2
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	f042 0220 	orr.w	r2, r2, #32
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	f002 021f 	and.w	r2, r2, #31
 8002664:	2101      	movs	r1, #1
 8002666:	fa01 f202 	lsl.w	r2, r1, r2
 800266a:	4013      	ands	r3, r2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d19e      	bne.n	80025ae <HAL_RCC_OscConfig+0xcfe>
 8002670:	e01e      	b.n	80026b0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e018      	b.n	80026b2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002680:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <HAL_RCC_OscConfig+0xe0c>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002688:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800268c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002690:	1d3b      	adds	r3, r7, #4
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	429a      	cmp	r2, r3
 8002698:	d108      	bne.n	80026ac <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800269a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800269e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d001      	beq.n	80026b0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000

080026c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b09e      	sub	sp, #120	; 0x78
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e162      	b.n	800299e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026d8:	4b90      	ldr	r3, [pc, #576]	; (800291c <HAL_RCC_ClockConfig+0x25c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d910      	bls.n	8002708 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e6:	4b8d      	ldr	r3, [pc, #564]	; (800291c <HAL_RCC_ClockConfig+0x25c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 0207 	bic.w	r2, r3, #7
 80026ee:	498b      	ldr	r1, [pc, #556]	; (800291c <HAL_RCC_ClockConfig+0x25c>)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f6:	4b89      	ldr	r3, [pc, #548]	; (800291c <HAL_RCC_ClockConfig+0x25c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e14a      	b.n	800299e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002714:	4b82      	ldr	r3, [pc, #520]	; (8002920 <HAL_RCC_ClockConfig+0x260>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	497f      	ldr	r1, [pc, #508]	; (8002920 <HAL_RCC_ClockConfig+0x260>)
 8002722:	4313      	orrs	r3, r2
 8002724:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 80dc 	beq.w	80028ec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d13c      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xf6>
 800273c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002740:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800274a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274c:	fab3 f383 	clz	r3, r3
 8002750:	b2db      	uxtb	r3, r3
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	b2db      	uxtb	r3, r3
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b01      	cmp	r3, #1
 800275e:	d102      	bne.n	8002766 <HAL_RCC_ClockConfig+0xa6>
 8002760:	4b6f      	ldr	r3, [pc, #444]	; (8002920 <HAL_RCC_ClockConfig+0x260>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	e00f      	b.n	8002786 <HAL_RCC_ClockConfig+0xc6>
 8002766:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800276a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800276e:	fa93 f3a3 	rbit	r3, r3
 8002772:	667b      	str	r3, [r7, #100]	; 0x64
 8002774:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002778:	663b      	str	r3, [r7, #96]	; 0x60
 800277a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800277c:	fa93 f3a3 	rbit	r3, r3
 8002780:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002782:	4b67      	ldr	r3, [pc, #412]	; (8002920 <HAL_RCC_ClockConfig+0x260>)
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800278a:	65ba      	str	r2, [r7, #88]	; 0x58
 800278c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800278e:	fa92 f2a2 	rbit	r2, r2
 8002792:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002794:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002796:	fab2 f282 	clz	r2, r2
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	f042 0220 	orr.w	r2, r2, #32
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	f002 021f 	and.w	r2, r2, #31
 80027a6:	2101      	movs	r1, #1
 80027a8:	fa01 f202 	lsl.w	r2, r1, r2
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d17b      	bne.n	80028aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e0f3      	b.n	800299e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d13c      	bne.n	8002838 <HAL_RCC_ClockConfig+0x178>
 80027be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	095b      	lsrs	r3, r3, #5
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d102      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x128>
 80027e2:	4b4f      	ldr	r3, [pc, #316]	; (8002920 <HAL_RCC_ClockConfig+0x260>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	e00f      	b.n	8002808 <HAL_RCC_ClockConfig+0x148>
 80027e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	647b      	str	r3, [r7, #68]	; 0x44
 80027f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027fa:	643b      	str	r3, [r7, #64]	; 0x40
 80027fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027fe:	fa93 f3a3 	rbit	r3, r3
 8002802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002804:	4b46      	ldr	r3, [pc, #280]	; (8002920 <HAL_RCC_ClockConfig+0x260>)
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800280c:	63ba      	str	r2, [r7, #56]	; 0x38
 800280e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002810:	fa92 f2a2 	rbit	r2, r2
 8002814:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002818:	fab2 f282 	clz	r2, r2
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	f042 0220 	orr.w	r2, r2, #32
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	f002 021f 	and.w	r2, r2, #31
 8002828:	2101      	movs	r1, #1
 800282a:	fa01 f202 	lsl.w	r2, r1, r2
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d13a      	bne.n	80028aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0b2      	b.n	800299e <HAL_RCC_ClockConfig+0x2de>
 8002838:	2302      	movs	r3, #2
 800283a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b01      	cmp	r3, #1
 8002858:	d102      	bne.n	8002860 <HAL_RCC_ClockConfig+0x1a0>
 800285a:	4b31      	ldr	r3, [pc, #196]	; (8002920 <HAL_RCC_ClockConfig+0x260>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	e00d      	b.n	800287c <HAL_RCC_ClockConfig+0x1bc>
 8002860:	2302      	movs	r3, #2
 8002862:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002866:	fa93 f3a3 	rbit	r3, r3
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
 800286c:	2302      	movs	r3, #2
 800286e:	623b      	str	r3, [r7, #32]
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	61fb      	str	r3, [r7, #28]
 8002878:	4b29      	ldr	r3, [pc, #164]	; (8002920 <HAL_RCC_ClockConfig+0x260>)
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	2202      	movs	r2, #2
 800287e:	61ba      	str	r2, [r7, #24]
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	fa92 f2a2 	rbit	r2, r2
 8002886:	617a      	str	r2, [r7, #20]
  return result;
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	fab2 f282 	clz	r2, r2
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	f042 0220 	orr.w	r2, r2, #32
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	f002 021f 	and.w	r2, r2, #31
 800289a:	2101      	movs	r1, #1
 800289c:	fa01 f202 	lsl.w	r2, r1, r2
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e079      	b.n	800299e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028aa:	4b1d      	ldr	r3, [pc, #116]	; (8002920 <HAL_RCC_ClockConfig+0x260>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f023 0203 	bic.w	r2, r3, #3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	491a      	ldr	r1, [pc, #104]	; (8002920 <HAL_RCC_ClockConfig+0x260>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028bc:	f7fe fc1c 	bl	80010f8 <HAL_GetTick>
 80028c0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c2:	e00a      	b.n	80028da <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c4:	f7fe fc18 	bl	80010f8 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e061      	b.n	800299e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <HAL_RCC_ClockConfig+0x260>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 020c 	and.w	r2, r3, #12
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d1eb      	bne.n	80028c4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <HAL_RCC_ClockConfig+0x25c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d214      	bcs.n	8002924 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fa:	4b08      	ldr	r3, [pc, #32]	; (800291c <HAL_RCC_ClockConfig+0x25c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 0207 	bic.w	r2, r3, #7
 8002902:	4906      	ldr	r1, [pc, #24]	; (800291c <HAL_RCC_ClockConfig+0x25c>)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	4b04      	ldr	r3, [pc, #16]	; (800291c <HAL_RCC_ClockConfig+0x25c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d005      	beq.n	8002924 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e040      	b.n	800299e <HAL_RCC_ClockConfig+0x2de>
 800291c:	40022000 	.word	0x40022000
 8002920:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002930:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <HAL_RCC_ClockConfig+0x2e8>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	491a      	ldr	r1, [pc, #104]	; (80029a8 <HAL_RCC_ClockConfig+0x2e8>)
 800293e:	4313      	orrs	r3, r2
 8002940:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d009      	beq.n	8002962 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800294e:	4b16      	ldr	r3, [pc, #88]	; (80029a8 <HAL_RCC_ClockConfig+0x2e8>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4912      	ldr	r1, [pc, #72]	; (80029a8 <HAL_RCC_ClockConfig+0x2e8>)
 800295e:	4313      	orrs	r3, r2
 8002960:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002962:	f000 f829 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8002966:	4601      	mov	r1, r0
 8002968:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <HAL_RCC_ClockConfig+0x2e8>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002970:	22f0      	movs	r2, #240	; 0xf0
 8002972:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	fa92 f2a2 	rbit	r2, r2
 800297a:	60fa      	str	r2, [r7, #12]
  return result;
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	fab2 f282 	clz	r2, r2
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	40d3      	lsrs	r3, r2
 8002986:	4a09      	ldr	r2, [pc, #36]	; (80029ac <HAL_RCC_ClockConfig+0x2ec>)
 8002988:	5cd3      	ldrb	r3, [r2, r3]
 800298a:	fa21 f303 	lsr.w	r3, r1, r3
 800298e:	4a08      	ldr	r2, [pc, #32]	; (80029b0 <HAL_RCC_ClockConfig+0x2f0>)
 8002990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002992:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <HAL_RCC_ClockConfig+0x2f4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe fb6a 	bl	8001070 <HAL_InitTick>
  
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3778      	adds	r7, #120	; 0x78
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40021000 	.word	0x40021000
 80029ac:	08003180 	.word	0x08003180
 80029b0:	20000000 	.word	0x20000000
 80029b4:	20000004 	.word	0x20000004

080029b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b08b      	sub	sp, #44	; 0x2c
 80029bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
 80029c2:	2300      	movs	r3, #0
 80029c4:	61bb      	str	r3, [r7, #24]
 80029c6:	2300      	movs	r3, #0
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80029d2:	4b29      	ldr	r3, [pc, #164]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d002      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0x30>
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d003      	beq.n	80029ee <HAL_RCC_GetSysClockFreq+0x36>
 80029e6:	e03c      	b.n	8002a62 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029e8:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_RCC_GetSysClockFreq+0xc4>)
 80029ea:	623b      	str	r3, [r7, #32]
      break;
 80029ec:	e03c      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80029f4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80029f8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	fa92 f2a2 	rbit	r2, r2
 8002a00:	607a      	str	r2, [r7, #4]
  return result;
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	fab2 f282 	clz	r2, r2
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	40d3      	lsrs	r3, r2
 8002a0c:	4a1c      	ldr	r2, [pc, #112]	; (8002a80 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a0e:	5cd3      	ldrb	r3, [r2, r3]
 8002a10:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a12:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	220f      	movs	r2, #15
 8002a1c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	fa92 f2a2 	rbit	r2, r2
 8002a24:	60fa      	str	r2, [r7, #12]
  return result;
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	fab2 f282 	clz	r2, r2
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	40d3      	lsrs	r3, r2
 8002a30:	4a14      	ldr	r2, [pc, #80]	; (8002a84 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a32:	5cd3      	ldrb	r3, [r2, r3]
 8002a34:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a40:	4a0e      	ldr	r2, [pc, #56]	; (8002a7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	fb02 f303 	mul.w	r3, r2, r3
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a50:	e004      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	4a0c      	ldr	r2, [pc, #48]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a56:	fb02 f303 	mul.w	r3, r2, r3
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	623b      	str	r3, [r7, #32]
      break;
 8002a60:	e002      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a64:	623b      	str	r3, [r7, #32]
      break;
 8002a66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a68:	6a3b      	ldr	r3, [r7, #32]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	372c      	adds	r7, #44	; 0x2c
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	007a1200 	.word	0x007a1200
 8002a80:	08003190 	.word	0x08003190
 8002a84:	080031a0 	.word	0x080031a0
 8002a88:	003d0900 	.word	0x003d0900

08002a8c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b092      	sub	sp, #72	; 0x48
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 80d0 	beq.w	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab0:	4b86      	ldr	r3, [pc, #536]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10e      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002abc:	4b83      	ldr	r3, [pc, #524]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	4a82      	ldr	r2, [pc, #520]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac6:	61d3      	str	r3, [r2, #28]
 8002ac8:	4b80      	ldr	r3, [pc, #512]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ada:	4b7d      	ldr	r3, [pc, #500]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d118      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae6:	4b7a      	ldr	r3, [pc, #488]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a79      	ldr	r2, [pc, #484]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af2:	f7fe fb01 	bl	80010f8 <HAL_GetTick>
 8002af6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af8:	e008      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afa:	f7fe fafd 	bl	80010f8 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b64      	cmp	r3, #100	; 0x64
 8002b06:	d901      	bls.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e0db      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0c:	4b70      	ldr	r3, [pc, #448]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b18:	4b6c      	ldr	r3, [pc, #432]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b20:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d07d      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d076      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b36:	4b65      	ldr	r3, [pc, #404]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b44:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b48:	fa93 f3a3 	rbit	r3, r3
 8002b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b50:	fab3 f383 	clz	r3, r3
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	461a      	mov	r2, r3
 8002b58:	4b5e      	ldr	r3, [pc, #376]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	461a      	mov	r2, r3
 8002b60:	2301      	movs	r3, #1
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b74:	fab3 f383 	clz	r3, r3
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4b55      	ldr	r3, [pc, #340]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b7e:	4413      	add	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	461a      	mov	r2, r3
 8002b84:	2300      	movs	r3, #0
 8002b86:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b88:	4a50      	ldr	r2, [pc, #320]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b8c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d045      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b98:	f7fe faae 	bl	80010f8 <HAL_GetTick>
 8002b9c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9e:	e00a      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba0:	f7fe faaa 	bl	80010f8 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e086      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	fa93 f3a3 	rbit	r3, r3
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	623b      	str	r3, [r7, #32]
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	61fb      	str	r3, [r7, #28]
  return result;
 8002bce:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd0:	fab3 f383 	clz	r3, r3
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f043 0302 	orr.w	r3, r3, #2
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d102      	bne.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002be4:	4b39      	ldr	r3, [pc, #228]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	e007      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002bea:	2302      	movs	r3, #2
 8002bec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	4b35      	ldr	r3, [pc, #212]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	613a      	str	r2, [r7, #16]
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	fa92 f2a2 	rbit	r2, r2
 8002c04:	60fa      	str	r2, [r7, #12]
  return result;
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	fab2 f282 	clz	r2, r2
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	f002 021f 	and.w	r2, r2, #31
 8002c18:	2101      	movs	r1, #1
 8002c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0bd      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002c24:	4b29      	ldr	r3, [pc, #164]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	4926      	ldr	r1, [pc, #152]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c36:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d105      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c3e:	4b23      	ldr	r3, [pc, #140]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	4a22      	ldr	r2, [pc, #136]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c48:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d008      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c56:	4b1d      	ldr	r3, [pc, #116]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	f023 0203 	bic.w	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	491a      	ldr	r1, [pc, #104]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0320 	and.w	r3, r3, #32
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d008      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c74:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	f023 0210 	bic.w	r2, r3, #16
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	4912      	ldr	r1, [pc, #72]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d008      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c92:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	490b      	ldr	r1, [pc, #44]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002cb0:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	4903      	ldr	r1, [pc, #12]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3748      	adds	r7, #72	; 0x48
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40007000 	.word	0x40007000
 8002cd4:	10908100 	.word	0x10908100

08002cd8 <_ZNSaIcEC1Ev>:
 8002cd8:	4770      	bx	lr

08002cda <_ZNSaIcED1Ev>:
 8002cda:	4770      	bx	lr

08002cdc <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8002cdc:	b10a      	cbz	r2, 8002ce2 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8002cde:	f000 b8d9 	b.w	8002e94 <memcpy>
 8002ce2:	4770      	bx	lr

08002ce4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8002ce4:	b508      	push	{r3, lr}
 8002ce6:	680b      	ldr	r3, [r1, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	da02      	bge.n	8002cf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8002cec:	4809      	ldr	r0, [pc, #36]	; (8002d14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8002cee:	f000 f88c 	bl	8002e0a <_ZSt20__throw_length_errorPKc>
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d908      	bls.n	8002d08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8002cf6:	0052      	lsls	r2, r2, #1
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d205      	bcs.n	8002d08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8002cfc:	2a00      	cmp	r2, #0
 8002cfe:	bfb6      	itet	lt
 8002d00:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8002d04:	600a      	strge	r2, [r1, #0]
 8002d06:	600b      	strlt	r3, [r1, #0]
 8002d08:	6808      	ldr	r0, [r1, #0]
 8002d0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002d0e:	3001      	adds	r0, #1
 8002d10:	f000 b85c 	b.w	8002dcc <_Znwj>
 8002d14:	080031da 	.word	0x080031da

08002d18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f853 0b08 	ldr.w	r0, [r3], #8
 8002d1e:	4298      	cmp	r0, r3
 8002d20:	d001      	beq.n	8002d26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8002d22:	f000 b86d 	b.w	8002e00 <_ZdlPv>
 8002d26:	4770      	bx	lr

08002d28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8002d28:	2a01      	cmp	r2, #1
 8002d2a:	b510      	push	{r4, lr}
 8002d2c:	d102      	bne.n	8002d34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8002d2e:	780a      	ldrb	r2, [r1, #0]
 8002d30:	7002      	strb	r2, [r0, #0]
 8002d32:	bd10      	pop	{r4, pc}
 8002d34:	f7ff ffd2 	bl	8002cdc <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8002d38:	e7fb      	b.n	8002d32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08002d3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8002d3a:	b508      	push	{r3, lr}
 8002d3c:	1a52      	subs	r2, r2, r1
 8002d3e:	f7ff fff3 	bl	8002d28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8002d42:	bd08      	pop	{r3, pc}

08002d44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8002d44:	b510      	push	{r4, lr}
 8002d46:	4604      	mov	r4, r0
 8002d48:	f7ff ffe6 	bl	8002d18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	bd10      	pop	{r4, pc}

08002d50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8002d50:	6800      	ldr	r0, [r0, #0]
 8002d52:	4408      	add	r0, r1
 8002d54:	4770      	bx	lr
	...

08002d58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8002d58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d5a:	4604      	mov	r4, r0
 8002d5c:	4616      	mov	r6, r2
 8002d5e:	460d      	mov	r5, r1
 8002d60:	b919      	cbnz	r1, 8002d6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8002d62:	b112      	cbz	r2, 8002d6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8002d64:	480d      	ldr	r0, [pc, #52]	; (8002d9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8002d66:	f000 f84d 	bl	8002e04 <_ZSt19__throw_logic_errorPKc>
 8002d6a:	1b73      	subs	r3, r6, r5
 8002d6c:	2b0f      	cmp	r3, #15
 8002d6e:	9301      	str	r3, [sp, #4]
 8002d70:	d907      	bls.n	8002d82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8002d72:	2200      	movs	r2, #0
 8002d74:	a901      	add	r1, sp, #4
 8002d76:	4620      	mov	r0, r4
 8002d78:	f7ff ffb4 	bl	8002ce4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8002d7c:	9b01      	ldr	r3, [sp, #4]
 8002d7e:	6020      	str	r0, [r4, #0]
 8002d80:	60a3      	str	r3, [r4, #8]
 8002d82:	4632      	mov	r2, r6
 8002d84:	4629      	mov	r1, r5
 8002d86:	6820      	ldr	r0, [r4, #0]
 8002d88:	f7ff ffd7 	bl	8002d3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8002d8c:	9b01      	ldr	r3, [sp, #4]
 8002d8e:	6822      	ldr	r2, [r4, #0]
 8002d90:	6063      	str	r3, [r4, #4]
 8002d92:	2100      	movs	r1, #0
 8002d94:	54d1      	strb	r1, [r2, r3]
 8002d96:	b002      	add	sp, #8
 8002d98:	bd70      	pop	{r4, r5, r6, pc}
 8002d9a:	bf00      	nop
 8002d9c:	080031b0 	.word	0x080031b0

08002da0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8002da0:	b538      	push	{r3, r4, r5, lr}
 8002da2:	f100 0308 	add.w	r3, r0, #8
 8002da6:	4604      	mov	r4, r0
 8002da8:	6003      	str	r3, [r0, #0]
 8002daa:	460d      	mov	r5, r1
 8002dac:	b159      	cbz	r1, 8002dc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8002dae:	4608      	mov	r0, r1
 8002db0:	f7fd fa0a 	bl	80001c8 <strlen>
 8002db4:	182a      	adds	r2, r5, r0
 8002db6:	4620      	mov	r0, r4
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	f7ff ffcb 	bl	8002d58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	bd38      	pop	{r3, r4, r5, pc}
 8002dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8002dca:	e7f4      	b.n	8002db6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08002dcc <_Znwj>:
 8002dcc:	b510      	push	{r4, lr}
 8002dce:	2800      	cmp	r0, #0
 8002dd0:	bf14      	ite	ne
 8002dd2:	4604      	movne	r4, r0
 8002dd4:	2401      	moveq	r4, #1
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	f000 f84c 	bl	8002e74 <malloc>
 8002ddc:	b930      	cbnz	r0, 8002dec <_Znwj+0x20>
 8002dde:	f000 f807 	bl	8002df0 <_ZSt15get_new_handlerv>
 8002de2:	b908      	cbnz	r0, 8002de8 <_Znwj+0x1c>
 8002de4:	f000 f814 	bl	8002e10 <abort>
 8002de8:	4780      	blx	r0
 8002dea:	e7f4      	b.n	8002dd6 <_Znwj+0xa>
 8002dec:	bd10      	pop	{r4, pc}
	...

08002df0 <_ZSt15get_new_handlerv>:
 8002df0:	4b02      	ldr	r3, [pc, #8]	; (8002dfc <_ZSt15get_new_handlerv+0xc>)
 8002df2:	6818      	ldr	r0, [r3, #0]
 8002df4:	f3bf 8f5b 	dmb	ish
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	20000094 	.word	0x20000094

08002e00 <_ZdlPv>:
 8002e00:	f000 b840 	b.w	8002e84 <free>

08002e04 <_ZSt19__throw_logic_errorPKc>:
 8002e04:	b508      	push	{r3, lr}
 8002e06:	f000 f803 	bl	8002e10 <abort>

08002e0a <_ZSt20__throw_length_errorPKc>:
 8002e0a:	b508      	push	{r3, lr}
 8002e0c:	f000 f800 	bl	8002e10 <abort>

08002e10 <abort>:
 8002e10:	b508      	push	{r3, lr}
 8002e12:	2006      	movs	r0, #6
 8002e14:	f000 f932 	bl	800307c <raise>
 8002e18:	2001      	movs	r0, #1
 8002e1a:	f7fe f89d 	bl	8000f58 <_exit>
	...

08002e20 <__errno>:
 8002e20:	4b01      	ldr	r3, [pc, #4]	; (8002e28 <__errno+0x8>)
 8002e22:	6818      	ldr	r0, [r3, #0]
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	2000000c 	.word	0x2000000c

08002e2c <__libc_init_array>:
 8002e2c:	b570      	push	{r4, r5, r6, lr}
 8002e2e:	4e0d      	ldr	r6, [pc, #52]	; (8002e64 <__libc_init_array+0x38>)
 8002e30:	4c0d      	ldr	r4, [pc, #52]	; (8002e68 <__libc_init_array+0x3c>)
 8002e32:	1ba4      	subs	r4, r4, r6
 8002e34:	10a4      	asrs	r4, r4, #2
 8002e36:	2500      	movs	r5, #0
 8002e38:	42a5      	cmp	r5, r4
 8002e3a:	d109      	bne.n	8002e50 <__libc_init_array+0x24>
 8002e3c:	4e0b      	ldr	r6, [pc, #44]	; (8002e6c <__libc_init_array+0x40>)
 8002e3e:	4c0c      	ldr	r4, [pc, #48]	; (8002e70 <__libc_init_array+0x44>)
 8002e40:	f000 f93a 	bl	80030b8 <_init>
 8002e44:	1ba4      	subs	r4, r4, r6
 8002e46:	10a4      	asrs	r4, r4, #2
 8002e48:	2500      	movs	r5, #0
 8002e4a:	42a5      	cmp	r5, r4
 8002e4c:	d105      	bne.n	8002e5a <__libc_init_array+0x2e>
 8002e4e:	bd70      	pop	{r4, r5, r6, pc}
 8002e50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e54:	4798      	blx	r3
 8002e56:	3501      	adds	r5, #1
 8002e58:	e7ee      	b.n	8002e38 <__libc_init_array+0xc>
 8002e5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e5e:	4798      	blx	r3
 8002e60:	3501      	adds	r5, #1
 8002e62:	e7f2      	b.n	8002e4a <__libc_init_array+0x1e>
 8002e64:	080031f4 	.word	0x080031f4
 8002e68:	080031f4 	.word	0x080031f4
 8002e6c:	080031f4 	.word	0x080031f4
 8002e70:	080031fc 	.word	0x080031fc

08002e74 <malloc>:
 8002e74:	4b02      	ldr	r3, [pc, #8]	; (8002e80 <malloc+0xc>)
 8002e76:	4601      	mov	r1, r0
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	f000 b86d 	b.w	8002f58 <_malloc_r>
 8002e7e:	bf00      	nop
 8002e80:	2000000c 	.word	0x2000000c

08002e84 <free>:
 8002e84:	4b02      	ldr	r3, [pc, #8]	; (8002e90 <free+0xc>)
 8002e86:	4601      	mov	r1, r0
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	f000 b817 	b.w	8002ebc <_free_r>
 8002e8e:	bf00      	nop
 8002e90:	2000000c 	.word	0x2000000c

08002e94 <memcpy>:
 8002e94:	b510      	push	{r4, lr}
 8002e96:	1e43      	subs	r3, r0, #1
 8002e98:	440a      	add	r2, r1
 8002e9a:	4291      	cmp	r1, r2
 8002e9c:	d100      	bne.n	8002ea0 <memcpy+0xc>
 8002e9e:	bd10      	pop	{r4, pc}
 8002ea0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ea4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ea8:	e7f7      	b.n	8002e9a <memcpy+0x6>

08002eaa <memset>:
 8002eaa:	4402      	add	r2, r0
 8002eac:	4603      	mov	r3, r0
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d100      	bne.n	8002eb4 <memset+0xa>
 8002eb2:	4770      	bx	lr
 8002eb4:	f803 1b01 	strb.w	r1, [r3], #1
 8002eb8:	e7f9      	b.n	8002eae <memset+0x4>
	...

08002ebc <_free_r>:
 8002ebc:	b538      	push	{r3, r4, r5, lr}
 8002ebe:	4605      	mov	r5, r0
 8002ec0:	2900      	cmp	r1, #0
 8002ec2:	d045      	beq.n	8002f50 <_free_r+0x94>
 8002ec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ec8:	1f0c      	subs	r4, r1, #4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	bfb8      	it	lt
 8002ece:	18e4      	addlt	r4, r4, r3
 8002ed0:	f000 f8f0 	bl	80030b4 <__malloc_lock>
 8002ed4:	4a1f      	ldr	r2, [pc, #124]	; (8002f54 <_free_r+0x98>)
 8002ed6:	6813      	ldr	r3, [r2, #0]
 8002ed8:	4610      	mov	r0, r2
 8002eda:	b933      	cbnz	r3, 8002eea <_free_r+0x2e>
 8002edc:	6063      	str	r3, [r4, #4]
 8002ede:	6014      	str	r4, [r2, #0]
 8002ee0:	4628      	mov	r0, r5
 8002ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ee6:	f000 b8e6 	b.w	80030b6 <__malloc_unlock>
 8002eea:	42a3      	cmp	r3, r4
 8002eec:	d90c      	bls.n	8002f08 <_free_r+0x4c>
 8002eee:	6821      	ldr	r1, [r4, #0]
 8002ef0:	1862      	adds	r2, r4, r1
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	bf04      	itt	eq
 8002ef6:	681a      	ldreq	r2, [r3, #0]
 8002ef8:	685b      	ldreq	r3, [r3, #4]
 8002efa:	6063      	str	r3, [r4, #4]
 8002efc:	bf04      	itt	eq
 8002efe:	1852      	addeq	r2, r2, r1
 8002f00:	6022      	streq	r2, [r4, #0]
 8002f02:	6004      	str	r4, [r0, #0]
 8002f04:	e7ec      	b.n	8002ee0 <_free_r+0x24>
 8002f06:	4613      	mov	r3, r2
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	b10a      	cbz	r2, 8002f10 <_free_r+0x54>
 8002f0c:	42a2      	cmp	r2, r4
 8002f0e:	d9fa      	bls.n	8002f06 <_free_r+0x4a>
 8002f10:	6819      	ldr	r1, [r3, #0]
 8002f12:	1858      	adds	r0, r3, r1
 8002f14:	42a0      	cmp	r0, r4
 8002f16:	d10b      	bne.n	8002f30 <_free_r+0x74>
 8002f18:	6820      	ldr	r0, [r4, #0]
 8002f1a:	4401      	add	r1, r0
 8002f1c:	1858      	adds	r0, r3, r1
 8002f1e:	4282      	cmp	r2, r0
 8002f20:	6019      	str	r1, [r3, #0]
 8002f22:	d1dd      	bne.n	8002ee0 <_free_r+0x24>
 8002f24:	6810      	ldr	r0, [r2, #0]
 8002f26:	6852      	ldr	r2, [r2, #4]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	4401      	add	r1, r0
 8002f2c:	6019      	str	r1, [r3, #0]
 8002f2e:	e7d7      	b.n	8002ee0 <_free_r+0x24>
 8002f30:	d902      	bls.n	8002f38 <_free_r+0x7c>
 8002f32:	230c      	movs	r3, #12
 8002f34:	602b      	str	r3, [r5, #0]
 8002f36:	e7d3      	b.n	8002ee0 <_free_r+0x24>
 8002f38:	6820      	ldr	r0, [r4, #0]
 8002f3a:	1821      	adds	r1, r4, r0
 8002f3c:	428a      	cmp	r2, r1
 8002f3e:	bf04      	itt	eq
 8002f40:	6811      	ldreq	r1, [r2, #0]
 8002f42:	6852      	ldreq	r2, [r2, #4]
 8002f44:	6062      	str	r2, [r4, #4]
 8002f46:	bf04      	itt	eq
 8002f48:	1809      	addeq	r1, r1, r0
 8002f4a:	6021      	streq	r1, [r4, #0]
 8002f4c:	605c      	str	r4, [r3, #4]
 8002f4e:	e7c7      	b.n	8002ee0 <_free_r+0x24>
 8002f50:	bd38      	pop	{r3, r4, r5, pc}
 8002f52:	bf00      	nop
 8002f54:	20000098 	.word	0x20000098

08002f58 <_malloc_r>:
 8002f58:	b570      	push	{r4, r5, r6, lr}
 8002f5a:	1ccd      	adds	r5, r1, #3
 8002f5c:	f025 0503 	bic.w	r5, r5, #3
 8002f60:	3508      	adds	r5, #8
 8002f62:	2d0c      	cmp	r5, #12
 8002f64:	bf38      	it	cc
 8002f66:	250c      	movcc	r5, #12
 8002f68:	2d00      	cmp	r5, #0
 8002f6a:	4606      	mov	r6, r0
 8002f6c:	db01      	blt.n	8002f72 <_malloc_r+0x1a>
 8002f6e:	42a9      	cmp	r1, r5
 8002f70:	d903      	bls.n	8002f7a <_malloc_r+0x22>
 8002f72:	230c      	movs	r3, #12
 8002f74:	6033      	str	r3, [r6, #0]
 8002f76:	2000      	movs	r0, #0
 8002f78:	bd70      	pop	{r4, r5, r6, pc}
 8002f7a:	f000 f89b 	bl	80030b4 <__malloc_lock>
 8002f7e:	4a21      	ldr	r2, [pc, #132]	; (8003004 <_malloc_r+0xac>)
 8002f80:	6814      	ldr	r4, [r2, #0]
 8002f82:	4621      	mov	r1, r4
 8002f84:	b991      	cbnz	r1, 8002fac <_malloc_r+0x54>
 8002f86:	4c20      	ldr	r4, [pc, #128]	; (8003008 <_malloc_r+0xb0>)
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	b91b      	cbnz	r3, 8002f94 <_malloc_r+0x3c>
 8002f8c:	4630      	mov	r0, r6
 8002f8e:	f000 f83d 	bl	800300c <_sbrk_r>
 8002f92:	6020      	str	r0, [r4, #0]
 8002f94:	4629      	mov	r1, r5
 8002f96:	4630      	mov	r0, r6
 8002f98:	f000 f838 	bl	800300c <_sbrk_r>
 8002f9c:	1c43      	adds	r3, r0, #1
 8002f9e:	d124      	bne.n	8002fea <_malloc_r+0x92>
 8002fa0:	230c      	movs	r3, #12
 8002fa2:	6033      	str	r3, [r6, #0]
 8002fa4:	4630      	mov	r0, r6
 8002fa6:	f000 f886 	bl	80030b6 <__malloc_unlock>
 8002faa:	e7e4      	b.n	8002f76 <_malloc_r+0x1e>
 8002fac:	680b      	ldr	r3, [r1, #0]
 8002fae:	1b5b      	subs	r3, r3, r5
 8002fb0:	d418      	bmi.n	8002fe4 <_malloc_r+0x8c>
 8002fb2:	2b0b      	cmp	r3, #11
 8002fb4:	d90f      	bls.n	8002fd6 <_malloc_r+0x7e>
 8002fb6:	600b      	str	r3, [r1, #0]
 8002fb8:	50cd      	str	r5, [r1, r3]
 8002fba:	18cc      	adds	r4, r1, r3
 8002fbc:	4630      	mov	r0, r6
 8002fbe:	f000 f87a 	bl	80030b6 <__malloc_unlock>
 8002fc2:	f104 000b 	add.w	r0, r4, #11
 8002fc6:	1d23      	adds	r3, r4, #4
 8002fc8:	f020 0007 	bic.w	r0, r0, #7
 8002fcc:	1ac3      	subs	r3, r0, r3
 8002fce:	d0d3      	beq.n	8002f78 <_malloc_r+0x20>
 8002fd0:	425a      	negs	r2, r3
 8002fd2:	50e2      	str	r2, [r4, r3]
 8002fd4:	e7d0      	b.n	8002f78 <_malloc_r+0x20>
 8002fd6:	428c      	cmp	r4, r1
 8002fd8:	684b      	ldr	r3, [r1, #4]
 8002fda:	bf16      	itet	ne
 8002fdc:	6063      	strne	r3, [r4, #4]
 8002fde:	6013      	streq	r3, [r2, #0]
 8002fe0:	460c      	movne	r4, r1
 8002fe2:	e7eb      	b.n	8002fbc <_malloc_r+0x64>
 8002fe4:	460c      	mov	r4, r1
 8002fe6:	6849      	ldr	r1, [r1, #4]
 8002fe8:	e7cc      	b.n	8002f84 <_malloc_r+0x2c>
 8002fea:	1cc4      	adds	r4, r0, #3
 8002fec:	f024 0403 	bic.w	r4, r4, #3
 8002ff0:	42a0      	cmp	r0, r4
 8002ff2:	d005      	beq.n	8003000 <_malloc_r+0xa8>
 8002ff4:	1a21      	subs	r1, r4, r0
 8002ff6:	4630      	mov	r0, r6
 8002ff8:	f000 f808 	bl	800300c <_sbrk_r>
 8002ffc:	3001      	adds	r0, #1
 8002ffe:	d0cf      	beq.n	8002fa0 <_malloc_r+0x48>
 8003000:	6025      	str	r5, [r4, #0]
 8003002:	e7db      	b.n	8002fbc <_malloc_r+0x64>
 8003004:	20000098 	.word	0x20000098
 8003008:	2000009c 	.word	0x2000009c

0800300c <_sbrk_r>:
 800300c:	b538      	push	{r3, r4, r5, lr}
 800300e:	4c06      	ldr	r4, [pc, #24]	; (8003028 <_sbrk_r+0x1c>)
 8003010:	2300      	movs	r3, #0
 8003012:	4605      	mov	r5, r0
 8003014:	4608      	mov	r0, r1
 8003016:	6023      	str	r3, [r4, #0]
 8003018:	f7fd ffa8 	bl	8000f6c <_sbrk>
 800301c:	1c43      	adds	r3, r0, #1
 800301e:	d102      	bne.n	8003026 <_sbrk_r+0x1a>
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	b103      	cbz	r3, 8003026 <_sbrk_r+0x1a>
 8003024:	602b      	str	r3, [r5, #0]
 8003026:	bd38      	pop	{r3, r4, r5, pc}
 8003028:	200000f0 	.word	0x200000f0

0800302c <_raise_r>:
 800302c:	291f      	cmp	r1, #31
 800302e:	b538      	push	{r3, r4, r5, lr}
 8003030:	4604      	mov	r4, r0
 8003032:	460d      	mov	r5, r1
 8003034:	d904      	bls.n	8003040 <_raise_r+0x14>
 8003036:	2316      	movs	r3, #22
 8003038:	6003      	str	r3, [r0, #0]
 800303a:	f04f 30ff 	mov.w	r0, #4294967295
 800303e:	bd38      	pop	{r3, r4, r5, pc}
 8003040:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003042:	b112      	cbz	r2, 800304a <_raise_r+0x1e>
 8003044:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003048:	b94b      	cbnz	r3, 800305e <_raise_r+0x32>
 800304a:	4620      	mov	r0, r4
 800304c:	f000 f830 	bl	80030b0 <_getpid_r>
 8003050:	462a      	mov	r2, r5
 8003052:	4601      	mov	r1, r0
 8003054:	4620      	mov	r0, r4
 8003056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800305a:	f000 b817 	b.w	800308c <_kill_r>
 800305e:	2b01      	cmp	r3, #1
 8003060:	d00a      	beq.n	8003078 <_raise_r+0x4c>
 8003062:	1c59      	adds	r1, r3, #1
 8003064:	d103      	bne.n	800306e <_raise_r+0x42>
 8003066:	2316      	movs	r3, #22
 8003068:	6003      	str	r3, [r0, #0]
 800306a:	2001      	movs	r0, #1
 800306c:	e7e7      	b.n	800303e <_raise_r+0x12>
 800306e:	2400      	movs	r4, #0
 8003070:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003074:	4628      	mov	r0, r5
 8003076:	4798      	blx	r3
 8003078:	2000      	movs	r0, #0
 800307a:	e7e0      	b.n	800303e <_raise_r+0x12>

0800307c <raise>:
 800307c:	4b02      	ldr	r3, [pc, #8]	; (8003088 <raise+0xc>)
 800307e:	4601      	mov	r1, r0
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	f7ff bfd3 	b.w	800302c <_raise_r>
 8003086:	bf00      	nop
 8003088:	2000000c 	.word	0x2000000c

0800308c <_kill_r>:
 800308c:	b538      	push	{r3, r4, r5, lr}
 800308e:	4c07      	ldr	r4, [pc, #28]	; (80030ac <_kill_r+0x20>)
 8003090:	2300      	movs	r3, #0
 8003092:	4605      	mov	r5, r0
 8003094:	4608      	mov	r0, r1
 8003096:	4611      	mov	r1, r2
 8003098:	6023      	str	r3, [r4, #0]
 800309a:	f7fd ff4d 	bl	8000f38 <_kill>
 800309e:	1c43      	adds	r3, r0, #1
 80030a0:	d102      	bne.n	80030a8 <_kill_r+0x1c>
 80030a2:	6823      	ldr	r3, [r4, #0]
 80030a4:	b103      	cbz	r3, 80030a8 <_kill_r+0x1c>
 80030a6:	602b      	str	r3, [r5, #0]
 80030a8:	bd38      	pop	{r3, r4, r5, pc}
 80030aa:	bf00      	nop
 80030ac:	200000f0 	.word	0x200000f0

080030b0 <_getpid_r>:
 80030b0:	f7fd bf3a 	b.w	8000f28 <_getpid>

080030b4 <__malloc_lock>:
 80030b4:	4770      	bx	lr

080030b6 <__malloc_unlock>:
 80030b6:	4770      	bx	lr

080030b8 <_init>:
 80030b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ba:	bf00      	nop
 80030bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030be:	bc08      	pop	{r3}
 80030c0:	469e      	mov	lr, r3
 80030c2:	4770      	bx	lr

080030c4 <_fini>:
 80030c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c6:	bf00      	nop
 80030c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ca:	bc08      	pop	{r3}
 80030cc:	469e      	mov	lr, r3
 80030ce:	4770      	bx	lr
