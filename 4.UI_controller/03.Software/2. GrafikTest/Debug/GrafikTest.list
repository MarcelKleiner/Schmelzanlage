
GrafikTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f50  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080030d8  080030d8  000130d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031fc  080031fc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080031fc  080031fc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031fc  080031fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080031fc  080031fc  000131fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003204  08003204  00013204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003208  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000070  08003278  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08003278  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b619  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e4a  00000000  00000000  0003b6b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008c0  00000000  00000000  0003e508  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a8  00000000  00000000  0003edc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bd21  00000000  00000000  0003f570  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b6ae  00000000  00000000  0005b291  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e4f8  00000000  00000000  0006693f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f4e37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c4  00000000  00000000  000f4eb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080030c0 	.word	0x080030c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080030c0 	.word	0x080030c0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <_ZN7AppMainC1Ev>:

//#include<iostream>
#include<string> // for string class
using namespace std;

AppMain::AppMain() {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4618      	mov	r0, r3
 80001e4:	f000 f900 	bl	80003e8 <_ZN9LCDDriverC1Ev>
	// TODO Auto-generated constructor stub

}
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	4618      	mov	r0, r3
 80001ec:	3708      	adds	r7, #8
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
	...

080001f4 <_ZN7AppMain4mainEv>:

void AppMain::main(){
 80001f4:	b590      	push	{r4, r7, lr}
 80001f6:	b0ad      	sub	sp, #180	; 0xb4
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
	lcdDriver.InitLCD();
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4618      	mov	r0, r3
 8000200:	f000 f8fd 	bl	80003fe <_ZN9LCDDriver7InitLCDEv>

	lcdDriver.SetAddressPointer(0, 0);
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2200      	movs	r2, #0
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f000 f9e5 	bl	80005da <_ZN9LCDDriver17SetAddressPointerEhh>
	lcdDriver.WriteText("Copyright (C) 1991-2020, B&K System AG");
 8000210:	687c      	ldr	r4, [r7, #4]
 8000212:	f107 0320 	add.w	r3, r7, #32
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fd62 	bl	8002ce0 <_ZNSaIcEC1Ev>
 800021c:	f107 0220 	add.w	r2, r7, #32
 8000220:	f107 0308 	add.w	r3, r7, #8
 8000224:	496a      	ldr	r1, [pc, #424]	; (80003d0 <_ZN7AppMain4mainEv+0x1dc>)
 8000226:	4618      	mov	r0, r3
 8000228:	f002 fdbe 	bl	8002da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800022c:	f107 0308 	add.w	r3, r7, #8
 8000230:	4619      	mov	r1, r3
 8000232:	4620      	mov	r0, r4
 8000234:	f000 f945 	bl	80004c2 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000238:	f107 0308 	add.w	r3, r7, #8
 800023c:	4618      	mov	r0, r3
 800023e:	f002 fd85 	bl	8002d4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000242:	f107 0320 	add.w	r3, r7, #32
 8000246:	4618      	mov	r0, r3
 8000248:	f002 fd4b 	bl	8002ce2 <_ZNSaIcED1Ev>
	lcdDriver.SetAddressPointer(0, 2);
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2202      	movs	r2, #2
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f000 f9c1 	bl	80005da <_ZN9LCDDriver17SetAddressPointerEhh>
	lcdDriver.WriteText("Init System...");
 8000258:	687c      	ldr	r4, [r7, #4]
 800025a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800025e:	4618      	mov	r0, r3
 8000260:	f002 fd3e 	bl	8002ce0 <_ZNSaIcEC1Ev>
 8000264:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800026c:	4959      	ldr	r1, [pc, #356]	; (80003d4 <_ZN7AppMain4mainEv+0x1e0>)
 800026e:	4618      	mov	r0, r3
 8000270:	f002 fd9a 	bl	8002da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000278:	4619      	mov	r1, r3
 800027a:	4620      	mov	r0, r4
 800027c:	f000 f921 	bl	80004c2 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000284:	4618      	mov	r0, r3
 8000286:	f002 fd61 	bl	8002d4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800028a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800028e:	4618      	mov	r0, r3
 8000290:	f002 fd27 	bl	8002ce2 <_ZNSaIcED1Ev>
	HAL_Delay(1000);
 8000294:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000298:	f000 ff3e 	bl	8001118 <HAL_Delay>
	lcdDriver.SetAddressPointer(0, 3);
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2203      	movs	r2, #3
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 f999 	bl	80005da <_ZN9LCDDriver17SetAddressPointerEhh>
	lcdDriver.WriteText("Booting from internal ROM...");
 80002a8:	687c      	ldr	r4, [r7, #4]
 80002aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002ae:	4618      	mov	r0, r3
 80002b0:	f002 fd16 	bl	8002ce0 <_ZNSaIcEC1Ev>
 80002b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80002b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002bc:	4946      	ldr	r1, [pc, #280]	; (80003d8 <_ZN7AppMain4mainEv+0x1e4>)
 80002be:	4618      	mov	r0, r3
 80002c0:	f002 fd72 	bl	8002da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80002c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002c8:	4619      	mov	r1, r3
 80002ca:	4620      	mov	r0, r4
 80002cc:	f000 f8f9 	bl	80004c2 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80002d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002d4:	4618      	mov	r0, r3
 80002d6:	f002 fd39 	bl	8002d4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80002da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 fcff 	bl	8002ce2 <_ZNSaIcED1Ev>
	HAL_Delay(800);
 80002e4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80002e8:	f000 ff16 	bl	8001118 <HAL_Delay>
	lcdDriver.SetAddressPointer(0, 5);
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2205      	movs	r2, #5
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 f971 	bl	80005da <_ZN9LCDDriver17SetAddressPointerEhh>
	lcdDriver.WriteText("Main Processor : STM32F303K8");
 80002f8:	687c      	ldr	r4, [r7, #4]
 80002fa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80002fe:	4618      	mov	r0, r3
 8000300:	f002 fcee 	bl	8002ce0 <_ZNSaIcEC1Ev>
 8000304:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000308:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800030c:	4933      	ldr	r1, [pc, #204]	; (80003dc <_ZN7AppMain4mainEv+0x1e8>)
 800030e:	4618      	mov	r0, r3
 8000310:	f002 fd4a 	bl	8002da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000314:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000318:	4619      	mov	r1, r3
 800031a:	4620      	mov	r0, r4
 800031c:	f000 f8d1 	bl	80004c2 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000320:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000324:	4618      	mov	r0, r3
 8000326:	f002 fd11 	bl	8002d4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800032a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800032e:	4618      	mov	r0, r3
 8000330:	f002 fcd7 	bl	8002ce2 <_ZNSaIcED1Ev>
	lcdDriver.SetAddressPointer(0, 6);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	2206      	movs	r2, #6
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f000 f94d 	bl	80005da <_ZN9LCDDriver17SetAddressPointerEhh>
	lcdDriver.WriteText("Memory Testing : 64K OK ");
 8000340:	687c      	ldr	r4, [r7, #4]
 8000342:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000346:	4618      	mov	r0, r3
 8000348:	f002 fcca 	bl	8002ce0 <_ZNSaIcEC1Ev>
 800034c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8000350:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000354:	4922      	ldr	r1, [pc, #136]	; (80003e0 <_ZN7AppMain4mainEv+0x1ec>)
 8000356:	4618      	mov	r0, r3
 8000358:	f002 fd26 	bl	8002da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800035c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000360:	4619      	mov	r1, r3
 8000362:	4620      	mov	r0, r4
 8000364:	f000 f8ad 	bl	80004c2 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000368:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800036c:	4618      	mov	r0, r3
 800036e:	f002 fced 	bl	8002d4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000372:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000376:	4618      	mov	r0, r3
 8000378:	f002 fcb3 	bl	8002ce2 <_ZNSaIcED1Ev>
	HAL_Delay(800);
 800037c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000380:	f000 feca 	bl	8001118 <HAL_Delay>
	lcdDriver.SetAddressPointer(0, 15);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	220f      	movs	r2, #15
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f000 f925 	bl	80005da <_ZN9LCDDriver17SetAddressPointerEhh>
	lcdDriver.WriteText("Press F1 to enter BIOS...");
 8000390:	687c      	ldr	r4, [r7, #4]
 8000392:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000396:	4618      	mov	r0, r3
 8000398:	f002 fca2 	bl	8002ce0 <_ZNSaIcEC1Ev>
 800039c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80003a0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80003a4:	490f      	ldr	r1, [pc, #60]	; (80003e4 <_ZN7AppMain4mainEv+0x1f0>)
 80003a6:	4618      	mov	r0, r3
 80003a8:	f002 fcfe 	bl	8002da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80003ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80003b0:	4619      	mov	r1, r3
 80003b2:	4620      	mov	r0, r4
 80003b4:	f000 f885 	bl	80004c2 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80003b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80003bc:	4618      	mov	r0, r3
 80003be:	f002 fcc5 	bl	8002d4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80003c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80003c6:	4618      	mov	r0, r3
 80003c8:	f002 fc8b 	bl	8002ce2 <_ZNSaIcED1Ev>
	while(1){
 80003cc:	e7fe      	b.n	80003cc <_ZN7AppMain4mainEv+0x1d8>
 80003ce:	bf00      	nop
 80003d0:	080030d8 	.word	0x080030d8
 80003d4:	08003100 	.word	0x08003100
 80003d8:	08003110 	.word	0x08003110
 80003dc:	08003130 	.word	0x08003130
 80003e0:	08003150 	.word	0x08003150
 80003e4:	0800316c 	.word	0x0800316c

080003e8 <_ZN9LCDDriverC1Ev>:
#include "main.h"
#include "i2c.h"
#include "gpio.h"
#include "stdlib.h"

LCDDriver::LCDDriver() {
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4618      	mov	r0, r3
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <_ZN9LCDDriver7InitLCDEv>:


void LCDDriver::InitLCD(){
 80003fe:	b580      	push	{r7, lr}
 8000400:	b082      	sub	sp, #8
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
	Reset();
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f000 fb92 	bl	8000b30 <_ZN9LCDDriver5ResetEv>
	LCD_RD_SET;
 800040c:	2201      	movs	r2, #1
 800040e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000416:	f001 f911 	bl	800163c <HAL_GPIO_WritePin>
	LCD_WR_SET;
 800041a:	2201      	movs	r2, #1
 800041c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000420:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000424:	f001 f90a 	bl	800163c <HAL_GPIO_WritePin>
	SetLCDSize(SIZE_40C);
 8000428:	2100      	movs	r1, #0
 800042a:	6878      	ldr	r0, [r7, #4]
 800042c:	f000 f875 	bl	800051a <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E>


	//init REGISTERS SETTING
	WriteData_16bit(LCD_setCursorPointer,0);
 8000430:	2200      	movs	r2, #0
 8000432:	2121      	movs	r1, #33	; 0x21
 8000434:	6878      	ldr	r0, [r7, #4]
 8000436:	f000 f976 	bl	8000726 <_ZN9LCDDriver15WriteData_16bitEht>
	WriteData_16bit(LCD_setAddressPointer, 0);
 800043a:	2200      	movs	r2, #0
 800043c:	2124      	movs	r1, #36	; 0x24
 800043e:	6878      	ldr	r0, [r7, #4]
 8000440:	f000 f971 	bl	8000726 <_ZN9LCDDriver15WriteData_16bitEht>
	WriteData_16bit(LCD_setOffsetRegister, 0);
 8000444:	2200      	movs	r2, #0
 8000446:	2122      	movs	r1, #34	; 0x22
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	f000 f96c 	bl	8000726 <_ZN9LCDDriver15WriteData_16bitEht>
	//Init SET CONTROL WORD
	WriteData_16bit(LCD_setTextHomeAddress,0);
 800044e:	2200      	movs	r2, #0
 8000450:	2140      	movs	r1, #64	; 0x40
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	f000 f967 	bl	8000726 <_ZN9LCDDriver15WriteData_16bitEht>
	WriteData_16bit(LCD_setGraphicHomeAddress, 0);
 8000458:	2200      	movs	r2, #0
 800045a:	2142      	movs	r1, #66	; 0x42
 800045c:	6878      	ldr	r0, [r7, #4]
 800045e:	f000 f962 	bl	8000726 <_ZN9LCDDriver15WriteData_16bitEht>
	WriteData_16bit(LCD_setGraphicArea, 0x0020);
 8000462:	2220      	movs	r2, #32
 8000464:	2143      	movs	r1, #67	; 0x43
 8000466:	6878      	ldr	r0, [r7, #4]
 8000468:	f000 f95d 	bl	8000726 <_ZN9LCDDriver15WriteData_16bitEht>
	//Init MODE SET
	WriteData_8bit(LCD_AND_mode |LCD_InternalCGROM_mode);
 800046c:	2183      	movs	r1, #131	; 0x83
 800046e:	6878      	ldr	r0, [r7, #4]
 8000470:	f000 f8d1 	bl	8000616 <_ZN9LCDDriver14WriteData_8bitEh>
	//Init DISPLY MODE
	WriteData_8bit(LCD_cursorOnBlinkON | LCD_textONGraphicON);
 8000474:	219f      	movs	r1, #159	; 0x9f
 8000476:	6878      	ldr	r0, [r7, #4]
 8000478:	f000 f8cd 	bl	8000616 <_ZN9LCDDriver14WriteData_8bitEh>
	//Init CURSOR PATTERN SELECT
	WriteData_8bit(LCD_1_lineCursor);
 800047c:	21a0      	movs	r1, #160	; 0xa0
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f000 f8c9 	bl	8000616 <_ZN9LCDDriver14WriteData_8bitEh>
	//Init DATA AUTO READ/WRITE
	WriteData_8bit(LCD_setDataAutoRead);
 8000484:	21b1      	movs	r1, #177	; 0xb1
 8000486:	6878      	ldr	r0, [r7, #4]
 8000488:	f000 f8c5 	bl	8000616 <_ZN9LCDDriver14WriteData_8bitEh>
	//Init SCREEN REVERSE
	WriteData_16bit(LCD_SCREEN_REVERSE, NORMAL_DISPLAY);
 800048c:	2200      	movs	r2, #0
 800048e:	21d0      	movs	r1, #208	; 0xd0
 8000490:	6878      	ldr	r0, [r7, #4]
 8000492:	f000 f948 	bl	8000726 <_ZN9LCDDriver15WriteData_16bitEht>
	//Init BLINK TIME
	WriteData_16bit(LCD_BLINK_TIME, BLINK_TIM_0_066);
 8000496:	2200      	movs	r2, #0
 8000498:	2150      	movs	r1, #80	; 0x50
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	f000 f943 	bl	8000726 <_ZN9LCDDriver15WriteData_16bitEht>
	//Init CURSOR AUTO MOVING
	WriteData_16bit(LCD_CursorAutoMoving, AUTO_MOVING_ON);
 80004a0:	2201      	movs	r2, #1
 80004a2:	2160      	movs	r1, #96	; 0x60
 80004a4:	6878      	ldr	r0, [r7, #4]
 80004a6:	f000 f93e 	bl	8000726 <_ZN9LCDDriver15WriteData_16bitEht>


	SetAddressPointer(0, 0);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2100      	movs	r1, #0
 80004ae:	6878      	ldr	r0, [r7, #4]
 80004b0:	f000 f893 	bl	80005da <_ZN9LCDDriver17SetAddressPointerEhh>
	ClearDisplay();
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	f000 f86f 	bl	8000598 <_ZN9LCDDriver12ClearDisplayEv>

}
 80004ba:	bf00      	nop
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:


bool LCDDriver::WriteText(string data){
 80004c2:	b580      	push	{r7, lr}
 80004c4:	b084      	sub	sp, #16
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
 80004ca:	6039      	str	r1, [r7, #0]
	uint16_t counter = 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	81fb      	strh	r3, [r7, #14]
	while(data[counter] != '\0'){
 80004d0:	89fb      	ldrh	r3, [r7, #14]
 80004d2:	4619      	mov	r1, r3
 80004d4:	6838      	ldr	r0, [r7, #0]
 80004d6:	f002 fc3f 	bl	8002d58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80004da:	4603      	mov	r3, r0
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	bf14      	ite	ne
 80004e2:	2301      	movne	r3, #1
 80004e4:	2300      	moveq	r3, #0
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d011      	beq.n	8000510 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e>
		WriteData_8bit(LCD_dataWriteAndIncrementADP,(uint8_t)data[counter]-32);
 80004ec:	89fb      	ldrh	r3, [r7, #14]
 80004ee:	4619      	mov	r1, r3
 80004f0:	6838      	ldr	r0, [r7, #0]
 80004f2:	f002 fc31 	bl	8002d58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80004f6:	4603      	mov	r3, r0
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	3b20      	subs	r3, #32
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	461a      	mov	r2, r3
 8000500:	21c0      	movs	r1, #192	; 0xc0
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f000 f8bc 	bl	8000680 <_ZN9LCDDriver14WriteData_8bitEhh>
		counter++;
 8000508:	89fb      	ldrh	r3, [r7, #14]
 800050a:	3301      	adds	r3, #1
 800050c:	81fb      	strh	r3, [r7, #14]
	while(data[counter] != '\0'){
 800050e:	e7df      	b.n	80004d0 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe>
	}

	return true;
 8000510:	2301      	movs	r3, #1
}
 8000512:	4618      	mov	r0, r3
 8000514:	3710      	adds	r7, #16
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E>:
 * Init the LCD Size (40 Columns / 32 Columns)
 *
 * @param size: LCD Size
 * @return : none
 */
void LCDDriver::SetLCDSize(LCD_SIZE size){
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
 8000522:	460b      	mov	r3, r1
 8000524:	70fb      	strb	r3, [r7, #3]
	if(size == SIZE_40C){
 8000526:	78fb      	ldrb	r3, [r7, #3]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d117      	bne.n	800055c <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E+0x42>
		LCD_SIZE_40;				//set size 40 Columns
 800052c:	2200      	movs	r2, #0
 800052e:	2102      	movs	r1, #2
 8000530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000534:	f001 f882 	bl	800163c <HAL_GPIO_WritePin>
		LCD_FONT_68;				//set Fontsize 6x8px
 8000538:	2201      	movs	r2, #1
 800053a:	2101      	movs	r1, #1
 800053c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000540:	f001 f87c 	bl	800163c <HAL_GPIO_WritePin>
		LCD_XY_SIZE.column = 40;	//set LCD size struct to 40 Columns
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2228      	movs	r2, #40	; 0x28
 8000548:	701a      	strb	r2, [r3, #0]
		LCD_XY_SIZE.row = 16;		//set LCD size struct to 16 Row
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2210      	movs	r2, #16
 800054e:	705a      	strb	r2, [r3, #1]
		WriteData_16bit(LCD_setTextArea, 0x0028);	//set TextArea to 32 Columns
 8000550:	2228      	movs	r2, #40	; 0x28
 8000552:	2141      	movs	r1, #65	; 0x41
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f000 f8e6 	bl	8000726 <_ZN9LCDDriver15WriteData_16bitEht>
		LCD_FONT_88;				//set Fontsize 6x8px
		LCD_XY_SIZE.column = 32;	//set LCD size struct to 40 Columns
		LCD_XY_SIZE.row = 16;		//set LCD size struct to 16 Row
		WriteData_16bit(LCD_setTextArea, 0x0020);	//set TextArea to 40 Columns
	}
}
 800055a:	e019      	b.n	8000590 <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E+0x76>
	else if(size == SIZE_32C){
 800055c:	78fb      	ldrb	r3, [r7, #3]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d116      	bne.n	8000590 <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E+0x76>
		LCD_SIZE_32;				//set size 40 Columns
 8000562:	2201      	movs	r2, #1
 8000564:	2102      	movs	r1, #2
 8000566:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056a:	f001 f867 	bl	800163c <HAL_GPIO_WritePin>
		LCD_FONT_88;				//set Fontsize 6x8px
 800056e:	2200      	movs	r2, #0
 8000570:	2101      	movs	r1, #1
 8000572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000576:	f001 f861 	bl	800163c <HAL_GPIO_WritePin>
		LCD_XY_SIZE.column = 32;	//set LCD size struct to 40 Columns
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2220      	movs	r2, #32
 800057e:	701a      	strb	r2, [r3, #0]
		LCD_XY_SIZE.row = 16;		//set LCD size struct to 16 Row
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2210      	movs	r2, #16
 8000584:	705a      	strb	r2, [r3, #1]
		WriteData_16bit(LCD_setTextArea, 0x0020);	//set TextArea to 40 Columns
 8000586:	2220      	movs	r2, #32
 8000588:	2141      	movs	r1, #65	; 0x41
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f000 f8cb 	bl	8000726 <_ZN9LCDDriver15WriteData_16bitEht>
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <_ZN9LCDDriver12ClearDisplayEv>:
 * clears the whole LCD depending on the selected size
 *
 * @param  : none
 * @return : none
 */
void LCDDriver::ClearDisplay(){
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	for(uint16_t counter = 0; counter<LCD_XY_SIZE.column*LCD_XY_SIZE.row; counter++){
 80005a0:	2300      	movs	r3, #0
 80005a2:	81fb      	strh	r3, [r7, #14]
 80005a4:	89fa      	ldrh	r2, [r7, #14]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	4619      	mov	r1, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	785b      	ldrb	r3, [r3, #1]
 80005b0:	fb03 f301 	mul.w	r3, r3, r1
 80005b4:	429a      	cmp	r2, r3
 80005b6:	da08      	bge.n	80005ca <_ZN9LCDDriver12ClearDisplayEv+0x32>
		WriteData_16bit(LCD_dataWriteAndIncrementADP, 0x00);
 80005b8:	2200      	movs	r2, #0
 80005ba:	21c0      	movs	r1, #192	; 0xc0
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f000 f8b2 	bl	8000726 <_ZN9LCDDriver15WriteData_16bitEht>
	for(uint16_t counter = 0; counter<LCD_XY_SIZE.column*LCD_XY_SIZE.row; counter++){
 80005c2:	89fb      	ldrh	r3, [r7, #14]
 80005c4:	3301      	adds	r3, #1
 80005c6:	81fb      	strh	r3, [r7, #14]
 80005c8:	e7ec      	b.n	80005a4 <_ZN9LCDDriver12ClearDisplayEv+0xc>
	}
	WriteData_8bit(LCD_OR_mode |LCD_InternalCGROM_mode);
 80005ca:	2180      	movs	r1, #128	; 0x80
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f000 f822 	bl	8000616 <_ZN9LCDDriver14WriteData_8bitEh>
}
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <_ZN9LCDDriver17SetAddressPointerEhh>:
 *
 * @param column: the chosen Column
 * @param row: the chosen Row
 * @return : none;
 */
void LCDDriver::SetAddressPointer(uint8_t column, uint8_t row){
 80005da:	b580      	push	{r7, lr}
 80005dc:	b084      	sub	sp, #16
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
 80005e2:	460b      	mov	r3, r1
 80005e4:	70fb      	strb	r3, [r7, #3]
 80005e6:	4613      	mov	r3, r2
 80005e8:	70bb      	strb	r3, [r7, #2]
	uint16_t LCDPointer = row*LCD_XY_SIZE.column + column;	//calculate the AdressPointer depending on the selected LCD Size
 80005ea:	78bb      	ldrb	r3, [r7, #2]
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	fb12 f303 	smulbb	r3, r2, r3
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	78fb      	ldrb	r3, [r7, #3]
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	4413      	add	r3, r2
 8000600:	81fb      	strh	r3, [r7, #14]
	WriteData_16bit(LCD_setAddressPointer, LCDPointer);		//set the AdressPointer
 8000602:	89fb      	ldrh	r3, [r7, #14]
 8000604:	461a      	mov	r2, r3
 8000606:	2124      	movs	r1, #36	; 0x24
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f000 f88c 	bl	8000726 <_ZN9LCDDriver15WriteData_16bitEht>
}
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <_ZN9LCDDriver14WriteData_8bitEh>:


bool LCDDriver::WriteData_8bit(uint8_t addr){
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
 800061e:	460b      	mov	r3, r1
 8000620:	70fb      	strb	r3, [r7, #3]
	LCD_OUTPUT_ENABLE;
 8000622:	2201      	movs	r2, #1
 8000624:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062c:	f001 f806 	bl	800163c <HAL_GPIO_WritePin>


	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
 8000630:	2132      	movs	r1, #50	; 0x32
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f000 f90b 	bl	800084e <_ZN9LCDDriver11CheckStatusEh>
 8000638:	4603      	mov	r3, r0
 800063a:	2b01      	cmp	r3, #1
 800063c:	bf0c      	ite	eq
 800063e:	2301      	moveq	r3, #1
 8000640:	2300      	movne	r3, #0
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <_ZN9LCDDriver14WriteData_8bitEh+0x36>
		return false;
 8000648:	2300      	movs	r3, #0
 800064a:	e015      	b.n	8000678 <_ZN9LCDDriver14WriteData_8bitEh+0x62>
	}
	WriteDataPin(addr);
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	4619      	mov	r1, r3
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f000 fa13 	bl	8000a7c <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_COMMAND;
 8000656:	2201      	movs	r2, #1
 8000658:	2104      	movs	r1, #4
 800065a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065e:	f000 ffed 	bl	800163c <HAL_GPIO_WritePin>
	PushData();
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f000 f8d1 	bl	800080a <_ZN9LCDDriver8PushDataEv>

	LCD_OUTPUT_DISABLE;
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800066e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000672:	f000 ffe3 	bl	800163c <HAL_GPIO_WritePin>
	return true;
 8000676:	2301      	movs	r3, #1
}
 8000678:	4618      	mov	r0, r3
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <_ZN9LCDDriver14WriteData_8bitEhh>:


bool LCDDriver::WriteData_8bit(uint8_t addr, uint8_t data){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	70fb      	strb	r3, [r7, #3]
 800068c:	4613      	mov	r3, r2
 800068e:	70bb      	strb	r3, [r7, #2]
	LCD_OUTPUT_ENABLE;
 8000690:	2201      	movs	r2, #1
 8000692:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069a:	f000 ffcf 	bl	800163c <HAL_GPIO_WritePin>

	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
 800069e:	2132      	movs	r1, #50	; 0x32
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f000 f8d4 	bl	800084e <_ZN9LCDDriver11CheckStatusEh>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	bf0c      	ite	eq
 80006ac:	2301      	moveq	r3, #1
 80006ae:	2300      	movne	r3, #0
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <_ZN9LCDDriver14WriteData_8bitEhh+0x3a>
		return false;
 80006b6:	2300      	movs	r3, #0
 80006b8:	e031      	b.n	800071e <_ZN9LCDDriver14WriteData_8bitEhh+0x9e>
	}
	WriteDataPin(data);
 80006ba:	78bb      	ldrb	r3, [r7, #2]
 80006bc:	4619      	mov	r1, r3
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f000 f9dc 	bl	8000a7c <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_DATA;
 80006c4:	2200      	movs	r2, #0
 80006c6:	2104      	movs	r1, #4
 80006c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006cc:	f000 ffb6 	bl	800163c <HAL_GPIO_WritePin>
	PushData();
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f000 f89a 	bl	800080a <_ZN9LCDDriver8PushDataEv>

	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
 80006d6:	2132      	movs	r1, #50	; 0x32
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f000 f8b8 	bl	800084e <_ZN9LCDDriver11CheckStatusEh>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	bf0c      	ite	eq
 80006e4:	2301      	moveq	r3, #1
 80006e6:	2300      	movne	r3, #0
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <_ZN9LCDDriver14WriteData_8bitEhh+0x72>
		return false;
 80006ee:	2300      	movs	r3, #0
 80006f0:	e015      	b.n	800071e <_ZN9LCDDriver14WriteData_8bitEhh+0x9e>
	}
	WriteDataPin(addr);
 80006f2:	78fb      	ldrb	r3, [r7, #3]
 80006f4:	4619      	mov	r1, r3
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f000 f9c0 	bl	8000a7c <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_COMMAND;
 80006fc:	2201      	movs	r2, #1
 80006fe:	2104      	movs	r1, #4
 8000700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000704:	f000 ff9a 	bl	800163c <HAL_GPIO_WritePin>
	PushData();
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f000 f87e 	bl	800080a <_ZN9LCDDriver8PushDataEv>

	LCD_OUTPUT_DISABLE;
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000718:	f000 ff90 	bl	800163c <HAL_GPIO_WritePin>
	return true;
 800071c:	2301      	movs	r3, #1
}
 800071e:	4618      	mov	r0, r3
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <_ZN9LCDDriver15WriteData_16bitEht>:

bool LCDDriver::WriteData_16bit(uint8_t addr, uint16_t data){
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
 800072e:	460b      	mov	r3, r1
 8000730:	70fb      	strb	r3, [r7, #3]
 8000732:	4613      	mov	r3, r2
 8000734:	803b      	strh	r3, [r7, #0]
	LCD_OUTPUT_ENABLE;
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800073c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000740:	f000 ff7c 	bl	800163c <HAL_GPIO_WritePin>

	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
 8000744:	2132      	movs	r1, #50	; 0x32
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f000 f881 	bl	800084e <_ZN9LCDDriver11CheckStatusEh>
 800074c:	4603      	mov	r3, r0
 800074e:	2b01      	cmp	r3, #1
 8000750:	bf0c      	ite	eq
 8000752:	2301      	moveq	r3, #1
 8000754:	2300      	movne	r3, #0
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <_ZN9LCDDriver15WriteData_16bitEht+0x3a>
		return false;
 800075c:	2300      	movs	r3, #0
 800075e:	e050      	b.n	8000802 <_ZN9LCDDriver15WriteData_16bitEht+0xdc>
	}
	WriteDataPin((uint8_t)data);
 8000760:	883b      	ldrh	r3, [r7, #0]
 8000762:	b2db      	uxtb	r3, r3
 8000764:	4619      	mov	r1, r3
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f000 f988 	bl	8000a7c <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_DATA;
 800076c:	2200      	movs	r2, #0
 800076e:	2104      	movs	r1, #4
 8000770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000774:	f000 ff62 	bl	800163c <HAL_GPIO_WritePin>
	PushData();
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f000 f846 	bl	800080a <_ZN9LCDDriver8PushDataEv>

	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
 800077e:	2132      	movs	r1, #50	; 0x32
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 f864 	bl	800084e <_ZN9LCDDriver11CheckStatusEh>
 8000786:	4603      	mov	r3, r0
 8000788:	2b01      	cmp	r3, #1
 800078a:	bf0c      	ite	eq
 800078c:	2301      	moveq	r3, #1
 800078e:	2300      	movne	r3, #0
 8000790:	b2db      	uxtb	r3, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <_ZN9LCDDriver15WriteData_16bitEht+0x74>
		return false;
 8000796:	2300      	movs	r3, #0
 8000798:	e033      	b.n	8000802 <_ZN9LCDDriver15WriteData_16bitEht+0xdc>
	}
	WriteDataPin((uint8_t)(data>>8));
 800079a:	883b      	ldrh	r3, [r7, #0]
 800079c:	121b      	asrs	r3, r3, #8
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	4619      	mov	r1, r3
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 f96a 	bl	8000a7c <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_DATA;
 80007a8:	2200      	movs	r2, #0
 80007aa:	2104      	movs	r1, #4
 80007ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b0:	f000 ff44 	bl	800163c <HAL_GPIO_WritePin>
	PushData();
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 f828 	bl	800080a <_ZN9LCDDriver8PushDataEv>

	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
 80007ba:	2132      	movs	r1, #50	; 0x32
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f000 f846 	bl	800084e <_ZN9LCDDriver11CheckStatusEh>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	bf0c      	ite	eq
 80007c8:	2301      	moveq	r3, #1
 80007ca:	2300      	movne	r3, #0
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <_ZN9LCDDriver15WriteData_16bitEht+0xb0>
		return false;
 80007d2:	2300      	movs	r3, #0
 80007d4:	e015      	b.n	8000802 <_ZN9LCDDriver15WriteData_16bitEht+0xdc>
	}
	WriteDataPin(addr);
 80007d6:	78fb      	ldrb	r3, [r7, #3]
 80007d8:	4619      	mov	r1, r3
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f000 f94e 	bl	8000a7c <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_COMMAND;
 80007e0:	2201      	movs	r2, #1
 80007e2:	2104      	movs	r1, #4
 80007e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e8:	f000 ff28 	bl	800163c <HAL_GPIO_WritePin>
	PushData();
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f000 f80c 	bl	800080a <_ZN9LCDDriver8PushDataEv>

	LCD_OUTPUT_DISABLE;
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fc:	f000 ff1e 	bl	800163c <HAL_GPIO_WritePin>
	return true;
 8000800:	2301      	movs	r3, #1
}
 8000802:	4618      	mov	r0, r3
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <_ZN9LCDDriver8PushDataEv>:

void LCDDriver::PushData(){
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
	//toggle WR and Enable PIN so that the LCD reads the data
	LCD_WR_RESET;
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081c:	f000 ff0e 	bl	800163c <HAL_GPIO_WritePin>
	LCD_ENABLE;
 8000820:	2200      	movs	r2, #0
 8000822:	2110      	movs	r1, #16
 8000824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000828:	f000 ff08 	bl	800163c <HAL_GPIO_WritePin>
	LCD_DISABLE;
 800082c:	2201      	movs	r2, #1
 800082e:	2110      	movs	r1, #16
 8000830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000834:	f000 ff02 	bl	800163c <HAL_GPIO_WritePin>
	LCD_WR_SET;
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800083e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000842:	f000 fefb 	bl	800163c <HAL_GPIO_WritePin>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <_ZN9LCDDriver11CheckStatusEh>:
 * Checking LCD Status register
 *
 * @param timeOut: timeout for statuscheck
 * @return LCD_STATUS: lcdStatus Error / OK
 */
LCDDriver::LCD_STATUS LCDDriver::CheckStatus(uint8_t timeOut){
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
 8000856:	460b      	mov	r3, r1
 8000858:	70fb      	strb	r3, [r7, #3]
	GPIO_Direction(PIN_INPUT);
 800085a:	2101      	movs	r1, #1
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f000 f8ad 	bl	80009bc <_ZN9LCDDriver14GPIO_DirectionENS_14PIN_DIRECTION_E>

	LCD_ENABLE;
 8000862:	2200      	movs	r2, #0
 8000864:	2110      	movs	r1, #16
 8000866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086a:	f000 fee7 	bl	800163c <HAL_GPIO_WritePin>
	LCD_RD_RESET;
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000878:	f000 fee0 	bl	800163c <HAL_GPIO_WritePin>
	LCD_CD_SET;
 800087c:	2201      	movs	r2, #1
 800087e:	2104      	movs	r1, #4
 8000880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000884:	f000 feda 	bl	800163c <HAL_GPIO_WritePin>

	while(!(ReadDataPin() | 0x02) && timeOut != 0){
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f000 f825 	bl	80008d8 <_ZN9LCDDriver11ReadDataPinEv>
 800088e:	2300      	movs	r3, #0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d006      	beq.n	80008a2 <_ZN9LCDDriver11CheckStatusEh+0x54>
		HAL_Delay(1);
 8000894:	2001      	movs	r0, #1
 8000896:	f000 fc3f 	bl	8001118 <HAL_Delay>
		timeOut--;
 800089a:	78fb      	ldrb	r3, [r7, #3]
 800089c:	3b01      	subs	r3, #1
 800089e:	70fb      	strb	r3, [r7, #3]
	while(!(ReadDataPin() | 0x02) && timeOut != 0){
 80008a0:	e7f2      	b.n	8000888 <_ZN9LCDDriver11CheckStatusEh+0x3a>
	}

	LCD_DISABLE;
 80008a2:	2201      	movs	r2, #1
 80008a4:	2110      	movs	r1, #16
 80008a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008aa:	f000 fec7 	bl	800163c <HAL_GPIO_WritePin>
	LCD_RD_SET;
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b8:	f000 fec0 	bl	800163c <HAL_GPIO_WritePin>
	GPIO_Direction(PIN_OUTPUT);
 80008bc:	2100      	movs	r1, #0
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f000 f87c 	bl	80009bc <_ZN9LCDDriver14GPIO_DirectionENS_14PIN_DIRECTION_E>

	return timeOut != 0 ? LCD_STATUS_OK:LCD_STATUS_ERROR;
 80008c4:	78fb      	ldrb	r3, [r7, #3]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <_ZN9LCDDriver11CheckStatusEh+0x80>
 80008ca:	2300      	movs	r3, #0
 80008cc:	e000      	b.n	80008d0 <_ZN9LCDDriver11CheckStatusEh+0x82>
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <_ZN9LCDDriver11ReadDataPinEv>:
 * Read dataport 0-7
 *
 * @param none
 * @return 8bit data from port 0-7 (msb first)
 */
uint8_t LCDDriver::ReadDataPin(){
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	73fb      	strb	r3, [r7, #15]

	data |= HAL_GPIO_ReadPin(D7_GPIO_Port, D7_Pin);
 80008e4:	2101      	movs	r1, #1
 80008e6:	4833      	ldr	r0, [pc, #204]	; (80009b4 <_ZN9LCDDriver11ReadDataPinEv+0xdc>)
 80008e8:	f000 fe90 	bl	800160c <HAL_GPIO_ReadPin>
 80008ec:	4603      	mov	r3, r0
 80008ee:	b25a      	sxtb	r2, r3
 80008f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	b25b      	sxtb	r3, r3
 80008f8:	73fb      	strb	r3, [r7, #15]
	data = (data<<1) | HAL_GPIO_ReadPin(D6_GPIO_Port, D6_Pin);
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	b25c      	sxtb	r4, r3
 8000900:	2102      	movs	r1, #2
 8000902:	482c      	ldr	r0, [pc, #176]	; (80009b4 <_ZN9LCDDriver11ReadDataPinEv+0xdc>)
 8000904:	f000 fe82 	bl	800160c <HAL_GPIO_ReadPin>
 8000908:	4603      	mov	r3, r0
 800090a:	b25b      	sxtb	r3, r3
 800090c:	4323      	orrs	r3, r4
 800090e:	b25b      	sxtb	r3, r3
 8000910:	73fb      	strb	r3, [r7, #15]
	data = (data<<1) | HAL_GPIO_ReadPin(D5_GPIO_Port, D5_Pin);
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	b25c      	sxtb	r4, r3
 8000918:	2101      	movs	r1, #1
 800091a:	4827      	ldr	r0, [pc, #156]	; (80009b8 <_ZN9LCDDriver11ReadDataPinEv+0xe0>)
 800091c:	f000 fe76 	bl	800160c <HAL_GPIO_ReadPin>
 8000920:	4603      	mov	r3, r0
 8000922:	b25b      	sxtb	r3, r3
 8000924:	4323      	orrs	r3, r4
 8000926:	b25b      	sxtb	r3, r3
 8000928:	73fb      	strb	r3, [r7, #15]
	data = (data<<1) | HAL_GPIO_ReadPin(D4_GPIO_Port, D4_Pin);
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	b25c      	sxtb	r4, r3
 8000930:	2102      	movs	r1, #2
 8000932:	4821      	ldr	r0, [pc, #132]	; (80009b8 <_ZN9LCDDriver11ReadDataPinEv+0xe0>)
 8000934:	f000 fe6a 	bl	800160c <HAL_GPIO_ReadPin>
 8000938:	4603      	mov	r3, r0
 800093a:	b25b      	sxtb	r3, r3
 800093c:	4323      	orrs	r3, r4
 800093e:	b25b      	sxtb	r3, r3
 8000940:	73fb      	strb	r3, [r7, #15]
	data = (data<<1) | HAL_GPIO_ReadPin(D3_GPIO_Port, D3_Pin);
 8000942:	7bfb      	ldrb	r3, [r7, #15]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	b25c      	sxtb	r4, r3
 8000948:	f44f 7180 	mov.w	r1, #256	; 0x100
 800094c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000950:	f000 fe5c 	bl	800160c <HAL_GPIO_ReadPin>
 8000954:	4603      	mov	r3, r0
 8000956:	b25b      	sxtb	r3, r3
 8000958:	4323      	orrs	r3, r4
 800095a:	b25b      	sxtb	r3, r3
 800095c:	73fb      	strb	r3, [r7, #15]
	data = (data<<1) | HAL_GPIO_ReadPin(D2_GPIO_Port, D2_Pin);
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	b25c      	sxtb	r4, r3
 8000964:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096c:	f000 fe4e 	bl	800160c <HAL_GPIO_ReadPin>
 8000970:	4603      	mov	r3, r0
 8000972:	b25b      	sxtb	r3, r3
 8000974:	4323      	orrs	r3, r4
 8000976:	b25b      	sxtb	r3, r3
 8000978:	73fb      	strb	r3, [r7, #15]
	data = (data<<1) | HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin);
 800097a:	7bfb      	ldrb	r3, [r7, #15]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	b25c      	sxtb	r4, r3
 8000980:	2120      	movs	r1, #32
 8000982:	480c      	ldr	r0, [pc, #48]	; (80009b4 <_ZN9LCDDriver11ReadDataPinEv+0xdc>)
 8000984:	f000 fe42 	bl	800160c <HAL_GPIO_ReadPin>
 8000988:	4603      	mov	r3, r0
 800098a:	b25b      	sxtb	r3, r3
 800098c:	4323      	orrs	r3, r4
 800098e:	b25b      	sxtb	r3, r3
 8000990:	73fb      	strb	r3, [r7, #15]
	data = (data<<1) | HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin);
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	b25c      	sxtb	r4, r3
 8000998:	2110      	movs	r1, #16
 800099a:	4806      	ldr	r0, [pc, #24]	; (80009b4 <_ZN9LCDDriver11ReadDataPinEv+0xdc>)
 800099c:	f000 fe36 	bl	800160c <HAL_GPIO_ReadPin>
 80009a0:	4603      	mov	r3, r0
 80009a2:	b25b      	sxtb	r3, r3
 80009a4:	4323      	orrs	r3, r4
 80009a6:	b25b      	sxtb	r3, r3
 80009a8:	73fb      	strb	r3, [r7, #15]

	return data;
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd90      	pop	{r4, r7, pc}
 80009b4:	48000400 	.word	0x48000400
 80009b8:	48001400 	.word	0x48001400

080009bc <_ZN9LCDDriver14GPIO_DirectionENS_14PIN_DIRECTION_E>:


void LCDDriver::GPIO_Direction(PIN_DIRECTION pinDirection){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b092      	sub	sp, #72	; 0x48
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	460b      	mov	r3, r1
 80009c6:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct_1 = {0};
 80009c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
	GPIO_InitTypeDef GPIO_InitStruct_2 = {0};
 80009d8:	f107 0320 	add.w	r3, r7, #32
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
	GPIO_InitTypeDef GPIO_InitStruct_3 = {0};
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct_1.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct_1.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	643b      	str	r3, [r7, #64]	; 0x40
	GPIO_InitStruct_2.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct_2.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct_3.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct_3.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]

	GPIO_InitStruct_1.Pin = D5_Pin|D4_Pin;
 8000a10:	2303      	movs	r3, #3
 8000a12:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct_2.Pin = D7_Pin|D6_Pin|D0_Pin|D1_Pin;
 8000a14:	2333      	movs	r3, #51	; 0x33
 8000a16:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct_3.Pin = D2_Pin|D3_Pin;
 8000a18:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000a1c:	60fb      	str	r3, [r7, #12]


	if(pinDirection == PIN_INPUT){
 8000a1e:	78fb      	ldrb	r3, [r7, #3]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d106      	bne.n	8000a32 <_ZN9LCDDriver14GPIO_DirectionENS_14PIN_DIRECTION_E+0x76>
		GPIO_InitStruct_1.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct_2.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct_3.Mode = GPIO_MODE_INPUT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	e008      	b.n	8000a44 <_ZN9LCDDriver14GPIO_DirectionENS_14PIN_DIRECTION_E+0x88>
	}
	else if(pinDirection == PIN_OUTPUT){
 8000a32:	78fb      	ldrb	r3, [r7, #3]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d105      	bne.n	8000a44 <_ZN9LCDDriver14GPIO_DirectionENS_14PIN_DIRECTION_E+0x88>
		GPIO_InitStruct_1.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct_2.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct_3.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	613b      	str	r3, [r7, #16]
	}

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct_1);
 8000a44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4e:	f000 fc6b 	bl	8001328 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct_2);
 8000a52:	f107 0320 	add.w	r3, r7, #32
 8000a56:	4619      	mov	r1, r3
 8000a58:	4806      	ldr	r0, [pc, #24]	; (8000a74 <_ZN9LCDDriver14GPIO_DirectionENS_14PIN_DIRECTION_E+0xb8>)
 8000a5a:	f000 fc65 	bl	8001328 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct_3);
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	4619      	mov	r1, r3
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <_ZN9LCDDriver14GPIO_DirectionENS_14PIN_DIRECTION_E+0xbc>)
 8000a66:	f000 fc5f 	bl	8001328 <HAL_GPIO_Init>
}
 8000a6a:	bf00      	nop
 8000a6c:	3748      	adds	r7, #72	; 0x48
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	48000400 	.word	0x48000400
 8000a78:	48001400 	.word	0x48001400

08000a7c <_ZN9LCDDriver12WriteDataPinEh>:


void LCDDriver::WriteDataPin(uint8_t data){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	460b      	mov	r3, r1
 8000a86:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, (GPIO_PinState)(data & 0x01));
 8000a88:	78fb      	ldrb	r3, [r7, #3]
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	461a      	mov	r2, r3
 8000a92:	2110      	movs	r1, #16
 8000a94:	4824      	ldr	r0, [pc, #144]	; (8000b28 <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000a96:	f000 fdd1 	bl	800163c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, (GPIO_PinState)(data & 0x02));
 8000a9a:	78fb      	ldrb	r3, [r7, #3]
 8000a9c:	f003 0302 	and.w	r3, r3, #2
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	2120      	movs	r1, #32
 8000aa6:	4820      	ldr	r0, [pc, #128]	; (8000b28 <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000aa8:	f000 fdc8 	bl	800163c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, (GPIO_PinState)(data & 0x04));
 8000aac:	78fb      	ldrb	r3, [r7, #3]
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000abe:	f000 fdbd 	bl	800163c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, (GPIO_PinState)(data & 0x08));
 8000ac2:	78fb      	ldrb	r3, [r7, #3]
 8000ac4:	f003 0308 	and.w	r3, r3, #8
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	461a      	mov	r2, r3
 8000acc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad4:	f000 fdb2 	bl	800163c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (GPIO_PinState)(data & 0x10));
 8000ad8:	78fb      	ldrb	r3, [r7, #3]
 8000ada:	f003 0310 	and.w	r3, r3, #16
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	4811      	ldr	r0, [pc, #68]	; (8000b2c <_ZN9LCDDriver12WriteDataPinEh+0xb0>)
 8000ae6:	f000 fda9 	bl	800163c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (GPIO_PinState)(data & 0x20));
 8000aea:	78fb      	ldrb	r3, [r7, #3]
 8000aec:	f003 0320 	and.w	r3, r3, #32
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	461a      	mov	r2, r3
 8000af4:	2101      	movs	r1, #1
 8000af6:	480d      	ldr	r0, [pc, #52]	; (8000b2c <_ZN9LCDDriver12WriteDataPinEh+0xb0>)
 8000af8:	f000 fda0 	bl	800163c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (GPIO_PinState)(data & 0x40));
 8000afc:	78fb      	ldrb	r3, [r7, #3]
 8000afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	461a      	mov	r2, r3
 8000b06:	2102      	movs	r1, #2
 8000b08:	4807      	ldr	r0, [pc, #28]	; (8000b28 <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000b0a:	f000 fd97 	bl	800163c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (GPIO_PinState)(data & 0x80));
 8000b0e:	78fb      	ldrb	r3, [r7, #3]
 8000b10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	461a      	mov	r2, r3
 8000b18:	2101      	movs	r1, #1
 8000b1a:	4803      	ldr	r0, [pc, #12]	; (8000b28 <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000b1c:	f000 fd8e 	bl	800163c <HAL_GPIO_WritePin>

}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	48000400 	.word	0x48000400
 8000b2c:	48001400 	.word	0x48001400

08000b30 <_ZN9LCDDriver5ResetEv>:
 * Reset LCD
 *
 * @param none
 * @return none
 */
void LCDDriver::Reset(){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	LCD_RST_L;
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2108      	movs	r1, #8
 8000b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b40:	f000 fd7c 	bl	800163c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b44:	2001      	movs	r0, #1
 8000b46:	f000 fae7 	bl	8001118 <HAL_Delay>
	LCD_RST_H;
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2108      	movs	r1, #8
 8000b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b52:	f000 fd73 	bl	800163c <HAL_GPIO_WritePin>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b76:	4b32      	ldr	r3, [pc, #200]	; (8000c40 <MX_GPIO_Init+0xe0>)
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	4a31      	ldr	r2, [pc, #196]	; (8000c40 <MX_GPIO_Init+0xe0>)
 8000b7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b80:	6153      	str	r3, [r2, #20]
 8000b82:	4b2f      	ldr	r3, [pc, #188]	; (8000c40 <MX_GPIO_Init+0xe0>)
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <MX_GPIO_Init+0xe0>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	4a2b      	ldr	r2, [pc, #172]	; (8000c40 <MX_GPIO_Init+0xe0>)
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b98:	6153      	str	r3, [r2, #20]
 8000b9a:	4b29      	ldr	r3, [pc, #164]	; (8000c40 <MX_GPIO_Init+0xe0>)
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <MX_GPIO_Init+0xe0>)
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	4a25      	ldr	r2, [pc, #148]	; (8000c40 <MX_GPIO_Init+0xe0>)
 8000bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bb0:	6153      	str	r3, [r2, #20]
 8000bb2:	4b23      	ldr	r3, [pc, #140]	; (8000c40 <MX_GPIO_Init+0xe0>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2103      	movs	r1, #3
 8000bc2:	4820      	ldr	r0, [pc, #128]	; (8000c44 <MX_GPIO_Init+0xe4>)
 8000bc4:	f000 fd3a 	bl	800163c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FS_Pin|MD2_Pin|CD_Pin|RESET_Pin 
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f641 711f 	movw	r1, #7967	; 0x1f1f
 8000bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd2:	f000 fd33 	bl	800163c <HAL_GPIO_WritePin>
                          |CE_Pin|D3_Pin|RD_Pin|WR_Pin 
                          |D2_Pin|OE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D6_Pin|D0_Pin|D1_Pin, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2133      	movs	r1, #51	; 0x33
 8000bda:	481b      	ldr	r0, [pc, #108]	; (8000c48 <MX_GPIO_Init+0xe8>)
 8000bdc:	f000 fd2e 	bl	800163c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = D5_Pin|D4_Pin;
 8000be0:	2303      	movs	r3, #3
 8000be2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4813      	ldr	r0, [pc, #76]	; (8000c44 <MX_GPIO_Init+0xe4>)
 8000bf8:	f000 fb96 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = FS_Pin|MD2_Pin|CD_Pin|RESET_Pin 
 8000bfc:	f641 731f 	movw	r3, #7967	; 0x1f1f
 8000c00:	60fb      	str	r3, [r7, #12]
                          |CE_Pin|D3_Pin|RD_Pin|WR_Pin 
                          |D2_Pin|OE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	4619      	mov	r1, r3
 8000c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c18:	f000 fb86 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D0_Pin|D1_Pin;
 8000c1c:	2333      	movs	r3, #51	; 0x33
 8000c1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	4619      	mov	r1, r3
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_GPIO_Init+0xe8>)
 8000c34:	f000 fb78 	bl	8001328 <HAL_GPIO_Init>

}
 8000c38:	bf00      	nop
 8000c3a:	3720      	adds	r7, #32
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40021000 	.word	0x40021000
 8000c44:	48001400 	.word	0x48001400
 8000c48:	48000400 	.word	0x48000400

08000c4c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <MX_I2C1_Init+0x74>)
 8000c52:	4a1c      	ldr	r2, [pc, #112]	; (8000cc4 <MX_I2C1_Init+0x78>)
 8000c54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000c56:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <MX_I2C1_Init+0x74>)
 8000c58:	4a1b      	ldr	r2, [pc, #108]	; (8000cc8 <MX_I2C1_Init+0x7c>)
 8000c5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c5c:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <MX_I2C1_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c62:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <MX_I2C1_Init+0x74>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <MX_I2C1_Init+0x74>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c6e:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <MX_I2C1_Init+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <MX_I2C1_Init+0x74>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_I2C1_Init+0x74>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_I2C1_Init+0x74>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c86:	480e      	ldr	r0, [pc, #56]	; (8000cc0 <MX_I2C1_Init+0x74>)
 8000c88:	f000 fcf0 	bl	800166c <HAL_I2C_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c92:	f000 f8d6 	bl	8000e42 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c96:	2100      	movs	r1, #0
 8000c98:	4809      	ldr	r0, [pc, #36]	; (8000cc0 <MX_I2C1_Init+0x74>)
 8000c9a:	f000 fd76 	bl	800178a <HAL_I2CEx_ConfigAnalogFilter>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ca4:	f000 f8cd 	bl	8000e42 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_I2C1_Init+0x74>)
 8000cac:	f000 fdb8 	bl	8001820 <HAL_I2CEx_ConfigDigitalFilter>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cb6:	f000 f8c4 	bl	8000e42 <Error_Handler>
  }

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200000a0 	.word	0x200000a0
 8000cc4:	40005400 	.word	0x40005400
 8000cc8:	00201d2b 	.word	0x00201d2b

08000ccc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a17      	ldr	r2, [pc, #92]	; (8000d48 <HAL_I2C_MspInit+0x7c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d127      	bne.n	8000d3e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <HAL_I2C_MspInit+0x80>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	4a16      	ldr	r2, [pc, #88]	; (8000d4c <HAL_I2C_MspInit+0x80>)
 8000cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf8:	6153      	str	r3, [r2, #20]
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <HAL_I2C_MspInit+0x80>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d06:	23c0      	movs	r3, #192	; 0xc0
 8000d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d0a:	2312      	movs	r3, #18
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d12:	2303      	movs	r3, #3
 8000d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d16:	2304      	movs	r3, #4
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	480b      	ldr	r0, [pc, #44]	; (8000d50 <HAL_I2C_MspInit+0x84>)
 8000d22:	f000 fb01 	bl	8001328 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_I2C_MspInit+0x80>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <HAL_I2C_MspInit+0x80>)
 8000d2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d30:	61d3      	str	r3, [r2, #28]
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_I2C_MspInit+0x80>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3728      	adds	r7, #40	; 0x28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40005400 	.word	0x40005400
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	48000400 	.word	0x48000400

08000d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000d58:	f000 f978 	bl	800104c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5c:	f000 f80a 	bl	8000d74 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d60:	f7ff fefe 	bl	8000b60 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d64:	f7ff ff72 	bl	8000c4c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
 // HAL_I2C_MspInit(&hi2c1);
  appMain.main();
 8000d68:	4801      	ldr	r0, [pc, #4]	; (8000d70 <main+0x1c>)
 8000d6a:	f7ff fa43 	bl	80001f4 <_ZN7AppMain4mainEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <main+0x1a>
 8000d70:	2000008c 	.word	0x2000008c

08000d74 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b096      	sub	sp, #88	; 0x58
 8000d78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d7e:	2228      	movs	r2, #40	; 0x28
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f002 f895 	bl	8002eb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d88:	f107 031c 	add.w	r3, r7, #28
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]
 8000da6:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000da8:	2302      	movs	r3, #2
 8000daa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dac:	2301      	movs	r3, #1
 8000dae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db0:	2310      	movs	r3, #16
 8000db2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db4:	2302      	movs	r3, #2
 8000db6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000db8:	2300      	movs	r3, #0
 8000dba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000dbc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000dc0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 fd76 	bl	80018b8 <HAL_RCC_OscConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	bf14      	ite	ne
 8000dd2:	2301      	movne	r3, #1
 8000dd4:	2300      	moveq	r3, #0
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <_Z18SystemClock_Configv+0x6c>
  {
    Error_Handler();
 8000ddc:	f000 f831 	bl	8000e42 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de0:	230f      	movs	r3, #15
 8000de2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de4:	2302      	movs	r3, #2
 8000de6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	2102      	movs	r1, #2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f001 fc63 	bl	80026c8 <HAL_RCC_ClockConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	bf14      	ite	ne
 8000e08:	2301      	movne	r3, #1
 8000e0a:	2300      	moveq	r3, #0
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000e12:	f000 f816 	bl	8000e42 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e16:	2320      	movs	r3, #32
 8000e18:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	4618      	mov	r0, r3
 8000e22:	f001 fe37 	bl	8002a94 <HAL_RCCEx_PeriphCLKConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	bf14      	ite	ne
 8000e2c:	2301      	movne	r3, #1
 8000e2e:	2300      	moveq	r3, #0
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 8000e36:	f000 f804 	bl	8000e42 <Error_Handler>
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	3758      	adds	r7, #88	; 0x58
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <_Z41__static_initialization_and_destruction_0ii>:
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d107      	bne.n	8000e70 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d102      	bne.n	8000e70 <_Z41__static_initialization_and_destruction_0ii+0x20>
static AppMain appMain;
 8000e6a:	4803      	ldr	r0, [pc, #12]	; (8000e78 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000e6c:	f7ff f9b4 	bl	80001d8 <_ZN7AppMainC1Ev>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	2000008c 	.word	0x2000008c

08000e7c <_GLOBAL__sub_I_main>:
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e84:	2001      	movs	r0, #1
 8000e86:	f7ff ffe3 	bl	8000e50 <_Z41__static_initialization_and_destruction_0ii>
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_MspInit+0x44>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_MspInit+0x44>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6193      	str	r3, [r2, #24]
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <HAL_MspInit+0x44>)
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb4:	61d3      	str	r3, [r2, #28]
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <MemManage_Handler+0x4>

08000eee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f28:	f000 f8d6 	bl	80010d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
	return 1;
 8000f34:	2301      	movs	r3, #1
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <_kill>:

int _kill(int pid, int sig)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f4a:	f001 ff6d 	bl	8002e28 <__errno>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	2316      	movs	r3, #22
 8000f52:	6013      	str	r3, [r2, #0]
	return -1;
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <_exit>:

void _exit (int status)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ffe7 	bl	8000f40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f72:	e7fe      	b.n	8000f72 <_exit+0x12>

08000f74 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <_sbrk+0x50>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d102      	bne.n	8000f8a <_sbrk+0x16>
		heap_end = &end;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <_sbrk+0x50>)
 8000f86:	4a10      	ldr	r2, [pc, #64]	; (8000fc8 <_sbrk+0x54>)
 8000f88:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <_sbrk+0x50>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <_sbrk+0x50>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4413      	add	r3, r2
 8000f98:	466a      	mov	r2, sp
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d907      	bls.n	8000fae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f9e:	f001 ff43 	bl	8002e28 <__errno>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	230c      	movs	r3, #12
 8000fa6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fac:	e006      	b.n	8000fbc <_sbrk+0x48>
	}

	heap_end += incr;
 8000fae:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <_sbrk+0x50>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	4a03      	ldr	r2, [pc, #12]	; (8000fc4 <_sbrk+0x50>)
 8000fb8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000fba:	68fb      	ldr	r3, [r7, #12]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000090 	.word	0x20000090
 8000fc8:	200000f8 	.word	0x200000f8

08000fcc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <SystemInit+0x28>)
 8000fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd6:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <SystemInit+0x28>)
 8000fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <SystemInit+0x28>)
 8000fe2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fe6:	609a      	str	r2, [r3, #8]
#endif
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ff8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001030 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ffc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ffe:	e003      	b.n	8001008 <LoopCopyDataInit>

08001000 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001002:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001004:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001006:	3104      	adds	r1, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001008:	480b      	ldr	r0, [pc, #44]	; (8001038 <LoopForever+0xa>)
	ldr	r3, =_edata
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <LoopForever+0xe>)
	adds	r2, r0, r1
 800100c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800100e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001010:	d3f6      	bcc.n	8001000 <CopyDataInit>
	ldr	r2, =_sbss
 8001012:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001014:	e002      	b.n	800101c <LoopFillZerobss>

08001016 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001016:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001018:	f842 3b04 	str.w	r3, [r2], #4

0800101c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <LoopForever+0x16>)
	cmp	r2, r3
 800101e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001020:	d3f9      	bcc.n	8001016 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001022:	f7ff ffd3 	bl	8000fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001026:	f001 ff05 	bl	8002e34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800102a:	f7ff fe93 	bl	8000d54 <main>

0800102e <LoopForever>:

LoopForever:
    b LoopForever
 800102e:	e7fe      	b.n	800102e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001030:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001034:	08003208 	.word	0x08003208
	ldr	r0, =_sdata
 8001038:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800103c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001040:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001044:	200000f4 	.word	0x200000f4

08001048 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001048:	e7fe      	b.n	8001048 <ADC1_2_IRQHandler>
	...

0800104c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <HAL_Init+0x28>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a07      	ldr	r2, [pc, #28]	; (8001074 <HAL_Init+0x28>)
 8001056:	f043 0310 	orr.w	r3, r3, #16
 800105a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105c:	2003      	movs	r0, #3
 800105e:	f000 f92f 	bl	80012c0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001062:	2000      	movs	r0, #0
 8001064:	f000 f808 	bl	8001078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001068:	f7ff ff10 	bl	8000e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40022000 	.word	0x40022000

08001078 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_InitTick+0x54>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_InitTick+0x58>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001092:	fbb2 f3f3 	udiv	r3, r2, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f939 	bl	800130e <HAL_SYSTICK_Config>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00e      	b.n	80010c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b0f      	cmp	r3, #15
 80010aa:	d80a      	bhi.n	80010c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ac:	2200      	movs	r2, #0
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f000 f90f 	bl	80012d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b8:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <HAL_InitTick+0x5c>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	e000      	b.n	80010c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000000 	.word	0x20000000
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000004 	.word	0x20000004

080010d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_IncTick+0x20>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_IncTick+0x24>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <HAL_IncTick+0x24>)
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000008 	.word	0x20000008
 80010fc:	200000ec 	.word	0x200000ec

08001100 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return uwTick;  
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <HAL_GetTick+0x14>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	200000ec 	.word	0x200000ec

08001118 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff ffee 	bl	8001100 <HAL_GetTick>
 8001124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001130:	d005      	beq.n	800113e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <HAL_Delay+0x40>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4413      	add	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800113e:	bf00      	nop
 8001140:	f7ff ffde 	bl	8001100 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	429a      	cmp	r2, r3
 800114e:	d8f7      	bhi.n	8001140 <HAL_Delay+0x28>
  {
  }
}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000008 	.word	0x20000008

0800115c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <__NVIC_SetPriorityGrouping+0x44>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001178:	4013      	ands	r3, r2
 800117a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800118c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118e:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	60d3      	str	r3, [r2, #12]
}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <__NVIC_GetPriorityGrouping+0x18>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	f003 0307 	and.w	r3, r3, #7
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	db0a      	blt.n	80011ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	490c      	ldr	r1, [pc, #48]	; (800120c <__NVIC_SetPriority+0x4c>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	0112      	lsls	r2, r2, #4
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	440b      	add	r3, r1
 80011e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e8:	e00a      	b.n	8001200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4908      	ldr	r1, [pc, #32]	; (8001210 <__NVIC_SetPriority+0x50>)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	3b04      	subs	r3, #4
 80011f8:	0112      	lsls	r2, r2, #4
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	440b      	add	r3, r1
 80011fe:	761a      	strb	r2, [r3, #24]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000e100 	.word	0xe000e100
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	; 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f1c3 0307 	rsb	r3, r3, #7
 800122e:	2b04      	cmp	r3, #4
 8001230:	bf28      	it	cs
 8001232:	2304      	movcs	r3, #4
 8001234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3304      	adds	r3, #4
 800123a:	2b06      	cmp	r3, #6
 800123c:	d902      	bls.n	8001244 <NVIC_EncodePriority+0x30>
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3b03      	subs	r3, #3
 8001242:	e000      	b.n	8001246 <NVIC_EncodePriority+0x32>
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	f04f 32ff 	mov.w	r2, #4294967295
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43da      	mvns	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	401a      	ands	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800125c:	f04f 31ff 	mov.w	r1, #4294967295
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa01 f303 	lsl.w	r3, r1, r3
 8001266:	43d9      	mvns	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	4313      	orrs	r3, r2
         );
}
 800126e:	4618      	mov	r0, r3
 8001270:	3724      	adds	r7, #36	; 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800128c:	d301      	bcc.n	8001292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800128e:	2301      	movs	r3, #1
 8001290:	e00f      	b.n	80012b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <SysTick_Config+0x40>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129a:	210f      	movs	r1, #15
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f7ff ff8e 	bl	80011c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <SysTick_Config+0x40>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <SysTick_Config+0x40>)
 80012ac:	2207      	movs	r2, #7
 80012ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	e000e010 	.word	0xe000e010

080012c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff47 	bl	800115c <__NVIC_SetPriorityGrouping>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b086      	sub	sp, #24
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e8:	f7ff ff5c 	bl	80011a4 <__NVIC_GetPriorityGrouping>
 80012ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	68b9      	ldr	r1, [r7, #8]
 80012f2:	6978      	ldr	r0, [r7, #20]
 80012f4:	f7ff ff8e 	bl	8001214 <NVIC_EncodePriority>
 80012f8:	4602      	mov	r2, r0
 80012fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff5d 	bl	80011c0 <__NVIC_SetPriority>
}
 8001306:	bf00      	nop
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ffb0 	bl	800127c <SysTick_Config>
 800131c:	4603      	mov	r3, r0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001328:	b480      	push	{r7}
 800132a:	b087      	sub	sp, #28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001336:	e14e      	b.n	80015d6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	2101      	movs	r1, #1
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	fa01 f303 	lsl.w	r3, r1, r3
 8001344:	4013      	ands	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 8140 	beq.w	80015d0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x38>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b12      	cmp	r3, #18
 800135e:	d123      	bne.n	80013a8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	08da      	lsrs	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3208      	adds	r2, #8
 8001368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	220f      	movs	r2, #15
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	08da      	lsrs	r2, r3, #3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3208      	adds	r2, #8
 80013a2:	6939      	ldr	r1, [r7, #16]
 80013a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0203 	and.w	r2, r3, #3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d00b      	beq.n	80013fc <HAL_GPIO_Init+0xd4>
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d007      	beq.n	80013fc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013f0:	2b11      	cmp	r3, #17
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b12      	cmp	r3, #18
 80013fa:	d130      	bne.n	800145e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	2203      	movs	r2, #3
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001432:	2201      	movs	r2, #1
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4013      	ands	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	091b      	lsrs	r3, r3, #4
 8001448:	f003 0201 	and.w	r2, r3, #1
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	2203      	movs	r2, #3
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 809a 	beq.w	80015d0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149c:	4b55      	ldr	r3, [pc, #340]	; (80015f4 <HAL_GPIO_Init+0x2cc>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	4a54      	ldr	r2, [pc, #336]	; (80015f4 <HAL_GPIO_Init+0x2cc>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6193      	str	r3, [r2, #24]
 80014a8:	4b52      	ldr	r3, [pc, #328]	; (80015f4 <HAL_GPIO_Init+0x2cc>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014b4:	4a50      	ldr	r2, [pc, #320]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	089b      	lsrs	r3, r3, #2
 80014ba:	3302      	adds	r3, #2
 80014bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	220f      	movs	r2, #15
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014de:	d013      	beq.n	8001508 <HAL_GPIO_Init+0x1e0>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a46      	ldr	r2, [pc, #280]	; (80015fc <HAL_GPIO_Init+0x2d4>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d00d      	beq.n	8001504 <HAL_GPIO_Init+0x1dc>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a45      	ldr	r2, [pc, #276]	; (8001600 <HAL_GPIO_Init+0x2d8>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d007      	beq.n	8001500 <HAL_GPIO_Init+0x1d8>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a44      	ldr	r2, [pc, #272]	; (8001604 <HAL_GPIO_Init+0x2dc>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d101      	bne.n	80014fc <HAL_GPIO_Init+0x1d4>
 80014f8:	2303      	movs	r3, #3
 80014fa:	e006      	b.n	800150a <HAL_GPIO_Init+0x1e2>
 80014fc:	2305      	movs	r3, #5
 80014fe:	e004      	b.n	800150a <HAL_GPIO_Init+0x1e2>
 8001500:	2302      	movs	r3, #2
 8001502:	e002      	b.n	800150a <HAL_GPIO_Init+0x1e2>
 8001504:	2301      	movs	r3, #1
 8001506:	e000      	b.n	800150a <HAL_GPIO_Init+0x1e2>
 8001508:	2300      	movs	r3, #0
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	f002 0203 	and.w	r2, r2, #3
 8001510:	0092      	lsls	r2, r2, #2
 8001512:	4093      	lsls	r3, r2
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800151a:	4937      	ldr	r1, [pc, #220]	; (80015f8 <HAL_GPIO_Init+0x2d0>)
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	089b      	lsrs	r3, r3, #2
 8001520:	3302      	adds	r3, #2
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001528:	4b37      	ldr	r3, [pc, #220]	; (8001608 <HAL_GPIO_Init+0x2e0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	43db      	mvns	r3, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800154c:	4a2e      	ldr	r2, [pc, #184]	; (8001608 <HAL_GPIO_Init+0x2e0>)
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001552:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <HAL_GPIO_Init+0x2e0>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	43db      	mvns	r3, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4313      	orrs	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001576:	4a24      	ldr	r2, [pc, #144]	; (8001608 <HAL_GPIO_Init+0x2e0>)
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <HAL_GPIO_Init+0x2e0>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	43db      	mvns	r3, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4313      	orrs	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015a0:	4a19      	ldr	r2, [pc, #100]	; (8001608 <HAL_GPIO_Init+0x2e0>)
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015a6:	4b18      	ldr	r3, [pc, #96]	; (8001608 <HAL_GPIO_Init+0x2e0>)
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015ca:	4a0f      	ldr	r2, [pc, #60]	; (8001608 <HAL_GPIO_Init+0x2e0>)
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	3301      	adds	r3, #1
 80015d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	fa22 f303 	lsr.w	r3, r2, r3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f47f aea9 	bne.w	8001338 <HAL_GPIO_Init+0x10>
  }
}
 80015e6:	bf00      	nop
 80015e8:	371c      	adds	r7, #28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40010000 	.word	0x40010000
 80015fc:	48000400 	.word	0x48000400
 8001600:	48000800 	.word	0x48000800
 8001604:	48000c00 	.word	0x48000c00
 8001608:	40010400 	.word	0x40010400

0800160c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691a      	ldr	r2, [r3, #16]
 800161c:	887b      	ldrh	r3, [r7, #2]
 800161e:	4013      	ands	r3, r2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d002      	beq.n	800162a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001624:	2301      	movs	r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]
 8001628:	e001      	b.n	800162e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800162e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
 8001648:	4613      	mov	r3, r2
 800164a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800164c:	787b      	ldrb	r3, [r7, #1]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001652:	887a      	ldrh	r2, [r7, #2]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001658:	e002      	b.n	8001660 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800165a:	887a      	ldrh	r2, [r7, #2]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e081      	b.n	8001782 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d106      	bne.n	8001698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff fb1a 	bl	8000ccc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2224      	movs	r2, #36	; 0x24
 800169c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0201 	bic.w	r2, r2, #1
 80016ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d107      	bne.n	80016e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	e006      	b.n	80016f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80016f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d104      	bne.n	8001706 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001704:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001718:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001728:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691a      	ldr	r2, [r3, #16]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	ea42 0103 	orr.w	r1, r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	021a      	lsls	r2, r3, #8
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69d9      	ldr	r1, [r3, #28]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1a      	ldr	r2, [r3, #32]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0201 	orr.w	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2220      	movs	r2, #32
 800176e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b20      	cmp	r3, #32
 800179e:	d138      	bne.n	8001812 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d101      	bne.n	80017ae <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80017aa:	2302      	movs	r3, #2
 80017ac:	e032      	b.n	8001814 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2224      	movs	r2, #36	; 0x24
 80017ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0201 	bic.w	r2, r2, #1
 80017cc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017dc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6819      	ldr	r1, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f042 0201 	orr.w	r2, r2, #1
 80017fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2220      	movs	r2, #32
 8001802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	e000      	b.n	8001814 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001812:	2302      	movs	r3, #2
  }
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b20      	cmp	r3, #32
 8001834:	d139      	bne.n	80018aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001840:	2302      	movs	r3, #2
 8001842:	e033      	b.n	80018ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2224      	movs	r2, #36	; 0x24
 8001850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 0201 	bic.w	r2, r2, #1
 8001862:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001872:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	4313      	orrs	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f042 0201 	orr.w	r2, r2, #1
 8001894:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2220      	movs	r2, #32
 800189a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80018aa:	2302      	movs	r3, #2
  }
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80018be:	af00      	add	r7, sp, #0
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d102      	bne.n	80018d2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	f000 bef4 	b.w	80026ba <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 816a 	beq.w	8001bb6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018e2:	4bb3      	ldr	r3, [pc, #716]	; (8001bb0 <HAL_RCC_OscConfig+0x2f8>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d00c      	beq.n	8001908 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018ee:	4bb0      	ldr	r3, [pc, #704]	; (8001bb0 <HAL_RCC_OscConfig+0x2f8>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d159      	bne.n	80019ae <HAL_RCC_OscConfig+0xf6>
 80018fa:	4bad      	ldr	r3, [pc, #692]	; (8001bb0 <HAL_RCC_OscConfig+0x2f8>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001906:	d152      	bne.n	80019ae <HAL_RCC_OscConfig+0xf6>
 8001908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800190c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001914:	fa93 f3a3 	rbit	r3, r3
 8001918:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800191c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001920:	fab3 f383 	clz	r3, r3
 8001924:	b2db      	uxtb	r3, r3
 8001926:	095b      	lsrs	r3, r3, #5
 8001928:	b2db      	uxtb	r3, r3
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b01      	cmp	r3, #1
 8001932:	d102      	bne.n	800193a <HAL_RCC_OscConfig+0x82>
 8001934:	4b9e      	ldr	r3, [pc, #632]	; (8001bb0 <HAL_RCC_OscConfig+0x2f8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	e015      	b.n	8001966 <HAL_RCC_OscConfig+0xae>
 800193a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800193e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001946:	fa93 f3a3 	rbit	r3, r3
 800194a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800194e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001952:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001956:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800195a:	fa93 f3a3 	rbit	r3, r3
 800195e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001962:	4b93      	ldr	r3, [pc, #588]	; (8001bb0 <HAL_RCC_OscConfig+0x2f8>)
 8001964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001966:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800196a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800196e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001972:	fa92 f2a2 	rbit	r2, r2
 8001976:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800197a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800197e:	fab2 f282 	clz	r2, r2
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	f042 0220 	orr.w	r2, r2, #32
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	f002 021f 	and.w	r2, r2, #31
 800198e:	2101      	movs	r1, #1
 8001990:	fa01 f202 	lsl.w	r2, r1, r2
 8001994:	4013      	ands	r3, r2
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 810c 	beq.w	8001bb4 <HAL_RCC_OscConfig+0x2fc>
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f040 8106 	bne.w	8001bb4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	f000 be86 	b.w	80026ba <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b8:	d106      	bne.n	80019c8 <HAL_RCC_OscConfig+0x110>
 80019ba:	4b7d      	ldr	r3, [pc, #500]	; (8001bb0 <HAL_RCC_OscConfig+0x2f8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a7c      	ldr	r2, [pc, #496]	; (8001bb0 <HAL_RCC_OscConfig+0x2f8>)
 80019c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	e030      	b.n	8001a2a <HAL_RCC_OscConfig+0x172>
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10c      	bne.n	80019ec <HAL_RCC_OscConfig+0x134>
 80019d2:	4b77      	ldr	r3, [pc, #476]	; (8001bb0 <HAL_RCC_OscConfig+0x2f8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a76      	ldr	r2, [pc, #472]	; (8001bb0 <HAL_RCC_OscConfig+0x2f8>)
 80019d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	4b74      	ldr	r3, [pc, #464]	; (8001bb0 <HAL_RCC_OscConfig+0x2f8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a73      	ldr	r2, [pc, #460]	; (8001bb0 <HAL_RCC_OscConfig+0x2f8>)
 80019e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	e01e      	b.n	8001a2a <HAL_RCC_OscConfig+0x172>
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019f6:	d10c      	bne.n	8001a12 <HAL_RCC_OscConfig+0x15a>
 80019f8:	4b6d      	ldr	r3, [pc, #436]	; (8001bb0 <HAL_RCC_OscConfig+0x2f8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a6c      	ldr	r2, [pc, #432]	; (8001bb0 <HAL_RCC_OscConfig+0x2f8>)
 80019fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b6a      	ldr	r3, [pc, #424]	; (8001bb0 <HAL_RCC_OscConfig+0x2f8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a69      	ldr	r2, [pc, #420]	; (8001bb0 <HAL_RCC_OscConfig+0x2f8>)
 8001a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	e00b      	b.n	8001a2a <HAL_RCC_OscConfig+0x172>
 8001a12:	4b67      	ldr	r3, [pc, #412]	; (8001bb0 <HAL_RCC_OscConfig+0x2f8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a66      	ldr	r2, [pc, #408]	; (8001bb0 <HAL_RCC_OscConfig+0x2f8>)
 8001a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	4b64      	ldr	r3, [pc, #400]	; (8001bb0 <HAL_RCC_OscConfig+0x2f8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a63      	ldr	r2, [pc, #396]	; (8001bb0 <HAL_RCC_OscConfig+0x2f8>)
 8001a24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a28:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a2a:	4b61      	ldr	r3, [pc, #388]	; (8001bb0 <HAL_RCC_OscConfig+0x2f8>)
 8001a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2e:	f023 020f 	bic.w	r2, r3, #15
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	495d      	ldr	r1, [pc, #372]	; (8001bb0 <HAL_RCC_OscConfig+0x2f8>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d059      	beq.n	8001afc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff fb5a 	bl	8001100 <HAL_GetTick>
 8001a4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a50:	e00a      	b.n	8001a68 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a52:	f7ff fb55 	bl	8001100 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b64      	cmp	r3, #100	; 0x64
 8001a60:	d902      	bls.n	8001a68 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	f000 be29 	b.w	80026ba <HAL_RCC_OscConfig+0xe02>
 8001a68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a6c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001a74:	fa93 f3a3 	rbit	r3, r3
 8001a78:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001a7c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a80:	fab3 f383 	clz	r3, r3
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	095b      	lsrs	r3, r3, #5
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d102      	bne.n	8001a9a <HAL_RCC_OscConfig+0x1e2>
 8001a94:	4b46      	ldr	r3, [pc, #280]	; (8001bb0 <HAL_RCC_OscConfig+0x2f8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	e015      	b.n	8001ac6 <HAL_RCC_OscConfig+0x20e>
 8001a9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a9e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001aae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ab2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001ab6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001aba:	fa93 f3a3 	rbit	r3, r3
 8001abe:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001ac2:	4b3b      	ldr	r3, [pc, #236]	; (8001bb0 <HAL_RCC_OscConfig+0x2f8>)
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aca:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001ace:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001ad2:	fa92 f2a2 	rbit	r2, r2
 8001ad6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001ada:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001ade:	fab2 f282 	clz	r2, r2
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	f042 0220 	orr.w	r2, r2, #32
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	f002 021f 	and.w	r2, r2, #31
 8001aee:	2101      	movs	r1, #1
 8001af0:	fa01 f202 	lsl.w	r2, r1, r2
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0ab      	beq.n	8001a52 <HAL_RCC_OscConfig+0x19a>
 8001afa:	e05c      	b.n	8001bb6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7ff fb00 	bl	8001100 <HAL_GetTick>
 8001b00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b04:	e00a      	b.n	8001b1c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b06:	f7ff fafb 	bl	8001100 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b64      	cmp	r3, #100	; 0x64
 8001b14:	d902      	bls.n	8001b1c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	f000 bdcf 	b.w	80026ba <HAL_RCC_OscConfig+0xe02>
 8001b1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b20:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b24:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001b28:	fa93 f3a3 	rbit	r3, r3
 8001b2c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001b30:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b34:	fab3 f383 	clz	r3, r3
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d102      	bne.n	8001b4e <HAL_RCC_OscConfig+0x296>
 8001b48:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <HAL_RCC_OscConfig+0x2f8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	e015      	b.n	8001b7a <HAL_RCC_OscConfig+0x2c2>
 8001b4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b52:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b56:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001b5a:	fa93 f3a3 	rbit	r3, r3
 8001b5e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b66:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b6a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001b6e:	fa93 f3a3 	rbit	r3, r3
 8001b72:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <HAL_RCC_OscConfig+0x2f8>)
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b7e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001b82:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b86:	fa92 f2a2 	rbit	r2, r2
 8001b8a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001b8e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001b92:	fab2 f282 	clz	r2, r2
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	f042 0220 	orr.w	r2, r2, #32
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	f002 021f 	and.w	r2, r2, #31
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1ab      	bne.n	8001b06 <HAL_RCC_OscConfig+0x24e>
 8001bae:	e002      	b.n	8001bb6 <HAL_RCC_OscConfig+0x2fe>
 8001bb0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 816f 	beq.w	8001ea4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bc6:	4bd0      	ldr	r3, [pc, #832]	; (8001f08 <HAL_RCC_OscConfig+0x650>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 030c 	and.w	r3, r3, #12
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00b      	beq.n	8001bea <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bd2:	4bcd      	ldr	r3, [pc, #820]	; (8001f08 <HAL_RCC_OscConfig+0x650>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d16c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x400>
 8001bde:	4bca      	ldr	r3, [pc, #808]	; (8001f08 <HAL_RCC_OscConfig+0x650>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d166      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x400>
 8001bea:	2302      	movs	r3, #2
 8001bec:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001bf4:	fa93 f3a3 	rbit	r3, r3
 8001bf8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001bfc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c00:	fab3 f383 	clz	r3, r3
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d102      	bne.n	8001c1a <HAL_RCC_OscConfig+0x362>
 8001c14:	4bbc      	ldr	r3, [pc, #752]	; (8001f08 <HAL_RCC_OscConfig+0x650>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	e013      	b.n	8001c42 <HAL_RCC_OscConfig+0x38a>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001c24:	fa93 f3a3 	rbit	r3, r3
 8001c28:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c32:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001c36:	fa93 f3a3 	rbit	r3, r3
 8001c3a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001c3e:	4bb2      	ldr	r3, [pc, #712]	; (8001f08 <HAL_RCC_OscConfig+0x650>)
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	2202      	movs	r2, #2
 8001c44:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001c48:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c4c:	fa92 f2a2 	rbit	r2, r2
 8001c50:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001c54:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001c58:	fab2 f282 	clz	r2, r2
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	f042 0220 	orr.w	r2, r2, #32
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	f002 021f 	and.w	r2, r2, #31
 8001c68:	2101      	movs	r1, #1
 8001c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6e:	4013      	ands	r3, r2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d007      	beq.n	8001c84 <HAL_RCC_OscConfig+0x3cc>
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d002      	beq.n	8001c84 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f000 bd1b 	b.w	80026ba <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c84:	4ba0      	ldr	r3, [pc, #640]	; (8001f08 <HAL_RCC_OscConfig+0x650>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	21f8      	movs	r1, #248	; 0xf8
 8001c94:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c98:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001c9c:	fa91 f1a1 	rbit	r1, r1
 8001ca0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001ca4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001ca8:	fab1 f181 	clz	r1, r1
 8001cac:	b2c9      	uxtb	r1, r1
 8001cae:	408b      	lsls	r3, r1
 8001cb0:	4995      	ldr	r1, [pc, #596]	; (8001f08 <HAL_RCC_OscConfig+0x650>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb6:	e0f5      	b.n	8001ea4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 8085 	beq.w	8001dce <HAL_RCC_OscConfig+0x516>
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001cce:	fa93 f3a3 	rbit	r3, r3
 8001cd2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001cd6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ce4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	461a      	mov	r2, r3
 8001cec:	2301      	movs	r3, #1
 8001cee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7ff fa06 	bl	8001100 <HAL_GetTick>
 8001cf4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cfa:	f7ff fa01 	bl	8001100 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d902      	bls.n	8001d10 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	f000 bcd5 	b.w	80026ba <HAL_RCC_OscConfig+0xe02>
 8001d10:	2302      	movs	r3, #2
 8001d12:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001d22:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d26:	fab3 f383 	clz	r3, r3
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	095b      	lsrs	r3, r3, #5
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d102      	bne.n	8001d40 <HAL_RCC_OscConfig+0x488>
 8001d3a:	4b73      	ldr	r3, [pc, #460]	; (8001f08 <HAL_RCC_OscConfig+0x650>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	e013      	b.n	8001d68 <HAL_RCC_OscConfig+0x4b0>
 8001d40:	2302      	movs	r3, #2
 8001d42:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d46:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d52:	2302      	movs	r3, #2
 8001d54:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d58:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001d5c:	fa93 f3a3 	rbit	r3, r3
 8001d60:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001d64:	4b68      	ldr	r3, [pc, #416]	; (8001f08 <HAL_RCC_OscConfig+0x650>)
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	2202      	movs	r2, #2
 8001d6a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001d6e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001d72:	fa92 f2a2 	rbit	r2, r2
 8001d76:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001d7a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001d7e:	fab2 f282 	clz	r2, r2
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	f042 0220 	orr.w	r2, r2, #32
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	f002 021f 	and.w	r2, r2, #31
 8001d8e:	2101      	movs	r1, #1
 8001d90:	fa01 f202 	lsl.w	r2, r1, r2
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0af      	beq.n	8001cfa <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9a:	4b5b      	ldr	r3, [pc, #364]	; (8001f08 <HAL_RCC_OscConfig+0x650>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	21f8      	movs	r1, #248	; 0xf8
 8001daa:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dae:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001db2:	fa91 f1a1 	rbit	r1, r1
 8001db6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001dba:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001dbe:	fab1 f181 	clz	r1, r1
 8001dc2:	b2c9      	uxtb	r1, r1
 8001dc4:	408b      	lsls	r3, r1
 8001dc6:	4950      	ldr	r1, [pc, #320]	; (8001f08 <HAL_RCC_OscConfig+0x650>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	600b      	str	r3, [r1, #0]
 8001dcc:	e06a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x5ec>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001de0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001de4:	fab3 f383 	clz	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	461a      	mov	r2, r3
 8001df6:	2300      	movs	r3, #0
 8001df8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfa:	f7ff f981 	bl	8001100 <HAL_GetTick>
 8001dfe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e02:	e00a      	b.n	8001e1a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e04:	f7ff f97c 	bl	8001100 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d902      	bls.n	8001e1a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	f000 bc50 	b.w	80026ba <HAL_RCC_OscConfig+0xe02>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e20:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001e2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e30:	fab3 f383 	clz	r3, r3
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d102      	bne.n	8001e4a <HAL_RCC_OscConfig+0x592>
 8001e44:	4b30      	ldr	r3, [pc, #192]	; (8001f08 <HAL_RCC_OscConfig+0x650>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	e013      	b.n	8001e72 <HAL_RCC_OscConfig+0x5ba>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e62:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e66:	fa93 f3a3 	rbit	r3, r3
 8001e6a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001e6e:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <HAL_RCC_OscConfig+0x650>)
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	2202      	movs	r2, #2
 8001e74:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001e78:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e7c:	fa92 f2a2 	rbit	r2, r2
 8001e80:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001e84:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001e88:	fab2 f282 	clz	r2, r2
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	f042 0220 	orr.w	r2, r2, #32
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	f002 021f 	and.w	r2, r2, #31
 8001e98:	2101      	movs	r1, #1
 8001e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1af      	bne.n	8001e04 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 80da 	beq.w	8002068 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d069      	beq.n	8001f92 <HAL_RCC_OscConfig+0x6da>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed4:	fab3 f383 	clz	r3, r3
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_RCC_OscConfig+0x654>)
 8001ede:	4413      	add	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee8:	f7ff f90a 	bl	8001100 <HAL_GetTick>
 8001eec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef0:	e00e      	b.n	8001f10 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef2:	f7ff f905 	bl	8001100 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d906      	bls.n	8001f10 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e3d9      	b.n	80026ba <HAL_RCC_OscConfig+0xe02>
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	10908120 	.word	0x10908120
 8001f10:	2302      	movs	r3, #2
 8001f12:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f1a:	fa93 f3a3 	rbit	r3, r3
 8001f1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f22:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001f26:	2202      	movs	r2, #2
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	fa93 f2a3 	rbit	r2, r3
 8001f34:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001f3e:	2202      	movs	r2, #2
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	fa93 f2a3 	rbit	r2, r3
 8001f4c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f50:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f52:	4ba5      	ldr	r3, [pc, #660]	; (80021e8 <HAL_RCC_OscConfig+0x930>)
 8001f54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f56:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f5a:	2102      	movs	r1, #2
 8001f5c:	6019      	str	r1, [r3, #0]
 8001f5e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	fa93 f1a3 	rbit	r1, r3
 8001f68:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001f6c:	6019      	str	r1, [r3, #0]
  return result;
 8001f6e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	fab3 f383 	clz	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	f003 031f 	and.w	r3, r3, #31
 8001f84:	2101      	movs	r1, #1
 8001f86:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0b0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x63a>
 8001f90:	e06a      	b.n	8002068 <HAL_RCC_OscConfig+0x7b0>
 8001f92:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001f96:	2201      	movs	r2, #1
 8001f98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	fa93 f2a3 	rbit	r2, r3
 8001fa4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fa8:	601a      	str	r2, [r3, #0]
  return result;
 8001faa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fae:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb0:	fab3 f383 	clz	r3, r3
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b8c      	ldr	r3, [pc, #560]	; (80021ec <HAL_RCC_OscConfig+0x934>)
 8001fba:	4413      	add	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc4:	f7ff f89c 	bl	8001100 <HAL_GetTick>
 8001fc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fcc:	e009      	b.n	8001fe2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fce:	f7ff f897 	bl	8001100 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e36b      	b.n	80026ba <HAL_RCC_OscConfig+0xe02>
 8001fe2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	fa93 f2a3 	rbit	r2, r3
 8001ff4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001ffe:	2202      	movs	r2, #2
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	fa93 f2a3 	rbit	r2, r3
 800200c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002016:	2202      	movs	r2, #2
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	fa93 f2a3 	rbit	r2, r3
 8002024:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002028:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800202a:	4b6f      	ldr	r3, [pc, #444]	; (80021e8 <HAL_RCC_OscConfig+0x930>)
 800202c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800202e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002032:	2102      	movs	r1, #2
 8002034:	6019      	str	r1, [r3, #0]
 8002036:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	fa93 f1a3 	rbit	r1, r3
 8002040:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002044:	6019      	str	r1, [r3, #0]
  return result;
 8002046:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	fab3 f383 	clz	r3, r3
 8002050:	b2db      	uxtb	r3, r3
 8002052:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002056:	b2db      	uxtb	r3, r3
 8002058:	f003 031f 	and.w	r3, r3, #31
 800205c:	2101      	movs	r1, #1
 800205e:	fa01 f303 	lsl.w	r3, r1, r3
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1b2      	bne.n	8001fce <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002068:	1d3b      	adds	r3, r7, #4
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 8158 	beq.w	8002328 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002078:	2300      	movs	r3, #0
 800207a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800207e:	4b5a      	ldr	r3, [pc, #360]	; (80021e8 <HAL_RCC_OscConfig+0x930>)
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d112      	bne.n	80020b0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800208a:	4b57      	ldr	r3, [pc, #348]	; (80021e8 <HAL_RCC_OscConfig+0x930>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	4a56      	ldr	r2, [pc, #344]	; (80021e8 <HAL_RCC_OscConfig+0x930>)
 8002090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002094:	61d3      	str	r3, [r2, #28]
 8002096:	4b54      	ldr	r3, [pc, #336]	; (80021e8 <HAL_RCC_OscConfig+0x930>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800209e:	f107 0308 	add.w	r3, r7, #8
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	f107 0308 	add.w	r3, r7, #8
 80020a8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80020aa:	2301      	movs	r3, #1
 80020ac:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b0:	4b4f      	ldr	r3, [pc, #316]	; (80021f0 <HAL_RCC_OscConfig+0x938>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d11a      	bne.n	80020f2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020bc:	4b4c      	ldr	r3, [pc, #304]	; (80021f0 <HAL_RCC_OscConfig+0x938>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a4b      	ldr	r2, [pc, #300]	; (80021f0 <HAL_RCC_OscConfig+0x938>)
 80020c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020c8:	f7ff f81a 	bl	8001100 <HAL_GetTick>
 80020cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d0:	e009      	b.n	80020e6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d2:	f7ff f815 	bl	8001100 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b64      	cmp	r3, #100	; 0x64
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e2e9      	b.n	80026ba <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e6:	4b42      	ldr	r3, [pc, #264]	; (80021f0 <HAL_RCC_OscConfig+0x938>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0ef      	beq.n	80020d2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d106      	bne.n	800210a <HAL_RCC_OscConfig+0x852>
 80020fc:	4b3a      	ldr	r3, [pc, #232]	; (80021e8 <HAL_RCC_OscConfig+0x930>)
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4a39      	ldr	r2, [pc, #228]	; (80021e8 <HAL_RCC_OscConfig+0x930>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6213      	str	r3, [r2, #32]
 8002108:	e02f      	b.n	800216a <HAL_RCC_OscConfig+0x8b2>
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10c      	bne.n	800212e <HAL_RCC_OscConfig+0x876>
 8002114:	4b34      	ldr	r3, [pc, #208]	; (80021e8 <HAL_RCC_OscConfig+0x930>)
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	4a33      	ldr	r2, [pc, #204]	; (80021e8 <HAL_RCC_OscConfig+0x930>)
 800211a:	f023 0301 	bic.w	r3, r3, #1
 800211e:	6213      	str	r3, [r2, #32]
 8002120:	4b31      	ldr	r3, [pc, #196]	; (80021e8 <HAL_RCC_OscConfig+0x930>)
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	4a30      	ldr	r2, [pc, #192]	; (80021e8 <HAL_RCC_OscConfig+0x930>)
 8002126:	f023 0304 	bic.w	r3, r3, #4
 800212a:	6213      	str	r3, [r2, #32]
 800212c:	e01d      	b.n	800216a <HAL_RCC_OscConfig+0x8b2>
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	2b05      	cmp	r3, #5
 8002136:	d10c      	bne.n	8002152 <HAL_RCC_OscConfig+0x89a>
 8002138:	4b2b      	ldr	r3, [pc, #172]	; (80021e8 <HAL_RCC_OscConfig+0x930>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	4a2a      	ldr	r2, [pc, #168]	; (80021e8 <HAL_RCC_OscConfig+0x930>)
 800213e:	f043 0304 	orr.w	r3, r3, #4
 8002142:	6213      	str	r3, [r2, #32]
 8002144:	4b28      	ldr	r3, [pc, #160]	; (80021e8 <HAL_RCC_OscConfig+0x930>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	4a27      	ldr	r2, [pc, #156]	; (80021e8 <HAL_RCC_OscConfig+0x930>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6213      	str	r3, [r2, #32]
 8002150:	e00b      	b.n	800216a <HAL_RCC_OscConfig+0x8b2>
 8002152:	4b25      	ldr	r3, [pc, #148]	; (80021e8 <HAL_RCC_OscConfig+0x930>)
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	4a24      	ldr	r2, [pc, #144]	; (80021e8 <HAL_RCC_OscConfig+0x930>)
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	6213      	str	r3, [r2, #32]
 800215e:	4b22      	ldr	r3, [pc, #136]	; (80021e8 <HAL_RCC_OscConfig+0x930>)
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	4a21      	ldr	r2, [pc, #132]	; (80021e8 <HAL_RCC_OscConfig+0x930>)
 8002164:	f023 0304 	bic.w	r3, r3, #4
 8002168:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d06b      	beq.n	800224c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002174:	f7fe ffc4 	bl	8001100 <HAL_GetTick>
 8002178:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217c:	e00b      	b.n	8002196 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800217e:	f7fe ffbf 	bl	8001100 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	; 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e291      	b.n	80026ba <HAL_RCC_OscConfig+0xe02>
 8002196:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800219a:	2202      	movs	r2, #2
 800219c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	fa93 f2a3 	rbit	r2, r3
 80021a8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80021b2:	2202      	movs	r2, #2
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	fa93 f2a3 	rbit	r2, r3
 80021c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80021c4:	601a      	str	r2, [r3, #0]
  return result;
 80021c6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80021ca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021cc:	fab3 f383 	clz	r3, r3
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	095b      	lsrs	r3, r3, #5
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	f043 0302 	orr.w	r3, r3, #2
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d109      	bne.n	80021f4 <HAL_RCC_OscConfig+0x93c>
 80021e0:	4b01      	ldr	r3, [pc, #4]	; (80021e8 <HAL_RCC_OscConfig+0x930>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	e014      	b.n	8002210 <HAL_RCC_OscConfig+0x958>
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	10908120 	.word	0x10908120
 80021f0:	40007000 	.word	0x40007000
 80021f4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80021f8:	2202      	movs	r2, #2
 80021fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	fa93 f2a3 	rbit	r2, r3
 8002206:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	4bbb      	ldr	r3, [pc, #748]	; (80024fc <HAL_RCC_OscConfig+0xc44>)
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002214:	2102      	movs	r1, #2
 8002216:	6011      	str	r1, [r2, #0]
 8002218:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	fa92 f1a2 	rbit	r1, r2
 8002222:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002226:	6011      	str	r1, [r2, #0]
  return result;
 8002228:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800222c:	6812      	ldr	r2, [r2, #0]
 800222e:	fab2 f282 	clz	r2, r2
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	f002 021f 	and.w	r2, r2, #31
 800223e:	2101      	movs	r1, #1
 8002240:	fa01 f202 	lsl.w	r2, r1, r2
 8002244:	4013      	ands	r3, r2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d099      	beq.n	800217e <HAL_RCC_OscConfig+0x8c6>
 800224a:	e063      	b.n	8002314 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224c:	f7fe ff58 	bl	8001100 <HAL_GetTick>
 8002250:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002254:	e00b      	b.n	800226e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002256:	f7fe ff53 	bl	8001100 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	f241 3288 	movw	r2, #5000	; 0x1388
 8002266:	4293      	cmp	r3, r2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e225      	b.n	80026ba <HAL_RCC_OscConfig+0xe02>
 800226e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002272:	2202      	movs	r2, #2
 8002274:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	fa93 f2a3 	rbit	r2, r3
 8002280:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800228a:	2202      	movs	r2, #2
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	fa93 f2a3 	rbit	r2, r3
 8002298:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800229c:	601a      	str	r2, [r3, #0]
  return result;
 800229e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022a2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a4:	fab3 f383 	clz	r3, r3
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	f043 0302 	orr.w	r3, r3, #2
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d102      	bne.n	80022be <HAL_RCC_OscConfig+0xa06>
 80022b8:	4b90      	ldr	r3, [pc, #576]	; (80024fc <HAL_RCC_OscConfig+0xc44>)
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	e00d      	b.n	80022da <HAL_RCC_OscConfig+0xa22>
 80022be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80022c2:	2202      	movs	r2, #2
 80022c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	fa93 f2a3 	rbit	r2, r3
 80022d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	4b89      	ldr	r3, [pc, #548]	; (80024fc <HAL_RCC_OscConfig+0xc44>)
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80022de:	2102      	movs	r1, #2
 80022e0:	6011      	str	r1, [r2, #0]
 80022e2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	fa92 f1a2 	rbit	r1, r2
 80022ec:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80022f0:	6011      	str	r1, [r2, #0]
  return result;
 80022f2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	fab2 f282 	clz	r2, r2
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	f002 021f 	and.w	r2, r2, #31
 8002308:	2101      	movs	r1, #1
 800230a:	fa01 f202 	lsl.w	r2, r1, r2
 800230e:	4013      	ands	r3, r2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1a0      	bne.n	8002256 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002314:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002318:	2b01      	cmp	r3, #1
 800231a:	d105      	bne.n	8002328 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231c:	4b77      	ldr	r3, [pc, #476]	; (80024fc <HAL_RCC_OscConfig+0xc44>)
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	4a76      	ldr	r2, [pc, #472]	; (80024fc <HAL_RCC_OscConfig+0xc44>)
 8002322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002326:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002328:	1d3b      	adds	r3, r7, #4
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 81c2 	beq.w	80026b8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002334:	4b71      	ldr	r3, [pc, #452]	; (80024fc <HAL_RCC_OscConfig+0xc44>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	2b08      	cmp	r3, #8
 800233e:	f000 819c 	beq.w	800267a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002342:	1d3b      	adds	r3, r7, #4
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	2b02      	cmp	r3, #2
 800234a:	f040 8114 	bne.w	8002576 <HAL_RCC_OscConfig+0xcbe>
 800234e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002352:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002356:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002358:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	fa93 f2a3 	rbit	r2, r3
 8002362:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002366:	601a      	str	r2, [r3, #0]
  return result;
 8002368:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800236c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002378:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	461a      	mov	r2, r3
 8002380:	2300      	movs	r3, #0
 8002382:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7fe febc 	bl	8001100 <HAL_GetTick>
 8002388:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238c:	e009      	b.n	80023a2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800238e:	f7fe feb7 	bl	8001100 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e18b      	b.n	80026ba <HAL_RCC_OscConfig+0xe02>
 80023a2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80023a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	fa93 f2a3 	rbit	r2, r3
 80023b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023ba:	601a      	str	r2, [r3, #0]
  return result;
 80023bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	095b      	lsrs	r3, r3, #5
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d102      	bne.n	80023dc <HAL_RCC_OscConfig+0xb24>
 80023d6:	4b49      	ldr	r3, [pc, #292]	; (80024fc <HAL_RCC_OscConfig+0xc44>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	e01b      	b.n	8002414 <HAL_RCC_OscConfig+0xb5c>
 80023dc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80023e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	fa93 f2a3 	rbit	r2, r3
 80023f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80023fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	fa93 f2a3 	rbit	r2, r3
 800240a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	4b3a      	ldr	r3, [pc, #232]	; (80024fc <HAL_RCC_OscConfig+0xc44>)
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002418:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800241c:	6011      	str	r1, [r2, #0]
 800241e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	fa92 f1a2 	rbit	r1, r2
 8002428:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800242c:	6011      	str	r1, [r2, #0]
  return result;
 800242e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	fab2 f282 	clz	r2, r2
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	f042 0220 	orr.w	r2, r2, #32
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	f002 021f 	and.w	r2, r2, #31
 8002444:	2101      	movs	r1, #1
 8002446:	fa01 f202 	lsl.w	r2, r1, r2
 800244a:	4013      	ands	r3, r2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d19e      	bne.n	800238e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002450:	4b2a      	ldr	r3, [pc, #168]	; (80024fc <HAL_RCC_OscConfig+0xc44>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800245e:	1d3b      	adds	r3, r7, #4
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	430b      	orrs	r3, r1
 8002466:	4925      	ldr	r1, [pc, #148]	; (80024fc <HAL_RCC_OscConfig+0xc44>)
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
 800246c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002470:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002474:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	fa93 f2a3 	rbit	r2, r3
 8002480:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002484:	601a      	str	r2, [r3, #0]
  return result;
 8002486:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800248a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800248c:	fab3 f383 	clz	r3, r3
 8002490:	b2db      	uxtb	r3, r3
 8002492:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002496:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	461a      	mov	r2, r3
 800249e:	2301      	movs	r3, #1
 80024a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7fe fe2d 	bl	8001100 <HAL_GetTick>
 80024a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024aa:	e009      	b.n	80024c0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ac:	f7fe fe28 	bl	8001100 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e0fc      	b.n	80026ba <HAL_RCC_OscConfig+0xe02>
 80024c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	fa93 f2a3 	rbit	r2, r3
 80024d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024d8:	601a      	str	r2, [r3, #0]
  return result;
 80024da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e0:	fab3 f383 	clz	r3, r3
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	095b      	lsrs	r3, r3, #5
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d105      	bne.n	8002500 <HAL_RCC_OscConfig+0xc48>
 80024f4:	4b01      	ldr	r3, [pc, #4]	; (80024fc <HAL_RCC_OscConfig+0xc44>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	e01e      	b.n	8002538 <HAL_RCC_OscConfig+0xc80>
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000
 8002500:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002504:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	fa93 f2a3 	rbit	r2, r3
 8002514:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800251e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	fa93 f2a3 	rbit	r2, r3
 800252e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	4b63      	ldr	r3, [pc, #396]	; (80026c4 <HAL_RCC_OscConfig+0xe0c>)
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800253c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002540:	6011      	str	r1, [r2, #0]
 8002542:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	fa92 f1a2 	rbit	r1, r2
 800254c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002550:	6011      	str	r1, [r2, #0]
  return result;
 8002552:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	fab2 f282 	clz	r2, r2
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	f042 0220 	orr.w	r2, r2, #32
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	f002 021f 	and.w	r2, r2, #31
 8002568:	2101      	movs	r1, #1
 800256a:	fa01 f202 	lsl.w	r2, r1, r2
 800256e:	4013      	ands	r3, r2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d09b      	beq.n	80024ac <HAL_RCC_OscConfig+0xbf4>
 8002574:	e0a0      	b.n	80026b8 <HAL_RCC_OscConfig+0xe00>
 8002576:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800257a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800257e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002580:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	fa93 f2a3 	rbit	r2, r3
 800258a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800258e:	601a      	str	r2, [r3, #0]
  return result;
 8002590:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002594:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	461a      	mov	r2, r3
 80025a8:	2300      	movs	r3, #0
 80025aa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7fe fda8 	bl	8001100 <HAL_GetTick>
 80025b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b4:	e009      	b.n	80025ca <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b6:	f7fe fda3 	bl	8001100 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e077      	b.n	80026ba <HAL_RCC_OscConfig+0xe02>
 80025ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	fa93 f2a3 	rbit	r2, r3
 80025de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e2:	601a      	str	r2, [r3, #0]
  return result;
 80025e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ea:	fab3 f383 	clz	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	095b      	lsrs	r3, r3, #5
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d102      	bne.n	8002604 <HAL_RCC_OscConfig+0xd4c>
 80025fe:	4b31      	ldr	r3, [pc, #196]	; (80026c4 <HAL_RCC_OscConfig+0xe0c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	e01b      	b.n	800263c <HAL_RCC_OscConfig+0xd84>
 8002604:	f107 0320 	add.w	r3, r7, #32
 8002608:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800260c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	f107 0320 	add.w	r3, r7, #32
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	fa93 f2a3 	rbit	r2, r3
 8002618:	f107 031c 	add.w	r3, r7, #28
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	f107 0318 	add.w	r3, r7, #24
 8002622:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	f107 0318 	add.w	r3, r7, #24
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	fa93 f2a3 	rbit	r2, r3
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <HAL_RCC_OscConfig+0xe0c>)
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	f107 0210 	add.w	r2, r7, #16
 8002640:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002644:	6011      	str	r1, [r2, #0]
 8002646:	f107 0210 	add.w	r2, r7, #16
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	fa92 f1a2 	rbit	r1, r2
 8002650:	f107 020c 	add.w	r2, r7, #12
 8002654:	6011      	str	r1, [r2, #0]
  return result;
 8002656:	f107 020c 	add.w	r2, r7, #12
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	fab2 f282 	clz	r2, r2
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	f042 0220 	orr.w	r2, r2, #32
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	f002 021f 	and.w	r2, r2, #31
 800266c:	2101      	movs	r1, #1
 800266e:	fa01 f202 	lsl.w	r2, r1, r2
 8002672:	4013      	ands	r3, r2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d19e      	bne.n	80025b6 <HAL_RCC_OscConfig+0xcfe>
 8002678:	e01e      	b.n	80026b8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800267a:	1d3b      	adds	r3, r7, #4
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e018      	b.n	80026ba <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002688:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <HAL_RCC_OscConfig+0xe0c>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002690:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002694:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002698:	1d3b      	adds	r3, r7, #4
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d108      	bne.n	80026b4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80026a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80026a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026aa:	1d3b      	adds	r3, r7, #4
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e000      	b.n	80026ba <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000

080026c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b09e      	sub	sp, #120	; 0x78
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e162      	b.n	80029a6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026e0:	4b90      	ldr	r3, [pc, #576]	; (8002924 <HAL_RCC_ClockConfig+0x25c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d910      	bls.n	8002710 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	4b8d      	ldr	r3, [pc, #564]	; (8002924 <HAL_RCC_ClockConfig+0x25c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 0207 	bic.w	r2, r3, #7
 80026f6:	498b      	ldr	r1, [pc, #556]	; (8002924 <HAL_RCC_ClockConfig+0x25c>)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fe:	4b89      	ldr	r3, [pc, #548]	; (8002924 <HAL_RCC_ClockConfig+0x25c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e14a      	b.n	80029a6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800271c:	4b82      	ldr	r3, [pc, #520]	; (8002928 <HAL_RCC_ClockConfig+0x260>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	497f      	ldr	r1, [pc, #508]	; (8002928 <HAL_RCC_ClockConfig+0x260>)
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 80dc 	beq.w	80028f4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d13c      	bne.n	80027be <HAL_RCC_ClockConfig+0xf6>
 8002744:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002748:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800274c:	fa93 f3a3 	rbit	r3, r3
 8002750:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002754:	fab3 f383 	clz	r3, r3
 8002758:	b2db      	uxtb	r3, r3
 800275a:	095b      	lsrs	r3, r3, #5
 800275c:	b2db      	uxtb	r3, r3
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b01      	cmp	r3, #1
 8002766:	d102      	bne.n	800276e <HAL_RCC_ClockConfig+0xa6>
 8002768:	4b6f      	ldr	r3, [pc, #444]	; (8002928 <HAL_RCC_ClockConfig+0x260>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	e00f      	b.n	800278e <HAL_RCC_ClockConfig+0xc6>
 800276e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002772:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002776:	fa93 f3a3 	rbit	r3, r3
 800277a:	667b      	str	r3, [r7, #100]	; 0x64
 800277c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002780:	663b      	str	r3, [r7, #96]	; 0x60
 8002782:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002784:	fa93 f3a3 	rbit	r3, r3
 8002788:	65fb      	str	r3, [r7, #92]	; 0x5c
 800278a:	4b67      	ldr	r3, [pc, #412]	; (8002928 <HAL_RCC_ClockConfig+0x260>)
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002792:	65ba      	str	r2, [r7, #88]	; 0x58
 8002794:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002796:	fa92 f2a2 	rbit	r2, r2
 800279a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800279c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800279e:	fab2 f282 	clz	r2, r2
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	f042 0220 	orr.w	r2, r2, #32
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	f002 021f 	and.w	r2, r2, #31
 80027ae:	2101      	movs	r1, #1
 80027b0:	fa01 f202 	lsl.w	r2, r1, r2
 80027b4:	4013      	ands	r3, r2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d17b      	bne.n	80028b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0f3      	b.n	80029a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d13c      	bne.n	8002840 <HAL_RCC_ClockConfig+0x178>
 80027c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ce:	fa93 f3a3 	rbit	r3, r3
 80027d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	095b      	lsrs	r3, r3, #5
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d102      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x128>
 80027ea:	4b4f      	ldr	r3, [pc, #316]	; (8002928 <HAL_RCC_ClockConfig+0x260>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	e00f      	b.n	8002810 <HAL_RCC_ClockConfig+0x148>
 80027f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027f8:	fa93 f3a3 	rbit	r3, r3
 80027fc:	647b      	str	r3, [r7, #68]	; 0x44
 80027fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002802:	643b      	str	r3, [r7, #64]	; 0x40
 8002804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002806:	fa93 f3a3 	rbit	r3, r3
 800280a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800280c:	4b46      	ldr	r3, [pc, #280]	; (8002928 <HAL_RCC_ClockConfig+0x260>)
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002814:	63ba      	str	r2, [r7, #56]	; 0x38
 8002816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002818:	fa92 f2a2 	rbit	r2, r2
 800281c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800281e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002820:	fab2 f282 	clz	r2, r2
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	f042 0220 	orr.w	r2, r2, #32
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	f002 021f 	and.w	r2, r2, #31
 8002830:	2101      	movs	r1, #1
 8002832:	fa01 f202 	lsl.w	r2, r1, r2
 8002836:	4013      	ands	r3, r2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d13a      	bne.n	80028b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0b2      	b.n	80029a6 <HAL_RCC_ClockConfig+0x2de>
 8002840:	2302      	movs	r3, #2
 8002842:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800284c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284e:	fab3 f383 	clz	r3, r3
 8002852:	b2db      	uxtb	r3, r3
 8002854:	095b      	lsrs	r3, r3, #5
 8002856:	b2db      	uxtb	r3, r3
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b01      	cmp	r3, #1
 8002860:	d102      	bne.n	8002868 <HAL_RCC_ClockConfig+0x1a0>
 8002862:	4b31      	ldr	r3, [pc, #196]	; (8002928 <HAL_RCC_ClockConfig+0x260>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	e00d      	b.n	8002884 <HAL_RCC_ClockConfig+0x1bc>
 8002868:	2302      	movs	r3, #2
 800286a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286e:	fa93 f3a3 	rbit	r3, r3
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
 8002874:	2302      	movs	r3, #2
 8002876:	623b      	str	r3, [r7, #32]
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	61fb      	str	r3, [r7, #28]
 8002880:	4b29      	ldr	r3, [pc, #164]	; (8002928 <HAL_RCC_ClockConfig+0x260>)
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	2202      	movs	r2, #2
 8002886:	61ba      	str	r2, [r7, #24]
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	fa92 f2a2 	rbit	r2, r2
 800288e:	617a      	str	r2, [r7, #20]
  return result;
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	fab2 f282 	clz	r2, r2
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	f042 0220 	orr.w	r2, r2, #32
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	f002 021f 	and.w	r2, r2, #31
 80028a2:	2101      	movs	r1, #1
 80028a4:	fa01 f202 	lsl.w	r2, r1, r2
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e079      	b.n	80029a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028b2:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <HAL_RCC_ClockConfig+0x260>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f023 0203 	bic.w	r2, r3, #3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	491a      	ldr	r1, [pc, #104]	; (8002928 <HAL_RCC_ClockConfig+0x260>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c4:	f7fe fc1c 	bl	8001100 <HAL_GetTick>
 80028c8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	e00a      	b.n	80028e2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028cc:	f7fe fc18 	bl	8001100 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028da:	4293      	cmp	r3, r2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e061      	b.n	80029a6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	4b11      	ldr	r3, [pc, #68]	; (8002928 <HAL_RCC_ClockConfig+0x260>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f003 020c 	and.w	r2, r3, #12
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d1eb      	bne.n	80028cc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <HAL_RCC_ClockConfig+0x25c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d214      	bcs.n	800292c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002902:	4b08      	ldr	r3, [pc, #32]	; (8002924 <HAL_RCC_ClockConfig+0x25c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f023 0207 	bic.w	r2, r3, #7
 800290a:	4906      	ldr	r1, [pc, #24]	; (8002924 <HAL_RCC_ClockConfig+0x25c>)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	4313      	orrs	r3, r2
 8002910:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002912:	4b04      	ldr	r3, [pc, #16]	; (8002924 <HAL_RCC_ClockConfig+0x25c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d005      	beq.n	800292c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e040      	b.n	80029a6 <HAL_RCC_ClockConfig+0x2de>
 8002924:	40022000 	.word	0x40022000
 8002928:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002938:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <HAL_RCC_ClockConfig+0x2e8>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	491a      	ldr	r1, [pc, #104]	; (80029b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002946:	4313      	orrs	r3, r2
 8002948:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d009      	beq.n	800296a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002956:	4b16      	ldr	r3, [pc, #88]	; (80029b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4912      	ldr	r1, [pc, #72]	; (80029b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002966:	4313      	orrs	r3, r2
 8002968:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800296a:	f000 f829 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 800296e:	4601      	mov	r1, r0
 8002970:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002978:	22f0      	movs	r2, #240	; 0xf0
 800297a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	fa92 f2a2 	rbit	r2, r2
 8002982:	60fa      	str	r2, [r7, #12]
  return result;
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	fab2 f282 	clz	r2, r2
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	40d3      	lsrs	r3, r2
 800298e:	4a09      	ldr	r2, [pc, #36]	; (80029b4 <HAL_RCC_ClockConfig+0x2ec>)
 8002990:	5cd3      	ldrb	r3, [r2, r3]
 8002992:	fa21 f303 	lsr.w	r3, r1, r3
 8002996:	4a08      	ldr	r2, [pc, #32]	; (80029b8 <HAL_RCC_ClockConfig+0x2f0>)
 8002998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800299a:	4b08      	ldr	r3, [pc, #32]	; (80029bc <HAL_RCC_ClockConfig+0x2f4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fe fb6a 	bl	8001078 <HAL_InitTick>
  
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3778      	adds	r7, #120	; 0x78
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000
 80029b4:	08003188 	.word	0x08003188
 80029b8:	20000000 	.word	0x20000000
 80029bc:	20000004 	.word	0x20000004

080029c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b08b      	sub	sp, #44	; 0x2c
 80029c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	2300      	movs	r3, #0
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	2300      	movs	r3, #0
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80029da:	4b29      	ldr	r3, [pc, #164]	; (8002a80 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d002      	beq.n	80029f0 <HAL_RCC_GetSysClockFreq+0x30>
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d003      	beq.n	80029f6 <HAL_RCC_GetSysClockFreq+0x36>
 80029ee:	e03c      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029f0:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029f2:	623b      	str	r3, [r7, #32]
      break;
 80029f4:	e03c      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80029fc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a00:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	fa92 f2a2 	rbit	r2, r2
 8002a08:	607a      	str	r2, [r7, #4]
  return result;
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	fab2 f282 	clz	r2, r2
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	40d3      	lsrs	r3, r2
 8002a14:	4a1c      	ldr	r2, [pc, #112]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a16:	5cd3      	ldrb	r3, [r2, r3]
 8002a18:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a1a:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	220f      	movs	r2, #15
 8002a24:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	fa92 f2a2 	rbit	r2, r2
 8002a2c:	60fa      	str	r2, [r7, #12]
  return result;
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	fab2 f282 	clz	r2, r2
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	40d3      	lsrs	r3, r2
 8002a38:	4a14      	ldr	r2, [pc, #80]	; (8002a8c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a3a:	5cd3      	ldrb	r3, [r2, r3]
 8002a3c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a48:	4a0e      	ldr	r2, [pc, #56]	; (8002a84 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	fb02 f303 	mul.w	r3, r2, r3
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24
 8002a58:	e004      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	4a0c      	ldr	r2, [pc, #48]	; (8002a90 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a5e:	fb02 f303 	mul.w	r3, r2, r3
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	623b      	str	r3, [r7, #32]
      break;
 8002a68:	e002      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a6c:	623b      	str	r3, [r7, #32]
      break;
 8002a6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a70:	6a3b      	ldr	r3, [r7, #32]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	372c      	adds	r7, #44	; 0x2c
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40021000 	.word	0x40021000
 8002a84:	007a1200 	.word	0x007a1200
 8002a88:	08003198 	.word	0x08003198
 8002a8c:	080031a8 	.word	0x080031a8
 8002a90:	003d0900 	.word	0x003d0900

08002a94 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b092      	sub	sp, #72	; 0x48
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 80d0 	beq.w	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab8:	4b86      	ldr	r3, [pc, #536]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10e      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac4:	4b83      	ldr	r3, [pc, #524]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	4a82      	ldr	r2, [pc, #520]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ace:	61d3      	str	r3, [r2, #28]
 8002ad0:	4b80      	ldr	r3, [pc, #512]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002adc:	2301      	movs	r3, #1
 8002ade:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae2:	4b7d      	ldr	r3, [pc, #500]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d118      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aee:	4b7a      	ldr	r3, [pc, #488]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a79      	ldr	r2, [pc, #484]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002afa:	f7fe fb01 	bl	8001100 <HAL_GetTick>
 8002afe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b00:	e008      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b02:	f7fe fafd 	bl	8001100 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b64      	cmp	r3, #100	; 0x64
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e0db      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b14:	4b70      	ldr	r3, [pc, #448]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b20:	4b6c      	ldr	r3, [pc, #432]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b28:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d07d      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d076      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b3e:	4b65      	ldr	r3, [pc, #404]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b4c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b50:	fa93 f3a3 	rbit	r3, r3
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b58:	fab3 f383 	clz	r3, r3
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4b5e      	ldr	r3, [pc, #376]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	461a      	mov	r2, r3
 8002b68:	2301      	movs	r3, #1
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b74:	fa93 f3a3 	rbit	r3, r3
 8002b78:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b7c:	fab3 f383 	clz	r3, r3
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	461a      	mov	r2, r3
 8002b84:	4b55      	ldr	r3, [pc, #340]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b90:	4a50      	ldr	r2, [pc, #320]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b94:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d045      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7fe faae 	bl	8001100 <HAL_GetTick>
 8002ba4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7fe faaa 	bl	8001100 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e086      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc4:	fa93 f3a3 	rbit	r3, r3
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bca:	2302      	movs	r3, #2
 8002bcc:	623b      	str	r3, [r7, #32]
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	fa93 f3a3 	rbit	r3, r3
 8002bd4:	61fb      	str	r3, [r7, #28]
  return result;
 8002bd6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd8:	fab3 f383 	clz	r3, r3
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	f043 0302 	orr.w	r3, r3, #2
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d102      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002bec:	4b39      	ldr	r3, [pc, #228]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	e007      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	4b35      	ldr	r3, [pc, #212]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	2202      	movs	r2, #2
 8002c04:	613a      	str	r2, [r7, #16]
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	fa92 f2a2 	rbit	r2, r2
 8002c0c:	60fa      	str	r2, [r7, #12]
  return result;
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	fab2 f282 	clz	r2, r2
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	f002 021f 	and.w	r2, r2, #31
 8002c20:	2101      	movs	r1, #1
 8002c22:	fa01 f202 	lsl.w	r2, r1, r2
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0bd      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002c2c:	4b29      	ldr	r3, [pc, #164]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4926      	ldr	r1, [pc, #152]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d105      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c46:	4b23      	ldr	r3, [pc, #140]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	4a22      	ldr	r2, [pc, #136]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c50:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d008      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c5e:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	f023 0203 	bic.w	r2, r3, #3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	491a      	ldr	r1, [pc, #104]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0320 	and.w	r3, r3, #32
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d008      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c7c:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	f023 0210 	bic.w	r2, r3, #16
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	4912      	ldr	r1, [pc, #72]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d008      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c9a:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	490b      	ldr	r1, [pc, #44]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002cb8:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	4903      	ldr	r1, [pc, #12]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3748      	adds	r7, #72	; 0x48
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40007000 	.word	0x40007000
 8002cdc:	10908100 	.word	0x10908100

08002ce0 <_ZNSaIcEC1Ev>:
 8002ce0:	4770      	bx	lr

08002ce2 <_ZNSaIcED1Ev>:
 8002ce2:	4770      	bx	lr

08002ce4 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8002ce4:	b10a      	cbz	r2, 8002cea <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8002ce6:	f000 b8d9 	b.w	8002e9c <memcpy>
 8002cea:	4770      	bx	lr

08002cec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8002cec:	b508      	push	{r3, lr}
 8002cee:	680b      	ldr	r3, [r1, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	da02      	bge.n	8002cfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8002cf4:	4809      	ldr	r0, [pc, #36]	; (8002d1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8002cf6:	f000 f88c 	bl	8002e12 <_ZSt20__throw_length_errorPKc>
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d908      	bls.n	8002d10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8002cfe:	0052      	lsls	r2, r2, #1
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d205      	bcs.n	8002d10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8002d04:	2a00      	cmp	r2, #0
 8002d06:	bfb6      	itet	lt
 8002d08:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8002d0c:	600a      	strge	r2, [r1, #0]
 8002d0e:	600b      	strlt	r3, [r1, #0]
 8002d10:	6808      	ldr	r0, [r1, #0]
 8002d12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002d16:	3001      	adds	r0, #1
 8002d18:	f000 b85c 	b.w	8002dd4 <_Znwj>
 8002d1c:	080031e2 	.word	0x080031e2

08002d20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8002d20:	4603      	mov	r3, r0
 8002d22:	f853 0b08 	ldr.w	r0, [r3], #8
 8002d26:	4298      	cmp	r0, r3
 8002d28:	d001      	beq.n	8002d2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8002d2a:	f000 b86d 	b.w	8002e08 <_ZdlPv>
 8002d2e:	4770      	bx	lr

08002d30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8002d30:	2a01      	cmp	r2, #1
 8002d32:	b510      	push	{r4, lr}
 8002d34:	d102      	bne.n	8002d3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8002d36:	780a      	ldrb	r2, [r1, #0]
 8002d38:	7002      	strb	r2, [r0, #0]
 8002d3a:	bd10      	pop	{r4, pc}
 8002d3c:	f7ff ffd2 	bl	8002ce4 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8002d40:	e7fb      	b.n	8002d3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08002d42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8002d42:	b508      	push	{r3, lr}
 8002d44:	1a52      	subs	r2, r2, r1
 8002d46:	f7ff fff3 	bl	8002d30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8002d4a:	bd08      	pop	{r3, pc}

08002d4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8002d4c:	b510      	push	{r4, lr}
 8002d4e:	4604      	mov	r4, r0
 8002d50:	f7ff ffe6 	bl	8002d20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8002d54:	4620      	mov	r0, r4
 8002d56:	bd10      	pop	{r4, pc}

08002d58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8002d58:	6800      	ldr	r0, [r0, #0]
 8002d5a:	4408      	add	r0, r1
 8002d5c:	4770      	bx	lr
	...

08002d60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8002d60:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d62:	4604      	mov	r4, r0
 8002d64:	4616      	mov	r6, r2
 8002d66:	460d      	mov	r5, r1
 8002d68:	b919      	cbnz	r1, 8002d72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8002d6a:	b112      	cbz	r2, 8002d72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8002d6c:	480d      	ldr	r0, [pc, #52]	; (8002da4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8002d6e:	f000 f84d 	bl	8002e0c <_ZSt19__throw_logic_errorPKc>
 8002d72:	1b73      	subs	r3, r6, r5
 8002d74:	2b0f      	cmp	r3, #15
 8002d76:	9301      	str	r3, [sp, #4]
 8002d78:	d907      	bls.n	8002d8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	a901      	add	r1, sp, #4
 8002d7e:	4620      	mov	r0, r4
 8002d80:	f7ff ffb4 	bl	8002cec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8002d84:	9b01      	ldr	r3, [sp, #4]
 8002d86:	6020      	str	r0, [r4, #0]
 8002d88:	60a3      	str	r3, [r4, #8]
 8002d8a:	4632      	mov	r2, r6
 8002d8c:	4629      	mov	r1, r5
 8002d8e:	6820      	ldr	r0, [r4, #0]
 8002d90:	f7ff ffd7 	bl	8002d42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8002d94:	9b01      	ldr	r3, [sp, #4]
 8002d96:	6822      	ldr	r2, [r4, #0]
 8002d98:	6063      	str	r3, [r4, #4]
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	54d1      	strb	r1, [r2, r3]
 8002d9e:	b002      	add	sp, #8
 8002da0:	bd70      	pop	{r4, r5, r6, pc}
 8002da2:	bf00      	nop
 8002da4:	080031b8 	.word	0x080031b8

08002da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8002da8:	b538      	push	{r3, r4, r5, lr}
 8002daa:	f100 0308 	add.w	r3, r0, #8
 8002dae:	4604      	mov	r4, r0
 8002db0:	6003      	str	r3, [r0, #0]
 8002db2:	460d      	mov	r5, r1
 8002db4:	b159      	cbz	r1, 8002dce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8002db6:	4608      	mov	r0, r1
 8002db8:	f7fd fa06 	bl	80001c8 <strlen>
 8002dbc:	182a      	adds	r2, r5, r0
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	f7ff ffcb 	bl	8002d60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8002dca:	4620      	mov	r0, r4
 8002dcc:	bd38      	pop	{r3, r4, r5, pc}
 8002dce:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd2:	e7f4      	b.n	8002dbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08002dd4 <_Znwj>:
 8002dd4:	b510      	push	{r4, lr}
 8002dd6:	2800      	cmp	r0, #0
 8002dd8:	bf14      	ite	ne
 8002dda:	4604      	movne	r4, r0
 8002ddc:	2401      	moveq	r4, #1
 8002dde:	4620      	mov	r0, r4
 8002de0:	f000 f84c 	bl	8002e7c <malloc>
 8002de4:	b930      	cbnz	r0, 8002df4 <_Znwj+0x20>
 8002de6:	f000 f807 	bl	8002df8 <_ZSt15get_new_handlerv>
 8002dea:	b908      	cbnz	r0, 8002df0 <_Znwj+0x1c>
 8002dec:	f000 f814 	bl	8002e18 <abort>
 8002df0:	4780      	blx	r0
 8002df2:	e7f4      	b.n	8002dde <_Znwj+0xa>
 8002df4:	bd10      	pop	{r4, pc}
	...

08002df8 <_ZSt15get_new_handlerv>:
 8002df8:	4b02      	ldr	r3, [pc, #8]	; (8002e04 <_ZSt15get_new_handlerv+0xc>)
 8002dfa:	6818      	ldr	r0, [r3, #0]
 8002dfc:	f3bf 8f5b 	dmb	ish
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20000094 	.word	0x20000094

08002e08 <_ZdlPv>:
 8002e08:	f000 b840 	b.w	8002e8c <free>

08002e0c <_ZSt19__throw_logic_errorPKc>:
 8002e0c:	b508      	push	{r3, lr}
 8002e0e:	f000 f803 	bl	8002e18 <abort>

08002e12 <_ZSt20__throw_length_errorPKc>:
 8002e12:	b508      	push	{r3, lr}
 8002e14:	f000 f800 	bl	8002e18 <abort>

08002e18 <abort>:
 8002e18:	b508      	push	{r3, lr}
 8002e1a:	2006      	movs	r0, #6
 8002e1c:	f000 f932 	bl	8003084 <raise>
 8002e20:	2001      	movs	r0, #1
 8002e22:	f7fe f89d 	bl	8000f60 <_exit>
	...

08002e28 <__errno>:
 8002e28:	4b01      	ldr	r3, [pc, #4]	; (8002e30 <__errno+0x8>)
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	2000000c 	.word	0x2000000c

08002e34 <__libc_init_array>:
 8002e34:	b570      	push	{r4, r5, r6, lr}
 8002e36:	4e0d      	ldr	r6, [pc, #52]	; (8002e6c <__libc_init_array+0x38>)
 8002e38:	4c0d      	ldr	r4, [pc, #52]	; (8002e70 <__libc_init_array+0x3c>)
 8002e3a:	1ba4      	subs	r4, r4, r6
 8002e3c:	10a4      	asrs	r4, r4, #2
 8002e3e:	2500      	movs	r5, #0
 8002e40:	42a5      	cmp	r5, r4
 8002e42:	d109      	bne.n	8002e58 <__libc_init_array+0x24>
 8002e44:	4e0b      	ldr	r6, [pc, #44]	; (8002e74 <__libc_init_array+0x40>)
 8002e46:	4c0c      	ldr	r4, [pc, #48]	; (8002e78 <__libc_init_array+0x44>)
 8002e48:	f000 f93a 	bl	80030c0 <_init>
 8002e4c:	1ba4      	subs	r4, r4, r6
 8002e4e:	10a4      	asrs	r4, r4, #2
 8002e50:	2500      	movs	r5, #0
 8002e52:	42a5      	cmp	r5, r4
 8002e54:	d105      	bne.n	8002e62 <__libc_init_array+0x2e>
 8002e56:	bd70      	pop	{r4, r5, r6, pc}
 8002e58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e5c:	4798      	blx	r3
 8002e5e:	3501      	adds	r5, #1
 8002e60:	e7ee      	b.n	8002e40 <__libc_init_array+0xc>
 8002e62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e66:	4798      	blx	r3
 8002e68:	3501      	adds	r5, #1
 8002e6a:	e7f2      	b.n	8002e52 <__libc_init_array+0x1e>
 8002e6c:	080031fc 	.word	0x080031fc
 8002e70:	080031fc 	.word	0x080031fc
 8002e74:	080031fc 	.word	0x080031fc
 8002e78:	08003204 	.word	0x08003204

08002e7c <malloc>:
 8002e7c:	4b02      	ldr	r3, [pc, #8]	; (8002e88 <malloc+0xc>)
 8002e7e:	4601      	mov	r1, r0
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	f000 b86d 	b.w	8002f60 <_malloc_r>
 8002e86:	bf00      	nop
 8002e88:	2000000c 	.word	0x2000000c

08002e8c <free>:
 8002e8c:	4b02      	ldr	r3, [pc, #8]	; (8002e98 <free+0xc>)
 8002e8e:	4601      	mov	r1, r0
 8002e90:	6818      	ldr	r0, [r3, #0]
 8002e92:	f000 b817 	b.w	8002ec4 <_free_r>
 8002e96:	bf00      	nop
 8002e98:	2000000c 	.word	0x2000000c

08002e9c <memcpy>:
 8002e9c:	b510      	push	{r4, lr}
 8002e9e:	1e43      	subs	r3, r0, #1
 8002ea0:	440a      	add	r2, r1
 8002ea2:	4291      	cmp	r1, r2
 8002ea4:	d100      	bne.n	8002ea8 <memcpy+0xc>
 8002ea6:	bd10      	pop	{r4, pc}
 8002ea8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002eac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002eb0:	e7f7      	b.n	8002ea2 <memcpy+0x6>

08002eb2 <memset>:
 8002eb2:	4402      	add	r2, r0
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d100      	bne.n	8002ebc <memset+0xa>
 8002eba:	4770      	bx	lr
 8002ebc:	f803 1b01 	strb.w	r1, [r3], #1
 8002ec0:	e7f9      	b.n	8002eb6 <memset+0x4>
	...

08002ec4 <_free_r>:
 8002ec4:	b538      	push	{r3, r4, r5, lr}
 8002ec6:	4605      	mov	r5, r0
 8002ec8:	2900      	cmp	r1, #0
 8002eca:	d045      	beq.n	8002f58 <_free_r+0x94>
 8002ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ed0:	1f0c      	subs	r4, r1, #4
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	bfb8      	it	lt
 8002ed6:	18e4      	addlt	r4, r4, r3
 8002ed8:	f000 f8f0 	bl	80030bc <__malloc_lock>
 8002edc:	4a1f      	ldr	r2, [pc, #124]	; (8002f5c <_free_r+0x98>)
 8002ede:	6813      	ldr	r3, [r2, #0]
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	b933      	cbnz	r3, 8002ef2 <_free_r+0x2e>
 8002ee4:	6063      	str	r3, [r4, #4]
 8002ee6:	6014      	str	r4, [r2, #0]
 8002ee8:	4628      	mov	r0, r5
 8002eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002eee:	f000 b8e6 	b.w	80030be <__malloc_unlock>
 8002ef2:	42a3      	cmp	r3, r4
 8002ef4:	d90c      	bls.n	8002f10 <_free_r+0x4c>
 8002ef6:	6821      	ldr	r1, [r4, #0]
 8002ef8:	1862      	adds	r2, r4, r1
 8002efa:	4293      	cmp	r3, r2
 8002efc:	bf04      	itt	eq
 8002efe:	681a      	ldreq	r2, [r3, #0]
 8002f00:	685b      	ldreq	r3, [r3, #4]
 8002f02:	6063      	str	r3, [r4, #4]
 8002f04:	bf04      	itt	eq
 8002f06:	1852      	addeq	r2, r2, r1
 8002f08:	6022      	streq	r2, [r4, #0]
 8002f0a:	6004      	str	r4, [r0, #0]
 8002f0c:	e7ec      	b.n	8002ee8 <_free_r+0x24>
 8002f0e:	4613      	mov	r3, r2
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	b10a      	cbz	r2, 8002f18 <_free_r+0x54>
 8002f14:	42a2      	cmp	r2, r4
 8002f16:	d9fa      	bls.n	8002f0e <_free_r+0x4a>
 8002f18:	6819      	ldr	r1, [r3, #0]
 8002f1a:	1858      	adds	r0, r3, r1
 8002f1c:	42a0      	cmp	r0, r4
 8002f1e:	d10b      	bne.n	8002f38 <_free_r+0x74>
 8002f20:	6820      	ldr	r0, [r4, #0]
 8002f22:	4401      	add	r1, r0
 8002f24:	1858      	adds	r0, r3, r1
 8002f26:	4282      	cmp	r2, r0
 8002f28:	6019      	str	r1, [r3, #0]
 8002f2a:	d1dd      	bne.n	8002ee8 <_free_r+0x24>
 8002f2c:	6810      	ldr	r0, [r2, #0]
 8002f2e:	6852      	ldr	r2, [r2, #4]
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	4401      	add	r1, r0
 8002f34:	6019      	str	r1, [r3, #0]
 8002f36:	e7d7      	b.n	8002ee8 <_free_r+0x24>
 8002f38:	d902      	bls.n	8002f40 <_free_r+0x7c>
 8002f3a:	230c      	movs	r3, #12
 8002f3c:	602b      	str	r3, [r5, #0]
 8002f3e:	e7d3      	b.n	8002ee8 <_free_r+0x24>
 8002f40:	6820      	ldr	r0, [r4, #0]
 8002f42:	1821      	adds	r1, r4, r0
 8002f44:	428a      	cmp	r2, r1
 8002f46:	bf04      	itt	eq
 8002f48:	6811      	ldreq	r1, [r2, #0]
 8002f4a:	6852      	ldreq	r2, [r2, #4]
 8002f4c:	6062      	str	r2, [r4, #4]
 8002f4e:	bf04      	itt	eq
 8002f50:	1809      	addeq	r1, r1, r0
 8002f52:	6021      	streq	r1, [r4, #0]
 8002f54:	605c      	str	r4, [r3, #4]
 8002f56:	e7c7      	b.n	8002ee8 <_free_r+0x24>
 8002f58:	bd38      	pop	{r3, r4, r5, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000098 	.word	0x20000098

08002f60 <_malloc_r>:
 8002f60:	b570      	push	{r4, r5, r6, lr}
 8002f62:	1ccd      	adds	r5, r1, #3
 8002f64:	f025 0503 	bic.w	r5, r5, #3
 8002f68:	3508      	adds	r5, #8
 8002f6a:	2d0c      	cmp	r5, #12
 8002f6c:	bf38      	it	cc
 8002f6e:	250c      	movcc	r5, #12
 8002f70:	2d00      	cmp	r5, #0
 8002f72:	4606      	mov	r6, r0
 8002f74:	db01      	blt.n	8002f7a <_malloc_r+0x1a>
 8002f76:	42a9      	cmp	r1, r5
 8002f78:	d903      	bls.n	8002f82 <_malloc_r+0x22>
 8002f7a:	230c      	movs	r3, #12
 8002f7c:	6033      	str	r3, [r6, #0]
 8002f7e:	2000      	movs	r0, #0
 8002f80:	bd70      	pop	{r4, r5, r6, pc}
 8002f82:	f000 f89b 	bl	80030bc <__malloc_lock>
 8002f86:	4a21      	ldr	r2, [pc, #132]	; (800300c <_malloc_r+0xac>)
 8002f88:	6814      	ldr	r4, [r2, #0]
 8002f8a:	4621      	mov	r1, r4
 8002f8c:	b991      	cbnz	r1, 8002fb4 <_malloc_r+0x54>
 8002f8e:	4c20      	ldr	r4, [pc, #128]	; (8003010 <_malloc_r+0xb0>)
 8002f90:	6823      	ldr	r3, [r4, #0]
 8002f92:	b91b      	cbnz	r3, 8002f9c <_malloc_r+0x3c>
 8002f94:	4630      	mov	r0, r6
 8002f96:	f000 f83d 	bl	8003014 <_sbrk_r>
 8002f9a:	6020      	str	r0, [r4, #0]
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	4630      	mov	r0, r6
 8002fa0:	f000 f838 	bl	8003014 <_sbrk_r>
 8002fa4:	1c43      	adds	r3, r0, #1
 8002fa6:	d124      	bne.n	8002ff2 <_malloc_r+0x92>
 8002fa8:	230c      	movs	r3, #12
 8002faa:	6033      	str	r3, [r6, #0]
 8002fac:	4630      	mov	r0, r6
 8002fae:	f000 f886 	bl	80030be <__malloc_unlock>
 8002fb2:	e7e4      	b.n	8002f7e <_malloc_r+0x1e>
 8002fb4:	680b      	ldr	r3, [r1, #0]
 8002fb6:	1b5b      	subs	r3, r3, r5
 8002fb8:	d418      	bmi.n	8002fec <_malloc_r+0x8c>
 8002fba:	2b0b      	cmp	r3, #11
 8002fbc:	d90f      	bls.n	8002fde <_malloc_r+0x7e>
 8002fbe:	600b      	str	r3, [r1, #0]
 8002fc0:	50cd      	str	r5, [r1, r3]
 8002fc2:	18cc      	adds	r4, r1, r3
 8002fc4:	4630      	mov	r0, r6
 8002fc6:	f000 f87a 	bl	80030be <__malloc_unlock>
 8002fca:	f104 000b 	add.w	r0, r4, #11
 8002fce:	1d23      	adds	r3, r4, #4
 8002fd0:	f020 0007 	bic.w	r0, r0, #7
 8002fd4:	1ac3      	subs	r3, r0, r3
 8002fd6:	d0d3      	beq.n	8002f80 <_malloc_r+0x20>
 8002fd8:	425a      	negs	r2, r3
 8002fda:	50e2      	str	r2, [r4, r3]
 8002fdc:	e7d0      	b.n	8002f80 <_malloc_r+0x20>
 8002fde:	428c      	cmp	r4, r1
 8002fe0:	684b      	ldr	r3, [r1, #4]
 8002fe2:	bf16      	itet	ne
 8002fe4:	6063      	strne	r3, [r4, #4]
 8002fe6:	6013      	streq	r3, [r2, #0]
 8002fe8:	460c      	movne	r4, r1
 8002fea:	e7eb      	b.n	8002fc4 <_malloc_r+0x64>
 8002fec:	460c      	mov	r4, r1
 8002fee:	6849      	ldr	r1, [r1, #4]
 8002ff0:	e7cc      	b.n	8002f8c <_malloc_r+0x2c>
 8002ff2:	1cc4      	adds	r4, r0, #3
 8002ff4:	f024 0403 	bic.w	r4, r4, #3
 8002ff8:	42a0      	cmp	r0, r4
 8002ffa:	d005      	beq.n	8003008 <_malloc_r+0xa8>
 8002ffc:	1a21      	subs	r1, r4, r0
 8002ffe:	4630      	mov	r0, r6
 8003000:	f000 f808 	bl	8003014 <_sbrk_r>
 8003004:	3001      	adds	r0, #1
 8003006:	d0cf      	beq.n	8002fa8 <_malloc_r+0x48>
 8003008:	6025      	str	r5, [r4, #0]
 800300a:	e7db      	b.n	8002fc4 <_malloc_r+0x64>
 800300c:	20000098 	.word	0x20000098
 8003010:	2000009c 	.word	0x2000009c

08003014 <_sbrk_r>:
 8003014:	b538      	push	{r3, r4, r5, lr}
 8003016:	4c06      	ldr	r4, [pc, #24]	; (8003030 <_sbrk_r+0x1c>)
 8003018:	2300      	movs	r3, #0
 800301a:	4605      	mov	r5, r0
 800301c:	4608      	mov	r0, r1
 800301e:	6023      	str	r3, [r4, #0]
 8003020:	f7fd ffa8 	bl	8000f74 <_sbrk>
 8003024:	1c43      	adds	r3, r0, #1
 8003026:	d102      	bne.n	800302e <_sbrk_r+0x1a>
 8003028:	6823      	ldr	r3, [r4, #0]
 800302a:	b103      	cbz	r3, 800302e <_sbrk_r+0x1a>
 800302c:	602b      	str	r3, [r5, #0]
 800302e:	bd38      	pop	{r3, r4, r5, pc}
 8003030:	200000f0 	.word	0x200000f0

08003034 <_raise_r>:
 8003034:	291f      	cmp	r1, #31
 8003036:	b538      	push	{r3, r4, r5, lr}
 8003038:	4604      	mov	r4, r0
 800303a:	460d      	mov	r5, r1
 800303c:	d904      	bls.n	8003048 <_raise_r+0x14>
 800303e:	2316      	movs	r3, #22
 8003040:	6003      	str	r3, [r0, #0]
 8003042:	f04f 30ff 	mov.w	r0, #4294967295
 8003046:	bd38      	pop	{r3, r4, r5, pc}
 8003048:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800304a:	b112      	cbz	r2, 8003052 <_raise_r+0x1e>
 800304c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003050:	b94b      	cbnz	r3, 8003066 <_raise_r+0x32>
 8003052:	4620      	mov	r0, r4
 8003054:	f000 f830 	bl	80030b8 <_getpid_r>
 8003058:	462a      	mov	r2, r5
 800305a:	4601      	mov	r1, r0
 800305c:	4620      	mov	r0, r4
 800305e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003062:	f000 b817 	b.w	8003094 <_kill_r>
 8003066:	2b01      	cmp	r3, #1
 8003068:	d00a      	beq.n	8003080 <_raise_r+0x4c>
 800306a:	1c59      	adds	r1, r3, #1
 800306c:	d103      	bne.n	8003076 <_raise_r+0x42>
 800306e:	2316      	movs	r3, #22
 8003070:	6003      	str	r3, [r0, #0]
 8003072:	2001      	movs	r0, #1
 8003074:	e7e7      	b.n	8003046 <_raise_r+0x12>
 8003076:	2400      	movs	r4, #0
 8003078:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800307c:	4628      	mov	r0, r5
 800307e:	4798      	blx	r3
 8003080:	2000      	movs	r0, #0
 8003082:	e7e0      	b.n	8003046 <_raise_r+0x12>

08003084 <raise>:
 8003084:	4b02      	ldr	r3, [pc, #8]	; (8003090 <raise+0xc>)
 8003086:	4601      	mov	r1, r0
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	f7ff bfd3 	b.w	8003034 <_raise_r>
 800308e:	bf00      	nop
 8003090:	2000000c 	.word	0x2000000c

08003094 <_kill_r>:
 8003094:	b538      	push	{r3, r4, r5, lr}
 8003096:	4c07      	ldr	r4, [pc, #28]	; (80030b4 <_kill_r+0x20>)
 8003098:	2300      	movs	r3, #0
 800309a:	4605      	mov	r5, r0
 800309c:	4608      	mov	r0, r1
 800309e:	4611      	mov	r1, r2
 80030a0:	6023      	str	r3, [r4, #0]
 80030a2:	f7fd ff4d 	bl	8000f40 <_kill>
 80030a6:	1c43      	adds	r3, r0, #1
 80030a8:	d102      	bne.n	80030b0 <_kill_r+0x1c>
 80030aa:	6823      	ldr	r3, [r4, #0]
 80030ac:	b103      	cbz	r3, 80030b0 <_kill_r+0x1c>
 80030ae:	602b      	str	r3, [r5, #0]
 80030b0:	bd38      	pop	{r3, r4, r5, pc}
 80030b2:	bf00      	nop
 80030b4:	200000f0 	.word	0x200000f0

080030b8 <_getpid_r>:
 80030b8:	f7fd bf3a 	b.w	8000f30 <_getpid>

080030bc <__malloc_lock>:
 80030bc:	4770      	bx	lr

080030be <__malloc_unlock>:
 80030be:	4770      	bx	lr

080030c0 <_init>:
 80030c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c2:	bf00      	nop
 80030c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c6:	bc08      	pop	{r3}
 80030c8:	469e      	mov	lr, r3
 80030ca:	4770      	bx	lr

080030cc <_fini>:
 80030cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ce:	bf00      	nop
 80030d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d2:	bc08      	pop	{r3}
 80030d4:	469e      	mov	lr, r3
 80030d6:	4770      	bx	lr
