
GrafikTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004470  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080045f8  080045f8  000145f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004670  08004670  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004670  08004670  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004670  08004670  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004670  08004670  00014670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004678  08004678  00014678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800467c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000070  080046ec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  080046ec  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6c6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a50  00000000  00000000  0003a766  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000828  00000000  00000000  0003d1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000730  00000000  00000000  0003d9e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b2e5  00000000  00000000  0003e110  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ab68  00000000  00000000  000593f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e059  00000000  00000000  00063f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1fb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002368  00000000  00000000  000f2034  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080045e0 	.word	0x080045e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080045e0 	.word	0x080045e0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <_ZN7AppMainC1Ev>:

//#include<iostream>
#include<string> // for string class
using namespace std;

AppMain::AppMain() {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f8bf 	bl	8000c6e <_ZN9LCDDriverC1Ev>
	// TODO Auto-generated constructor stub

}
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <_ZN7AppMain4mainEv>:

void AppMain::main(){
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af02      	add	r7, sp, #8
 8000b00:	6078      	str	r0, [r7, #4]
	lcdDriver.InitLCD();
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 f8bd 	bl	8000c84 <_ZN9LCDDriver7InitLCDEv>
	lcdDriver.WriteText("Memory Testing : 64K OK ");
	HAL_Delay(800);
	lcdDriver.SetAddressPointer(0, 15);
	lcdDriver.WriteText("Press F1 to enter BIOS...");
	*/
	lcdDriver.WriteRectangle(140, 50, 51, 30, 1);
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	9301      	str	r3, [sp, #4]
 8000b10:	231e      	movs	r3, #30
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	2333      	movs	r3, #51	; 0x33
 8000b16:	2232      	movs	r2, #50	; 0x32
 8000b18:	218c      	movs	r1, #140	; 0x8c
 8000b1a:	f000 f911 	bl	8000d40 <_ZN9LCDDriver14WriteRectangleEhhhhh>
	while(1){
		for(int i = 0; i<98;i++){
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	2b61      	cmp	r3, #97	; 0x61
 8000b26:	dc4e      	bgt.n	8000bc6 <_ZN7AppMain4mainEv+0xcc>
			lcdDriver.WriteRectangle(i+20, i, 30, 20, 1);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	3314      	adds	r3, #20
 8000b30:	b2d9      	uxtb	r1, r3
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	2301      	movs	r3, #1
 8000b38:	9301      	str	r3, [sp, #4]
 8000b3a:	2314      	movs	r3, #20
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	231e      	movs	r3, #30
 8000b40:	f000 f8fe 	bl	8000d40 <_ZN9LCDDriver14WriteRectangleEhhhhh>
			lcdDriver.WriteRectangle(200, i, 30, 20, 1);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	9301      	str	r3, [sp, #4]
 8000b4e:	2314      	movs	r3, #20
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	231e      	movs	r3, #30
 8000b54:	21c8      	movs	r1, #200	; 0xc8
 8000b56:	f000 f8f3 	bl	8000d40 <_ZN9LCDDriver14WriteRectangleEhhhhh>
			lcdDriver.WriteRectangle(i, 0, 30, 20, 1);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	b2d9      	uxtb	r1, r3
 8000b60:	2301      	movs	r3, #1
 8000b62:	9301      	str	r3, [sp, #4]
 8000b64:	2314      	movs	r3, #20
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	231e      	movs	r3, #30
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f000 f8e8 	bl	8000d40 <_ZN9LCDDriver14WriteRectangleEhhhhh>
			HAL_Delay(10);
 8000b70:	200a      	movs	r0, #10
 8000b72:	f000 fee1 	bl	8001938 <HAL_Delay>
			//lcdDriver.WriteRectangle(i+20+1, i+1, 30, 20, 1);
			lcdDriver.WriteRectangle(i+20, i, 30, 20, 0);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	3314      	adds	r3, #20
 8000b7e:	b2d9      	uxtb	r1, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	2300      	movs	r3, #0
 8000b86:	9301      	str	r3, [sp, #4]
 8000b88:	2314      	movs	r3, #20
 8000b8a:	9300      	str	r3, [sp, #0]
 8000b8c:	231e      	movs	r3, #30
 8000b8e:	f000 f8d7 	bl	8000d40 <_ZN9LCDDriver14WriteRectangleEhhhhh>
			lcdDriver.WriteRectangle(200, i, 30, 20, 0);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	2300      	movs	r3, #0
 8000b9a:	9301      	str	r3, [sp, #4]
 8000b9c:	2314      	movs	r3, #20
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	231e      	movs	r3, #30
 8000ba2:	21c8      	movs	r1, #200	; 0xc8
 8000ba4:	f000 f8cc 	bl	8000d40 <_ZN9LCDDriver14WriteRectangleEhhhhh>
			lcdDriver.WriteRectangle(i, 0, 30, 20, 0);
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	b2d9      	uxtb	r1, r3
 8000bae:	2300      	movs	r3, #0
 8000bb0:	9301      	str	r3, [sp, #4]
 8000bb2:	2314      	movs	r3, #20
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	231e      	movs	r3, #30
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f000 f8c1 	bl	8000d40 <_ZN9LCDDriver14WriteRectangleEhhhhh>
		for(int i = 0; i<98;i++){
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	e7ad      	b.n	8000b22 <_ZN7AppMain4mainEv+0x28>
			//lcdDriver.ClearDisplay();
		}

		for(int i = 98; i>0;i--){
 8000bc6:	2362      	movs	r3, #98	; 0x62
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	dda6      	ble.n	8000b1e <_ZN7AppMain4mainEv+0x24>
			lcdDriver.WriteRectangle(i+20, i, 30, 20, 1);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	3314      	adds	r3, #20
 8000bd8:	b2d9      	uxtb	r1, r3
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	2301      	movs	r3, #1
 8000be0:	9301      	str	r3, [sp, #4]
 8000be2:	2314      	movs	r3, #20
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	231e      	movs	r3, #30
 8000be8:	f000 f8aa 	bl	8000d40 <_ZN9LCDDriver14WriteRectangleEhhhhh>
			lcdDriver.WriteRectangle(200, i, 30, 20, 1);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	9301      	str	r3, [sp, #4]
 8000bf6:	2314      	movs	r3, #20
 8000bf8:	9300      	str	r3, [sp, #0]
 8000bfa:	231e      	movs	r3, #30
 8000bfc:	21c8      	movs	r1, #200	; 0xc8
 8000bfe:	f000 f89f 	bl	8000d40 <_ZN9LCDDriver14WriteRectangleEhhhhh>
			lcdDriver.WriteRectangle(i, 0, 30, 20, 1);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	b2d9      	uxtb	r1, r3
 8000c08:	2301      	movs	r3, #1
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	2314      	movs	r3, #20
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	231e      	movs	r3, #30
 8000c12:	2200      	movs	r2, #0
 8000c14:	f000 f894 	bl	8000d40 <_ZN9LCDDriver14WriteRectangleEhhhhh>
			HAL_Delay(10);
 8000c18:	200a      	movs	r0, #10
 8000c1a:	f000 fe8d 	bl	8001938 <HAL_Delay>
			//lcdDriver.WriteRectangle(i+20-1, i-1, 30, 20, 1);
			lcdDriver.WriteRectangle(i+20, i, 30, 20, 0);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	3314      	adds	r3, #20
 8000c26:	b2d9      	uxtb	r1, r3
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	9301      	str	r3, [sp, #4]
 8000c30:	2314      	movs	r3, #20
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	231e      	movs	r3, #30
 8000c36:	f000 f883 	bl	8000d40 <_ZN9LCDDriver14WriteRectangleEhhhhh>
			lcdDriver.WriteRectangle(200, i, 30, 20, 0);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	2300      	movs	r3, #0
 8000c42:	9301      	str	r3, [sp, #4]
 8000c44:	2314      	movs	r3, #20
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	231e      	movs	r3, #30
 8000c4a:	21c8      	movs	r1, #200	; 0xc8
 8000c4c:	f000 f878 	bl	8000d40 <_ZN9LCDDriver14WriteRectangleEhhhhh>
			lcdDriver.WriteRectangle(i, 0, 30, 20, 0);
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	b2d9      	uxtb	r1, r3
 8000c56:	2300      	movs	r3, #0
 8000c58:	9301      	str	r3, [sp, #4]
 8000c5a:	2314      	movs	r3, #20
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	231e      	movs	r3, #30
 8000c60:	2200      	movs	r2, #0
 8000c62:	f000 f86d 	bl	8000d40 <_ZN9LCDDriver14WriteRectangleEhhhhh>
		for(int i = 98; i>0;i--){
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	e7ad      	b.n	8000bca <_ZN7AppMain4mainEv+0xd0>

08000c6e <_ZN9LCDDriverC1Ev>:
#include "i2c.h"
#include "gpio.h"
#include "stdlib.h"
#include "math.h"

LCDDriver::LCDDriver() {
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <_ZN9LCDDriver7InitLCDEv>:


void LCDDriver::InitLCD(){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	Reset();
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f000 fb8d 	bl	80013ac <_ZN9LCDDriver5ResetEv>
	LCD_RD_SET;
 8000c92:	2201      	movs	r2, #1
 8000c94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9c:	f001 f8c6 	bl	8001e2c <HAL_GPIO_WritePin>
	LCD_WR_SET;
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000caa:	f001 f8bf 	bl	8001e2c <HAL_GPIO_WritePin>
	SetLCDSize(SIZE_40C);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f000 f99d 	bl	8000ff0 <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E>

	//init REGISTERS SETTING
	WriteData_16bit(LCD_setCursorPointer,0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2121      	movs	r1, #33	; 0x21
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f000 fab1 	bl	8001222 <_ZN9LCDDriver15WriteData_16bitEht>
	WriteData_16bit(LCD_setAddressPointer, 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2124      	movs	r1, #36	; 0x24
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f000 faac 	bl	8001222 <_ZN9LCDDriver15WriteData_16bitEht>
	WriteData_16bit(LCD_setOffsetRegister, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2122      	movs	r1, #34	; 0x22
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f000 faa7 	bl	8001222 <_ZN9LCDDriver15WriteData_16bitEht>
	//Init SET CONTROL WORD
	WriteData_16bit(LCD_setTextHomeAddress,LCD_TXT_START_ADDR);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2140      	movs	r1, #64	; 0x40
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f000 faa2 	bl	8001222 <_ZN9LCDDriver15WriteData_16bitEht>
	WriteData_16bit(LCD_setGraphicHomeAddress, LCD_GRAPHIC_START_ADDR);
 8000cde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ce2:	2142      	movs	r1, #66	; 0x42
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f000 fa9c 	bl	8001222 <_ZN9LCDDriver15WriteData_16bitEht>
	//Init MODE SET
	WriteData_8bit(LCD_OR_mode |LCD_InternalCGROM_mode);
 8000cea:	2180      	movs	r1, #128	; 0x80
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 fa3a 	bl	8001166 <_ZN9LCDDriver14WriteData_8bitEh>
	//Init DISPLY MODE
	WriteData_8bit(LCD_cursorOnBlinkON | LCD_textONGraphicON);
 8000cf2:	219f      	movs	r1, #159	; 0x9f
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f000 fa36 	bl	8001166 <_ZN9LCDDriver14WriteData_8bitEh>
	//Init CURSOR PATTERN SELECT
	WriteData_8bit(LCD_1_lineCursor);
 8000cfa:	21a0      	movs	r1, #160	; 0xa0
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f000 fa32 	bl	8001166 <_ZN9LCDDriver14WriteData_8bitEh>
	//Init DATA AUTO READ/WRITE
	WriteData_8bit(LCD_setDataAutoRead);
 8000d02:	21b1      	movs	r1, #177	; 0xb1
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f000 fa2e 	bl	8001166 <_ZN9LCDDriver14WriteData_8bitEh>
	//Init SCREEN REVERSE
	WriteData_16bit(LCD_SCREEN_REVERSE, NORMAL_DISPLAY);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	21d0      	movs	r1, #208	; 0xd0
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f000 fa87 	bl	8001222 <_ZN9LCDDriver15WriteData_16bitEht>
	//Init BLINK TIME
	WriteData_16bit(LCD_BLINK_TIME, BLINK_TIM_0_066);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2150      	movs	r1, #80	; 0x50
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f000 fa82 	bl	8001222 <_ZN9LCDDriver15WriteData_16bitEht>
	//Init CURSOR AUTO MOVING
	WriteData_16bit(LCD_CursorAutoMoving, AUTO_MOVING_ON);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2160      	movs	r1, #96	; 0x60
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f000 fa7d 	bl	8001222 <_ZN9LCDDriver15WriteData_16bitEht>

	ClearDisplay();
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f000 f9b6 	bl	800109a <_ZN9LCDDriver12ClearDisplayEv>
	SetAddressPointer(0, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f000 f9f9 	bl	800112a <_ZN9LCDDriver17SetAddressPointerEhh>
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <_ZN9LCDDriver14WriteRectangleEhhhhh>:
 * param height		y size of the rectangle	(pixel)
 * param lineThickness	thicknes of the line
 *
 * @return none
 */
void LCDDriver::WriteRectangle(uint8_t startX, uint8_t startY, uint8_t width, uint8_t height, uint8_t lineThickness){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af02      	add	r7, sp, #8
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	4608      	mov	r0, r1
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4603      	mov	r3, r0
 8000d50:	70fb      	strb	r3, [r7, #3]
 8000d52:	460b      	mov	r3, r1
 8000d54:	70bb      	strb	r3, [r7, #2]
 8000d56:	4613      	mov	r3, r2
 8000d58:	707b      	strb	r3, [r7, #1]


	uint16_t topLineStartAddr = LCD_GRAPHIC_START_ADDR + startY * LCD_XY_SIZE.column + startX/6;	//calculate the RAM address from the given x/y position
 8000d5a:	78bb      	ldrb	r3, [r7, #2]
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	fb12 f303 	smulbb	r3, r2, r3
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	78fb      	ldrb	r3, [r7, #3]
 8000d6c:	4926      	ldr	r1, [pc, #152]	; (8000e08 <_ZN9LCDDriver14WriteRectangleEhhhhh+0xc8>)
 8000d6e:	fba1 1303 	umull	r1, r3, r1, r3
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	4413      	add	r3, r2
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d80:	81fb      	strh	r3, [r7, #14]
	uint16_t bottomLineStartAddr = topLineStartAddr + height * LCD_XY_SIZE.column;
 8000d82:	7e3b      	ldrb	r3, [r7, #24]
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	fb12 f303 	smulbb	r3, r2, r3
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	89fb      	ldrh	r3, [r7, #14]
 8000d94:	4413      	add	r3, r2
 8000d96:	81bb      	strh	r3, [r7, #12]

	WriteData_16bit(LCD_setAddressPointer, topLineStartAddr);				//set Address pointer to Graphic Address
 8000d98:	89fb      	ldrh	r3, [r7, #14]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	2124      	movs	r1, #36	; 0x24
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f000 fa3f 	bl	8001222 <_ZN9LCDDriver15WriteData_16bitEht>
	WriteXLine(startX, startY, width, lineThickness);
 8000da4:	7878      	ldrb	r0, [r7, #1]
 8000da6:	78ba      	ldrb	r2, [r7, #2]
 8000da8:	78f9      	ldrb	r1, [r7, #3]
 8000daa:	7f3b      	ldrb	r3, [r7, #28]
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	4603      	mov	r3, r0
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f000 f891 	bl	8000ed8 <_ZN9LCDDriver10WriteXLineEhhhh>
	WriteYLine(startX, startY, height, lineThickness);
 8000db6:	7e38      	ldrb	r0, [r7, #24]
 8000db8:	78ba      	ldrb	r2, [r7, #2]
 8000dba:	78f9      	ldrb	r1, [r7, #3]
 8000dbc:	7f3b      	ldrb	r3, [r7, #28]
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f000 f822 	bl	8000e0c <_ZN9LCDDriver10WriteYLineEhhhh>
	WriteData_16bit(LCD_setAddressPointer, bottomLineStartAddr);				//set Address pointer to Graphic Address
 8000dc8:	89bb      	ldrh	r3, [r7, #12]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	2124      	movs	r1, #36	; 0x24
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f000 fa27 	bl	8001222 <_ZN9LCDDriver15WriteData_16bitEht>
	WriteXLine(startX, startY, width, lineThickness);
 8000dd4:	7878      	ldrb	r0, [r7, #1]
 8000dd6:	78ba      	ldrb	r2, [r7, #2]
 8000dd8:	78f9      	ldrb	r1, [r7, #3]
 8000dda:	7f3b      	ldrb	r3, [r7, #28]
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	4603      	mov	r3, r0
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f000 f879 	bl	8000ed8 <_ZN9LCDDriver10WriteXLineEhhhh>
	WriteYLine(startX+width, startY, height, lineThickness);
 8000de6:	78fa      	ldrb	r2, [r7, #3]
 8000de8:	787b      	ldrb	r3, [r7, #1]
 8000dea:	4413      	add	r3, r2
 8000dec:	b2d9      	uxtb	r1, r3
 8000dee:	7e38      	ldrb	r0, [r7, #24]
 8000df0:	78ba      	ldrb	r2, [r7, #2]
 8000df2:	7f3b      	ldrb	r3, [r7, #28]
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	4603      	mov	r3, r0
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f000 f807 	bl	8000e0c <_ZN9LCDDriver10WriteYLineEhhhh>



}
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	aaaaaaab 	.word	0xaaaaaaab

08000e0c <_ZN9LCDDriver10WriteYLineEhhhh>:

void LCDDriver::WriteYLine(uint8_t startX,uint8_t startY, uint8_t height, uint8_t lineThickness){
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	4608      	mov	r0, r1
 8000e16:	4611      	mov	r1, r2
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	70fb      	strb	r3, [r7, #3]
 8000e1e:	460b      	mov	r3, r1
 8000e20:	70bb      	strb	r3, [r7, #2]
 8000e22:	4613      	mov	r3, r2
 8000e24:	707b      	strb	r3, [r7, #1]
	uint16_t pixelAddr = LCD_GRAPHIC_START_ADDR + startY * LCD_XY_SIZE.column + startX/6;
 8000e26:	78bb      	ldrb	r3, [r7, #2]
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	fb12 f303 	smulbb	r3, r2, r3
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	78fb      	ldrb	r3, [r7, #3]
 8000e38:	4926      	ldr	r1, [pc, #152]	; (8000ed4 <_ZN9LCDDriver10WriteYLineEhhhh+0xc8>)
 8000e3a:	fba1 1303 	umull	r1, r3, r1, r3
 8000e3e:	089b      	lsrs	r3, r3, #2
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	4413      	add	r3, r2
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e4c:	81bb      	strh	r3, [r7, #12]
	uint8_t startPixel_x = startX % LCD_XY_SIZE.patternWidth;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	78da      	ldrb	r2, [r3, #3]
 8000e52:	78fb      	ldrb	r3, [r7, #3]
 8000e54:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e58:	fb02 f201 	mul.w	r2, r2, r1
 8000e5c:	1a9b      	subs	r3, r3, r2
 8000e5e:	72fb      	strb	r3, [r7, #11]

	startPixel_x = pow(2,LCD_XY_SIZE.patternWidth-startPixel_x);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	78db      	ldrb	r3, [r3, #3]
 8000e64:	461a      	mov	r2, r3
 8000e66:	7afb      	ldrb	r3, [r7, #11]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	2002      	movs	r0, #2
 8000e6e:	f000 fab4 	bl	80013da <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000e72:	ec54 3b10 	vmov	r3, r4, d0
 8000e76:	4618      	mov	r0, r3
 8000e78:	4621      	mov	r1, r4
 8000e7a:	f7ff fe11 	bl	8000aa0 <__aeabi_d2uiz>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	72fb      	strb	r3, [r7, #11]
	for(uint8_t i = 1; i<height; i++){
 8000e82:	2301      	movs	r3, #1
 8000e84:	73fb      	strb	r3, [r7, #15]
 8000e86:	7bfa      	ldrb	r2, [r7, #15]
 8000e88:	787b      	ldrb	r3, [r7, #1]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d21e      	bcs.n	8000ecc <_ZN9LCDDriver10WriteYLineEhhhh+0xc0>
		WriteData_16bit(LCD_setAddressPointer, pixelAddr+LCD_XY_SIZE.column * i);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	fb12 f303 	smulbb	r3, r2, r3
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	89bb      	ldrh	r3, [r7, #12]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	2124      	movs	r1, #36	; 0x24
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f000 f9ba 	bl	8001222 <_ZN9LCDDriver15WriteData_16bitEht>
		WriteData_8bit(LCD_dataWriteAndIncrementADP,startPixel_x*lineThickness);
 8000eae:	7afa      	ldrb	r2, [r7, #11]
 8000eb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000eb4:	fb12 f303 	smulbb	r3, r2, r3
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	461a      	mov	r2, r3
 8000ebc:	21c0      	movs	r1, #192	; 0xc0
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f000 f978 	bl	80011b4 <_ZN9LCDDriver14WriteData_8bitEhh>
	for(uint8_t i = 1; i<height; i++){
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	73fb      	strb	r3, [r7, #15]
 8000eca:	e7dc      	b.n	8000e86 <_ZN9LCDDriver10WriteYLineEhhhh+0x7a>
	}
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd90      	pop	{r4, r7, pc}
 8000ed4:	aaaaaaab 	.word	0xaaaaaaab

08000ed8 <_ZN9LCDDriver10WriteXLineEhhhh>:


void LCDDriver::WriteXLine(uint8_t startX,uint8_t startY, uint8_t width, uint8_t lineThickness){
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	70fb      	strb	r3, [r7, #3]
 8000eea:	460b      	mov	r3, r1
 8000eec:	70bb      	strb	r3, [r7, #2]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	707b      	strb	r3, [r7, #1]
	uint8_t lineCounter = width;
 8000ef2:	787b      	ldrb	r3, [r7, #1]
 8000ef4:	73fb      	strb	r3, [r7, #15]
	uint8_t lineSize = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	73bb      	strb	r3, [r7, #14]
	uint8_t startPixel_x = startX % LCD_XY_SIZE.patternWidth;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	78da      	ldrb	r2, [r3, #3]
 8000efe:	78fb      	ldrb	r3, [r7, #3]
 8000f00:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f04:	fb02 f201 	mul.w	r2, r2, r1
 8000f08:	1a9b      	subs	r3, r3, r2
 8000f0a:	737b      	strb	r3, [r7, #13]

	//write first line
	if(LCD_XY_SIZE.patternWidth-startPixel_x < width){
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	78db      	ldrb	r3, [r3, #3]
 8000f10:	461a      	mov	r2, r3
 8000f12:	7b7b      	ldrb	r3, [r7, #13]
 8000f14:	1ad2      	subs	r2, r2, r3
 8000f16:	787b      	ldrb	r3, [r7, #1]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	da25      	bge.n	8000f68 <_ZN9LCDDriver10WriteXLineEhhhh+0x90>
		lineSize = pow(2,LCD_XY_SIZE.patternWidth-startPixel_x);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	78db      	ldrb	r3, [r3, #3]
 8000f20:	461a      	mov	r2, r3
 8000f22:	7b7b      	ldrb	r3, [r7, #13]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	4619      	mov	r1, r3
 8000f28:	2002      	movs	r0, #2
 8000f2a:	f000 fa56 	bl	80013da <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000f2e:	ec54 3b10 	vmov	r3, r4, d0
 8000f32:	4618      	mov	r0, r3
 8000f34:	4621      	mov	r1, r4
 8000f36:	f7ff fdb3 	bl	8000aa0 <__aeabi_d2uiz>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	73bb      	strb	r3, [r7, #14]
		WriteData_8bit(LCD_dataWriteAndIncrementADP,(lineSize-1)*lineThickness);
 8000f3e:	7bbb      	ldrb	r3, [r7, #14]
 8000f40:	3b01      	subs	r3, #1
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000f48:	fb12 f303 	smulbb	r3, r2, r3
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	461a      	mov	r2, r3
 8000f50:	21c0      	movs	r1, #192	; 0xc0
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 f92e 	bl	80011b4 <_ZN9LCDDriver14WriteData_8bitEhh>
		lineCounter -= LCD_XY_SIZE.patternWidth-startPixel_x;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	78db      	ldrb	r3, [r3, #3]
 8000f5c:	7b7a      	ldrb	r2, [r7, #13]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	4413      	add	r3, r2
 8000f66:	73fb      	strb	r3, [r7, #15]
	}

	//write middle line
	while(lineCounter > LCD_XY_SIZE.patternWidth){
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	78db      	ldrb	r3, [r3, #3]
 8000f6c:	7bfa      	ldrb	r2, [r7, #15]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d90e      	bls.n	8000f90 <_ZN9LCDDriver10WriteXLineEhhhh+0xb8>
		WriteData_8bit(LCD_dataWriteAndIncrementADP,0xFF*lineThickness);
 8000f72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f76:	425b      	negs	r3, r3
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	21c0      	movs	r1, #192	; 0xc0
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 f918 	bl	80011b4 <_ZN9LCDDriver14WriteData_8bitEhh>
		lineCounter -= LCD_XY_SIZE.patternWidth;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	78db      	ldrb	r3, [r3, #3]
 8000f88:	7bfa      	ldrb	r2, [r7, #15]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	73fb      	strb	r3, [r7, #15]
	while(lineCounter > LCD_XY_SIZE.patternWidth){
 8000f8e:	e7eb      	b.n	8000f68 <_ZN9LCDDriver10WriteXLineEhhhh+0x90>
	}

	//write end line
	if(lineCounter > 0){
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d026      	beq.n	8000fe4 <_ZN9LCDDriver10WriteXLineEhhhh+0x10c>
		lineSize = pow(2,LCD_XY_SIZE.patternWidth-lineCounter)-1;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	78db      	ldrb	r3, [r3, #3]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	2002      	movs	r0, #2
 8000fa4:	f000 fa19 	bl	80013da <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000fa8:	ec51 0b10 	vmov	r0, r1, d0
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <_ZN9LCDDriver10WriteXLineEhhhh+0x114>)
 8000fb2:	f7ff f90d 	bl	80001d0 <__aeabi_dsub>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	460c      	mov	r4, r1
 8000fba:	4618      	mov	r0, r3
 8000fbc:	4621      	mov	r1, r4
 8000fbe:	f7ff fd6f 	bl	8000aa0 <__aeabi_d2uiz>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	73bb      	strb	r3, [r7, #14]
		WriteData_8bit(LCD_dataWriteAndIncrementADP,(lineSize ^ 0xFF)*lineThickness);
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fd0:	fb12 f303 	smulbb	r3, r2, r3
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	21c0      	movs	r1, #192	; 0xc0
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 f8ea 	bl	80011b4 <_ZN9LCDDriver14WriteData_8bitEhh>
		lineCounter = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]
	}
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd90      	pop	{r4, r7, pc}
 8000fec:	3ff00000 	.word	0x3ff00000

08000ff0 <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E>:
 * Init the LCD Size (40 Columns / 32 Columns)
 *
 * @param size: LCD Size
 * @return : none
 */
void LCDDriver::SetLCDSize(LCD_SIZE size){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
	if(size == SIZE_40C){
 8000ffc:	78fb      	ldrb	r3, [r7, #3]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d122      	bne.n	8001048 <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E+0x58>
		LCD_SIZE_40;				//set size 40 Columns
 8001002:	2200      	movs	r2, #0
 8001004:	2102      	movs	r1, #2
 8001006:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100a:	f000 ff0f 	bl	8001e2c <HAL_GPIO_WritePin>
		LCD_FONT_68;				//set Fontsize 6x8px
 800100e:	2201      	movs	r2, #1
 8001010:	2101      	movs	r1, #1
 8001012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001016:	f000 ff09 	bl	8001e2c <HAL_GPIO_WritePin>
		LCD_XY_SIZE.column = LCD_WIDTH/6;	//set LCD size struct to 40 Columns
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2228      	movs	r2, #40	; 0x28
 800101e:	701a      	strb	r2, [r3, #0]
		LCD_XY_SIZE.row = LCD_WIDTH/8;		//set LCD size struct to 16 Row
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	221e      	movs	r2, #30
 8001024:	705a      	strb	r2, [r3, #1]
		LCD_XY_SIZE.patternHeight = 8;		//set pattern height to 8 pixel (pattern is the 6x8 pixel container)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2208      	movs	r2, #8
 800102a:	709a      	strb	r2, [r3, #2]
		LCD_XY_SIZE.patternWidth =  6;		//set pattern width to 6 pixel (pattern is the 6x8 pixel container)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2206      	movs	r2, #6
 8001030:	70da      	strb	r2, [r3, #3]
		WriteData_16bit(LCD_setTextArea, 0x0028);	//set TextArea to 40 Columns
 8001032:	2228      	movs	r2, #40	; 0x28
 8001034:	2141      	movs	r1, #65	; 0x41
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 f8f3 	bl	8001222 <_ZN9LCDDriver15WriteData_16bitEht>
		WriteData_16bit(LCD_setGraphicArea, 0x0028);
 800103c:	2228      	movs	r2, #40	; 0x28
 800103e:	2143      	movs	r1, #67	; 0x43
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 f8ee 	bl	8001222 <_ZN9LCDDriver15WriteData_16bitEht>
		LCD_XY_SIZE.patternHeight = 8;		//set pattern height to 8 pixel (pattern is the 6x8 pixel container)
		LCD_XY_SIZE.patternWidth =  8;		//set pattern width to 6 pixel (pattern is the 6x8 pixel container)
		WriteData_16bit(LCD_setTextArea, 0x0020);	//set TextArea to 32 Columns
		WriteData_16bit(LCD_setGraphicArea, 0x0020);
	}
}
 8001046:	e024      	b.n	8001092 <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E+0xa2>
	else if(size == SIZE_32C){
 8001048:	78fb      	ldrb	r3, [r7, #3]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d121      	bne.n	8001092 <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E+0xa2>
		LCD_SIZE_32;				//set size 32 Columns
 800104e:	2201      	movs	r2, #1
 8001050:	2102      	movs	r1, #2
 8001052:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001056:	f000 fee9 	bl	8001e2c <HAL_GPIO_WritePin>
		LCD_FONT_88;				//set Fontsize 8x8px
 800105a:	2200      	movs	r2, #0
 800105c:	2101      	movs	r1, #1
 800105e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001062:	f000 fee3 	bl	8001e2c <HAL_GPIO_WritePin>
		LCD_XY_SIZE.column = 32;	//set LCD size struct to 32 Columns
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2220      	movs	r2, #32
 800106a:	701a      	strb	r2, [r3, #0]
		LCD_XY_SIZE.row = 16;		//set LCD size struct to 16 Row
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2210      	movs	r2, #16
 8001070:	705a      	strb	r2, [r3, #1]
		LCD_XY_SIZE.patternHeight = 8;		//set pattern height to 8 pixel (pattern is the 6x8 pixel container)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2208      	movs	r2, #8
 8001076:	709a      	strb	r2, [r3, #2]
		LCD_XY_SIZE.patternWidth =  8;		//set pattern width to 6 pixel (pattern is the 6x8 pixel container)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2208      	movs	r2, #8
 800107c:	70da      	strb	r2, [r3, #3]
		WriteData_16bit(LCD_setTextArea, 0x0020);	//set TextArea to 32 Columns
 800107e:	2220      	movs	r2, #32
 8001080:	2141      	movs	r1, #65	; 0x41
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 f8cd 	bl	8001222 <_ZN9LCDDriver15WriteData_16bitEht>
		WriteData_16bit(LCD_setGraphicArea, 0x0020);
 8001088:	2220      	movs	r2, #32
 800108a:	2143      	movs	r1, #67	; 0x43
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 f8c8 	bl	8001222 <_ZN9LCDDriver15WriteData_16bitEht>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <_ZN9LCDDriver12ClearDisplayEv>:
 * clears the whole LCD depending on the selected size
 *
 * @param  : none
 * @return : none
 */
void LCDDriver::ClearDisplay(){
 800109a:	b580      	push	{r7, lr}
 800109c:	b084      	sub	sp, #16
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]

/*
	uint8_t CH_ARROW[] = {0x00, 0x04, 0x0E, 0x15, 0x04, 0x04, 0x04,0x00};
	setUserChar(CH_ARROW, 0x02,0);
*/
	WriteData_16bit(LCD_setOffsetRegister, 0x0000);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2122      	movs	r1, #34	; 0x22
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 f8bb 	bl	8001222 <_ZN9LCDDriver15WriteData_16bitEht>

	WriteData_16bit(LCD_setAddressPointer, LCD_TXT_START_ADDR);				//set address pointer to text home address
 80010ac:	2200      	movs	r2, #0
 80010ae:	2124      	movs	r1, #36	; 0x24
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 f8b6 	bl	8001222 <_ZN9LCDDriver15WriteData_16bitEht>
	for(uint16_t counter = 0; counter<LCD_XY_SIZE.column*LCD_XY_SIZE.row; counter++){
 80010b6:	2300      	movs	r3, #0
 80010b8:	81fb      	strh	r3, [r7, #14]
 80010ba:	89fa      	ldrh	r2, [r7, #14]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	785b      	ldrb	r3, [r3, #1]
 80010c6:	fb03 f301 	mul.w	r3, r3, r1
 80010ca:	429a      	cmp	r2, r3
 80010cc:	da08      	bge.n	80010e0 <_ZN9LCDDriver12ClearDisplayEv+0x46>
		WriteData_16bit(LCD_dataWriteAndIncrementADP, 0x00);	//clear text
 80010ce:	2200      	movs	r2, #0
 80010d0:	21c0      	movs	r1, #192	; 0xc0
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f000 f8a5 	bl	8001222 <_ZN9LCDDriver15WriteData_16bitEht>
	for(uint16_t counter = 0; counter<LCD_XY_SIZE.column*LCD_XY_SIZE.row; counter++){
 80010d8:	89fb      	ldrh	r3, [r7, #14]
 80010da:	3301      	adds	r3, #1
 80010dc:	81fb      	strh	r3, [r7, #14]
 80010de:	e7ec      	b.n	80010ba <_ZN9LCDDriver12ClearDisplayEv+0x20>
	}


	WriteData_16bit(LCD_setAddressPointer, LCD_GRAPHIC_START_ADDR);				//set Address pointer to Graphic home Address
 80010e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010e4:	2124      	movs	r1, #36	; 0x24
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f89b 	bl	8001222 <_ZN9LCDDriver15WriteData_16bitEht>
	for(int i = 0; i<LCD_XY_SIZE.column*LCD_XY_SIZE.row*8;i++){
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	785b      	ldrb	r3, [r3, #1]
 80010fa:	fb03 f302 	mul.w	r3, r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	68ba      	ldr	r2, [r7, #8]
 8001102:	429a      	cmp	r2, r3
 8001104:	da08      	bge.n	8001118 <_ZN9LCDDriver12ClearDisplayEv+0x7e>
		WriteData_8bit(LCD_dataWriteAndIncrementADP, 0x00);		//clear graphic
 8001106:	2200      	movs	r2, #0
 8001108:	21c0      	movs	r1, #192	; 0xc0
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 f852 	bl	80011b4 <_ZN9LCDDriver14WriteData_8bitEhh>
	for(int i = 0; i<LCD_XY_SIZE.column*LCD_XY_SIZE.row*8;i++){
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	3301      	adds	r3, #1
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	e7eb      	b.n	80010f0 <_ZN9LCDDriver12ClearDisplayEv+0x56>
	}

	WriteData_16bit(LCD_setAddressPointer, LCD_TXT_START_ADDR);
 8001118:	2200      	movs	r2, #0
 800111a:	2124      	movs	r1, #36	; 0x24
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 f880 	bl	8001222 <_ZN9LCDDriver15WriteData_16bitEht>
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_ZN9LCDDriver17SetAddressPointerEhh>:
 *
 * @param column: the chosen Column
 * @param row: the chosen Row
 * @return : none;
 */
void LCDDriver::SetAddressPointer(uint8_t column, uint8_t row){
 800112a:	b580      	push	{r7, lr}
 800112c:	b084      	sub	sp, #16
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	460b      	mov	r3, r1
 8001134:	70fb      	strb	r3, [r7, #3]
 8001136:	4613      	mov	r3, r2
 8001138:	70bb      	strb	r3, [r7, #2]
	uint16_t LCDPointer = row*LCD_XY_SIZE.column + column;	//calculate the AdressPointer depending on the selected LCD Size
 800113a:	78bb      	ldrb	r3, [r7, #2]
 800113c:	b29a      	uxth	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	b29b      	uxth	r3, r3
 8001144:	fb12 f303 	smulbb	r3, r2, r3
 8001148:	b29a      	uxth	r2, r3
 800114a:	78fb      	ldrb	r3, [r7, #3]
 800114c:	b29b      	uxth	r3, r3
 800114e:	4413      	add	r3, r2
 8001150:	81fb      	strh	r3, [r7, #14]
	WriteData_16bit(LCD_setAddressPointer, LCDPointer);		//set the AdressPointer
 8001152:	89fb      	ldrh	r3, [r7, #14]
 8001154:	461a      	mov	r2, r3
 8001156:	2124      	movs	r1, #36	; 0x24
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f000 f862 	bl	8001222 <_ZN9LCDDriver15WriteData_16bitEht>
}
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <_ZN9LCDDriver14WriteData_8bitEh>:


bool LCDDriver::WriteData_8bit(uint8_t addr){
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	460b      	mov	r3, r1
 8001170:	70fb      	strb	r3, [r7, #3]
	LCD_OUTPUT_ENABLE;
 8001172:	2201      	movs	r2, #1
 8001174:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117c:	f000 fe56 	bl	8001e2c <HAL_GPIO_WritePin>


//	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
//		return false;
//	}
	WriteDataPin(addr);
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	4619      	mov	r1, r3
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f8b7 	bl	80012f8 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_COMMAND;
 800118a:	2201      	movs	r2, #1
 800118c:	2104      	movs	r1, #4
 800118e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001192:	f000 fe4b 	bl	8001e2c <HAL_GPIO_WritePin>
	PushData();
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f88b 	bl	80012b2 <_ZN9LCDDriver8PushDataEv>

	LCD_OUTPUT_DISABLE;
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a6:	f000 fe41 	bl	8001e2c <HAL_GPIO_WritePin>
	return true;
 80011aa:	2301      	movs	r3, #1
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <_ZN9LCDDriver14WriteData_8bitEhh>:


bool LCDDriver::WriteData_8bit(uint8_t addr, uint8_t data){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	70fb      	strb	r3, [r7, #3]
 80011c0:	4613      	mov	r3, r2
 80011c2:	70bb      	strb	r3, [r7, #2]
	LCD_OUTPUT_ENABLE;
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ce:	f000 fe2d 	bl	8001e2c <HAL_GPIO_WritePin>

//	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
//		return false;
//	}
	WriteDataPin(data);
 80011d2:	78bb      	ldrb	r3, [r7, #2]
 80011d4:	4619      	mov	r1, r3
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f000 f88e 	bl	80012f8 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_DATA;
 80011dc:	2200      	movs	r2, #0
 80011de:	2104      	movs	r1, #4
 80011e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e4:	f000 fe22 	bl	8001e2c <HAL_GPIO_WritePin>
	PushData();
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 f862 	bl	80012b2 <_ZN9LCDDriver8PushDataEv>

//	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
//		return false;
//	}
	WriteDataPin(addr);
 80011ee:	78fb      	ldrb	r3, [r7, #3]
 80011f0:	4619      	mov	r1, r3
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 f880 	bl	80012f8 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_COMMAND;
 80011f8:	2201      	movs	r2, #1
 80011fa:	2104      	movs	r1, #4
 80011fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001200:	f000 fe14 	bl	8001e2c <HAL_GPIO_WritePin>
	PushData();
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 f854 	bl	80012b2 <_ZN9LCDDriver8PushDataEv>

	LCD_OUTPUT_DISABLE;
 800120a:	2200      	movs	r2, #0
 800120c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001214:	f000 fe0a 	bl	8001e2c <HAL_GPIO_WritePin>
	return true;
 8001218:	2301      	movs	r3, #1
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <_ZN9LCDDriver15WriteData_16bitEht>:

bool LCDDriver::WriteData_16bit(uint8_t addr, uint16_t data) {
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	460b      	mov	r3, r1
 800122c:	70fb      	strb	r3, [r7, #3]
 800122e:	4613      	mov	r3, r2
 8001230:	803b      	strh	r3, [r7, #0]
	LCD_OUTPUT_ENABLE;
 8001232:	2201      	movs	r2, #1
 8001234:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123c:	f000 fdf6 	bl	8001e2c <HAL_GPIO_WritePin>
//	if (CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR) {
//		return false;
//	}
	WriteDataPin((uint8_t) (data));
 8001240:	883b      	ldrh	r3, [r7, #0]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4619      	mov	r1, r3
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 f856 	bl	80012f8 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_DATA;
 800124c:	2200      	movs	r2, #0
 800124e:	2104      	movs	r1, #4
 8001250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001254:	f000 fdea 	bl	8001e2c <HAL_GPIO_WritePin>
	PushData();
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f000 f82a 	bl	80012b2 <_ZN9LCDDriver8PushDataEv>
//	if (CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR) {
//		return false;
//	}
	WriteDataPin((uint8_t) ((data >> 8)));
 800125e:	883b      	ldrh	r3, [r7, #0]
 8001260:	121b      	asrs	r3, r3, #8
 8001262:	b2db      	uxtb	r3, r3
 8001264:	4619      	mov	r1, r3
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 f846 	bl	80012f8 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_DATA;
 800126c:	2200      	movs	r2, #0
 800126e:	2104      	movs	r1, #4
 8001270:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001274:	f000 fdda 	bl	8001e2c <HAL_GPIO_WritePin>
	PushData();
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 f81a 	bl	80012b2 <_ZN9LCDDriver8PushDataEv>
//	if (CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR) {
//		return false;
//	}
	WriteDataPin(addr);
 800127e:	78fb      	ldrb	r3, [r7, #3]
 8001280:	4619      	mov	r1, r3
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 f838 	bl	80012f8 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_COMMAND;
 8001288:	2201      	movs	r2, #1
 800128a:	2104      	movs	r1, #4
 800128c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001290:	f000 fdcc 	bl	8001e2c <HAL_GPIO_WritePin>
	PushData();
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 f80c 	bl	80012b2 <_ZN9LCDDriver8PushDataEv>
	LCD_OUTPUT_DISABLE;
 800129a:	2200      	movs	r2, #0
 800129c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a4:	f000 fdc2 	bl	8001e2c <HAL_GPIO_WritePin>
	return true;
 80012a8:	2301      	movs	r3, #1
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <_ZN9LCDDriver8PushDataEv>:


void LCDDriver::PushData(){
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
	//toggle WR and Enable PIN so that the LCD reads the data
	LCD_WR_RESET;
 80012ba:	2200      	movs	r2, #0
 80012bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c4:	f000 fdb2 	bl	8001e2c <HAL_GPIO_WritePin>
	LCD_ENABLE;
 80012c8:	2200      	movs	r2, #0
 80012ca:	2110      	movs	r1, #16
 80012cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d0:	f000 fdac 	bl	8001e2c <HAL_GPIO_WritePin>
	LCD_DISABLE;
 80012d4:	2201      	movs	r2, #1
 80012d6:	2110      	movs	r1, #16
 80012d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012dc:	f000 fda6 	bl	8001e2c <HAL_GPIO_WritePin>
	LCD_WR_SET;
 80012e0:	2201      	movs	r2, #1
 80012e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ea:	f000 fd9f 	bl	8001e2c <HAL_GPIO_WritePin>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <_ZN9LCDDriver12WriteDataPinEh>:
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct_2);
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct_3);
}


void LCDDriver::WriteDataPin(uint8_t data){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, (GPIO_PinState)(data & 0x01));
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	b2db      	uxtb	r3, r3
 800130c:	461a      	mov	r2, r3
 800130e:	2110      	movs	r1, #16
 8001310:	4824      	ldr	r0, [pc, #144]	; (80013a4 <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8001312:	f000 fd8b 	bl	8001e2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, (GPIO_PinState)(data & 0x02));
 8001316:	78fb      	ldrb	r3, [r7, #3]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	b2db      	uxtb	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	2120      	movs	r1, #32
 8001322:	4820      	ldr	r0, [pc, #128]	; (80013a4 <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8001324:	f000 fd82 	bl	8001e2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, (GPIO_PinState)(data & 0x04));
 8001328:	78fb      	ldrb	r3, [r7, #3]
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	b2db      	uxtb	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133a:	f000 fd77 	bl	8001e2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, (GPIO_PinState)(data & 0x08));
 800133e:	78fb      	ldrb	r3, [r7, #3]
 8001340:	f003 0308 	and.w	r3, r3, #8
 8001344:	b2db      	uxtb	r3, r3
 8001346:	461a      	mov	r2, r3
 8001348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800134c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001350:	f000 fd6c 	bl	8001e2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (GPIO_PinState)(data & 0x10));
 8001354:	78fb      	ldrb	r3, [r7, #3]
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	b2db      	uxtb	r3, r3
 800135c:	461a      	mov	r2, r3
 800135e:	2102      	movs	r1, #2
 8001360:	4811      	ldr	r0, [pc, #68]	; (80013a8 <_ZN9LCDDriver12WriteDataPinEh+0xb0>)
 8001362:	f000 fd63 	bl	8001e2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (GPIO_PinState)(data & 0x20));
 8001366:	78fb      	ldrb	r3, [r7, #3]
 8001368:	f003 0320 	and.w	r3, r3, #32
 800136c:	b2db      	uxtb	r3, r3
 800136e:	461a      	mov	r2, r3
 8001370:	2101      	movs	r1, #1
 8001372:	480d      	ldr	r0, [pc, #52]	; (80013a8 <_ZN9LCDDriver12WriteDataPinEh+0xb0>)
 8001374:	f000 fd5a 	bl	8001e2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (GPIO_PinState)(data & 0x40));
 8001378:	78fb      	ldrb	r3, [r7, #3]
 800137a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800137e:	b2db      	uxtb	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	2102      	movs	r1, #2
 8001384:	4807      	ldr	r0, [pc, #28]	; (80013a4 <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8001386:	f000 fd51 	bl	8001e2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (GPIO_PinState)(data & 0x80));
 800138a:	78fb      	ldrb	r3, [r7, #3]
 800138c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001390:	b2db      	uxtb	r3, r3
 8001392:	461a      	mov	r2, r3
 8001394:	2101      	movs	r1, #1
 8001396:	4803      	ldr	r0, [pc, #12]	; (80013a4 <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8001398:	f000 fd48 	bl	8001e2c <HAL_GPIO_WritePin>

}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	48000400 	.word	0x48000400
 80013a8:	48001400 	.word	0x48001400

080013ac <_ZN9LCDDriver5ResetEv>:
 * Reset LCD
 *
 * @param none
 * @return none
 */
void LCDDriver::Reset(){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	LCD_RST_L;
 80013b4:	2200      	movs	r2, #0
 80013b6:	2108      	movs	r1, #8
 80013b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013bc:	f000 fd36 	bl	8001e2c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80013c0:	2001      	movs	r0, #1
 80013c2:	f000 fab9 	bl	8001938 <HAL_Delay>
	LCD_RST_H;
 80013c6:	2201      	movs	r2, #1
 80013c8:	2108      	movs	r1, #8
 80013ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ce:	f000 fd2d 	bl	8001e2c <HAL_GPIO_WritePin>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80013da:	b5b0      	push	{r4, r5, r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff f841 	bl	800046c <__aeabi_i2d>
 80013ea:	4604      	mov	r4, r0
 80013ec:	460d      	mov	r5, r1
 80013ee:	6838      	ldr	r0, [r7, #0]
 80013f0:	f7ff f83c 	bl	800046c <__aeabi_i2d>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	ec43 2b11 	vmov	d1, r2, r3
 80013fc:	ec45 4b10 	vmov	d0, r4, r5
 8001400:	f002 f866 	bl	80034d0 <pow>
 8001404:	eeb0 7a40 	vmov.f32	s14, s0
 8001408:	eef0 7a60 	vmov.f32	s15, s1
    }
 800140c:	eeb0 0a47 	vmov.f32	s0, s14
 8001410:	eef0 0a67 	vmov.f32	s1, s15
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800141c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001432:	4b32      	ldr	r3, [pc, #200]	; (80014fc <MX_GPIO_Init+0xe0>)
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	4a31      	ldr	r2, [pc, #196]	; (80014fc <MX_GPIO_Init+0xe0>)
 8001438:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800143c:	6153      	str	r3, [r2, #20]
 800143e:	4b2f      	ldr	r3, [pc, #188]	; (80014fc <MX_GPIO_Init+0xe0>)
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	4b2c      	ldr	r3, [pc, #176]	; (80014fc <MX_GPIO_Init+0xe0>)
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	4a2b      	ldr	r2, [pc, #172]	; (80014fc <MX_GPIO_Init+0xe0>)
 8001450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001454:	6153      	str	r3, [r2, #20]
 8001456:	4b29      	ldr	r3, [pc, #164]	; (80014fc <MX_GPIO_Init+0xe0>)
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	4b26      	ldr	r3, [pc, #152]	; (80014fc <MX_GPIO_Init+0xe0>)
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	4a25      	ldr	r2, [pc, #148]	; (80014fc <MX_GPIO_Init+0xe0>)
 8001468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800146c:	6153      	str	r3, [r2, #20]
 800146e:	4b23      	ldr	r3, [pc, #140]	; (80014fc <MX_GPIO_Init+0xe0>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, D5_Pin|D4_Pin, GPIO_PIN_RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	2103      	movs	r1, #3
 800147e:	4820      	ldr	r0, [pc, #128]	; (8001500 <MX_GPIO_Init+0xe4>)
 8001480:	f000 fcd4 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FS_Pin|MD2_Pin|CD_Pin|RESET_Pin 
 8001484:	2200      	movs	r2, #0
 8001486:	f641 711f 	movw	r1, #7967	; 0x1f1f
 800148a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148e:	f000 fccd 	bl	8001e2c <HAL_GPIO_WritePin>
                          |CE_Pin|D3_Pin|RD_Pin|WR_Pin 
                          |D2_Pin|OE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D6_Pin|D0_Pin|D1_Pin, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	2133      	movs	r1, #51	; 0x33
 8001496:	481b      	ldr	r0, [pc, #108]	; (8001504 <MX_GPIO_Init+0xe8>)
 8001498:	f000 fcc8 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = D5_Pin|D4_Pin;
 800149c:	2303      	movs	r3, #3
 800149e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	4619      	mov	r1, r3
 80014b2:	4813      	ldr	r0, [pc, #76]	; (8001500 <MX_GPIO_Init+0xe4>)
 80014b4:	f000 fb48 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = FS_Pin|MD2_Pin|CD_Pin|RESET_Pin 
 80014b8:	f641 731f 	movw	r3, #7967	; 0x1f1f
 80014bc:	60fb      	str	r3, [r7, #12]
                          |CE_Pin|D3_Pin|RD_Pin|WR_Pin 
                          |D2_Pin|OE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	4619      	mov	r1, r3
 80014d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d4:	f000 fb38 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D0_Pin|D1_Pin;
 80014d8:	2333      	movs	r3, #51	; 0x33
 80014da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014dc:	2301      	movs	r3, #1
 80014de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	4619      	mov	r1, r3
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_GPIO_Init+0xe8>)
 80014f0:	f000 fb2a 	bl	8001b48 <HAL_GPIO_Init>

}
 80014f4:	bf00      	nop
 80014f6:	3720      	adds	r7, #32
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40021000 	.word	0x40021000
 8001500:	48001400 	.word	0x48001400
 8001504:	48000400 	.word	0x48000400

08001508 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <MX_I2C1_Init+0x74>)
 800150e:	4a1c      	ldr	r2, [pc, #112]	; (8001580 <MX_I2C1_Init+0x78>)
 8001510:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8001512:	4b1a      	ldr	r3, [pc, #104]	; (800157c <MX_I2C1_Init+0x74>)
 8001514:	4a1b      	ldr	r2, [pc, #108]	; (8001584 <MX_I2C1_Init+0x7c>)
 8001516:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <MX_I2C1_Init+0x74>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <MX_I2C1_Init+0x74>)
 8001520:	2201      	movs	r2, #1
 8001522:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001524:	4b15      	ldr	r3, [pc, #84]	; (800157c <MX_I2C1_Init+0x74>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <MX_I2C1_Init+0x74>)
 800152c:	2200      	movs	r2, #0
 800152e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <MX_I2C1_Init+0x74>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <MX_I2C1_Init+0x74>)
 8001538:	2200      	movs	r2, #0
 800153a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800153c:	4b0f      	ldr	r3, [pc, #60]	; (800157c <MX_I2C1_Init+0x74>)
 800153e:	2200      	movs	r2, #0
 8001540:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001542:	480e      	ldr	r0, [pc, #56]	; (800157c <MX_I2C1_Init+0x74>)
 8001544:	f000 fc8a 	bl	8001e5c <HAL_I2C_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800154e:	f000 f8d6 	bl	80016fe <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001552:	2100      	movs	r1, #0
 8001554:	4809      	ldr	r0, [pc, #36]	; (800157c <MX_I2C1_Init+0x74>)
 8001556:	f000 fd10 	bl	8001f7a <HAL_I2CEx_ConfigAnalogFilter>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001560:	f000 f8cd 	bl	80016fe <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001564:	2100      	movs	r1, #0
 8001566:	4805      	ldr	r0, [pc, #20]	; (800157c <MX_I2C1_Init+0x74>)
 8001568:	f000 fd52 	bl	8002010 <HAL_I2CEx_ConfigDigitalFilter>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001572:	f000 f8c4 	bl	80016fe <Error_Handler>
  }

}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000090 	.word	0x20000090
 8001580:	40005400 	.word	0x40005400
 8001584:	00201d2b 	.word	0x00201d2b

08001588 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a17      	ldr	r2, [pc, #92]	; (8001604 <HAL_I2C_MspInit+0x7c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d127      	bne.n	80015fa <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <HAL_I2C_MspInit+0x80>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	4a16      	ldr	r2, [pc, #88]	; (8001608 <HAL_I2C_MspInit+0x80>)
 80015b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b4:	6153      	str	r3, [r2, #20]
 80015b6:	4b14      	ldr	r3, [pc, #80]	; (8001608 <HAL_I2C_MspInit+0x80>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015c2:	23c0      	movs	r3, #192	; 0xc0
 80015c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c6:	2312      	movs	r3, #18
 80015c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015d2:	2304      	movs	r3, #4
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	480b      	ldr	r0, [pc, #44]	; (800160c <HAL_I2C_MspInit+0x84>)
 80015de:	f000 fab3 	bl	8001b48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_I2C_MspInit+0x80>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	4a08      	ldr	r2, [pc, #32]	; (8001608 <HAL_I2C_MspInit+0x80>)
 80015e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ec:	61d3      	str	r3, [r2, #28]
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_I2C_MspInit+0x80>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015fa:	bf00      	nop
 80015fc:	3728      	adds	r7, #40	; 0x28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40005400 	.word	0x40005400
 8001608:	40021000 	.word	0x40021000
 800160c:	48000400 	.word	0x48000400

08001610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8001614:	f000 f92a 	bl	800186c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001618:	f000 f80a 	bl	8001630 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800161c:	f7ff fefe 	bl	800141c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001620:	f7ff ff72 	bl	8001508 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
 // HAL_I2C_MspInit(&hi2c1);
  appMain.main();
 8001624:	4801      	ldr	r0, [pc, #4]	; (800162c <main+0x1c>)
 8001626:	f7ff fa68 	bl	8000afa <_ZN7AppMain4mainEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800162a:	e7fe      	b.n	800162a <main+0x1a>
 800162c:	2000008c 	.word	0x2000008c

08001630 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b096      	sub	sp, #88	; 0x58
 8001634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001636:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800163a:	2228      	movs	r2, #40	; 0x28
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f002 ffc6 	bl	80045d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]
 8001662:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001664:	2302      	movs	r3, #2
 8001666:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001668:	2301      	movs	r3, #1
 800166a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800166c:	2310      	movs	r3, #16
 800166e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001670:	2302      	movs	r3, #2
 8001672:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001674:	2300      	movs	r3, #0
 8001676:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001678:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800167c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001682:	4618      	mov	r0, r3
 8001684:	f000 fd10 	bl	80020a8 <HAL_RCC_OscConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	bf14      	ite	ne
 800168e:	2301      	movne	r3, #1
 8001690:	2300      	moveq	r3, #0
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <_Z18SystemClock_Configv+0x6c>
  {
    Error_Handler();
 8001698:	f000 f831 	bl	80016fe <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800169c:	230f      	movs	r3, #15
 800169e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a0:	2302      	movs	r3, #2
 80016a2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a4:	2300      	movs	r3, #0
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	2102      	movs	r1, #2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f001 fbfd 	bl	8002eb8 <HAL_RCC_ClockConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	bf14      	ite	ne
 80016c4:	2301      	movne	r3, #1
 80016c6:	2300      	moveq	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80016ce:	f000 f816 	bl	80016fe <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016d2:	2320      	movs	r3, #32
 80016d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	4618      	mov	r0, r3
 80016de:	f001 fdd1 	bl	8003284 <HAL_RCCEx_PeriphCLKConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bf14      	ite	ne
 80016e8:	2301      	movne	r3, #1
 80016ea:	2300      	moveq	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 80016f2:	f000 f804 	bl	80016fe <Error_Handler>
  }
}
 80016f6:	bf00      	nop
 80016f8:	3758      	adds	r7, #88	; 0x58
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <_Z41__static_initialization_and_destruction_0ii>:
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d107      	bne.n	800172c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001722:	4293      	cmp	r3, r2
 8001724:	d102      	bne.n	800172c <_Z41__static_initialization_and_destruction_0ii+0x20>
static AppMain appMain;
 8001726:	4803      	ldr	r0, [pc, #12]	; (8001734 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001728:	f7ff f9da 	bl	8000ae0 <_ZN7AppMainC1Ev>
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	2000008c 	.word	0x2000008c

08001738 <_GLOBAL__sub_I_main>:
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
 800173c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff ffe3 	bl	800170c <_Z41__static_initialization_and_destruction_0ii>
 8001746:	bd80      	pop	{r7, pc}

08001748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <HAL_MspInit+0x44>)
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	4a0e      	ldr	r2, [pc, #56]	; (800178c <HAL_MspInit+0x44>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6193      	str	r3, [r2, #24]
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <HAL_MspInit+0x44>)
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_MspInit+0x44>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	4a08      	ldr	r2, [pc, #32]	; (800178c <HAL_MspInit+0x44>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001770:	61d3      	str	r3, [r2, #28]
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_MspInit+0x44>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000

08001790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <MemManage_Handler+0x4>

080017aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <BusFault_Handler+0x4>

080017b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <UsageFault_Handler+0x4>

080017b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e4:	f000 f888 	bl	80018f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}

080017ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <SystemInit+0x28>)
 80017f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f6:	4a07      	ldr	r2, [pc, #28]	; (8001814 <SystemInit+0x28>)
 80017f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <SystemInit+0x28>)
 8001802:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001806:	609a      	str	r2, [r3, #8]
#endif
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001850 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800181c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800181e:	e003      	b.n	8001828 <LoopCopyDataInit>

08001820 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001822:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001824:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001826:	3104      	adds	r1, #4

08001828 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001828:	480b      	ldr	r0, [pc, #44]	; (8001858 <LoopForever+0xa>)
	ldr	r3, =_edata
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <LoopForever+0xe>)
	adds	r2, r0, r1
 800182c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800182e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001830:	d3f6      	bcc.n	8001820 <CopyDataInit>
	ldr	r2, =_sbss
 8001832:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001834:	e002      	b.n	800183c <LoopFillZerobss>

08001836 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001836:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001838:	f842 3b04 	str.w	r3, [r2], #4

0800183c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <LoopForever+0x16>)
	cmp	r2, r3
 800183e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001840:	d3f9      	bcc.n	8001836 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001842:	f7ff ffd3 	bl	80017ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001846:	f002 fe9f 	bl	8004588 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800184a:	f7ff fee1 	bl	8001610 <main>

0800184e <LoopForever>:

LoopForever:
    b LoopForever
 800184e:	e7fe      	b.n	800184e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001850:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001854:	0800467c 	.word	0x0800467c
	ldr	r0, =_sdata
 8001858:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800185c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001860:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001864:	200000e0 	.word	0x200000e0

08001868 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001868:	e7fe      	b.n	8001868 <ADC1_2_IRQHandler>
	...

0800186c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <HAL_Init+0x28>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a07      	ldr	r2, [pc, #28]	; (8001894 <HAL_Init+0x28>)
 8001876:	f043 0310 	orr.w	r3, r3, #16
 800187a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800187c:	2003      	movs	r0, #3
 800187e:	f000 f92f 	bl	8001ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001882:	2000      	movs	r0, #0
 8001884:	f000 f808 	bl	8001898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001888:	f7ff ff5e 	bl	8001748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40022000 	.word	0x40022000

08001898 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_InitTick+0x54>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_InitTick+0x58>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4619      	mov	r1, r3
 80018aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80018b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 f939 	bl	8001b2e <HAL_SYSTICK_Config>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00e      	b.n	80018e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b0f      	cmp	r3, #15
 80018ca:	d80a      	bhi.n	80018e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018cc:	2200      	movs	r2, #0
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	f000 f90f 	bl	8001af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d8:	4a06      	ldr	r2, [pc, #24]	; (80018f4 <HAL_InitTick+0x5c>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	e000      	b.n	80018e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000000 	.word	0x20000000
 80018f0:	20000008 	.word	0x20000008
 80018f4:	20000004 	.word	0x20000004

080018f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_IncTick+0x20>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_IncTick+0x24>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4413      	add	r3, r2
 8001908:	4a04      	ldr	r2, [pc, #16]	; (800191c <HAL_IncTick+0x24>)
 800190a:	6013      	str	r3, [r2, #0]
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000008 	.word	0x20000008
 800191c:	200000dc 	.word	0x200000dc

08001920 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return uwTick;  
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <HAL_GetTick+0x14>)
 8001926:	681b      	ldr	r3, [r3, #0]
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	200000dc 	.word	0x200000dc

08001938 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001940:	f7ff ffee 	bl	8001920 <HAL_GetTick>
 8001944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001950:	d005      	beq.n	800195e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <HAL_Delay+0x40>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4413      	add	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800195e:	bf00      	nop
 8001960:	f7ff ffde 	bl	8001920 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	429a      	cmp	r2, r3
 800196e:	d8f7      	bhi.n	8001960 <HAL_Delay+0x28>
  {
  }
}
 8001970:	bf00      	nop
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000008 	.word	0x20000008

0800197c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001998:	4013      	ands	r3, r2
 800199a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ae:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	60d3      	str	r3, [r2, #12]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c8:	4b04      	ldr	r3, [pc, #16]	; (80019dc <__NVIC_GetPriorityGrouping+0x18>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	f003 0307 	and.w	r3, r3, #7
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	6039      	str	r1, [r7, #0]
 80019ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	db0a      	blt.n	8001a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	490c      	ldr	r1, [pc, #48]	; (8001a2c <__NVIC_SetPriority+0x4c>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	0112      	lsls	r2, r2, #4
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	440b      	add	r3, r1
 8001a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a08:	e00a      	b.n	8001a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4908      	ldr	r1, [pc, #32]	; (8001a30 <__NVIC_SetPriority+0x50>)
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	3b04      	subs	r3, #4
 8001a18:	0112      	lsls	r2, r2, #4
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	761a      	strb	r2, [r3, #24]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000e100 	.word	0xe000e100
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	; 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f1c3 0307 	rsb	r3, r3, #7
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	bf28      	it	cs
 8001a52:	2304      	movcs	r3, #4
 8001a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d902      	bls.n	8001a64 <NVIC_EncodePriority+0x30>
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3b03      	subs	r3, #3
 8001a62:	e000      	b.n	8001a66 <NVIC_EncodePriority+0x32>
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43da      	mvns	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	401a      	ands	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	43d9      	mvns	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	4313      	orrs	r3, r2
         );
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3724      	adds	r7, #36	; 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aac:	d301      	bcc.n	8001ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00f      	b.n	8001ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <SysTick_Config+0x40>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aba:	210f      	movs	r1, #15
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f7ff ff8e 	bl	80019e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <SysTick_Config+0x40>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <SysTick_Config+0x40>)
 8001acc:	2207      	movs	r2, #7
 8001ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	e000e010 	.word	0xe000e010

08001ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ff47 	bl	800197c <__NVIC_SetPriorityGrouping>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b08:	f7ff ff5c 	bl	80019c4 <__NVIC_GetPriorityGrouping>
 8001b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	6978      	ldr	r0, [r7, #20]
 8001b14:	f7ff ff8e 	bl	8001a34 <NVIC_EncodePriority>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff5d 	bl	80019e0 <__NVIC_SetPriority>
}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff ffb0 	bl	8001a9c <SysTick_Config>
 8001b3c:	4603      	mov	r3, r0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b56:	e14e      	b.n	8001df6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	fa01 f303 	lsl.w	r3, r1, r3
 8001b64:	4013      	ands	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 8140 	beq.w	8001df0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_Init+0x38>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b12      	cmp	r3, #18
 8001b7e:	d123      	bne.n	8001bc8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	08da      	lsrs	r2, r3, #3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3208      	adds	r2, #8
 8001b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	220f      	movs	r2, #15
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	08da      	lsrs	r2, r3, #3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3208      	adds	r2, #8
 8001bc2:	6939      	ldr	r1, [r7, #16]
 8001bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0203 	and.w	r2, r3, #3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d00b      	beq.n	8001c1c <HAL_GPIO_Init+0xd4>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d007      	beq.n	8001c1c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c10:	2b11      	cmp	r3, #17
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b12      	cmp	r3, #18
 8001c1a:	d130      	bne.n	8001c7e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2203      	movs	r2, #3
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c52:	2201      	movs	r2, #1
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	091b      	lsrs	r3, r3, #4
 8001c68:	f003 0201 	and.w	r2, r3, #1
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	2203      	movs	r2, #3
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 809a 	beq.w	8001df0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbc:	4b55      	ldr	r3, [pc, #340]	; (8001e14 <HAL_GPIO_Init+0x2cc>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	4a54      	ldr	r2, [pc, #336]	; (8001e14 <HAL_GPIO_Init+0x2cc>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6193      	str	r3, [r2, #24]
 8001cc8:	4b52      	ldr	r3, [pc, #328]	; (8001e14 <HAL_GPIO_Init+0x2cc>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cd4:	4a50      	ldr	r2, [pc, #320]	; (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	089b      	lsrs	r3, r3, #2
 8001cda:	3302      	adds	r3, #2
 8001cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	220f      	movs	r2, #15
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cfe:	d013      	beq.n	8001d28 <HAL_GPIO_Init+0x1e0>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a46      	ldr	r2, [pc, #280]	; (8001e1c <HAL_GPIO_Init+0x2d4>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d00d      	beq.n	8001d24 <HAL_GPIO_Init+0x1dc>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a45      	ldr	r2, [pc, #276]	; (8001e20 <HAL_GPIO_Init+0x2d8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d007      	beq.n	8001d20 <HAL_GPIO_Init+0x1d8>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a44      	ldr	r2, [pc, #272]	; (8001e24 <HAL_GPIO_Init+0x2dc>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d101      	bne.n	8001d1c <HAL_GPIO_Init+0x1d4>
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e006      	b.n	8001d2a <HAL_GPIO_Init+0x1e2>
 8001d1c:	2305      	movs	r3, #5
 8001d1e:	e004      	b.n	8001d2a <HAL_GPIO_Init+0x1e2>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e002      	b.n	8001d2a <HAL_GPIO_Init+0x1e2>
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <HAL_GPIO_Init+0x1e2>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	f002 0203 	and.w	r2, r2, #3
 8001d30:	0092      	lsls	r2, r2, #2
 8001d32:	4093      	lsls	r3, r2
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d3a:	4937      	ldr	r1, [pc, #220]	; (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	089b      	lsrs	r3, r3, #2
 8001d40:	3302      	adds	r3, #2
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d48:	4b37      	ldr	r3, [pc, #220]	; (8001e28 <HAL_GPIO_Init+0x2e0>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d6c:	4a2e      	ldr	r2, [pc, #184]	; (8001e28 <HAL_GPIO_Init+0x2e0>)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d72:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <HAL_GPIO_Init+0x2e0>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d96:	4a24      	ldr	r2, [pc, #144]	; (8001e28 <HAL_GPIO_Init+0x2e0>)
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d9c:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <HAL_GPIO_Init+0x2e0>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dc0:	4a19      	ldr	r2, [pc, #100]	; (8001e28 <HAL_GPIO_Init+0x2e0>)
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dc6:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <HAL_GPIO_Init+0x2e0>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dea:	4a0f      	ldr	r2, [pc, #60]	; (8001e28 <HAL_GPIO_Init+0x2e0>)
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	3301      	adds	r3, #1
 8001df4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f47f aea9 	bne.w	8001b58 <HAL_GPIO_Init+0x10>
  }
}
 8001e06:	bf00      	nop
 8001e08:	371c      	adds	r7, #28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40010000 	.word	0x40010000
 8001e1c:	48000400 	.word	0x48000400
 8001e20:	48000800 	.word	0x48000800
 8001e24:	48000c00 	.word	0x48000c00
 8001e28:	40010400 	.word	0x40010400

08001e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	807b      	strh	r3, [r7, #2]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e3c:	787b      	ldrb	r3, [r7, #1]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e48:	e002      	b.n	8001e50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e4a:	887a      	ldrh	r2, [r7, #2]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e081      	b.n	8001f72 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d106      	bne.n	8001e88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff fb80 	bl	8001588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2224      	movs	r2, #36	; 0x24
 8001e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0201 	bic.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001eac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ebc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d107      	bne.n	8001ed6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	e006      	b.n	8001ee4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ee2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d104      	bne.n	8001ef6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ef4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691a      	ldr	r2, [r3, #16]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	ea42 0103 	orr.w	r1, r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	021a      	lsls	r2, r3, #8
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69d9      	ldr	r1, [r3, #28]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a1a      	ldr	r2, [r3, #32]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b20      	cmp	r3, #32
 8001f8e:	d138      	bne.n	8002002 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d101      	bne.n	8001f9e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e032      	b.n	8002004 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2224      	movs	r2, #36	; 0x24
 8001faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0201 	bic.w	r2, r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fcc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6819      	ldr	r1, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 0201 	orr.w	r2, r2, #1
 8001fec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	e000      	b.n	8002004 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002002:	2302      	movs	r3, #2
  }
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b20      	cmp	r3, #32
 8002024:	d139      	bne.n	800209a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002030:	2302      	movs	r3, #2
 8002032:	e033      	b.n	800209c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2224      	movs	r2, #36	; 0x24
 8002040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0201 	bic.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002062:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	4313      	orrs	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f042 0201 	orr.w	r2, r2, #1
 8002084:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2220      	movs	r2, #32
 800208a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	e000      	b.n	800209c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800209a:	2302      	movs	r3, #2
  }
}
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	1d3b      	adds	r3, r7, #4
 80020b2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020b4:	1d3b      	adds	r3, r7, #4
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d102      	bne.n	80020c2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	f000 bef4 	b.w	8002eaa <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 816a 	beq.w	80023a6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020d2:	4bb3      	ldr	r3, [pc, #716]	; (80023a0 <HAL_RCC_OscConfig+0x2f8>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d00c      	beq.n	80020f8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020de:	4bb0      	ldr	r3, [pc, #704]	; (80023a0 <HAL_RCC_OscConfig+0x2f8>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d159      	bne.n	800219e <HAL_RCC_OscConfig+0xf6>
 80020ea:	4bad      	ldr	r3, [pc, #692]	; (80023a0 <HAL_RCC_OscConfig+0x2f8>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f6:	d152      	bne.n	800219e <HAL_RCC_OscConfig+0xf6>
 80020f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020fc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002104:	fa93 f3a3 	rbit	r3, r3
 8002108:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800210c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002110:	fab3 f383 	clz	r3, r3
 8002114:	b2db      	uxtb	r3, r3
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	b2db      	uxtb	r3, r3
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b01      	cmp	r3, #1
 8002122:	d102      	bne.n	800212a <HAL_RCC_OscConfig+0x82>
 8002124:	4b9e      	ldr	r3, [pc, #632]	; (80023a0 <HAL_RCC_OscConfig+0x2f8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	e015      	b.n	8002156 <HAL_RCC_OscConfig+0xae>
 800212a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800212e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800213e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002142:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002146:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002152:	4b93      	ldr	r3, [pc, #588]	; (80023a0 <HAL_RCC_OscConfig+0x2f8>)
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800215a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800215e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002162:	fa92 f2a2 	rbit	r2, r2
 8002166:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800216a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800216e:	fab2 f282 	clz	r2, r2
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	f042 0220 	orr.w	r2, r2, #32
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	f002 021f 	and.w	r2, r2, #31
 800217e:	2101      	movs	r1, #1
 8002180:	fa01 f202 	lsl.w	r2, r1, r2
 8002184:	4013      	ands	r3, r2
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 810c 	beq.w	80023a4 <HAL_RCC_OscConfig+0x2fc>
 800218c:	1d3b      	adds	r3, r7, #4
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	f040 8106 	bne.w	80023a4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	f000 be86 	b.w	8002eaa <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a8:	d106      	bne.n	80021b8 <HAL_RCC_OscConfig+0x110>
 80021aa:	4b7d      	ldr	r3, [pc, #500]	; (80023a0 <HAL_RCC_OscConfig+0x2f8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a7c      	ldr	r2, [pc, #496]	; (80023a0 <HAL_RCC_OscConfig+0x2f8>)
 80021b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	e030      	b.n	800221a <HAL_RCC_OscConfig+0x172>
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10c      	bne.n	80021dc <HAL_RCC_OscConfig+0x134>
 80021c2:	4b77      	ldr	r3, [pc, #476]	; (80023a0 <HAL_RCC_OscConfig+0x2f8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a76      	ldr	r2, [pc, #472]	; (80023a0 <HAL_RCC_OscConfig+0x2f8>)
 80021c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	4b74      	ldr	r3, [pc, #464]	; (80023a0 <HAL_RCC_OscConfig+0x2f8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a73      	ldr	r2, [pc, #460]	; (80023a0 <HAL_RCC_OscConfig+0x2f8>)
 80021d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e01e      	b.n	800221a <HAL_RCC_OscConfig+0x172>
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e6:	d10c      	bne.n	8002202 <HAL_RCC_OscConfig+0x15a>
 80021e8:	4b6d      	ldr	r3, [pc, #436]	; (80023a0 <HAL_RCC_OscConfig+0x2f8>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a6c      	ldr	r2, [pc, #432]	; (80023a0 <HAL_RCC_OscConfig+0x2f8>)
 80021ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b6a      	ldr	r3, [pc, #424]	; (80023a0 <HAL_RCC_OscConfig+0x2f8>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a69      	ldr	r2, [pc, #420]	; (80023a0 <HAL_RCC_OscConfig+0x2f8>)
 80021fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	e00b      	b.n	800221a <HAL_RCC_OscConfig+0x172>
 8002202:	4b67      	ldr	r3, [pc, #412]	; (80023a0 <HAL_RCC_OscConfig+0x2f8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a66      	ldr	r2, [pc, #408]	; (80023a0 <HAL_RCC_OscConfig+0x2f8>)
 8002208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4b64      	ldr	r3, [pc, #400]	; (80023a0 <HAL_RCC_OscConfig+0x2f8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a63      	ldr	r2, [pc, #396]	; (80023a0 <HAL_RCC_OscConfig+0x2f8>)
 8002214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002218:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800221a:	4b61      	ldr	r3, [pc, #388]	; (80023a0 <HAL_RCC_OscConfig+0x2f8>)
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	f023 020f 	bic.w	r2, r3, #15
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	495d      	ldr	r1, [pc, #372]	; (80023a0 <HAL_RCC_OscConfig+0x2f8>)
 800222a:	4313      	orrs	r3, r2
 800222c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800222e:	1d3b      	adds	r3, r7, #4
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d059      	beq.n	80022ec <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7ff fb72 	bl	8001920 <HAL_GetTick>
 800223c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002240:	e00a      	b.n	8002258 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002242:	f7ff fb6d 	bl	8001920 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	; 0x64
 8002250:	d902      	bls.n	8002258 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	f000 be29 	b.w	8002eaa <HAL_RCC_OscConfig+0xe02>
 8002258:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800225c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002260:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002264:	fa93 f3a3 	rbit	r3, r3
 8002268:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800226c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002270:	fab3 f383 	clz	r3, r3
 8002274:	b2db      	uxtb	r3, r3
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	b2db      	uxtb	r3, r3
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b01      	cmp	r3, #1
 8002282:	d102      	bne.n	800228a <HAL_RCC_OscConfig+0x1e2>
 8002284:	4b46      	ldr	r3, [pc, #280]	; (80023a0 <HAL_RCC_OscConfig+0x2f8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	e015      	b.n	80022b6 <HAL_RCC_OscConfig+0x20e>
 800228a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800228e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800229e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022a2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80022a6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80022aa:	fa93 f3a3 	rbit	r3, r3
 80022ae:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80022b2:	4b3b      	ldr	r3, [pc, #236]	; (80023a0 <HAL_RCC_OscConfig+0x2f8>)
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022ba:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80022be:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80022c2:	fa92 f2a2 	rbit	r2, r2
 80022c6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80022ca:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80022ce:	fab2 f282 	clz	r2, r2
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	f042 0220 	orr.w	r2, r2, #32
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	f002 021f 	and.w	r2, r2, #31
 80022de:	2101      	movs	r1, #1
 80022e0:	fa01 f202 	lsl.w	r2, r1, r2
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0ab      	beq.n	8002242 <HAL_RCC_OscConfig+0x19a>
 80022ea:	e05c      	b.n	80023a6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ec:	f7ff fb18 	bl	8001920 <HAL_GetTick>
 80022f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f4:	e00a      	b.n	800230c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022f6:	f7ff fb13 	bl	8001920 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	; 0x64
 8002304:	d902      	bls.n	800230c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	f000 bdcf 	b.w	8002eaa <HAL_RCC_OscConfig+0xe02>
 800230c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002310:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002314:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002318:	fa93 f3a3 	rbit	r3, r3
 800231c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002320:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	b2db      	uxtb	r3, r3
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	b2db      	uxtb	r3, r3
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b01      	cmp	r3, #1
 8002336:	d102      	bne.n	800233e <HAL_RCC_OscConfig+0x296>
 8002338:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <HAL_RCC_OscConfig+0x2f8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	e015      	b.n	800236a <HAL_RCC_OscConfig+0x2c2>
 800233e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002342:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002352:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002356:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800235a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800235e:	fa93 f3a3 	rbit	r3, r3
 8002362:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002366:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <HAL_RCC_OscConfig+0x2f8>)
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800236e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002372:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002376:	fa92 f2a2 	rbit	r2, r2
 800237a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800237e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002382:	fab2 f282 	clz	r2, r2
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	f042 0220 	orr.w	r2, r2, #32
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	f002 021f 	and.w	r2, r2, #31
 8002392:	2101      	movs	r1, #1
 8002394:	fa01 f202 	lsl.w	r2, r1, r2
 8002398:	4013      	ands	r3, r2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1ab      	bne.n	80022f6 <HAL_RCC_OscConfig+0x24e>
 800239e:	e002      	b.n	80023a6 <HAL_RCC_OscConfig+0x2fe>
 80023a0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a6:	1d3b      	adds	r3, r7, #4
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 816f 	beq.w	8002694 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80023b6:	4bd0      	ldr	r3, [pc, #832]	; (80026f8 <HAL_RCC_OscConfig+0x650>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00b      	beq.n	80023da <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80023c2:	4bcd      	ldr	r3, [pc, #820]	; (80026f8 <HAL_RCC_OscConfig+0x650>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d16c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x400>
 80023ce:	4bca      	ldr	r3, [pc, #808]	; (80026f8 <HAL_RCC_OscConfig+0x650>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d166      	bne.n	80024a8 <HAL_RCC_OscConfig+0x400>
 80023da:	2302      	movs	r3, #2
 80023dc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80023e4:	fa93 f3a3 	rbit	r3, r3
 80023e8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80023ec:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b01      	cmp	r3, #1
 8002402:	d102      	bne.n	800240a <HAL_RCC_OscConfig+0x362>
 8002404:	4bbc      	ldr	r3, [pc, #752]	; (80026f8 <HAL_RCC_OscConfig+0x650>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	e013      	b.n	8002432 <HAL_RCC_OscConfig+0x38a>
 800240a:	2302      	movs	r3, #2
 800240c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002414:	fa93 f3a3 	rbit	r3, r3
 8002418:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800241c:	2302      	movs	r3, #2
 800241e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002422:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800242e:	4bb2      	ldr	r3, [pc, #712]	; (80026f8 <HAL_RCC_OscConfig+0x650>)
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	2202      	movs	r2, #2
 8002434:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002438:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800243c:	fa92 f2a2 	rbit	r2, r2
 8002440:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002444:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002448:	fab2 f282 	clz	r2, r2
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	f042 0220 	orr.w	r2, r2, #32
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	f002 021f 	and.w	r2, r2, #31
 8002458:	2101      	movs	r1, #1
 800245a:	fa01 f202 	lsl.w	r2, r1, r2
 800245e:	4013      	ands	r3, r2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d007      	beq.n	8002474 <HAL_RCC_OscConfig+0x3cc>
 8002464:	1d3b      	adds	r3, r7, #4
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d002      	beq.n	8002474 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	f000 bd1b 	b.w	8002eaa <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002474:	4ba0      	ldr	r3, [pc, #640]	; (80026f8 <HAL_RCC_OscConfig+0x650>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800247c:	1d3b      	adds	r3, r7, #4
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	21f8      	movs	r1, #248	; 0xf8
 8002484:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800248c:	fa91 f1a1 	rbit	r1, r1
 8002490:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002494:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002498:	fab1 f181 	clz	r1, r1
 800249c:	b2c9      	uxtb	r1, r1
 800249e:	408b      	lsls	r3, r1
 80024a0:	4995      	ldr	r1, [pc, #596]	; (80026f8 <HAL_RCC_OscConfig+0x650>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a6:	e0f5      	b.n	8002694 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 8085 	beq.w	80025be <HAL_RCC_OscConfig+0x516>
 80024b4:	2301      	movs	r3, #1
 80024b6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80024be:	fa93 f3a3 	rbit	r3, r3
 80024c2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80024c6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	461a      	mov	r2, r3
 80024dc:	2301      	movs	r3, #1
 80024de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7ff fa1e 	bl	8001920 <HAL_GetTick>
 80024e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e8:	e00a      	b.n	8002500 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ea:	f7ff fa19 	bl	8001920 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d902      	bls.n	8002500 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	f000 bcd5 	b.w	8002eaa <HAL_RCC_OscConfig+0xe02>
 8002500:	2302      	movs	r3, #2
 8002502:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002512:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	095b      	lsrs	r3, r3, #5
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b01      	cmp	r3, #1
 8002528:	d102      	bne.n	8002530 <HAL_RCC_OscConfig+0x488>
 800252a:	4b73      	ldr	r3, [pc, #460]	; (80026f8 <HAL_RCC_OscConfig+0x650>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	e013      	b.n	8002558 <HAL_RCC_OscConfig+0x4b0>
 8002530:	2302      	movs	r3, #2
 8002532:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800253a:	fa93 f3a3 	rbit	r3, r3
 800253e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002542:	2302      	movs	r3, #2
 8002544:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002548:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800254c:	fa93 f3a3 	rbit	r3, r3
 8002550:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002554:	4b68      	ldr	r3, [pc, #416]	; (80026f8 <HAL_RCC_OscConfig+0x650>)
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	2202      	movs	r2, #2
 800255a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800255e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002562:	fa92 f2a2 	rbit	r2, r2
 8002566:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800256a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800256e:	fab2 f282 	clz	r2, r2
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	f042 0220 	orr.w	r2, r2, #32
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	f002 021f 	and.w	r2, r2, #31
 800257e:	2101      	movs	r1, #1
 8002580:	fa01 f202 	lsl.w	r2, r1, r2
 8002584:	4013      	ands	r3, r2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0af      	beq.n	80024ea <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258a:	4b5b      	ldr	r3, [pc, #364]	; (80026f8 <HAL_RCC_OscConfig+0x650>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	21f8      	movs	r1, #248	; 0xf8
 800259a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80025a2:	fa91 f1a1 	rbit	r1, r1
 80025a6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80025aa:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80025ae:	fab1 f181 	clz	r1, r1
 80025b2:	b2c9      	uxtb	r1, r1
 80025b4:	408b      	lsls	r3, r1
 80025b6:	4950      	ldr	r1, [pc, #320]	; (80026f8 <HAL_RCC_OscConfig+0x650>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	600b      	str	r3, [r1, #0]
 80025bc:	e06a      	b.n	8002694 <HAL_RCC_OscConfig+0x5ec>
 80025be:	2301      	movs	r3, #1
 80025c0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80025d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d4:	fab3 f383 	clz	r3, r3
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	461a      	mov	r2, r3
 80025e6:	2300      	movs	r3, #0
 80025e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ea:	f7ff f999 	bl	8001920 <HAL_GetTick>
 80025ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	e00a      	b.n	800260a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f4:	f7ff f994 	bl	8001920 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d902      	bls.n	800260a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	f000 bc50 	b.w	8002eaa <HAL_RCC_OscConfig+0xe02>
 800260a:	2302      	movs	r3, #2
 800260c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800261c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002620:	fab3 f383 	clz	r3, r3
 8002624:	b2db      	uxtb	r3, r3
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	b2db      	uxtb	r3, r3
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b01      	cmp	r3, #1
 8002632:	d102      	bne.n	800263a <HAL_RCC_OscConfig+0x592>
 8002634:	4b30      	ldr	r3, [pc, #192]	; (80026f8 <HAL_RCC_OscConfig+0x650>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	e013      	b.n	8002662 <HAL_RCC_OscConfig+0x5ba>
 800263a:	2302      	movs	r3, #2
 800263c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002640:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002644:	fa93 f3a3 	rbit	r3, r3
 8002648:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800264c:	2302      	movs	r3, #2
 800264e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002652:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800265e:	4b26      	ldr	r3, [pc, #152]	; (80026f8 <HAL_RCC_OscConfig+0x650>)
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	2202      	movs	r2, #2
 8002664:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002668:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800266c:	fa92 f2a2 	rbit	r2, r2
 8002670:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002674:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002678:	fab2 f282 	clz	r2, r2
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	f042 0220 	orr.w	r2, r2, #32
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	f002 021f 	and.w	r2, r2, #31
 8002688:	2101      	movs	r1, #1
 800268a:	fa01 f202 	lsl.w	r2, r1, r2
 800268e:	4013      	ands	r3, r2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1af      	bne.n	80025f4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002694:	1d3b      	adds	r3, r7, #4
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 80da 	beq.w	8002858 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026a4:	1d3b      	adds	r3, r7, #4
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d069      	beq.n	8002782 <HAL_RCC_OscConfig+0x6da>
 80026ae:	2301      	movs	r3, #1
 80026b0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80026b8:	fa93 f3a3 	rbit	r3, r3
 80026bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80026c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c4:	fab3 f383 	clz	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	461a      	mov	r2, r3
 80026cc:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <HAL_RCC_OscConfig+0x654>)
 80026ce:	4413      	add	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	461a      	mov	r2, r3
 80026d4:	2301      	movs	r3, #1
 80026d6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d8:	f7ff f922 	bl	8001920 <HAL_GetTick>
 80026dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e0:	e00e      	b.n	8002700 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e2:	f7ff f91d 	bl	8001920 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d906      	bls.n	8002700 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e3d9      	b.n	8002eaa <HAL_RCC_OscConfig+0xe02>
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000
 80026fc:	10908120 	.word	0x10908120
 8002700:	2302      	movs	r3, #2
 8002702:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002712:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002716:	2202      	movs	r2, #2
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	fa93 f2a3 	rbit	r2, r3
 8002724:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800272e:	2202      	movs	r2, #2
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	fa93 f2a3 	rbit	r2, r3
 800273c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002740:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002742:	4ba5      	ldr	r3, [pc, #660]	; (80029d8 <HAL_RCC_OscConfig+0x930>)
 8002744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002746:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800274a:	2102      	movs	r1, #2
 800274c:	6019      	str	r1, [r3, #0]
 800274e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	fa93 f1a3 	rbit	r1, r3
 8002758:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800275c:	6019      	str	r1, [r3, #0]
  return result;
 800275e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	fab3 f383 	clz	r3, r3
 8002768:	b2db      	uxtb	r3, r3
 800276a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800276e:	b2db      	uxtb	r3, r3
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	2101      	movs	r1, #1
 8002776:	fa01 f303 	lsl.w	r3, r1, r3
 800277a:	4013      	ands	r3, r2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0b0      	beq.n	80026e2 <HAL_RCC_OscConfig+0x63a>
 8002780:	e06a      	b.n	8002858 <HAL_RCC_OscConfig+0x7b0>
 8002782:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002786:	2201      	movs	r2, #1
 8002788:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	fa93 f2a3 	rbit	r2, r3
 8002794:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002798:	601a      	str	r2, [r3, #0]
  return result;
 800279a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800279e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	4b8c      	ldr	r3, [pc, #560]	; (80029dc <HAL_RCC_OscConfig+0x934>)
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	461a      	mov	r2, r3
 80027b0:	2300      	movs	r3, #0
 80027b2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b4:	f7ff f8b4 	bl	8001920 <HAL_GetTick>
 80027b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027bc:	e009      	b.n	80027d2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027be:	f7ff f8af 	bl	8001920 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e36b      	b.n	8002eaa <HAL_RCC_OscConfig+0xe02>
 80027d2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80027d6:	2202      	movs	r2, #2
 80027d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	fa93 f2a3 	rbit	r2, r3
 80027e4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80027ee:	2202      	movs	r2, #2
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	fa93 f2a3 	rbit	r2, r3
 80027fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002806:	2202      	movs	r2, #2
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	fa93 f2a3 	rbit	r2, r3
 8002814:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002818:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800281a:	4b6f      	ldr	r3, [pc, #444]	; (80029d8 <HAL_RCC_OscConfig+0x930>)
 800281c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800281e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002822:	2102      	movs	r1, #2
 8002824:	6019      	str	r1, [r3, #0]
 8002826:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	fa93 f1a3 	rbit	r1, r3
 8002830:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002834:	6019      	str	r1, [r3, #0]
  return result;
 8002836:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	fab3 f383 	clz	r3, r3
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002846:	b2db      	uxtb	r3, r3
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	2101      	movs	r1, #1
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	4013      	ands	r3, r2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1b2      	bne.n	80027be <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002858:	1d3b      	adds	r3, r7, #4
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 8158 	beq.w	8002b18 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002868:	2300      	movs	r3, #0
 800286a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800286e:	4b5a      	ldr	r3, [pc, #360]	; (80029d8 <HAL_RCC_OscConfig+0x930>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d112      	bne.n	80028a0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800287a:	4b57      	ldr	r3, [pc, #348]	; (80029d8 <HAL_RCC_OscConfig+0x930>)
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	4a56      	ldr	r2, [pc, #344]	; (80029d8 <HAL_RCC_OscConfig+0x930>)
 8002880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002884:	61d3      	str	r3, [r2, #28]
 8002886:	4b54      	ldr	r3, [pc, #336]	; (80029d8 <HAL_RCC_OscConfig+0x930>)
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800288e:	f107 0308 	add.w	r3, r7, #8
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	f107 0308 	add.w	r3, r7, #8
 8002898:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800289a:	2301      	movs	r3, #1
 800289c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a0:	4b4f      	ldr	r3, [pc, #316]	; (80029e0 <HAL_RCC_OscConfig+0x938>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d11a      	bne.n	80028e2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ac:	4b4c      	ldr	r3, [pc, #304]	; (80029e0 <HAL_RCC_OscConfig+0x938>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a4b      	ldr	r2, [pc, #300]	; (80029e0 <HAL_RCC_OscConfig+0x938>)
 80028b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b8:	f7ff f832 	bl	8001920 <HAL_GetTick>
 80028bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c0:	e009      	b.n	80028d6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c2:	f7ff f82d 	bl	8001920 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	; 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e2e9      	b.n	8002eaa <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d6:	4b42      	ldr	r3, [pc, #264]	; (80029e0 <HAL_RCC_OscConfig+0x938>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0ef      	beq.n	80028c2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e2:	1d3b      	adds	r3, r7, #4
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d106      	bne.n	80028fa <HAL_RCC_OscConfig+0x852>
 80028ec:	4b3a      	ldr	r3, [pc, #232]	; (80029d8 <HAL_RCC_OscConfig+0x930>)
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	4a39      	ldr	r2, [pc, #228]	; (80029d8 <HAL_RCC_OscConfig+0x930>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6213      	str	r3, [r2, #32]
 80028f8:	e02f      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
 80028fa:	1d3b      	adds	r3, r7, #4
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10c      	bne.n	800291e <HAL_RCC_OscConfig+0x876>
 8002904:	4b34      	ldr	r3, [pc, #208]	; (80029d8 <HAL_RCC_OscConfig+0x930>)
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	4a33      	ldr	r2, [pc, #204]	; (80029d8 <HAL_RCC_OscConfig+0x930>)
 800290a:	f023 0301 	bic.w	r3, r3, #1
 800290e:	6213      	str	r3, [r2, #32]
 8002910:	4b31      	ldr	r3, [pc, #196]	; (80029d8 <HAL_RCC_OscConfig+0x930>)
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	4a30      	ldr	r2, [pc, #192]	; (80029d8 <HAL_RCC_OscConfig+0x930>)
 8002916:	f023 0304 	bic.w	r3, r3, #4
 800291a:	6213      	str	r3, [r2, #32]
 800291c:	e01d      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
 800291e:	1d3b      	adds	r3, r7, #4
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b05      	cmp	r3, #5
 8002926:	d10c      	bne.n	8002942 <HAL_RCC_OscConfig+0x89a>
 8002928:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <HAL_RCC_OscConfig+0x930>)
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	4a2a      	ldr	r2, [pc, #168]	; (80029d8 <HAL_RCC_OscConfig+0x930>)
 800292e:	f043 0304 	orr.w	r3, r3, #4
 8002932:	6213      	str	r3, [r2, #32]
 8002934:	4b28      	ldr	r3, [pc, #160]	; (80029d8 <HAL_RCC_OscConfig+0x930>)
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	4a27      	ldr	r2, [pc, #156]	; (80029d8 <HAL_RCC_OscConfig+0x930>)
 800293a:	f043 0301 	orr.w	r3, r3, #1
 800293e:	6213      	str	r3, [r2, #32]
 8002940:	e00b      	b.n	800295a <HAL_RCC_OscConfig+0x8b2>
 8002942:	4b25      	ldr	r3, [pc, #148]	; (80029d8 <HAL_RCC_OscConfig+0x930>)
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	4a24      	ldr	r2, [pc, #144]	; (80029d8 <HAL_RCC_OscConfig+0x930>)
 8002948:	f023 0301 	bic.w	r3, r3, #1
 800294c:	6213      	str	r3, [r2, #32]
 800294e:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <HAL_RCC_OscConfig+0x930>)
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	4a21      	ldr	r2, [pc, #132]	; (80029d8 <HAL_RCC_OscConfig+0x930>)
 8002954:	f023 0304 	bic.w	r3, r3, #4
 8002958:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800295a:	1d3b      	adds	r3, r7, #4
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d06b      	beq.n	8002a3c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002964:	f7fe ffdc 	bl	8001920 <HAL_GetTick>
 8002968:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296c:	e00b      	b.n	8002986 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800296e:	f7fe ffd7 	bl	8001920 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f241 3288 	movw	r2, #5000	; 0x1388
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e291      	b.n	8002eaa <HAL_RCC_OscConfig+0xe02>
 8002986:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800298a:	2202      	movs	r2, #2
 800298c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	fa93 f2a3 	rbit	r2, r3
 8002998:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80029a2:	2202      	movs	r2, #2
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	fa93 f2a3 	rbit	r2, r3
 80029b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80029b4:	601a      	str	r2, [r3, #0]
  return result;
 80029b6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80029ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029bc:	fab3 f383 	clz	r3, r3
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	f043 0302 	orr.w	r3, r3, #2
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d109      	bne.n	80029e4 <HAL_RCC_OscConfig+0x93c>
 80029d0:	4b01      	ldr	r3, [pc, #4]	; (80029d8 <HAL_RCC_OscConfig+0x930>)
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	e014      	b.n	8002a00 <HAL_RCC_OscConfig+0x958>
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000
 80029dc:	10908120 	.word	0x10908120
 80029e0:	40007000 	.word	0x40007000
 80029e4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80029e8:	2202      	movs	r2, #2
 80029ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	fa93 f2a3 	rbit	r2, r3
 80029f6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	4bbb      	ldr	r3, [pc, #748]	; (8002cec <HAL_RCC_OscConfig+0xc44>)
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002a04:	2102      	movs	r1, #2
 8002a06:	6011      	str	r1, [r2, #0]
 8002a08:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002a0c:	6812      	ldr	r2, [r2, #0]
 8002a0e:	fa92 f1a2 	rbit	r1, r2
 8002a12:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002a16:	6011      	str	r1, [r2, #0]
  return result;
 8002a18:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	fab2 f282 	clz	r2, r2
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	f002 021f 	and.w	r2, r2, #31
 8002a2e:	2101      	movs	r1, #1
 8002a30:	fa01 f202 	lsl.w	r2, r1, r2
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d099      	beq.n	800296e <HAL_RCC_OscConfig+0x8c6>
 8002a3a:	e063      	b.n	8002b04 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3c:	f7fe ff70 	bl	8001920 <HAL_GetTick>
 8002a40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a44:	e00b      	b.n	8002a5e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a46:	f7fe ff6b 	bl	8001920 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e225      	b.n	8002eaa <HAL_RCC_OscConfig+0xe02>
 8002a5e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002a62:	2202      	movs	r2, #2
 8002a64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a66:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	fa93 f2a3 	rbit	r2, r3
 8002a70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	fa93 f2a3 	rbit	r2, r3
 8002a88:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a8c:	601a      	str	r2, [r3, #0]
  return result;
 8002a8e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a92:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a94:	fab3 f383 	clz	r3, r3
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	f043 0302 	orr.w	r3, r3, #2
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d102      	bne.n	8002aae <HAL_RCC_OscConfig+0xa06>
 8002aa8:	4b90      	ldr	r3, [pc, #576]	; (8002cec <HAL_RCC_OscConfig+0xc44>)
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	e00d      	b.n	8002aca <HAL_RCC_OscConfig+0xa22>
 8002aae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	fa93 f2a3 	rbit	r2, r3
 8002ac0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	4b89      	ldr	r3, [pc, #548]	; (8002cec <HAL_RCC_OscConfig+0xc44>)
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002ace:	2102      	movs	r1, #2
 8002ad0:	6011      	str	r1, [r2, #0]
 8002ad2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	fa92 f1a2 	rbit	r1, r2
 8002adc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002ae0:	6011      	str	r1, [r2, #0]
  return result;
 8002ae2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	fab2 f282 	clz	r2, r2
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	f002 021f 	and.w	r2, r2, #31
 8002af8:	2101      	movs	r1, #1
 8002afa:	fa01 f202 	lsl.w	r2, r1, r2
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1a0      	bne.n	8002a46 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b04:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d105      	bne.n	8002b18 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b0c:	4b77      	ldr	r3, [pc, #476]	; (8002cec <HAL_RCC_OscConfig+0xc44>)
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	4a76      	ldr	r2, [pc, #472]	; (8002cec <HAL_RCC_OscConfig+0xc44>)
 8002b12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b16:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b18:	1d3b      	adds	r3, r7, #4
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 81c2 	beq.w	8002ea8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b24:	4b71      	ldr	r3, [pc, #452]	; (8002cec <HAL_RCC_OscConfig+0xc44>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	f000 819c 	beq.w	8002e6a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b32:	1d3b      	adds	r3, r7, #4
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	f040 8114 	bne.w	8002d66 <HAL_RCC_OscConfig+0xcbe>
 8002b3e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002b42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	fa93 f2a3 	rbit	r2, r3
 8002b52:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002b56:	601a      	str	r2, [r3, #0]
  return result;
 8002b58:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002b5c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	461a      	mov	r2, r3
 8002b70:	2300      	movs	r3, #0
 8002b72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7fe fed4 	bl	8001920 <HAL_GetTick>
 8002b78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b7c:	e009      	b.n	8002b92 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7e:	f7fe fecf 	bl	8001920 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e18b      	b.n	8002eaa <HAL_RCC_OscConfig+0xe02>
 8002b92:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002b96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	fa93 f2a3 	rbit	r2, r3
 8002ba6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002baa:	601a      	str	r2, [r3, #0]
  return result;
 8002bac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002bb0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb2:	fab3 f383 	clz	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	095b      	lsrs	r3, r3, #5
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d102      	bne.n	8002bcc <HAL_RCC_OscConfig+0xb24>
 8002bc6:	4b49      	ldr	r3, [pc, #292]	; (8002cec <HAL_RCC_OscConfig+0xc44>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	e01b      	b.n	8002c04 <HAL_RCC_OscConfig+0xb5c>
 8002bcc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002bd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	fa93 f2a3 	rbit	r2, r3
 8002be0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002bea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	fa93 f2a3 	rbit	r2, r3
 8002bfa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	4b3a      	ldr	r3, [pc, #232]	; (8002cec <HAL_RCC_OscConfig+0xc44>)
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c0c:	6011      	str	r1, [r2, #0]
 8002c0e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	fa92 f1a2 	rbit	r1, r2
 8002c18:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002c1c:	6011      	str	r1, [r2, #0]
  return result;
 8002c1e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002c22:	6812      	ldr	r2, [r2, #0]
 8002c24:	fab2 f282 	clz	r2, r2
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	f042 0220 	orr.w	r2, r2, #32
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	f002 021f 	and.w	r2, r2, #31
 8002c34:	2101      	movs	r1, #1
 8002c36:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d19e      	bne.n	8002b7e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c40:	4b2a      	ldr	r3, [pc, #168]	; (8002cec <HAL_RCC_OscConfig+0xc44>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c48:	1d3b      	adds	r3, r7, #4
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002c4e:	1d3b      	adds	r3, r7, #4
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	430b      	orrs	r3, r1
 8002c56:	4925      	ldr	r1, [pc, #148]	; (8002cec <HAL_RCC_OscConfig+0xc44>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
 8002c5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	fa93 f2a3 	rbit	r2, r3
 8002c70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c74:	601a      	str	r2, [r3, #0]
  return result;
 8002c76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c7a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c7c:	fab3 f383 	clz	r3, r3
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c86:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	2301      	movs	r3, #1
 8002c90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c92:	f7fe fe45 	bl	8001920 <HAL_GetTick>
 8002c96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c9a:	e009      	b.n	8002cb0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c9c:	f7fe fe40 	bl	8001920 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e0fc      	b.n	8002eaa <HAL_RCC_OscConfig+0xe02>
 8002cb0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	fa93 f2a3 	rbit	r2, r3
 8002cc4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002cc8:	601a      	str	r2, [r3, #0]
  return result;
 8002cca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002cce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cd0:	fab3 f383 	clz	r3, r3
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	095b      	lsrs	r3, r3, #5
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d105      	bne.n	8002cf0 <HAL_RCC_OscConfig+0xc48>
 8002ce4:	4b01      	ldr	r3, [pc, #4]	; (8002cec <HAL_RCC_OscConfig+0xc44>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	e01e      	b.n	8002d28 <HAL_RCC_OscConfig+0xc80>
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002cf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	fa93 f2a3 	rbit	r2, r3
 8002d04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	fa93 f2a3 	rbit	r2, r3
 8002d1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	4b63      	ldr	r3, [pc, #396]	; (8002eb4 <HAL_RCC_OscConfig+0xe0c>)
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d2c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d30:	6011      	str	r1, [r2, #0]
 8002d32:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d36:	6812      	ldr	r2, [r2, #0]
 8002d38:	fa92 f1a2 	rbit	r1, r2
 8002d3c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002d40:	6011      	str	r1, [r2, #0]
  return result;
 8002d42:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	fab2 f282 	clz	r2, r2
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	f042 0220 	orr.w	r2, r2, #32
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	f002 021f 	and.w	r2, r2, #31
 8002d58:	2101      	movs	r1, #1
 8002d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d09b      	beq.n	8002c9c <HAL_RCC_OscConfig+0xbf4>
 8002d64:	e0a0      	b.n	8002ea8 <HAL_RCC_OscConfig+0xe00>
 8002d66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	fa93 f2a3 	rbit	r2, r3
 8002d7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d7e:	601a      	str	r2, [r3, #0]
  return result;
 8002d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d84:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d86:	fab3 f383 	clz	r3, r3
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	461a      	mov	r2, r3
 8002d98:	2300      	movs	r3, #0
 8002d9a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7fe fdc0 	bl	8001920 <HAL_GetTick>
 8002da0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da4:	e009      	b.n	8002dba <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da6:	f7fe fdbb 	bl	8001920 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e077      	b.n	8002eaa <HAL_RCC_OscConfig+0xe02>
 8002dba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	fa93 f2a3 	rbit	r2, r3
 8002dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd2:	601a      	str	r2, [r3, #0]
  return result;
 8002dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	095b      	lsrs	r3, r3, #5
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d102      	bne.n	8002df4 <HAL_RCC_OscConfig+0xd4c>
 8002dee:	4b31      	ldr	r3, [pc, #196]	; (8002eb4 <HAL_RCC_OscConfig+0xe0c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	e01b      	b.n	8002e2c <HAL_RCC_OscConfig+0xd84>
 8002df4:	f107 0320 	add.w	r3, r7, #32
 8002df8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	f107 0320 	add.w	r3, r7, #32
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	fa93 f2a3 	rbit	r2, r3
 8002e08:	f107 031c 	add.w	r3, r7, #28
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	f107 0318 	add.w	r3, r7, #24
 8002e12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	f107 0318 	add.w	r3, r7, #24
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	fa93 f2a3 	rbit	r2, r3
 8002e22:	f107 0314 	add.w	r3, r7, #20
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	4b22      	ldr	r3, [pc, #136]	; (8002eb4 <HAL_RCC_OscConfig+0xe0c>)
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	f107 0210 	add.w	r2, r7, #16
 8002e30:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e34:	6011      	str	r1, [r2, #0]
 8002e36:	f107 0210 	add.w	r2, r7, #16
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	fa92 f1a2 	rbit	r1, r2
 8002e40:	f107 020c 	add.w	r2, r7, #12
 8002e44:	6011      	str	r1, [r2, #0]
  return result;
 8002e46:	f107 020c 	add.w	r2, r7, #12
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	fab2 f282 	clz	r2, r2
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	f042 0220 	orr.w	r2, r2, #32
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	f002 021f 	and.w	r2, r2, #31
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d19e      	bne.n	8002da6 <HAL_RCC_OscConfig+0xcfe>
 8002e68:	e01e      	b.n	8002ea8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e6a:	1d3b      	adds	r3, r7, #4
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e018      	b.n	8002eaa <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e78:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <HAL_RCC_OscConfig+0xe0c>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e80:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e88:	1d3b      	adds	r3, r7, #4
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d108      	bne.n	8002ea4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002e92:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e9a:	1d3b      	adds	r3, r7, #4
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40021000 	.word	0x40021000

08002eb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b09e      	sub	sp, #120	; 0x78
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e162      	b.n	8003196 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed0:	4b90      	ldr	r3, [pc, #576]	; (8003114 <HAL_RCC_ClockConfig+0x25c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d910      	bls.n	8002f00 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ede:	4b8d      	ldr	r3, [pc, #564]	; (8003114 <HAL_RCC_ClockConfig+0x25c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f023 0207 	bic.w	r2, r3, #7
 8002ee6:	498b      	ldr	r1, [pc, #556]	; (8003114 <HAL_RCC_ClockConfig+0x25c>)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eee:	4b89      	ldr	r3, [pc, #548]	; (8003114 <HAL_RCC_ClockConfig+0x25c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e14a      	b.n	8003196 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f0c:	4b82      	ldr	r3, [pc, #520]	; (8003118 <HAL_RCC_ClockConfig+0x260>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	497f      	ldr	r1, [pc, #508]	; (8003118 <HAL_RCC_ClockConfig+0x260>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 80dc 	beq.w	80030e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d13c      	bne.n	8002fae <HAL_RCC_ClockConfig+0xf6>
 8002f34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f38:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f3c:	fa93 f3a3 	rbit	r3, r3
 8002f40:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f44:	fab3 f383 	clz	r3, r3
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	f043 0301 	orr.w	r3, r3, #1
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d102      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xa6>
 8002f58:	4b6f      	ldr	r3, [pc, #444]	; (8003118 <HAL_RCC_ClockConfig+0x260>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	e00f      	b.n	8002f7e <HAL_RCC_ClockConfig+0xc6>
 8002f5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f66:	fa93 f3a3 	rbit	r3, r3
 8002f6a:	667b      	str	r3, [r7, #100]	; 0x64
 8002f6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f70:	663b      	str	r3, [r7, #96]	; 0x60
 8002f72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f74:	fa93 f3a3 	rbit	r3, r3
 8002f78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f7a:	4b67      	ldr	r3, [pc, #412]	; (8003118 <HAL_RCC_ClockConfig+0x260>)
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f82:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f86:	fa92 f2a2 	rbit	r2, r2
 8002f8a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002f8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f8e:	fab2 f282 	clz	r2, r2
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	f042 0220 	orr.w	r2, r2, #32
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	f002 021f 	and.w	r2, r2, #31
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d17b      	bne.n	80030a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e0f3      	b.n	8003196 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d13c      	bne.n	8003030 <HAL_RCC_ClockConfig+0x178>
 8002fb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fbe:	fa93 f3a3 	rbit	r3, r3
 8002fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc6:	fab3 f383 	clz	r3, r3
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	095b      	lsrs	r3, r3, #5
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d102      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x128>
 8002fda:	4b4f      	ldr	r3, [pc, #316]	; (8003118 <HAL_RCC_ClockConfig+0x260>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	e00f      	b.n	8003000 <HAL_RCC_ClockConfig+0x148>
 8002fe0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fe4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fe8:	fa93 f3a3 	rbit	r3, r3
 8002fec:	647b      	str	r3, [r7, #68]	; 0x44
 8002fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ff2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff6:	fa93 f3a3 	rbit	r3, r3
 8002ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ffc:	4b46      	ldr	r3, [pc, #280]	; (8003118 <HAL_RCC_ClockConfig+0x260>)
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003004:	63ba      	str	r2, [r7, #56]	; 0x38
 8003006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003008:	fa92 f2a2 	rbit	r2, r2
 800300c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800300e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003010:	fab2 f282 	clz	r2, r2
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	f042 0220 	orr.w	r2, r2, #32
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	f002 021f 	and.w	r2, r2, #31
 8003020:	2101      	movs	r1, #1
 8003022:	fa01 f202 	lsl.w	r2, r1, r2
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d13a      	bne.n	80030a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e0b2      	b.n	8003196 <HAL_RCC_ClockConfig+0x2de>
 8003030:	2302      	movs	r3, #2
 8003032:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003036:	fa93 f3a3 	rbit	r3, r3
 800303a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800303c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303e:	fab3 f383 	clz	r3, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	095b      	lsrs	r3, r3, #5
 8003046:	b2db      	uxtb	r3, r3
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b01      	cmp	r3, #1
 8003050:	d102      	bne.n	8003058 <HAL_RCC_ClockConfig+0x1a0>
 8003052:	4b31      	ldr	r3, [pc, #196]	; (8003118 <HAL_RCC_ClockConfig+0x260>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	e00d      	b.n	8003074 <HAL_RCC_ClockConfig+0x1bc>
 8003058:	2302      	movs	r3, #2
 800305a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305e:	fa93 f3a3 	rbit	r3, r3
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
 8003064:	2302      	movs	r3, #2
 8003066:	623b      	str	r3, [r7, #32]
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	fa93 f3a3 	rbit	r3, r3
 800306e:	61fb      	str	r3, [r7, #28]
 8003070:	4b29      	ldr	r3, [pc, #164]	; (8003118 <HAL_RCC_ClockConfig+0x260>)
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	2202      	movs	r2, #2
 8003076:	61ba      	str	r2, [r7, #24]
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	fa92 f2a2 	rbit	r2, r2
 800307e:	617a      	str	r2, [r7, #20]
  return result;
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	fab2 f282 	clz	r2, r2
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	f042 0220 	orr.w	r2, r2, #32
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	f002 021f 	and.w	r2, r2, #31
 8003092:	2101      	movs	r1, #1
 8003094:	fa01 f202 	lsl.w	r2, r1, r2
 8003098:	4013      	ands	r3, r2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e079      	b.n	8003196 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a2:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <HAL_RCC_ClockConfig+0x260>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f023 0203 	bic.w	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	491a      	ldr	r1, [pc, #104]	; (8003118 <HAL_RCC_ClockConfig+0x260>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b4:	f7fe fc34 	bl	8001920 <HAL_GetTick>
 80030b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030bc:	f7fe fc30 	bl	8001920 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e061      	b.n	8003196 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d2:	4b11      	ldr	r3, [pc, #68]	; (8003118 <HAL_RCC_ClockConfig+0x260>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 020c 	and.w	r2, r3, #12
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d1eb      	bne.n	80030bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030e4:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <HAL_RCC_ClockConfig+0x25c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d214      	bcs.n	800311c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b08      	ldr	r3, [pc, #32]	; (8003114 <HAL_RCC_ClockConfig+0x25c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 0207 	bic.w	r2, r3, #7
 80030fa:	4906      	ldr	r1, [pc, #24]	; (8003114 <HAL_RCC_ClockConfig+0x25c>)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	4313      	orrs	r3, r2
 8003100:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003102:	4b04      	ldr	r3, [pc, #16]	; (8003114 <HAL_RCC_ClockConfig+0x25c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d005      	beq.n	800311c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e040      	b.n	8003196 <HAL_RCC_ClockConfig+0x2de>
 8003114:	40022000 	.word	0x40022000
 8003118:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003128:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <HAL_RCC_ClockConfig+0x2e8>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	491a      	ldr	r1, [pc, #104]	; (80031a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003136:	4313      	orrs	r3, r2
 8003138:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003146:	4b16      	ldr	r3, [pc, #88]	; (80031a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4912      	ldr	r1, [pc, #72]	; (80031a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003156:	4313      	orrs	r3, r2
 8003158:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800315a:	f000 f829 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 800315e:	4601      	mov	r1, r0
 8003160:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003168:	22f0      	movs	r2, #240	; 0xf0
 800316a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	fa92 f2a2 	rbit	r2, r2
 8003172:	60fa      	str	r2, [r7, #12]
  return result;
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	fab2 f282 	clz	r2, r2
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	40d3      	lsrs	r3, r2
 800317e:	4a09      	ldr	r2, [pc, #36]	; (80031a4 <HAL_RCC_ClockConfig+0x2ec>)
 8003180:	5cd3      	ldrb	r3, [r2, r3]
 8003182:	fa21 f303 	lsr.w	r3, r1, r3
 8003186:	4a08      	ldr	r2, [pc, #32]	; (80031a8 <HAL_RCC_ClockConfig+0x2f0>)
 8003188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800318a:	4b08      	ldr	r3, [pc, #32]	; (80031ac <HAL_RCC_ClockConfig+0x2f4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f7fe fb82 	bl	8001898 <HAL_InitTick>
  
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3778      	adds	r7, #120	; 0x78
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40021000 	.word	0x40021000
 80031a4:	080045f8 	.word	0x080045f8
 80031a8:	20000000 	.word	0x20000000
 80031ac:	20000004 	.word	0x20000004

080031b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b08b      	sub	sp, #44	; 0x2c
 80031b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
 80031ba:	2300      	movs	r3, #0
 80031bc:	61bb      	str	r3, [r7, #24]
 80031be:	2300      	movs	r3, #0
 80031c0:	627b      	str	r3, [r7, #36]	; 0x24
 80031c2:	2300      	movs	r3, #0
 80031c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80031ca:	4b29      	ldr	r3, [pc, #164]	; (8003270 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f003 030c 	and.w	r3, r3, #12
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d002      	beq.n	80031e0 <HAL_RCC_GetSysClockFreq+0x30>
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d003      	beq.n	80031e6 <HAL_RCC_GetSysClockFreq+0x36>
 80031de:	e03c      	b.n	800325a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031e0:	4b24      	ldr	r3, [pc, #144]	; (8003274 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031e2:	623b      	str	r3, [r7, #32]
      break;
 80031e4:	e03c      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80031ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80031f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	fa92 f2a2 	rbit	r2, r2
 80031f8:	607a      	str	r2, [r7, #4]
  return result;
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	fab2 f282 	clz	r2, r2
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	40d3      	lsrs	r3, r2
 8003204:	4a1c      	ldr	r2, [pc, #112]	; (8003278 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003206:	5cd3      	ldrb	r3, [r2, r3]
 8003208:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800320a:	4b19      	ldr	r3, [pc, #100]	; (8003270 <HAL_RCC_GetSysClockFreq+0xc0>)
 800320c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	220f      	movs	r2, #15
 8003214:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	fa92 f2a2 	rbit	r2, r2
 800321c:	60fa      	str	r2, [r7, #12]
  return result;
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	fab2 f282 	clz	r2, r2
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	40d3      	lsrs	r3, r2
 8003228:	4a14      	ldr	r2, [pc, #80]	; (800327c <HAL_RCC_GetSysClockFreq+0xcc>)
 800322a:	5cd3      	ldrb	r3, [r2, r3]
 800322c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003238:	4a0e      	ldr	r2, [pc, #56]	; (8003274 <HAL_RCC_GetSysClockFreq+0xc4>)
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	fb02 f303 	mul.w	r3, r2, r3
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
 8003248:	e004      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	4a0c      	ldr	r2, [pc, #48]	; (8003280 <HAL_RCC_GetSysClockFreq+0xd0>)
 800324e:	fb02 f303 	mul.w	r3, r2, r3
 8003252:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	623b      	str	r3, [r7, #32]
      break;
 8003258:	e002      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800325a:	4b06      	ldr	r3, [pc, #24]	; (8003274 <HAL_RCC_GetSysClockFreq+0xc4>)
 800325c:	623b      	str	r3, [r7, #32]
      break;
 800325e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003260:	6a3b      	ldr	r3, [r7, #32]
}
 8003262:	4618      	mov	r0, r3
 8003264:	372c      	adds	r7, #44	; 0x2c
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40021000 	.word	0x40021000
 8003274:	007a1200 	.word	0x007a1200
 8003278:	08004608 	.word	0x08004608
 800327c:	08004618 	.word	0x08004618
 8003280:	003d0900 	.word	0x003d0900

08003284 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b092      	sub	sp, #72	; 0x48
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80d0 	beq.w	8003442 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80032a2:	2300      	movs	r3, #0
 80032a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a8:	4b86      	ldr	r3, [pc, #536]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10e      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b4:	4b83      	ldr	r3, [pc, #524]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	4a82      	ldr	r2, [pc, #520]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032be:	61d3      	str	r3, [r2, #28]
 80032c0:	4b80      	ldr	r3, [pc, #512]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032cc:	2301      	movs	r3, #1
 80032ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d2:	4b7d      	ldr	r3, [pc, #500]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d118      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032de:	4b7a      	ldr	r3, [pc, #488]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a79      	ldr	r2, [pc, #484]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80032e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ea:	f7fe fb19 	bl	8001920 <HAL_GetTick>
 80032ee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f0:	e008      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f2:	f7fe fb15 	bl	8001920 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b64      	cmp	r3, #100	; 0x64
 80032fe:	d901      	bls.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e0db      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003304:	4b70      	ldr	r3, [pc, #448]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003310:	4b6c      	ldr	r3, [pc, #432]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003318:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800331a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800331c:	2b00      	cmp	r3, #0
 800331e:	d07d      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003328:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800332a:	429a      	cmp	r2, r3
 800332c:	d076      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800332e:	4b65      	ldr	r3, [pc, #404]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003336:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003338:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800333c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003340:	fa93 f3a3 	rbit	r3, r3
 8003344:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003348:	fab3 f383 	clz	r3, r3
 800334c:	b2db      	uxtb	r3, r3
 800334e:	461a      	mov	r2, r3
 8003350:	4b5e      	ldr	r3, [pc, #376]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003352:	4413      	add	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	461a      	mov	r2, r3
 8003358:	2301      	movs	r3, #1
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003360:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003364:	fa93 f3a3 	rbit	r3, r3
 8003368:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800336a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800336c:	fab3 f383 	clz	r3, r3
 8003370:	b2db      	uxtb	r3, r3
 8003372:	461a      	mov	r2, r3
 8003374:	4b55      	ldr	r3, [pc, #340]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	461a      	mov	r2, r3
 800337c:	2300      	movs	r3, #0
 800337e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003380:	4a50      	ldr	r2, [pc, #320]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003384:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d045      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003390:	f7fe fac6 	bl	8001920 <HAL_GetTick>
 8003394:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003396:	e00a      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003398:	f7fe fac2 	bl	8001920 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d901      	bls.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e086      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x238>
 80033ae:	2302      	movs	r3, #2
 80033b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b4:	fa93 f3a3 	rbit	r3, r3
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ba:	2302      	movs	r3, #2
 80033bc:	623b      	str	r3, [r7, #32]
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	fa93 f3a3 	rbit	r3, r3
 80033c4:	61fb      	str	r3, [r7, #28]
  return result;
 80033c6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c8:	fab3 f383 	clz	r3, r3
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	f043 0302 	orr.w	r3, r3, #2
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d102      	bne.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80033dc:	4b39      	ldr	r3, [pc, #228]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	e007      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80033e2:	2302      	movs	r3, #2
 80033e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	fa93 f3a3 	rbit	r3, r3
 80033ec:	617b      	str	r3, [r7, #20]
 80033ee:	4b35      	ldr	r3, [pc, #212]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	2202      	movs	r2, #2
 80033f4:	613a      	str	r2, [r7, #16]
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	fa92 f2a2 	rbit	r2, r2
 80033fc:	60fa      	str	r2, [r7, #12]
  return result;
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	fab2 f282 	clz	r2, r2
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	f002 021f 	and.w	r2, r2, #31
 8003410:	2101      	movs	r1, #1
 8003412:	fa01 f202 	lsl.w	r2, r1, r2
 8003416:	4013      	ands	r3, r2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0bd      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800341c:	4b29      	ldr	r3, [pc, #164]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	4926      	ldr	r1, [pc, #152]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800342a:	4313      	orrs	r3, r2
 800342c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800342e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003432:	2b01      	cmp	r3, #1
 8003434:	d105      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003436:	4b23      	ldr	r3, [pc, #140]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	4a22      	ldr	r2, [pc, #136]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800343c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003440:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d008      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800344e:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	f023 0203 	bic.w	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	491a      	ldr	r1, [pc, #104]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800345c:	4313      	orrs	r3, r2
 800345e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0320 	and.w	r3, r3, #32
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800346c:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003470:	f023 0210 	bic.w	r2, r3, #16
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4912      	ldr	r1, [pc, #72]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800347a:	4313      	orrs	r3, r2
 800347c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003486:	2b00      	cmp	r3, #0
 8003488:	d008      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800348a:	4b0e      	ldr	r3, [pc, #56]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	490b      	ldr	r1, [pc, #44]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003498:	4313      	orrs	r3, r2
 800349a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d008      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80034a8:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	4903      	ldr	r1, [pc, #12]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3748      	adds	r7, #72	; 0x48
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40021000 	.word	0x40021000
 80034c8:	40007000 	.word	0x40007000
 80034cc:	10908100 	.word	0x10908100

080034d0 <pow>:
 80034d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034d4:	ed2d 8b04 	vpush	{d8-d9}
 80034d8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80037ac <pow+0x2dc>
 80034dc:	b08d      	sub	sp, #52	; 0x34
 80034de:	ec57 6b10 	vmov	r6, r7, d0
 80034e2:	ec55 4b11 	vmov	r4, r5, d1
 80034e6:	f000 f963 	bl	80037b0 <__ieee754_pow>
 80034ea:	f999 3000 	ldrsb.w	r3, [r9]
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	3301      	adds	r3, #1
 80034f2:	eeb0 8a40 	vmov.f32	s16, s0
 80034f6:	eef0 8a60 	vmov.f32	s17, s1
 80034fa:	46c8      	mov	r8, r9
 80034fc:	d05f      	beq.n	80035be <pow+0xee>
 80034fe:	4622      	mov	r2, r4
 8003500:	462b      	mov	r3, r5
 8003502:	4620      	mov	r0, r4
 8003504:	4629      	mov	r1, r5
 8003506:	f7fd fab5 	bl	8000a74 <__aeabi_dcmpun>
 800350a:	4683      	mov	fp, r0
 800350c:	2800      	cmp	r0, #0
 800350e:	d156      	bne.n	80035be <pow+0xee>
 8003510:	4632      	mov	r2, r6
 8003512:	463b      	mov	r3, r7
 8003514:	4630      	mov	r0, r6
 8003516:	4639      	mov	r1, r7
 8003518:	f7fd faac 	bl	8000a74 <__aeabi_dcmpun>
 800351c:	9001      	str	r0, [sp, #4]
 800351e:	b1e8      	cbz	r0, 800355c <pow+0x8c>
 8003520:	2200      	movs	r2, #0
 8003522:	2300      	movs	r3, #0
 8003524:	4620      	mov	r0, r4
 8003526:	4629      	mov	r1, r5
 8003528:	f7fd fa72 	bl	8000a10 <__aeabi_dcmpeq>
 800352c:	2800      	cmp	r0, #0
 800352e:	d046      	beq.n	80035be <pow+0xee>
 8003530:	2301      	movs	r3, #1
 8003532:	9302      	str	r3, [sp, #8]
 8003534:	4b96      	ldr	r3, [pc, #600]	; (8003790 <pow+0x2c0>)
 8003536:	9303      	str	r3, [sp, #12]
 8003538:	4b96      	ldr	r3, [pc, #600]	; (8003794 <pow+0x2c4>)
 800353a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800353e:	2200      	movs	r2, #0
 8003540:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003544:	9b00      	ldr	r3, [sp, #0]
 8003546:	2b02      	cmp	r3, #2
 8003548:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800354c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003550:	d033      	beq.n	80035ba <pow+0xea>
 8003552:	a802      	add	r0, sp, #8
 8003554:	f000 fefb 	bl	800434e <matherr>
 8003558:	bb48      	cbnz	r0, 80035ae <pow+0xde>
 800355a:	e05d      	b.n	8003618 <pow+0x148>
 800355c:	f04f 0a00 	mov.w	sl, #0
 8003560:	f04f 0b00 	mov.w	fp, #0
 8003564:	4652      	mov	r2, sl
 8003566:	465b      	mov	r3, fp
 8003568:	4630      	mov	r0, r6
 800356a:	4639      	mov	r1, r7
 800356c:	f7fd fa50 	bl	8000a10 <__aeabi_dcmpeq>
 8003570:	ec4b ab19 	vmov	d9, sl, fp
 8003574:	2800      	cmp	r0, #0
 8003576:	d054      	beq.n	8003622 <pow+0x152>
 8003578:	4652      	mov	r2, sl
 800357a:	465b      	mov	r3, fp
 800357c:	4620      	mov	r0, r4
 800357e:	4629      	mov	r1, r5
 8003580:	f7fd fa46 	bl	8000a10 <__aeabi_dcmpeq>
 8003584:	4680      	mov	r8, r0
 8003586:	b318      	cbz	r0, 80035d0 <pow+0x100>
 8003588:	2301      	movs	r3, #1
 800358a:	9302      	str	r3, [sp, #8]
 800358c:	4b80      	ldr	r3, [pc, #512]	; (8003790 <pow+0x2c0>)
 800358e:	9303      	str	r3, [sp, #12]
 8003590:	9b01      	ldr	r3, [sp, #4]
 8003592:	930a      	str	r3, [sp, #40]	; 0x28
 8003594:	9b00      	ldr	r3, [sp, #0]
 8003596:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800359a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800359e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0d5      	beq.n	8003552 <pow+0x82>
 80035a6:	4b7b      	ldr	r3, [pc, #492]	; (8003794 <pow+0x2c4>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80035ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035b0:	b11b      	cbz	r3, 80035ba <pow+0xea>
 80035b2:	f000 ffe3 	bl	800457c <__errno>
 80035b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035b8:	6003      	str	r3, [r0, #0]
 80035ba:	ed9d 8b08 	vldr	d8, [sp, #32]
 80035be:	eeb0 0a48 	vmov.f32	s0, s16
 80035c2:	eef0 0a68 	vmov.f32	s1, s17
 80035c6:	b00d      	add	sp, #52	; 0x34
 80035c8:	ecbd 8b04 	vpop	{d8-d9}
 80035cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035d0:	ec45 4b10 	vmov	d0, r4, r5
 80035d4:	f000 feb3 	bl	800433e <finite>
 80035d8:	2800      	cmp	r0, #0
 80035da:	d0f0      	beq.n	80035be <pow+0xee>
 80035dc:	4652      	mov	r2, sl
 80035de:	465b      	mov	r3, fp
 80035e0:	4620      	mov	r0, r4
 80035e2:	4629      	mov	r1, r5
 80035e4:	f7fd fa1e 	bl	8000a24 <__aeabi_dcmplt>
 80035e8:	2800      	cmp	r0, #0
 80035ea:	d0e8      	beq.n	80035be <pow+0xee>
 80035ec:	2301      	movs	r3, #1
 80035ee:	9302      	str	r3, [sp, #8]
 80035f0:	4b67      	ldr	r3, [pc, #412]	; (8003790 <pow+0x2c0>)
 80035f2:	9303      	str	r3, [sp, #12]
 80035f4:	f999 3000 	ldrsb.w	r3, [r9]
 80035f8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80035fc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003600:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003604:	b913      	cbnz	r3, 800360c <pow+0x13c>
 8003606:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800360a:	e7a2      	b.n	8003552 <pow+0x82>
 800360c:	4962      	ldr	r1, [pc, #392]	; (8003798 <pow+0x2c8>)
 800360e:	2000      	movs	r0, #0
 8003610:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003614:	2b02      	cmp	r3, #2
 8003616:	d19c      	bne.n	8003552 <pow+0x82>
 8003618:	f000 ffb0 	bl	800457c <__errno>
 800361c:	2321      	movs	r3, #33	; 0x21
 800361e:	6003      	str	r3, [r0, #0]
 8003620:	e7c5      	b.n	80035ae <pow+0xde>
 8003622:	eeb0 0a48 	vmov.f32	s0, s16
 8003626:	eef0 0a68 	vmov.f32	s1, s17
 800362a:	f000 fe88 	bl	800433e <finite>
 800362e:	9000      	str	r0, [sp, #0]
 8003630:	2800      	cmp	r0, #0
 8003632:	f040 8081 	bne.w	8003738 <pow+0x268>
 8003636:	ec47 6b10 	vmov	d0, r6, r7
 800363a:	f000 fe80 	bl	800433e <finite>
 800363e:	2800      	cmp	r0, #0
 8003640:	d07a      	beq.n	8003738 <pow+0x268>
 8003642:	ec45 4b10 	vmov	d0, r4, r5
 8003646:	f000 fe7a 	bl	800433e <finite>
 800364a:	2800      	cmp	r0, #0
 800364c:	d074      	beq.n	8003738 <pow+0x268>
 800364e:	ec53 2b18 	vmov	r2, r3, d8
 8003652:	ee18 0a10 	vmov	r0, s16
 8003656:	4619      	mov	r1, r3
 8003658:	f7fd fa0c 	bl	8000a74 <__aeabi_dcmpun>
 800365c:	f999 9000 	ldrsb.w	r9, [r9]
 8003660:	4b4b      	ldr	r3, [pc, #300]	; (8003790 <pow+0x2c0>)
 8003662:	b1b0      	cbz	r0, 8003692 <pow+0x1c2>
 8003664:	2201      	movs	r2, #1
 8003666:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800366a:	9b00      	ldr	r3, [sp, #0]
 800366c:	930a      	str	r3, [sp, #40]	; 0x28
 800366e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003672:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003676:	f1b9 0f00 	cmp.w	r9, #0
 800367a:	d0c4      	beq.n	8003606 <pow+0x136>
 800367c:	4652      	mov	r2, sl
 800367e:	465b      	mov	r3, fp
 8003680:	4650      	mov	r0, sl
 8003682:	4659      	mov	r1, fp
 8003684:	f7fd f886 	bl	8000794 <__aeabi_ddiv>
 8003688:	f1b9 0f02 	cmp.w	r9, #2
 800368c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003690:	e7c1      	b.n	8003616 <pow+0x146>
 8003692:	2203      	movs	r2, #3
 8003694:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003698:	900a      	str	r0, [sp, #40]	; 0x28
 800369a:	4629      	mov	r1, r5
 800369c:	4620      	mov	r0, r4
 800369e:	2200      	movs	r2, #0
 80036a0:	4b3e      	ldr	r3, [pc, #248]	; (800379c <pow+0x2cc>)
 80036a2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80036a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80036aa:	f7fc ff49 	bl	8000540 <__aeabi_dmul>
 80036ae:	4604      	mov	r4, r0
 80036b0:	460d      	mov	r5, r1
 80036b2:	f1b9 0f00 	cmp.w	r9, #0
 80036b6:	d124      	bne.n	8003702 <pow+0x232>
 80036b8:	4b39      	ldr	r3, [pc, #228]	; (80037a0 <pow+0x2d0>)
 80036ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80036be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80036c2:	4630      	mov	r0, r6
 80036c4:	4652      	mov	r2, sl
 80036c6:	465b      	mov	r3, fp
 80036c8:	4639      	mov	r1, r7
 80036ca:	f7fd f9ab 	bl	8000a24 <__aeabi_dcmplt>
 80036ce:	2800      	cmp	r0, #0
 80036d0:	d056      	beq.n	8003780 <pow+0x2b0>
 80036d2:	ec45 4b10 	vmov	d0, r4, r5
 80036d6:	f000 fe47 	bl	8004368 <rint>
 80036da:	4622      	mov	r2, r4
 80036dc:	462b      	mov	r3, r5
 80036de:	ec51 0b10 	vmov	r0, r1, d0
 80036e2:	f7fd f995 	bl	8000a10 <__aeabi_dcmpeq>
 80036e6:	b920      	cbnz	r0, 80036f2 <pow+0x222>
 80036e8:	4b2e      	ldr	r3, [pc, #184]	; (80037a4 <pow+0x2d4>)
 80036ea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80036ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80036f2:	f998 3000 	ldrsb.w	r3, [r8]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d142      	bne.n	8003780 <pow+0x2b0>
 80036fa:	f000 ff3f 	bl	800457c <__errno>
 80036fe:	2322      	movs	r3, #34	; 0x22
 8003700:	e78d      	b.n	800361e <pow+0x14e>
 8003702:	4b29      	ldr	r3, [pc, #164]	; (80037a8 <pow+0x2d8>)
 8003704:	2200      	movs	r2, #0
 8003706:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800370a:	4630      	mov	r0, r6
 800370c:	4652      	mov	r2, sl
 800370e:	465b      	mov	r3, fp
 8003710:	4639      	mov	r1, r7
 8003712:	f7fd f987 	bl	8000a24 <__aeabi_dcmplt>
 8003716:	2800      	cmp	r0, #0
 8003718:	d0eb      	beq.n	80036f2 <pow+0x222>
 800371a:	ec45 4b10 	vmov	d0, r4, r5
 800371e:	f000 fe23 	bl	8004368 <rint>
 8003722:	4622      	mov	r2, r4
 8003724:	462b      	mov	r3, r5
 8003726:	ec51 0b10 	vmov	r0, r1, d0
 800372a:	f7fd f971 	bl	8000a10 <__aeabi_dcmpeq>
 800372e:	2800      	cmp	r0, #0
 8003730:	d1df      	bne.n	80036f2 <pow+0x222>
 8003732:	2200      	movs	r2, #0
 8003734:	4b18      	ldr	r3, [pc, #96]	; (8003798 <pow+0x2c8>)
 8003736:	e7da      	b.n	80036ee <pow+0x21e>
 8003738:	2200      	movs	r2, #0
 800373a:	2300      	movs	r3, #0
 800373c:	ec51 0b18 	vmov	r0, r1, d8
 8003740:	f7fd f966 	bl	8000a10 <__aeabi_dcmpeq>
 8003744:	2800      	cmp	r0, #0
 8003746:	f43f af3a 	beq.w	80035be <pow+0xee>
 800374a:	ec47 6b10 	vmov	d0, r6, r7
 800374e:	f000 fdf6 	bl	800433e <finite>
 8003752:	2800      	cmp	r0, #0
 8003754:	f43f af33 	beq.w	80035be <pow+0xee>
 8003758:	ec45 4b10 	vmov	d0, r4, r5
 800375c:	f000 fdef 	bl	800433e <finite>
 8003760:	2800      	cmp	r0, #0
 8003762:	f43f af2c 	beq.w	80035be <pow+0xee>
 8003766:	2304      	movs	r3, #4
 8003768:	9302      	str	r3, [sp, #8]
 800376a:	4b09      	ldr	r3, [pc, #36]	; (8003790 <pow+0x2c0>)
 800376c:	9303      	str	r3, [sp, #12]
 800376e:	2300      	movs	r3, #0
 8003770:	930a      	str	r3, [sp, #40]	; 0x28
 8003772:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003776:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800377a:	ed8d 9b08 	vstr	d9, [sp, #32]
 800377e:	e7b8      	b.n	80036f2 <pow+0x222>
 8003780:	a802      	add	r0, sp, #8
 8003782:	f000 fde4 	bl	800434e <matherr>
 8003786:	2800      	cmp	r0, #0
 8003788:	f47f af11 	bne.w	80035ae <pow+0xde>
 800378c:	e7b5      	b.n	80036fa <pow+0x22a>
 800378e:	bf00      	nop
 8003790:	08004628 	.word	0x08004628
 8003794:	3ff00000 	.word	0x3ff00000
 8003798:	fff00000 	.word	0xfff00000
 800379c:	3fe00000 	.word	0x3fe00000
 80037a0:	47efffff 	.word	0x47efffff
 80037a4:	c7efffff 	.word	0xc7efffff
 80037a8:	7ff00000 	.word	0x7ff00000
 80037ac:	20000009 	.word	0x20000009

080037b0 <__ieee754_pow>:
 80037b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037b4:	b091      	sub	sp, #68	; 0x44
 80037b6:	ed8d 1b00 	vstr	d1, [sp]
 80037ba:	e9dd 2900 	ldrd	r2, r9, [sp]
 80037be:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80037c2:	ea58 0302 	orrs.w	r3, r8, r2
 80037c6:	ec57 6b10 	vmov	r6, r7, d0
 80037ca:	f000 84be 	beq.w	800414a <__ieee754_pow+0x99a>
 80037ce:	4b7a      	ldr	r3, [pc, #488]	; (80039b8 <__ieee754_pow+0x208>)
 80037d0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80037d4:	429c      	cmp	r4, r3
 80037d6:	463d      	mov	r5, r7
 80037d8:	ee10 aa10 	vmov	sl, s0
 80037dc:	dc09      	bgt.n	80037f2 <__ieee754_pow+0x42>
 80037de:	d103      	bne.n	80037e8 <__ieee754_pow+0x38>
 80037e0:	b93e      	cbnz	r6, 80037f2 <__ieee754_pow+0x42>
 80037e2:	45a0      	cmp	r8, r4
 80037e4:	dc0d      	bgt.n	8003802 <__ieee754_pow+0x52>
 80037e6:	e001      	b.n	80037ec <__ieee754_pow+0x3c>
 80037e8:	4598      	cmp	r8, r3
 80037ea:	dc02      	bgt.n	80037f2 <__ieee754_pow+0x42>
 80037ec:	4598      	cmp	r8, r3
 80037ee:	d10e      	bne.n	800380e <__ieee754_pow+0x5e>
 80037f0:	b16a      	cbz	r2, 800380e <__ieee754_pow+0x5e>
 80037f2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80037f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80037fa:	ea54 030a 	orrs.w	r3, r4, sl
 80037fe:	f000 84a4 	beq.w	800414a <__ieee754_pow+0x99a>
 8003802:	486e      	ldr	r0, [pc, #440]	; (80039bc <__ieee754_pow+0x20c>)
 8003804:	b011      	add	sp, #68	; 0x44
 8003806:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800380a:	f000 bda5 	b.w	8004358 <nan>
 800380e:	2d00      	cmp	r5, #0
 8003810:	da53      	bge.n	80038ba <__ieee754_pow+0x10a>
 8003812:	4b6b      	ldr	r3, [pc, #428]	; (80039c0 <__ieee754_pow+0x210>)
 8003814:	4598      	cmp	r8, r3
 8003816:	dc4d      	bgt.n	80038b4 <__ieee754_pow+0x104>
 8003818:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800381c:	4598      	cmp	r8, r3
 800381e:	dd4c      	ble.n	80038ba <__ieee754_pow+0x10a>
 8003820:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003824:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003828:	2b14      	cmp	r3, #20
 800382a:	dd26      	ble.n	800387a <__ieee754_pow+0xca>
 800382c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003830:	fa22 f103 	lsr.w	r1, r2, r3
 8003834:	fa01 f303 	lsl.w	r3, r1, r3
 8003838:	4293      	cmp	r3, r2
 800383a:	d13e      	bne.n	80038ba <__ieee754_pow+0x10a>
 800383c:	f001 0101 	and.w	r1, r1, #1
 8003840:	f1c1 0b02 	rsb	fp, r1, #2
 8003844:	2a00      	cmp	r2, #0
 8003846:	d15b      	bne.n	8003900 <__ieee754_pow+0x150>
 8003848:	4b5b      	ldr	r3, [pc, #364]	; (80039b8 <__ieee754_pow+0x208>)
 800384a:	4598      	cmp	r8, r3
 800384c:	d124      	bne.n	8003898 <__ieee754_pow+0xe8>
 800384e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003852:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003856:	ea53 030a 	orrs.w	r3, r3, sl
 800385a:	f000 8476 	beq.w	800414a <__ieee754_pow+0x99a>
 800385e:	4b59      	ldr	r3, [pc, #356]	; (80039c4 <__ieee754_pow+0x214>)
 8003860:	429c      	cmp	r4, r3
 8003862:	dd2d      	ble.n	80038c0 <__ieee754_pow+0x110>
 8003864:	f1b9 0f00 	cmp.w	r9, #0
 8003868:	f280 8473 	bge.w	8004152 <__ieee754_pow+0x9a2>
 800386c:	2000      	movs	r0, #0
 800386e:	2100      	movs	r1, #0
 8003870:	ec41 0b10 	vmov	d0, r0, r1
 8003874:	b011      	add	sp, #68	; 0x44
 8003876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800387a:	2a00      	cmp	r2, #0
 800387c:	d13e      	bne.n	80038fc <__ieee754_pow+0x14c>
 800387e:	f1c3 0314 	rsb	r3, r3, #20
 8003882:	fa48 f103 	asr.w	r1, r8, r3
 8003886:	fa01 f303 	lsl.w	r3, r1, r3
 800388a:	4543      	cmp	r3, r8
 800388c:	f040 8469 	bne.w	8004162 <__ieee754_pow+0x9b2>
 8003890:	f001 0101 	and.w	r1, r1, #1
 8003894:	f1c1 0b02 	rsb	fp, r1, #2
 8003898:	4b4b      	ldr	r3, [pc, #300]	; (80039c8 <__ieee754_pow+0x218>)
 800389a:	4598      	cmp	r8, r3
 800389c:	d118      	bne.n	80038d0 <__ieee754_pow+0x120>
 800389e:	f1b9 0f00 	cmp.w	r9, #0
 80038a2:	f280 845a 	bge.w	800415a <__ieee754_pow+0x9aa>
 80038a6:	4948      	ldr	r1, [pc, #288]	; (80039c8 <__ieee754_pow+0x218>)
 80038a8:	4632      	mov	r2, r6
 80038aa:	463b      	mov	r3, r7
 80038ac:	2000      	movs	r0, #0
 80038ae:	f7fc ff71 	bl	8000794 <__aeabi_ddiv>
 80038b2:	e7dd      	b.n	8003870 <__ieee754_pow+0xc0>
 80038b4:	f04f 0b02 	mov.w	fp, #2
 80038b8:	e7c4      	b.n	8003844 <__ieee754_pow+0x94>
 80038ba:	f04f 0b00 	mov.w	fp, #0
 80038be:	e7c1      	b.n	8003844 <__ieee754_pow+0x94>
 80038c0:	f1b9 0f00 	cmp.w	r9, #0
 80038c4:	dad2      	bge.n	800386c <__ieee754_pow+0xbc>
 80038c6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80038ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80038ce:	e7cf      	b.n	8003870 <__ieee754_pow+0xc0>
 80038d0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80038d4:	d106      	bne.n	80038e4 <__ieee754_pow+0x134>
 80038d6:	4632      	mov	r2, r6
 80038d8:	463b      	mov	r3, r7
 80038da:	4610      	mov	r0, r2
 80038dc:	4619      	mov	r1, r3
 80038de:	f7fc fe2f 	bl	8000540 <__aeabi_dmul>
 80038e2:	e7c5      	b.n	8003870 <__ieee754_pow+0xc0>
 80038e4:	4b39      	ldr	r3, [pc, #228]	; (80039cc <__ieee754_pow+0x21c>)
 80038e6:	4599      	cmp	r9, r3
 80038e8:	d10a      	bne.n	8003900 <__ieee754_pow+0x150>
 80038ea:	2d00      	cmp	r5, #0
 80038ec:	db08      	blt.n	8003900 <__ieee754_pow+0x150>
 80038ee:	ec47 6b10 	vmov	d0, r6, r7
 80038f2:	b011      	add	sp, #68	; 0x44
 80038f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f8:	f000 bc68 	b.w	80041cc <__ieee754_sqrt>
 80038fc:	f04f 0b00 	mov.w	fp, #0
 8003900:	ec47 6b10 	vmov	d0, r6, r7
 8003904:	f000 fd12 	bl	800432c <fabs>
 8003908:	ec51 0b10 	vmov	r0, r1, d0
 800390c:	f1ba 0f00 	cmp.w	sl, #0
 8003910:	d127      	bne.n	8003962 <__ieee754_pow+0x1b2>
 8003912:	b124      	cbz	r4, 800391e <__ieee754_pow+0x16e>
 8003914:	4b2c      	ldr	r3, [pc, #176]	; (80039c8 <__ieee754_pow+0x218>)
 8003916:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800391a:	429a      	cmp	r2, r3
 800391c:	d121      	bne.n	8003962 <__ieee754_pow+0x1b2>
 800391e:	f1b9 0f00 	cmp.w	r9, #0
 8003922:	da05      	bge.n	8003930 <__ieee754_pow+0x180>
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	2000      	movs	r0, #0
 800392a:	4927      	ldr	r1, [pc, #156]	; (80039c8 <__ieee754_pow+0x218>)
 800392c:	f7fc ff32 	bl	8000794 <__aeabi_ddiv>
 8003930:	2d00      	cmp	r5, #0
 8003932:	da9d      	bge.n	8003870 <__ieee754_pow+0xc0>
 8003934:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003938:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800393c:	ea54 030b 	orrs.w	r3, r4, fp
 8003940:	d108      	bne.n	8003954 <__ieee754_pow+0x1a4>
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	4610      	mov	r0, r2
 8003948:	4619      	mov	r1, r3
 800394a:	f7fc fc41 	bl	80001d0 <__aeabi_dsub>
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	e7ac      	b.n	80038ae <__ieee754_pow+0xfe>
 8003954:	f1bb 0f01 	cmp.w	fp, #1
 8003958:	d18a      	bne.n	8003870 <__ieee754_pow+0xc0>
 800395a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800395e:	4619      	mov	r1, r3
 8003960:	e786      	b.n	8003870 <__ieee754_pow+0xc0>
 8003962:	0fed      	lsrs	r5, r5, #31
 8003964:	1e6b      	subs	r3, r5, #1
 8003966:	930d      	str	r3, [sp, #52]	; 0x34
 8003968:	ea5b 0303 	orrs.w	r3, fp, r3
 800396c:	d102      	bne.n	8003974 <__ieee754_pow+0x1c4>
 800396e:	4632      	mov	r2, r6
 8003970:	463b      	mov	r3, r7
 8003972:	e7e8      	b.n	8003946 <__ieee754_pow+0x196>
 8003974:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <__ieee754_pow+0x220>)
 8003976:	4598      	cmp	r8, r3
 8003978:	f340 80fe 	ble.w	8003b78 <__ieee754_pow+0x3c8>
 800397c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003980:	4598      	cmp	r8, r3
 8003982:	dd0a      	ble.n	800399a <__ieee754_pow+0x1ea>
 8003984:	4b0f      	ldr	r3, [pc, #60]	; (80039c4 <__ieee754_pow+0x214>)
 8003986:	429c      	cmp	r4, r3
 8003988:	dc0d      	bgt.n	80039a6 <__ieee754_pow+0x1f6>
 800398a:	f1b9 0f00 	cmp.w	r9, #0
 800398e:	f6bf af6d 	bge.w	800386c <__ieee754_pow+0xbc>
 8003992:	a307      	add	r3, pc, #28	; (adr r3, 80039b0 <__ieee754_pow+0x200>)
 8003994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003998:	e79f      	b.n	80038da <__ieee754_pow+0x12a>
 800399a:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <__ieee754_pow+0x224>)
 800399c:	429c      	cmp	r4, r3
 800399e:	ddf4      	ble.n	800398a <__ieee754_pow+0x1da>
 80039a0:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <__ieee754_pow+0x218>)
 80039a2:	429c      	cmp	r4, r3
 80039a4:	dd18      	ble.n	80039d8 <__ieee754_pow+0x228>
 80039a6:	f1b9 0f00 	cmp.w	r9, #0
 80039aa:	dcf2      	bgt.n	8003992 <__ieee754_pow+0x1e2>
 80039ac:	e75e      	b.n	800386c <__ieee754_pow+0xbc>
 80039ae:	bf00      	nop
 80039b0:	8800759c 	.word	0x8800759c
 80039b4:	7e37e43c 	.word	0x7e37e43c
 80039b8:	7ff00000 	.word	0x7ff00000
 80039bc:	0800462b 	.word	0x0800462b
 80039c0:	433fffff 	.word	0x433fffff
 80039c4:	3fefffff 	.word	0x3fefffff
 80039c8:	3ff00000 	.word	0x3ff00000
 80039cc:	3fe00000 	.word	0x3fe00000
 80039d0:	41e00000 	.word	0x41e00000
 80039d4:	3feffffe 	.word	0x3feffffe
 80039d8:	2200      	movs	r2, #0
 80039da:	4b63      	ldr	r3, [pc, #396]	; (8003b68 <__ieee754_pow+0x3b8>)
 80039dc:	f7fc fbf8 	bl	80001d0 <__aeabi_dsub>
 80039e0:	a355      	add	r3, pc, #340	; (adr r3, 8003b38 <__ieee754_pow+0x388>)
 80039e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e6:	4604      	mov	r4, r0
 80039e8:	460d      	mov	r5, r1
 80039ea:	f7fc fda9 	bl	8000540 <__aeabi_dmul>
 80039ee:	a354      	add	r3, pc, #336	; (adr r3, 8003b40 <__ieee754_pow+0x390>)
 80039f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f4:	4606      	mov	r6, r0
 80039f6:	460f      	mov	r7, r1
 80039f8:	4620      	mov	r0, r4
 80039fa:	4629      	mov	r1, r5
 80039fc:	f7fc fda0 	bl	8000540 <__aeabi_dmul>
 8003a00:	2200      	movs	r2, #0
 8003a02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a06:	4b59      	ldr	r3, [pc, #356]	; (8003b6c <__ieee754_pow+0x3bc>)
 8003a08:	4620      	mov	r0, r4
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	f7fc fd98 	bl	8000540 <__aeabi_dmul>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	a14c      	add	r1, pc, #304	; (adr r1, 8003b48 <__ieee754_pow+0x398>)
 8003a16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a1a:	f7fc fbd9 	bl	80001d0 <__aeabi_dsub>
 8003a1e:	4622      	mov	r2, r4
 8003a20:	462b      	mov	r3, r5
 8003a22:	f7fc fd8d 	bl	8000540 <__aeabi_dmul>
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	4950      	ldr	r1, [pc, #320]	; (8003b70 <__ieee754_pow+0x3c0>)
 8003a2e:	f7fc fbcf 	bl	80001d0 <__aeabi_dsub>
 8003a32:	4622      	mov	r2, r4
 8003a34:	462b      	mov	r3, r5
 8003a36:	4680      	mov	r8, r0
 8003a38:	4689      	mov	r9, r1
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	f7fc fd7f 	bl	8000540 <__aeabi_dmul>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4640      	mov	r0, r8
 8003a48:	4649      	mov	r1, r9
 8003a4a:	f7fc fd79 	bl	8000540 <__aeabi_dmul>
 8003a4e:	a340      	add	r3, pc, #256	; (adr r3, 8003b50 <__ieee754_pow+0x3a0>)
 8003a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a54:	f7fc fd74 	bl	8000540 <__aeabi_dmul>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a60:	f7fc fbb6 	bl	80001d0 <__aeabi_dsub>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4604      	mov	r4, r0
 8003a6a:	460d      	mov	r5, r1
 8003a6c:	4630      	mov	r0, r6
 8003a6e:	4639      	mov	r1, r7
 8003a70:	f7fc fbb0 	bl	80001d4 <__adddf3>
 8003a74:	2000      	movs	r0, #0
 8003a76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003a7a:	4632      	mov	r2, r6
 8003a7c:	463b      	mov	r3, r7
 8003a7e:	f7fc fba7 	bl	80001d0 <__aeabi_dsub>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4620      	mov	r0, r4
 8003a88:	4629      	mov	r1, r5
 8003a8a:	f7fc fba1 	bl	80001d0 <__aeabi_dsub>
 8003a8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003a90:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003a94:	4313      	orrs	r3, r2
 8003a96:	4606      	mov	r6, r0
 8003a98:	460f      	mov	r7, r1
 8003a9a:	f040 81eb 	bne.w	8003e74 <__ieee754_pow+0x6c4>
 8003a9e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8003b58 <__ieee754_pow+0x3a8>
 8003aa2:	e9dd 4500 	ldrd	r4, r5, [sp]
 8003aa6:	2400      	movs	r4, #0
 8003aa8:	4622      	mov	r2, r4
 8003aaa:	462b      	mov	r3, r5
 8003aac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ab0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003ab4:	f7fc fb8c 	bl	80001d0 <__aeabi_dsub>
 8003ab8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003abc:	f7fc fd40 	bl	8000540 <__aeabi_dmul>
 8003ac0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003ac4:	4680      	mov	r8, r0
 8003ac6:	4689      	mov	r9, r1
 8003ac8:	4630      	mov	r0, r6
 8003aca:	4639      	mov	r1, r7
 8003acc:	f7fc fd38 	bl	8000540 <__aeabi_dmul>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4640      	mov	r0, r8
 8003ad6:	4649      	mov	r1, r9
 8003ad8:	f7fc fb7c 	bl	80001d4 <__adddf3>
 8003adc:	4622      	mov	r2, r4
 8003ade:	462b      	mov	r3, r5
 8003ae0:	4680      	mov	r8, r0
 8003ae2:	4689      	mov	r9, r1
 8003ae4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ae8:	f7fc fd2a 	bl	8000540 <__aeabi_dmul>
 8003aec:	460b      	mov	r3, r1
 8003aee:	4604      	mov	r4, r0
 8003af0:	460d      	mov	r5, r1
 8003af2:	4602      	mov	r2, r0
 8003af4:	4649      	mov	r1, r9
 8003af6:	4640      	mov	r0, r8
 8003af8:	e9cd 4500 	strd	r4, r5, [sp]
 8003afc:	f7fc fb6a 	bl	80001d4 <__adddf3>
 8003b00:	4b1c      	ldr	r3, [pc, #112]	; (8003b74 <__ieee754_pow+0x3c4>)
 8003b02:	4299      	cmp	r1, r3
 8003b04:	4606      	mov	r6, r0
 8003b06:	460f      	mov	r7, r1
 8003b08:	468b      	mov	fp, r1
 8003b0a:	f340 82f7 	ble.w	80040fc <__ieee754_pow+0x94c>
 8003b0e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003b12:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003b16:	4303      	orrs	r3, r0
 8003b18:	f000 81ea 	beq.w	8003ef0 <__ieee754_pow+0x740>
 8003b1c:	a310      	add	r3, pc, #64	; (adr r3, 8003b60 <__ieee754_pow+0x3b0>)
 8003b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b26:	f7fc fd0b 	bl	8000540 <__aeabi_dmul>
 8003b2a:	a30d      	add	r3, pc, #52	; (adr r3, 8003b60 <__ieee754_pow+0x3b0>)
 8003b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b30:	e6d5      	b.n	80038de <__ieee754_pow+0x12e>
 8003b32:	bf00      	nop
 8003b34:	f3af 8000 	nop.w
 8003b38:	60000000 	.word	0x60000000
 8003b3c:	3ff71547 	.word	0x3ff71547
 8003b40:	f85ddf44 	.word	0xf85ddf44
 8003b44:	3e54ae0b 	.word	0x3e54ae0b
 8003b48:	55555555 	.word	0x55555555
 8003b4c:	3fd55555 	.word	0x3fd55555
 8003b50:	652b82fe 	.word	0x652b82fe
 8003b54:	3ff71547 	.word	0x3ff71547
 8003b58:	00000000 	.word	0x00000000
 8003b5c:	bff00000 	.word	0xbff00000
 8003b60:	8800759c 	.word	0x8800759c
 8003b64:	7e37e43c 	.word	0x7e37e43c
 8003b68:	3ff00000 	.word	0x3ff00000
 8003b6c:	3fd00000 	.word	0x3fd00000
 8003b70:	3fe00000 	.word	0x3fe00000
 8003b74:	408fffff 	.word	0x408fffff
 8003b78:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	da05      	bge.n	8003b8e <__ieee754_pow+0x3de>
 8003b82:	4bd3      	ldr	r3, [pc, #844]	; (8003ed0 <__ieee754_pow+0x720>)
 8003b84:	f7fc fcdc 	bl	8000540 <__aeabi_dmul>
 8003b88:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003b8c:	460c      	mov	r4, r1
 8003b8e:	1523      	asrs	r3, r4, #20
 8003b90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003b94:	4413      	add	r3, r2
 8003b96:	9309      	str	r3, [sp, #36]	; 0x24
 8003b98:	4bce      	ldr	r3, [pc, #824]	; (8003ed4 <__ieee754_pow+0x724>)
 8003b9a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003b9e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003ba2:	429c      	cmp	r4, r3
 8003ba4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003ba8:	dd08      	ble.n	8003bbc <__ieee754_pow+0x40c>
 8003baa:	4bcb      	ldr	r3, [pc, #812]	; (8003ed8 <__ieee754_pow+0x728>)
 8003bac:	429c      	cmp	r4, r3
 8003bae:	f340 815e 	ble.w	8003e6e <__ieee754_pow+0x6be>
 8003bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8003bb8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003bbc:	f04f 0a00 	mov.w	sl, #0
 8003bc0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8003bc4:	930c      	str	r3, [sp, #48]	; 0x30
 8003bc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003bc8:	4bc4      	ldr	r3, [pc, #784]	; (8003edc <__ieee754_pow+0x72c>)
 8003bca:	4413      	add	r3, r2
 8003bcc:	ed93 7b00 	vldr	d7, [r3]
 8003bd0:	4629      	mov	r1, r5
 8003bd2:	ec53 2b17 	vmov	r2, r3, d7
 8003bd6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003bda:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003bde:	f7fc faf7 	bl	80001d0 <__aeabi_dsub>
 8003be2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003be6:	4606      	mov	r6, r0
 8003be8:	460f      	mov	r7, r1
 8003bea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003bee:	f7fc faf1 	bl	80001d4 <__adddf3>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	49b9      	ldr	r1, [pc, #740]	; (8003ee0 <__ieee754_pow+0x730>)
 8003bfa:	f7fc fdcb 	bl	8000794 <__aeabi_ddiv>
 8003bfe:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	4630      	mov	r0, r6
 8003c08:	4639      	mov	r1, r7
 8003c0a:	f7fc fc99 	bl	8000540 <__aeabi_dmul>
 8003c0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c12:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003c16:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	9302      	str	r3, [sp, #8]
 8003c1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003c22:	106d      	asrs	r5, r5, #1
 8003c24:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003c28:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8003c32:	4640      	mov	r0, r8
 8003c34:	4649      	mov	r1, r9
 8003c36:	4614      	mov	r4, r2
 8003c38:	461d      	mov	r5, r3
 8003c3a:	f7fc fc81 	bl	8000540 <__aeabi_dmul>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	4630      	mov	r0, r6
 8003c44:	4639      	mov	r1, r7
 8003c46:	f7fc fac3 	bl	80001d0 <__aeabi_dsub>
 8003c4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003c4e:	4606      	mov	r6, r0
 8003c50:	460f      	mov	r7, r1
 8003c52:	4620      	mov	r0, r4
 8003c54:	4629      	mov	r1, r5
 8003c56:	f7fc fabb 	bl	80001d0 <__aeabi_dsub>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003c62:	f7fc fab5 	bl	80001d0 <__aeabi_dsub>
 8003c66:	4642      	mov	r2, r8
 8003c68:	464b      	mov	r3, r9
 8003c6a:	f7fc fc69 	bl	8000540 <__aeabi_dmul>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4630      	mov	r0, r6
 8003c74:	4639      	mov	r1, r7
 8003c76:	f7fc faab 	bl	80001d0 <__aeabi_dsub>
 8003c7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003c7e:	f7fc fc5f 	bl	8000540 <__aeabi_dmul>
 8003c82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	f7fc fc57 	bl	8000540 <__aeabi_dmul>
 8003c92:	a37b      	add	r3, pc, #492	; (adr r3, 8003e80 <__ieee754_pow+0x6d0>)
 8003c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c98:	4604      	mov	r4, r0
 8003c9a:	460d      	mov	r5, r1
 8003c9c:	f7fc fc50 	bl	8000540 <__aeabi_dmul>
 8003ca0:	a379      	add	r3, pc, #484	; (adr r3, 8003e88 <__ieee754_pow+0x6d8>)
 8003ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca6:	f7fc fa95 	bl	80001d4 <__adddf3>
 8003caa:	4622      	mov	r2, r4
 8003cac:	462b      	mov	r3, r5
 8003cae:	f7fc fc47 	bl	8000540 <__aeabi_dmul>
 8003cb2:	a377      	add	r3, pc, #476	; (adr r3, 8003e90 <__ieee754_pow+0x6e0>)
 8003cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb8:	f7fc fa8c 	bl	80001d4 <__adddf3>
 8003cbc:	4622      	mov	r2, r4
 8003cbe:	462b      	mov	r3, r5
 8003cc0:	f7fc fc3e 	bl	8000540 <__aeabi_dmul>
 8003cc4:	a374      	add	r3, pc, #464	; (adr r3, 8003e98 <__ieee754_pow+0x6e8>)
 8003cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cca:	f7fc fa83 	bl	80001d4 <__adddf3>
 8003cce:	4622      	mov	r2, r4
 8003cd0:	462b      	mov	r3, r5
 8003cd2:	f7fc fc35 	bl	8000540 <__aeabi_dmul>
 8003cd6:	a372      	add	r3, pc, #456	; (adr r3, 8003ea0 <__ieee754_pow+0x6f0>)
 8003cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cdc:	f7fc fa7a 	bl	80001d4 <__adddf3>
 8003ce0:	4622      	mov	r2, r4
 8003ce2:	462b      	mov	r3, r5
 8003ce4:	f7fc fc2c 	bl	8000540 <__aeabi_dmul>
 8003ce8:	a36f      	add	r3, pc, #444	; (adr r3, 8003ea8 <__ieee754_pow+0x6f8>)
 8003cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cee:	f7fc fa71 	bl	80001d4 <__adddf3>
 8003cf2:	4622      	mov	r2, r4
 8003cf4:	4606      	mov	r6, r0
 8003cf6:	460f      	mov	r7, r1
 8003cf8:	462b      	mov	r3, r5
 8003cfa:	4620      	mov	r0, r4
 8003cfc:	4629      	mov	r1, r5
 8003cfe:	f7fc fc1f 	bl	8000540 <__aeabi_dmul>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4630      	mov	r0, r6
 8003d08:	4639      	mov	r1, r7
 8003d0a:	f7fc fc19 	bl	8000540 <__aeabi_dmul>
 8003d0e:	4642      	mov	r2, r8
 8003d10:	4604      	mov	r4, r0
 8003d12:	460d      	mov	r5, r1
 8003d14:	464b      	mov	r3, r9
 8003d16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d1a:	f7fc fa5b 	bl	80001d4 <__adddf3>
 8003d1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d22:	f7fc fc0d 	bl	8000540 <__aeabi_dmul>
 8003d26:	4622      	mov	r2, r4
 8003d28:	462b      	mov	r3, r5
 8003d2a:	f7fc fa53 	bl	80001d4 <__adddf3>
 8003d2e:	4642      	mov	r2, r8
 8003d30:	4606      	mov	r6, r0
 8003d32:	460f      	mov	r7, r1
 8003d34:	464b      	mov	r3, r9
 8003d36:	4640      	mov	r0, r8
 8003d38:	4649      	mov	r1, r9
 8003d3a:	f7fc fc01 	bl	8000540 <__aeabi_dmul>
 8003d3e:	2200      	movs	r2, #0
 8003d40:	4b68      	ldr	r3, [pc, #416]	; (8003ee4 <__ieee754_pow+0x734>)
 8003d42:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003d46:	f7fc fa45 	bl	80001d4 <__adddf3>
 8003d4a:	4632      	mov	r2, r6
 8003d4c:	463b      	mov	r3, r7
 8003d4e:	f7fc fa41 	bl	80001d4 <__adddf3>
 8003d52:	9802      	ldr	r0, [sp, #8]
 8003d54:	460d      	mov	r5, r1
 8003d56:	4604      	mov	r4, r0
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4640      	mov	r0, r8
 8003d5e:	4649      	mov	r1, r9
 8003d60:	f7fc fbee 	bl	8000540 <__aeabi_dmul>
 8003d64:	2200      	movs	r2, #0
 8003d66:	4680      	mov	r8, r0
 8003d68:	4689      	mov	r9, r1
 8003d6a:	4b5e      	ldr	r3, [pc, #376]	; (8003ee4 <__ieee754_pow+0x734>)
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	4629      	mov	r1, r5
 8003d70:	f7fc fa2e 	bl	80001d0 <__aeabi_dsub>
 8003d74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003d78:	f7fc fa2a 	bl	80001d0 <__aeabi_dsub>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4630      	mov	r0, r6
 8003d82:	4639      	mov	r1, r7
 8003d84:	f7fc fa24 	bl	80001d0 <__aeabi_dsub>
 8003d88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d8c:	f7fc fbd8 	bl	8000540 <__aeabi_dmul>
 8003d90:	4622      	mov	r2, r4
 8003d92:	4606      	mov	r6, r0
 8003d94:	460f      	mov	r7, r1
 8003d96:	462b      	mov	r3, r5
 8003d98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d9c:	f7fc fbd0 	bl	8000540 <__aeabi_dmul>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	4630      	mov	r0, r6
 8003da6:	4639      	mov	r1, r7
 8003da8:	f7fc fa14 	bl	80001d4 <__adddf3>
 8003dac:	4606      	mov	r6, r0
 8003dae:	460f      	mov	r7, r1
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4640      	mov	r0, r8
 8003db6:	4649      	mov	r1, r9
 8003db8:	f7fc fa0c 	bl	80001d4 <__adddf3>
 8003dbc:	9802      	ldr	r0, [sp, #8]
 8003dbe:	a33c      	add	r3, pc, #240	; (adr r3, 8003eb0 <__ieee754_pow+0x700>)
 8003dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc4:	4604      	mov	r4, r0
 8003dc6:	460d      	mov	r5, r1
 8003dc8:	f7fc fbba 	bl	8000540 <__aeabi_dmul>
 8003dcc:	4642      	mov	r2, r8
 8003dce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003dd2:	464b      	mov	r3, r9
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	4629      	mov	r1, r5
 8003dd8:	f7fc f9fa 	bl	80001d0 <__aeabi_dsub>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	4630      	mov	r0, r6
 8003de2:	4639      	mov	r1, r7
 8003de4:	f7fc f9f4 	bl	80001d0 <__aeabi_dsub>
 8003de8:	a333      	add	r3, pc, #204	; (adr r3, 8003eb8 <__ieee754_pow+0x708>)
 8003dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dee:	f7fc fba7 	bl	8000540 <__aeabi_dmul>
 8003df2:	a333      	add	r3, pc, #204	; (adr r3, 8003ec0 <__ieee754_pow+0x710>)
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	4606      	mov	r6, r0
 8003dfa:	460f      	mov	r7, r1
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	4629      	mov	r1, r5
 8003e00:	f7fc fb9e 	bl	8000540 <__aeabi_dmul>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4630      	mov	r0, r6
 8003e0a:	4639      	mov	r1, r7
 8003e0c:	f7fc f9e2 	bl	80001d4 <__adddf3>
 8003e10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003e12:	4b35      	ldr	r3, [pc, #212]	; (8003ee8 <__ieee754_pow+0x738>)
 8003e14:	4413      	add	r3, r2
 8003e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1a:	f7fc f9db 	bl	80001d4 <__adddf3>
 8003e1e:	4604      	mov	r4, r0
 8003e20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e22:	460d      	mov	r5, r1
 8003e24:	f7fc fb22 	bl	800046c <__aeabi_i2d>
 8003e28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003e2a:	4b30      	ldr	r3, [pc, #192]	; (8003eec <__ieee754_pow+0x73c>)
 8003e2c:	4413      	add	r3, r2
 8003e2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003e32:	4606      	mov	r6, r0
 8003e34:	460f      	mov	r7, r1
 8003e36:	4622      	mov	r2, r4
 8003e38:	462b      	mov	r3, r5
 8003e3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e3e:	f7fc f9c9 	bl	80001d4 <__adddf3>
 8003e42:	4642      	mov	r2, r8
 8003e44:	464b      	mov	r3, r9
 8003e46:	f7fc f9c5 	bl	80001d4 <__adddf3>
 8003e4a:	4632      	mov	r2, r6
 8003e4c:	463b      	mov	r3, r7
 8003e4e:	f7fc f9c1 	bl	80001d4 <__adddf3>
 8003e52:	9802      	ldr	r0, [sp, #8]
 8003e54:	4632      	mov	r2, r6
 8003e56:	463b      	mov	r3, r7
 8003e58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e5c:	f7fc f9b8 	bl	80001d0 <__aeabi_dsub>
 8003e60:	4642      	mov	r2, r8
 8003e62:	464b      	mov	r3, r9
 8003e64:	f7fc f9b4 	bl	80001d0 <__aeabi_dsub>
 8003e68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003e6c:	e607      	b.n	8003a7e <__ieee754_pow+0x2ce>
 8003e6e:	f04f 0a01 	mov.w	sl, #1
 8003e72:	e6a5      	b.n	8003bc0 <__ieee754_pow+0x410>
 8003e74:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8003ec8 <__ieee754_pow+0x718>
 8003e78:	e613      	b.n	8003aa2 <__ieee754_pow+0x2f2>
 8003e7a:	bf00      	nop
 8003e7c:	f3af 8000 	nop.w
 8003e80:	4a454eef 	.word	0x4a454eef
 8003e84:	3fca7e28 	.word	0x3fca7e28
 8003e88:	93c9db65 	.word	0x93c9db65
 8003e8c:	3fcd864a 	.word	0x3fcd864a
 8003e90:	a91d4101 	.word	0xa91d4101
 8003e94:	3fd17460 	.word	0x3fd17460
 8003e98:	518f264d 	.word	0x518f264d
 8003e9c:	3fd55555 	.word	0x3fd55555
 8003ea0:	db6fabff 	.word	0xdb6fabff
 8003ea4:	3fdb6db6 	.word	0x3fdb6db6
 8003ea8:	33333303 	.word	0x33333303
 8003eac:	3fe33333 	.word	0x3fe33333
 8003eb0:	e0000000 	.word	0xe0000000
 8003eb4:	3feec709 	.word	0x3feec709
 8003eb8:	dc3a03fd 	.word	0xdc3a03fd
 8003ebc:	3feec709 	.word	0x3feec709
 8003ec0:	145b01f5 	.word	0x145b01f5
 8003ec4:	be3e2fe0 	.word	0xbe3e2fe0
 8003ec8:	00000000 	.word	0x00000000
 8003ecc:	3ff00000 	.word	0x3ff00000
 8003ed0:	43400000 	.word	0x43400000
 8003ed4:	0003988e 	.word	0x0003988e
 8003ed8:	000bb679 	.word	0x000bb679
 8003edc:	08004630 	.word	0x08004630
 8003ee0:	3ff00000 	.word	0x3ff00000
 8003ee4:	40080000 	.word	0x40080000
 8003ee8:	08004650 	.word	0x08004650
 8003eec:	08004640 	.word	0x08004640
 8003ef0:	a3b4      	add	r3, pc, #720	; (adr r3, 80041c4 <__ieee754_pow+0xa14>)
 8003ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef6:	4640      	mov	r0, r8
 8003ef8:	4649      	mov	r1, r9
 8003efa:	f7fc f96b 	bl	80001d4 <__adddf3>
 8003efe:	4622      	mov	r2, r4
 8003f00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f04:	462b      	mov	r3, r5
 8003f06:	4630      	mov	r0, r6
 8003f08:	4639      	mov	r1, r7
 8003f0a:	f7fc f961 	bl	80001d0 <__aeabi_dsub>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f16:	f7fc fda3 	bl	8000a60 <__aeabi_dcmpgt>
 8003f1a:	2800      	cmp	r0, #0
 8003f1c:	f47f adfe 	bne.w	8003b1c <__ieee754_pow+0x36c>
 8003f20:	4aa3      	ldr	r2, [pc, #652]	; (80041b0 <__ieee754_pow+0xa00>)
 8003f22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003f26:	4293      	cmp	r3, r2
 8003f28:	f340 810a 	ble.w	8004140 <__ieee754_pow+0x990>
 8003f2c:	151b      	asrs	r3, r3, #20
 8003f2e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8003f32:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8003f36:	fa4a f303 	asr.w	r3, sl, r3
 8003f3a:	445b      	add	r3, fp
 8003f3c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8003f40:	4e9c      	ldr	r6, [pc, #624]	; (80041b4 <__ieee754_pow+0xa04>)
 8003f42:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003f46:	4116      	asrs	r6, r2
 8003f48:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	ea23 0106 	bic.w	r1, r3, r6
 8003f52:	f1c2 0214 	rsb	r2, r2, #20
 8003f56:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8003f5a:	fa4a fa02 	asr.w	sl, sl, r2
 8003f5e:	f1bb 0f00 	cmp.w	fp, #0
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	4620      	mov	r0, r4
 8003f68:	4629      	mov	r1, r5
 8003f6a:	bfb8      	it	lt
 8003f6c:	f1ca 0a00 	rsblt	sl, sl, #0
 8003f70:	f7fc f92e 	bl	80001d0 <__aeabi_dsub>
 8003f74:	e9cd 0100 	strd	r0, r1, [sp]
 8003f78:	4642      	mov	r2, r8
 8003f7a:	464b      	mov	r3, r9
 8003f7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f80:	f7fc f928 	bl	80001d4 <__adddf3>
 8003f84:	2000      	movs	r0, #0
 8003f86:	a378      	add	r3, pc, #480	; (adr r3, 8004168 <__ieee754_pow+0x9b8>)
 8003f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8c:	4604      	mov	r4, r0
 8003f8e:	460d      	mov	r5, r1
 8003f90:	f7fc fad6 	bl	8000540 <__aeabi_dmul>
 8003f94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f98:	4606      	mov	r6, r0
 8003f9a:	460f      	mov	r7, r1
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	f7fc f916 	bl	80001d0 <__aeabi_dsub>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4640      	mov	r0, r8
 8003faa:	4649      	mov	r1, r9
 8003fac:	f7fc f910 	bl	80001d0 <__aeabi_dsub>
 8003fb0:	a36f      	add	r3, pc, #444	; (adr r3, 8004170 <__ieee754_pow+0x9c0>)
 8003fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb6:	f7fc fac3 	bl	8000540 <__aeabi_dmul>
 8003fba:	a36f      	add	r3, pc, #444	; (adr r3, 8004178 <__ieee754_pow+0x9c8>)
 8003fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc0:	4680      	mov	r8, r0
 8003fc2:	4689      	mov	r9, r1
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	4629      	mov	r1, r5
 8003fc8:	f7fc faba 	bl	8000540 <__aeabi_dmul>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4640      	mov	r0, r8
 8003fd2:	4649      	mov	r1, r9
 8003fd4:	f7fc f8fe 	bl	80001d4 <__adddf3>
 8003fd8:	4604      	mov	r4, r0
 8003fda:	460d      	mov	r5, r1
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4630      	mov	r0, r6
 8003fe2:	4639      	mov	r1, r7
 8003fe4:	f7fc f8f6 	bl	80001d4 <__adddf3>
 8003fe8:	4632      	mov	r2, r6
 8003fea:	463b      	mov	r3, r7
 8003fec:	4680      	mov	r8, r0
 8003fee:	4689      	mov	r9, r1
 8003ff0:	f7fc f8ee 	bl	80001d0 <__aeabi_dsub>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	4629      	mov	r1, r5
 8003ffc:	f7fc f8e8 	bl	80001d0 <__aeabi_dsub>
 8004000:	4642      	mov	r2, r8
 8004002:	4606      	mov	r6, r0
 8004004:	460f      	mov	r7, r1
 8004006:	464b      	mov	r3, r9
 8004008:	4640      	mov	r0, r8
 800400a:	4649      	mov	r1, r9
 800400c:	f7fc fa98 	bl	8000540 <__aeabi_dmul>
 8004010:	a35b      	add	r3, pc, #364	; (adr r3, 8004180 <__ieee754_pow+0x9d0>)
 8004012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004016:	4604      	mov	r4, r0
 8004018:	460d      	mov	r5, r1
 800401a:	f7fc fa91 	bl	8000540 <__aeabi_dmul>
 800401e:	a35a      	add	r3, pc, #360	; (adr r3, 8004188 <__ieee754_pow+0x9d8>)
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	f7fc f8d4 	bl	80001d0 <__aeabi_dsub>
 8004028:	4622      	mov	r2, r4
 800402a:	462b      	mov	r3, r5
 800402c:	f7fc fa88 	bl	8000540 <__aeabi_dmul>
 8004030:	a357      	add	r3, pc, #348	; (adr r3, 8004190 <__ieee754_pow+0x9e0>)
 8004032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004036:	f7fc f8cd 	bl	80001d4 <__adddf3>
 800403a:	4622      	mov	r2, r4
 800403c:	462b      	mov	r3, r5
 800403e:	f7fc fa7f 	bl	8000540 <__aeabi_dmul>
 8004042:	a355      	add	r3, pc, #340	; (adr r3, 8004198 <__ieee754_pow+0x9e8>)
 8004044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004048:	f7fc f8c2 	bl	80001d0 <__aeabi_dsub>
 800404c:	4622      	mov	r2, r4
 800404e:	462b      	mov	r3, r5
 8004050:	f7fc fa76 	bl	8000540 <__aeabi_dmul>
 8004054:	a352      	add	r3, pc, #328	; (adr r3, 80041a0 <__ieee754_pow+0x9f0>)
 8004056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405a:	f7fc f8bb 	bl	80001d4 <__adddf3>
 800405e:	4622      	mov	r2, r4
 8004060:	462b      	mov	r3, r5
 8004062:	f7fc fa6d 	bl	8000540 <__aeabi_dmul>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4640      	mov	r0, r8
 800406c:	4649      	mov	r1, r9
 800406e:	f7fc f8af 	bl	80001d0 <__aeabi_dsub>
 8004072:	4604      	mov	r4, r0
 8004074:	460d      	mov	r5, r1
 8004076:	4602      	mov	r2, r0
 8004078:	460b      	mov	r3, r1
 800407a:	4640      	mov	r0, r8
 800407c:	4649      	mov	r1, r9
 800407e:	f7fc fa5f 	bl	8000540 <__aeabi_dmul>
 8004082:	2200      	movs	r2, #0
 8004084:	e9cd 0100 	strd	r0, r1, [sp]
 8004088:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800408c:	4620      	mov	r0, r4
 800408e:	4629      	mov	r1, r5
 8004090:	f7fc f89e 	bl	80001d0 <__aeabi_dsub>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	e9dd 0100 	ldrd	r0, r1, [sp]
 800409c:	f7fc fb7a 	bl	8000794 <__aeabi_ddiv>
 80040a0:	4632      	mov	r2, r6
 80040a2:	4604      	mov	r4, r0
 80040a4:	460d      	mov	r5, r1
 80040a6:	463b      	mov	r3, r7
 80040a8:	4640      	mov	r0, r8
 80040aa:	4649      	mov	r1, r9
 80040ac:	f7fc fa48 	bl	8000540 <__aeabi_dmul>
 80040b0:	4632      	mov	r2, r6
 80040b2:	463b      	mov	r3, r7
 80040b4:	f7fc f88e 	bl	80001d4 <__adddf3>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4620      	mov	r0, r4
 80040be:	4629      	mov	r1, r5
 80040c0:	f7fc f886 	bl	80001d0 <__aeabi_dsub>
 80040c4:	4642      	mov	r2, r8
 80040c6:	464b      	mov	r3, r9
 80040c8:	f7fc f882 	bl	80001d0 <__aeabi_dsub>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	2000      	movs	r0, #0
 80040d2:	4939      	ldr	r1, [pc, #228]	; (80041b8 <__ieee754_pow+0xa08>)
 80040d4:	f7fc f87c 	bl	80001d0 <__aeabi_dsub>
 80040d8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80040dc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	da2f      	bge.n	8004146 <__ieee754_pow+0x996>
 80040e6:	4650      	mov	r0, sl
 80040e8:	ec43 2b10 	vmov	d0, r2, r3
 80040ec:	f000 f9c0 	bl	8004470 <scalbn>
 80040f0:	ec51 0b10 	vmov	r0, r1, d0
 80040f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040f8:	f7ff bbf1 	b.w	80038de <__ieee754_pow+0x12e>
 80040fc:	4b2f      	ldr	r3, [pc, #188]	; (80041bc <__ieee754_pow+0xa0c>)
 80040fe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004102:	429e      	cmp	r6, r3
 8004104:	f77f af0c 	ble.w	8003f20 <__ieee754_pow+0x770>
 8004108:	4b2d      	ldr	r3, [pc, #180]	; (80041c0 <__ieee754_pow+0xa10>)
 800410a:	440b      	add	r3, r1
 800410c:	4303      	orrs	r3, r0
 800410e:	d00b      	beq.n	8004128 <__ieee754_pow+0x978>
 8004110:	a325      	add	r3, pc, #148	; (adr r3, 80041a8 <__ieee754_pow+0x9f8>)
 8004112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800411a:	f7fc fa11 	bl	8000540 <__aeabi_dmul>
 800411e:	a322      	add	r3, pc, #136	; (adr r3, 80041a8 <__ieee754_pow+0x9f8>)
 8004120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004124:	f7ff bbdb 	b.w	80038de <__ieee754_pow+0x12e>
 8004128:	4622      	mov	r2, r4
 800412a:	462b      	mov	r3, r5
 800412c:	f7fc f850 	bl	80001d0 <__aeabi_dsub>
 8004130:	4642      	mov	r2, r8
 8004132:	464b      	mov	r3, r9
 8004134:	f7fc fc8a 	bl	8000a4c <__aeabi_dcmpge>
 8004138:	2800      	cmp	r0, #0
 800413a:	f43f aef1 	beq.w	8003f20 <__ieee754_pow+0x770>
 800413e:	e7e7      	b.n	8004110 <__ieee754_pow+0x960>
 8004140:	f04f 0a00 	mov.w	sl, #0
 8004144:	e718      	b.n	8003f78 <__ieee754_pow+0x7c8>
 8004146:	4621      	mov	r1, r4
 8004148:	e7d4      	b.n	80040f4 <__ieee754_pow+0x944>
 800414a:	2000      	movs	r0, #0
 800414c:	491a      	ldr	r1, [pc, #104]	; (80041b8 <__ieee754_pow+0xa08>)
 800414e:	f7ff bb8f 	b.w	8003870 <__ieee754_pow+0xc0>
 8004152:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004156:	f7ff bb8b 	b.w	8003870 <__ieee754_pow+0xc0>
 800415a:	4630      	mov	r0, r6
 800415c:	4639      	mov	r1, r7
 800415e:	f7ff bb87 	b.w	8003870 <__ieee754_pow+0xc0>
 8004162:	4693      	mov	fp, r2
 8004164:	f7ff bb98 	b.w	8003898 <__ieee754_pow+0xe8>
 8004168:	00000000 	.word	0x00000000
 800416c:	3fe62e43 	.word	0x3fe62e43
 8004170:	fefa39ef 	.word	0xfefa39ef
 8004174:	3fe62e42 	.word	0x3fe62e42
 8004178:	0ca86c39 	.word	0x0ca86c39
 800417c:	be205c61 	.word	0xbe205c61
 8004180:	72bea4d0 	.word	0x72bea4d0
 8004184:	3e663769 	.word	0x3e663769
 8004188:	c5d26bf1 	.word	0xc5d26bf1
 800418c:	3ebbbd41 	.word	0x3ebbbd41
 8004190:	af25de2c 	.word	0xaf25de2c
 8004194:	3f11566a 	.word	0x3f11566a
 8004198:	16bebd93 	.word	0x16bebd93
 800419c:	3f66c16c 	.word	0x3f66c16c
 80041a0:	5555553e 	.word	0x5555553e
 80041a4:	3fc55555 	.word	0x3fc55555
 80041a8:	c2f8f359 	.word	0xc2f8f359
 80041ac:	01a56e1f 	.word	0x01a56e1f
 80041b0:	3fe00000 	.word	0x3fe00000
 80041b4:	000fffff 	.word	0x000fffff
 80041b8:	3ff00000 	.word	0x3ff00000
 80041bc:	4090cbff 	.word	0x4090cbff
 80041c0:	3f6f3400 	.word	0x3f6f3400
 80041c4:	652b82fe 	.word	0x652b82fe
 80041c8:	3c971547 	.word	0x3c971547

080041cc <__ieee754_sqrt>:
 80041cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041d0:	4955      	ldr	r1, [pc, #340]	; (8004328 <__ieee754_sqrt+0x15c>)
 80041d2:	ec55 4b10 	vmov	r4, r5, d0
 80041d6:	43a9      	bics	r1, r5
 80041d8:	462b      	mov	r3, r5
 80041da:	462a      	mov	r2, r5
 80041dc:	d112      	bne.n	8004204 <__ieee754_sqrt+0x38>
 80041de:	ee10 2a10 	vmov	r2, s0
 80041e2:	ee10 0a10 	vmov	r0, s0
 80041e6:	4629      	mov	r1, r5
 80041e8:	f7fc f9aa 	bl	8000540 <__aeabi_dmul>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4620      	mov	r0, r4
 80041f2:	4629      	mov	r1, r5
 80041f4:	f7fb ffee 	bl	80001d4 <__adddf3>
 80041f8:	4604      	mov	r4, r0
 80041fa:	460d      	mov	r5, r1
 80041fc:	ec45 4b10 	vmov	d0, r4, r5
 8004200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004204:	2d00      	cmp	r5, #0
 8004206:	ee10 0a10 	vmov	r0, s0
 800420a:	4621      	mov	r1, r4
 800420c:	dc0f      	bgt.n	800422e <__ieee754_sqrt+0x62>
 800420e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004212:	4330      	orrs	r0, r6
 8004214:	d0f2      	beq.n	80041fc <__ieee754_sqrt+0x30>
 8004216:	b155      	cbz	r5, 800422e <__ieee754_sqrt+0x62>
 8004218:	ee10 2a10 	vmov	r2, s0
 800421c:	4620      	mov	r0, r4
 800421e:	4629      	mov	r1, r5
 8004220:	f7fb ffd6 	bl	80001d0 <__aeabi_dsub>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	f7fc fab4 	bl	8000794 <__aeabi_ddiv>
 800422c:	e7e4      	b.n	80041f8 <__ieee754_sqrt+0x2c>
 800422e:	151b      	asrs	r3, r3, #20
 8004230:	d073      	beq.n	800431a <__ieee754_sqrt+0x14e>
 8004232:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004236:	07dd      	lsls	r5, r3, #31
 8004238:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800423c:	bf48      	it	mi
 800423e:	0fc8      	lsrmi	r0, r1, #31
 8004240:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004244:	bf44      	itt	mi
 8004246:	0049      	lslmi	r1, r1, #1
 8004248:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800424c:	2500      	movs	r5, #0
 800424e:	1058      	asrs	r0, r3, #1
 8004250:	0fcb      	lsrs	r3, r1, #31
 8004252:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8004256:	0049      	lsls	r1, r1, #1
 8004258:	2316      	movs	r3, #22
 800425a:	462c      	mov	r4, r5
 800425c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8004260:	19a7      	adds	r7, r4, r6
 8004262:	4297      	cmp	r7, r2
 8004264:	bfde      	ittt	le
 8004266:	19bc      	addle	r4, r7, r6
 8004268:	1bd2      	suble	r2, r2, r7
 800426a:	19ad      	addle	r5, r5, r6
 800426c:	0fcf      	lsrs	r7, r1, #31
 800426e:	3b01      	subs	r3, #1
 8004270:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8004274:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004278:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800427c:	d1f0      	bne.n	8004260 <__ieee754_sqrt+0x94>
 800427e:	f04f 0c20 	mov.w	ip, #32
 8004282:	469e      	mov	lr, r3
 8004284:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004288:	42a2      	cmp	r2, r4
 800428a:	eb06 070e 	add.w	r7, r6, lr
 800428e:	dc02      	bgt.n	8004296 <__ieee754_sqrt+0xca>
 8004290:	d112      	bne.n	80042b8 <__ieee754_sqrt+0xec>
 8004292:	428f      	cmp	r7, r1
 8004294:	d810      	bhi.n	80042b8 <__ieee754_sqrt+0xec>
 8004296:	2f00      	cmp	r7, #0
 8004298:	eb07 0e06 	add.w	lr, r7, r6
 800429c:	da42      	bge.n	8004324 <__ieee754_sqrt+0x158>
 800429e:	f1be 0f00 	cmp.w	lr, #0
 80042a2:	db3f      	blt.n	8004324 <__ieee754_sqrt+0x158>
 80042a4:	f104 0801 	add.w	r8, r4, #1
 80042a8:	1b12      	subs	r2, r2, r4
 80042aa:	428f      	cmp	r7, r1
 80042ac:	bf88      	it	hi
 80042ae:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80042b2:	1bc9      	subs	r1, r1, r7
 80042b4:	4433      	add	r3, r6
 80042b6:	4644      	mov	r4, r8
 80042b8:	0052      	lsls	r2, r2, #1
 80042ba:	f1bc 0c01 	subs.w	ip, ip, #1
 80042be:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80042c2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80042c6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80042ca:	d1dd      	bne.n	8004288 <__ieee754_sqrt+0xbc>
 80042cc:	430a      	orrs	r2, r1
 80042ce:	d006      	beq.n	80042de <__ieee754_sqrt+0x112>
 80042d0:	1c5c      	adds	r4, r3, #1
 80042d2:	bf13      	iteet	ne
 80042d4:	3301      	addne	r3, #1
 80042d6:	3501      	addeq	r5, #1
 80042d8:	4663      	moveq	r3, ip
 80042da:	f023 0301 	bicne.w	r3, r3, #1
 80042de:	106a      	asrs	r2, r5, #1
 80042e0:	085b      	lsrs	r3, r3, #1
 80042e2:	07e9      	lsls	r1, r5, #31
 80042e4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80042e8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80042ec:	bf48      	it	mi
 80042ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80042f2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80042f6:	461c      	mov	r4, r3
 80042f8:	e780      	b.n	80041fc <__ieee754_sqrt+0x30>
 80042fa:	0aca      	lsrs	r2, r1, #11
 80042fc:	3815      	subs	r0, #21
 80042fe:	0549      	lsls	r1, r1, #21
 8004300:	2a00      	cmp	r2, #0
 8004302:	d0fa      	beq.n	80042fa <__ieee754_sqrt+0x12e>
 8004304:	02d6      	lsls	r6, r2, #11
 8004306:	d50a      	bpl.n	800431e <__ieee754_sqrt+0x152>
 8004308:	f1c3 0420 	rsb	r4, r3, #32
 800430c:	fa21 f404 	lsr.w	r4, r1, r4
 8004310:	1e5d      	subs	r5, r3, #1
 8004312:	4099      	lsls	r1, r3
 8004314:	4322      	orrs	r2, r4
 8004316:	1b43      	subs	r3, r0, r5
 8004318:	e78b      	b.n	8004232 <__ieee754_sqrt+0x66>
 800431a:	4618      	mov	r0, r3
 800431c:	e7f0      	b.n	8004300 <__ieee754_sqrt+0x134>
 800431e:	0052      	lsls	r2, r2, #1
 8004320:	3301      	adds	r3, #1
 8004322:	e7ef      	b.n	8004304 <__ieee754_sqrt+0x138>
 8004324:	46a0      	mov	r8, r4
 8004326:	e7bf      	b.n	80042a8 <__ieee754_sqrt+0xdc>
 8004328:	7ff00000 	.word	0x7ff00000

0800432c <fabs>:
 800432c:	ec51 0b10 	vmov	r0, r1, d0
 8004330:	ee10 2a10 	vmov	r2, s0
 8004334:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004338:	ec43 2b10 	vmov	d0, r2, r3
 800433c:	4770      	bx	lr

0800433e <finite>:
 800433e:	ee10 3a90 	vmov	r3, s1
 8004342:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8004346:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800434a:	0fc0      	lsrs	r0, r0, #31
 800434c:	4770      	bx	lr

0800434e <matherr>:
 800434e:	2000      	movs	r0, #0
 8004350:	4770      	bx	lr
 8004352:	0000      	movs	r0, r0
 8004354:	0000      	movs	r0, r0
	...

08004358 <nan>:
 8004358:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004360 <nan+0x8>
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	00000000 	.word	0x00000000
 8004364:	7ff80000 	.word	0x7ff80000

08004368 <rint>:
 8004368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800436a:	ec51 0b10 	vmov	r0, r1, d0
 800436e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004372:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8004376:	2e13      	cmp	r6, #19
 8004378:	460b      	mov	r3, r1
 800437a:	ee10 4a10 	vmov	r4, s0
 800437e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8004382:	dc56      	bgt.n	8004432 <rint+0xca>
 8004384:	2e00      	cmp	r6, #0
 8004386:	da2b      	bge.n	80043e0 <rint+0x78>
 8004388:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800438c:	4302      	orrs	r2, r0
 800438e:	d023      	beq.n	80043d8 <rint+0x70>
 8004390:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8004394:	4302      	orrs	r2, r0
 8004396:	4254      	negs	r4, r2
 8004398:	4314      	orrs	r4, r2
 800439a:	0c4b      	lsrs	r3, r1, #17
 800439c:	0b24      	lsrs	r4, r4, #12
 800439e:	045b      	lsls	r3, r3, #17
 80043a0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80043a4:	ea44 0103 	orr.w	r1, r4, r3
 80043a8:	460b      	mov	r3, r1
 80043aa:	492f      	ldr	r1, [pc, #188]	; (8004468 <rint+0x100>)
 80043ac:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80043b0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80043b4:	4602      	mov	r2, r0
 80043b6:	4639      	mov	r1, r7
 80043b8:	4630      	mov	r0, r6
 80043ba:	f7fb ff0b 	bl	80001d4 <__adddf3>
 80043be:	e9cd 0100 	strd	r0, r1, [sp]
 80043c2:	463b      	mov	r3, r7
 80043c4:	4632      	mov	r2, r6
 80043c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043ca:	f7fb ff01 	bl	80001d0 <__aeabi_dsub>
 80043ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80043d2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80043d6:	4639      	mov	r1, r7
 80043d8:	ec41 0b10 	vmov	d0, r0, r1
 80043dc:	b003      	add	sp, #12
 80043de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043e0:	4a22      	ldr	r2, [pc, #136]	; (800446c <rint+0x104>)
 80043e2:	4132      	asrs	r2, r6
 80043e4:	ea01 0702 	and.w	r7, r1, r2
 80043e8:	4307      	orrs	r7, r0
 80043ea:	d0f5      	beq.n	80043d8 <rint+0x70>
 80043ec:	0852      	lsrs	r2, r2, #1
 80043ee:	4011      	ands	r1, r2
 80043f0:	430c      	orrs	r4, r1
 80043f2:	d00b      	beq.n	800440c <rint+0xa4>
 80043f4:	ea23 0202 	bic.w	r2, r3, r2
 80043f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80043fc:	2e13      	cmp	r6, #19
 80043fe:	fa43 f306 	asr.w	r3, r3, r6
 8004402:	bf0c      	ite	eq
 8004404:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8004408:	2400      	movne	r4, #0
 800440a:	4313      	orrs	r3, r2
 800440c:	4916      	ldr	r1, [pc, #88]	; (8004468 <rint+0x100>)
 800440e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8004412:	4622      	mov	r2, r4
 8004414:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004418:	4620      	mov	r0, r4
 800441a:	4629      	mov	r1, r5
 800441c:	f7fb feda 	bl	80001d4 <__adddf3>
 8004420:	e9cd 0100 	strd	r0, r1, [sp]
 8004424:	4622      	mov	r2, r4
 8004426:	462b      	mov	r3, r5
 8004428:	e9dd 0100 	ldrd	r0, r1, [sp]
 800442c:	f7fb fed0 	bl	80001d0 <__aeabi_dsub>
 8004430:	e7d2      	b.n	80043d8 <rint+0x70>
 8004432:	2e33      	cmp	r6, #51	; 0x33
 8004434:	dd07      	ble.n	8004446 <rint+0xde>
 8004436:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800443a:	d1cd      	bne.n	80043d8 <rint+0x70>
 800443c:	ee10 2a10 	vmov	r2, s0
 8004440:	f7fb fec8 	bl	80001d4 <__adddf3>
 8004444:	e7c8      	b.n	80043d8 <rint+0x70>
 8004446:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800444a:	f04f 32ff 	mov.w	r2, #4294967295
 800444e:	40f2      	lsrs	r2, r6
 8004450:	4210      	tst	r0, r2
 8004452:	d0c1      	beq.n	80043d8 <rint+0x70>
 8004454:	0852      	lsrs	r2, r2, #1
 8004456:	4210      	tst	r0, r2
 8004458:	bf1f      	itttt	ne
 800445a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800445e:	ea20 0202 	bicne.w	r2, r0, r2
 8004462:	4134      	asrne	r4, r6
 8004464:	4314      	orrne	r4, r2
 8004466:	e7d1      	b.n	800440c <rint+0xa4>
 8004468:	08004660 	.word	0x08004660
 800446c:	000fffff 	.word	0x000fffff

08004470 <scalbn>:
 8004470:	b570      	push	{r4, r5, r6, lr}
 8004472:	ec55 4b10 	vmov	r4, r5, d0
 8004476:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800447a:	4606      	mov	r6, r0
 800447c:	462b      	mov	r3, r5
 800447e:	b9aa      	cbnz	r2, 80044ac <scalbn+0x3c>
 8004480:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004484:	4323      	orrs	r3, r4
 8004486:	d03b      	beq.n	8004500 <scalbn+0x90>
 8004488:	4b31      	ldr	r3, [pc, #196]	; (8004550 <scalbn+0xe0>)
 800448a:	4629      	mov	r1, r5
 800448c:	2200      	movs	r2, #0
 800448e:	ee10 0a10 	vmov	r0, s0
 8004492:	f7fc f855 	bl	8000540 <__aeabi_dmul>
 8004496:	4b2f      	ldr	r3, [pc, #188]	; (8004554 <scalbn+0xe4>)
 8004498:	429e      	cmp	r6, r3
 800449a:	4604      	mov	r4, r0
 800449c:	460d      	mov	r5, r1
 800449e:	da12      	bge.n	80044c6 <scalbn+0x56>
 80044a0:	a327      	add	r3, pc, #156	; (adr r3, 8004540 <scalbn+0xd0>)
 80044a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a6:	f7fc f84b 	bl	8000540 <__aeabi_dmul>
 80044aa:	e009      	b.n	80044c0 <scalbn+0x50>
 80044ac:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80044b0:	428a      	cmp	r2, r1
 80044b2:	d10c      	bne.n	80044ce <scalbn+0x5e>
 80044b4:	ee10 2a10 	vmov	r2, s0
 80044b8:	4620      	mov	r0, r4
 80044ba:	4629      	mov	r1, r5
 80044bc:	f7fb fe8a 	bl	80001d4 <__adddf3>
 80044c0:	4604      	mov	r4, r0
 80044c2:	460d      	mov	r5, r1
 80044c4:	e01c      	b.n	8004500 <scalbn+0x90>
 80044c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80044ca:	460b      	mov	r3, r1
 80044cc:	3a36      	subs	r2, #54	; 0x36
 80044ce:	4432      	add	r2, r6
 80044d0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80044d4:	428a      	cmp	r2, r1
 80044d6:	dd0b      	ble.n	80044f0 <scalbn+0x80>
 80044d8:	ec45 4b11 	vmov	d1, r4, r5
 80044dc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8004548 <scalbn+0xd8>
 80044e0:	f000 f83c 	bl	800455c <copysign>
 80044e4:	a318      	add	r3, pc, #96	; (adr r3, 8004548 <scalbn+0xd8>)
 80044e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ea:	ec51 0b10 	vmov	r0, r1, d0
 80044ee:	e7da      	b.n	80044a6 <scalbn+0x36>
 80044f0:	2a00      	cmp	r2, #0
 80044f2:	dd08      	ble.n	8004506 <scalbn+0x96>
 80044f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80044f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80044fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004500:	ec45 4b10 	vmov	d0, r4, r5
 8004504:	bd70      	pop	{r4, r5, r6, pc}
 8004506:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800450a:	da0d      	bge.n	8004528 <scalbn+0xb8>
 800450c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004510:	429e      	cmp	r6, r3
 8004512:	ec45 4b11 	vmov	d1, r4, r5
 8004516:	dce1      	bgt.n	80044dc <scalbn+0x6c>
 8004518:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8004540 <scalbn+0xd0>
 800451c:	f000 f81e 	bl	800455c <copysign>
 8004520:	a307      	add	r3, pc, #28	; (adr r3, 8004540 <scalbn+0xd0>)
 8004522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004526:	e7e0      	b.n	80044ea <scalbn+0x7a>
 8004528:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800452c:	3236      	adds	r2, #54	; 0x36
 800452e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004532:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004536:	4620      	mov	r0, r4
 8004538:	4629      	mov	r1, r5
 800453a:	2200      	movs	r2, #0
 800453c:	4b06      	ldr	r3, [pc, #24]	; (8004558 <scalbn+0xe8>)
 800453e:	e7b2      	b.n	80044a6 <scalbn+0x36>
 8004540:	c2f8f359 	.word	0xc2f8f359
 8004544:	01a56e1f 	.word	0x01a56e1f
 8004548:	8800759c 	.word	0x8800759c
 800454c:	7e37e43c 	.word	0x7e37e43c
 8004550:	43500000 	.word	0x43500000
 8004554:	ffff3cb0 	.word	0xffff3cb0
 8004558:	3c900000 	.word	0x3c900000

0800455c <copysign>:
 800455c:	ec51 0b10 	vmov	r0, r1, d0
 8004560:	ee11 0a90 	vmov	r0, s3
 8004564:	ee10 2a10 	vmov	r2, s0
 8004568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800456c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8004570:	ea41 0300 	orr.w	r3, r1, r0
 8004574:	ec43 2b10 	vmov	d0, r2, r3
 8004578:	4770      	bx	lr
	...

0800457c <__errno>:
 800457c:	4b01      	ldr	r3, [pc, #4]	; (8004584 <__errno+0x8>)
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	2000000c 	.word	0x2000000c

08004588 <__libc_init_array>:
 8004588:	b570      	push	{r4, r5, r6, lr}
 800458a:	4e0d      	ldr	r6, [pc, #52]	; (80045c0 <__libc_init_array+0x38>)
 800458c:	4c0d      	ldr	r4, [pc, #52]	; (80045c4 <__libc_init_array+0x3c>)
 800458e:	1ba4      	subs	r4, r4, r6
 8004590:	10a4      	asrs	r4, r4, #2
 8004592:	2500      	movs	r5, #0
 8004594:	42a5      	cmp	r5, r4
 8004596:	d109      	bne.n	80045ac <__libc_init_array+0x24>
 8004598:	4e0b      	ldr	r6, [pc, #44]	; (80045c8 <__libc_init_array+0x40>)
 800459a:	4c0c      	ldr	r4, [pc, #48]	; (80045cc <__libc_init_array+0x44>)
 800459c:	f000 f820 	bl	80045e0 <_init>
 80045a0:	1ba4      	subs	r4, r4, r6
 80045a2:	10a4      	asrs	r4, r4, #2
 80045a4:	2500      	movs	r5, #0
 80045a6:	42a5      	cmp	r5, r4
 80045a8:	d105      	bne.n	80045b6 <__libc_init_array+0x2e>
 80045aa:	bd70      	pop	{r4, r5, r6, pc}
 80045ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045b0:	4798      	blx	r3
 80045b2:	3501      	adds	r5, #1
 80045b4:	e7ee      	b.n	8004594 <__libc_init_array+0xc>
 80045b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045ba:	4798      	blx	r3
 80045bc:	3501      	adds	r5, #1
 80045be:	e7f2      	b.n	80045a6 <__libc_init_array+0x1e>
 80045c0:	08004670 	.word	0x08004670
 80045c4:	08004670 	.word	0x08004670
 80045c8:	08004670 	.word	0x08004670
 80045cc:	08004678 	.word	0x08004678

080045d0 <memset>:
 80045d0:	4402      	add	r2, r0
 80045d2:	4603      	mov	r3, r0
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d100      	bne.n	80045da <memset+0xa>
 80045d8:	4770      	bx	lr
 80045da:	f803 1b01 	strb.w	r1, [r3], #1
 80045de:	e7f9      	b.n	80045d4 <memset+0x4>

080045e0 <_init>:
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	bf00      	nop
 80045e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e6:	bc08      	pop	{r3}
 80045e8:	469e      	mov	lr, r3
 80045ea:	4770      	bx	lr

080045ec <_fini>:
 80045ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ee:	bf00      	nop
 80045f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045f2:	bc08      	pop	{r3}
 80045f4:	469e      	mov	lr, r3
 80045f6:	4770      	bx	lr
