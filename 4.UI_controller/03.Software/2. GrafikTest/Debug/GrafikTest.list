
GrafikTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003228  08003228  00013228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003258  08003258  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003258  08003258  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003258  08003258  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003258  08003258  00013258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003260  08003260  00013260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000208c  2000000c  08003270  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002098  08003270  00022098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002985d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a47  00000000  00000000  00049899  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000950  00000000  00000000  0004d2e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000838  00000000  00000000  0004dc30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c642  00000000  00000000  0004e468  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d66c  00000000  00000000  0006aaaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f2f8  00000000  00000000  00078116  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010740e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002414  00000000  00000000  0010748c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003210 	.word	0x08003210

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003210 	.word	0x08003210

080001c8 <_ZN7AppMainC1Ev>:

//#include<iostream>
#include<string> // for string class
using namespace std;

AppMain::AppMain() {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4618      	mov	r0, r3
 80001d4:	f000 fb97 	bl	8000906 <_ZN9LCDDriverC1Ev>
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	3304      	adds	r3, #4
 80001dc:	687a      	ldr	r2, [r7, #4]
 80001de:	4611      	mov	r1, r2
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 f841 	bl	8000268 <_ZN10ImgControlC1EP9LCDDriver>
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80001ec:	3308      	adds	r3, #8
 80001ee:	687a      	ldr	r2, [r7, #4]
 80001f0:	3204      	adds	r2, #4
 80001f2:	4611      	mov	r1, r2
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 ffe3 	bl	80011c0 <_ZN11ScreensaverC1EP10ImgControl>
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000200:	3314      	adds	r3, #20
 8000202:	687a      	ldr	r2, [r7, #4]
 8000204:	3204      	adds	r2, #4
 8000206:	4611      	mov	r1, r2
 8000208:	4618      	mov	r0, r3
 800020a:	f000 ffd9 	bl	80011c0 <_ZN11ScreensaverC1EP10ImgControl>
	// TODO Auto-generated constructor stub

}
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	4618      	mov	r0, r3
 8000212:	3708      	adds	r7, #8
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}

08000218 <_ZN7AppMain4mainEv>:

void AppMain::main(){
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]

	imgControl.initImgControl();
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3304      	adds	r3, #4
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f83f 	bl	80002a8 <_ZN10ImgControl14initImgControlEv>
	screenSaver.setShapeSize(15,8);
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000230:	3308      	adds	r3, #8
 8000232:	2208      	movs	r2, #8
 8000234:	210f      	movs	r1, #15
 8000236:	4618      	mov	r0, r3
 8000238:	f000 ffdf 	bl	80011fa <_ZN11Screensaver12setShapeSizeEhh>
	//screenSaver_1.setShapeSize(5, 10);

	screenSaver.setStartPos(0, 0);
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000242:	3308      	adds	r3, #8
 8000244:	2200      	movs	r2, #0
 8000246:	2100      	movs	r1, #0
 8000248:	4618      	mov	r0, r3
 800024a:	f000 ffea 	bl	8001222 <_ZN11Screensaver11setStartPosEhh>
	lcdDriver.WriteRectangle(140, 50, 51, 30, 1);
	*/

	while(1){

		screenSaver.screensaver();
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000254:	3308      	adds	r3, #8
 8000256:	4618      	mov	r0, r3
 8000258:	f000 fff8 	bl	800124c <_ZN11Screensaver11screensaverEv>
	//	screenSaver_1.screensaver();
		imgControl.writeScreenMirror();
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	3304      	adds	r3, #4
 8000260:	4618      	mov	r0, r3
 8000262:	f000 f8d0 	bl	8000406 <_ZN10ImgControl17writeScreenMirrorEv>
		screenSaver.screensaver();
 8000266:	e7f2      	b.n	800024e <_ZN7AppMain4mainEv+0x36>

08000268 <_ZN10ImgControlC1EP9LCDDriver>:
using namespace std;




ImgControl::ImgControl(LCDDriver *lcdDriver) {
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
 8000270:	6039      	str	r1, [r7, #0]
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	3304      	adds	r3, #4
 8000276:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800027a:	2100      	movs	r1, #0
 800027c:	4618      	mov	r0, r3
 800027e:	f002 ffbf 	bl	8003200 <memset>
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000288:	3304      	adds	r3, #4
 800028a:	4618      	mov	r0, r3
 800028c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000290:	461a      	mov	r2, r3
 8000292:	2100      	movs	r1, #0
 8000294:	f002 ffb4 	bl	8003200 <memset>
	this->lcdDriver = lcdDriver;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	683a      	ldr	r2, [r7, #0]
 800029c:	601a      	str	r2, [r3, #0]
}
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	4618      	mov	r0, r3
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <_ZN10ImgControl14initImgControlEv>:


void ImgControl::initImgControl(void){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	this->lcdDriver->InitLCD();
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 fb31 	bl	800091c <_ZN9LCDDriver7InitLCDEv>
}
 80002ba:	bf00      	nop
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}

080002c2 <_ZN10ImgControl14writeRectangleEhhhhh>:
 * @param startY
 * @param width
 * @param height
 * @param lineThickness
 */
void ImgControl::writeRectangle(uint8_t startX, uint8_t startY, uint8_t width,uint8_t height, uint8_t lineThickness){
 80002c2:	b580      	push	{r7, lr}
 80002c4:	b084      	sub	sp, #16
 80002c6:	af02      	add	r7, sp, #8
 80002c8:	6078      	str	r0, [r7, #4]
 80002ca:	4608      	mov	r0, r1
 80002cc:	4611      	mov	r1, r2
 80002ce:	461a      	mov	r2, r3
 80002d0:	4603      	mov	r3, r0
 80002d2:	70fb      	strb	r3, [r7, #3]
 80002d4:	460b      	mov	r3, r1
 80002d6:	70bb      	strb	r3, [r7, #2]
 80002d8:	4613      	mov	r3, r2
 80002da:	707b      	strb	r3, [r7, #1]
	writeXLine(startX, startY, width, lineThickness);
 80002dc:	7878      	ldrb	r0, [r7, #1]
 80002de:	78ba      	ldrb	r2, [r7, #2]
 80002e0:	78f9      	ldrb	r1, [r7, #3]
 80002e2:	7d3b      	ldrb	r3, [r7, #20]
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	4603      	mov	r3, r0
 80002e8:	6878      	ldr	r0, [r7, #4]
 80002ea:	f000 f825 	bl	8000338 <_ZN10ImgControl10writeXLineEhhhh>
	writeYLine(startX, startY, height, lineThickness);
 80002ee:	7c38      	ldrb	r0, [r7, #16]
 80002f0:	78ba      	ldrb	r2, [r7, #2]
 80002f2:	78f9      	ldrb	r1, [r7, #3]
 80002f4:	7d3b      	ldrb	r3, [r7, #20]
 80002f6:	9300      	str	r3, [sp, #0]
 80002f8:	4603      	mov	r3, r0
 80002fa:	6878      	ldr	r0, [r7, #4]
 80002fc:	f000 f850 	bl	80003a0 <_ZN10ImgControl10writeYLineEhhhh>
	writeXLine(startX, startY+height, width, lineThickness);
 8000300:	78ba      	ldrb	r2, [r7, #2]
 8000302:	7c3b      	ldrb	r3, [r7, #16]
 8000304:	4413      	add	r3, r2
 8000306:	b2da      	uxtb	r2, r3
 8000308:	7878      	ldrb	r0, [r7, #1]
 800030a:	78f9      	ldrb	r1, [r7, #3]
 800030c:	7d3b      	ldrb	r3, [r7, #20]
 800030e:	9300      	str	r3, [sp, #0]
 8000310:	4603      	mov	r3, r0
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	f000 f810 	bl	8000338 <_ZN10ImgControl10writeXLineEhhhh>
	writeYLine(startX+width, startY, height, lineThickness);
 8000318:	78fa      	ldrb	r2, [r7, #3]
 800031a:	787b      	ldrb	r3, [r7, #1]
 800031c:	4413      	add	r3, r2
 800031e:	b2d9      	uxtb	r1, r3
 8000320:	7c38      	ldrb	r0, [r7, #16]
 8000322:	78ba      	ldrb	r2, [r7, #2]
 8000324:	7d3b      	ldrb	r3, [r7, #20]
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	4603      	mov	r3, r0
 800032a:	6878      	ldr	r0, [r7, #4]
 800032c:	f000 f838 	bl	80003a0 <_ZN10ImgControl10writeYLineEhhhh>

}
 8000330:	bf00      	nop
 8000332:	3708      	adds	r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}

08000338 <_ZN10ImgControl10writeXLineEhhhh>:

void ImgControl::writeXLine(uint8_t startX, uint8_t startY, uint8_t width, uint8_t lineThickness){
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	4608      	mov	r0, r1
 8000342:	4611      	mov	r1, r2
 8000344:	461a      	mov	r2, r3
 8000346:	4603      	mov	r3, r0
 8000348:	70fb      	strb	r3, [r7, #3]
 800034a:	460b      	mov	r3, r1
 800034c:	70bb      	strb	r3, [r7, #2]
 800034e:	4613      	mov	r3, r2
 8000350:	707b      	strb	r3, [r7, #1]
	for(uint8_t i = 0; i<width; i++){
 8000352:	2300      	movs	r3, #0
 8000354:	75fb      	strb	r3, [r7, #23]
 8000356:	7dfa      	ldrb	r2, [r7, #23]
 8000358:	787b      	ldrb	r3, [r7, #1]
 800035a:	429a      	cmp	r2, r3
 800035c:	d21c      	bcs.n	8000398 <_ZN10ImgControl10writeXLineEhhhh+0x60>
		screenMirror[startY][startX+i] = 1;
 800035e:	78bb      	ldrb	r3, [r7, #2]
 8000360:	015b      	lsls	r3, r3, #5
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	4413      	add	r3, r2
 8000366:	1d19      	adds	r1, r3, #4
 8000368:	78fa      	ldrb	r2, [r7, #3]
 800036a:	7dfb      	ldrb	r3, [r7, #23]
 800036c:	4413      	add	r3, r2
 800036e:	461a      	mov	r2, r3
 8000370:	f107 030c 	add.w	r3, r7, #12
 8000374:	4618      	mov	r0, r3
 8000376:	f000 f98b 	bl	8000690 <_ZNSt6bitsetILj240EEixEj>
 800037a:	f107 030c 	add.w	r3, r7, #12
 800037e:	2101      	movs	r1, #1
 8000380:	4618      	mov	r0, r3
 8000382:	f000 f99f 	bl	80006c4 <_ZNSt6bitsetILj240EE9referenceaSEb>
 8000386:	f107 030c 	add.w	r3, r7, #12
 800038a:	4618      	mov	r0, r3
 800038c:	f000 f98f 	bl	80006ae <_ZNSt6bitsetILj240EE9referenceD1Ev>
	for(uint8_t i = 0; i<width; i++){
 8000390:	7dfb      	ldrb	r3, [r7, #23]
 8000392:	3301      	adds	r3, #1
 8000394:	75fb      	strb	r3, [r7, #23]
 8000396:	e7de      	b.n	8000356 <_ZN10ImgControl10writeXLineEhhhh+0x1e>
	}

}
 8000398:	bf00      	nop
 800039a:	3718      	adds	r7, #24
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <_ZN10ImgControl10writeYLineEhhhh>:


void ImgControl::writeYLine(uint8_t startX, uint8_t startY, uint8_t height, uint8_t lineThickness){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b086      	sub	sp, #24
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	4608      	mov	r0, r1
 80003aa:	4611      	mov	r1, r2
 80003ac:	461a      	mov	r2, r3
 80003ae:	4603      	mov	r3, r0
 80003b0:	70fb      	strb	r3, [r7, #3]
 80003b2:	460b      	mov	r3, r1
 80003b4:	70bb      	strb	r3, [r7, #2]
 80003b6:	4613      	mov	r3, r2
 80003b8:	707b      	strb	r3, [r7, #1]
	for(uint8_t i = 0; i<height; i++){
 80003ba:	2300      	movs	r3, #0
 80003bc:	75fb      	strb	r3, [r7, #23]
 80003be:	7dfa      	ldrb	r2, [r7, #23]
 80003c0:	787b      	ldrb	r3, [r7, #1]
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d21b      	bcs.n	80003fe <_ZN10ImgControl10writeYLineEhhhh+0x5e>
		screenMirror[startY+i][startX] = 1;
 80003c6:	78ba      	ldrb	r2, [r7, #2]
 80003c8:	7dfb      	ldrb	r3, [r7, #23]
 80003ca:	4413      	add	r3, r2
 80003cc:	015b      	lsls	r3, r3, #5
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	4413      	add	r3, r2
 80003d2:	1d19      	adds	r1, r3, #4
 80003d4:	78fa      	ldrb	r2, [r7, #3]
 80003d6:	f107 030c 	add.w	r3, r7, #12
 80003da:	4618      	mov	r0, r3
 80003dc:	f000 f958 	bl	8000690 <_ZNSt6bitsetILj240EEixEj>
 80003e0:	f107 030c 	add.w	r3, r7, #12
 80003e4:	2101      	movs	r1, #1
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 f96c 	bl	80006c4 <_ZNSt6bitsetILj240EE9referenceaSEb>
 80003ec:	f107 030c 	add.w	r3, r7, #12
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 f95c 	bl	80006ae <_ZNSt6bitsetILj240EE9referenceD1Ev>
	for(uint8_t i = 0; i<height; i++){
 80003f6:	7dfb      	ldrb	r3, [r7, #23]
 80003f8:	3301      	adds	r3, #1
 80003fa:	75fb      	strb	r3, [r7, #23]
 80003fc:	e7df      	b.n	80003be <_ZN10ImgControl10writeYLineEhhhh+0x1e>
	}
}
 80003fe:	bf00      	nop
 8000400:	3718      	adds	r7, #24
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <_ZN10ImgControl17writeScreenMirrorEv>:





void ImgControl::writeScreenMirror(){
 8000406:	b5b0      	push	{r4, r5, r7, lr}
 8000408:	b092      	sub	sp, #72	; 0x48
 800040a:	af00      	add	r7, sp, #0
 800040c:	6278      	str	r0, [r7, #36]	; 0x24
	//lcdDriver->writeScreen(screenMirror);
	for(uint8_t copy = 0; copy < LCD_HEIGHT_PX; copy++){
 800040e:	2300      	movs	r3, #0
 8000410:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000414:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8000418:	2b00      	cmp	r3, #0
 800041a:	db25      	blt.n	8000468 <_ZN10ImgControl17writeScreenMirrorEv+0x62>
		screenMirrorLast[copy] = (screenMirrorLast[copy] ^ screenMirror[copy]);
 800041c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000420:	3380      	adds	r3, #128	; 0x80
 8000422:	015b      	lsls	r3, r3, #5
 8000424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000426:	4413      	add	r3, r2
 8000428:	1d19      	adds	r1, r3, #4
 800042a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800042e:	015b      	lsls	r3, r3, #5
 8000430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000432:	4413      	add	r3, r2
 8000434:	1d18      	adds	r0, r3, #4
 8000436:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800043a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800043c:	3380      	adds	r3, #128	; 0x80
 800043e:	015b      	lsls	r3, r3, #5
 8000440:	18d4      	adds	r4, r2, r3
 8000442:	463b      	mov	r3, r7
 8000444:	4602      	mov	r2, r0
 8000446:	4618      	mov	r0, r3
 8000448:	f000 f966 	bl	8000718 <_ZSteoILj240EESt6bitsetIXT_EERKS1_S3_>
 800044c:	3404      	adds	r4, #4
 800044e:	463d      	mov	r5, r7
 8000450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000454:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000458:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(uint8_t copy = 0; copy < LCD_HEIGHT_PX; copy++){
 800045c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000460:	3301      	adds	r3, #1
 8000462:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000466:	e7d5      	b.n	8000414 <_ZN10ImgControl17writeScreenMirrorEv+0xe>
	}

	lcdDriver->WriteData_16bit(LCD_setAddressPointer, LCD_GRAPHIC_START_ADDR);				//set Address pointer to Graphic home Address
 8000468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000470:	2124      	movs	r1, #36	; 0x24
 8000472:	4618      	mov	r0, r3
 8000474:	f000 fbc9 	bl	8000c0a <_ZN9LCDDriver15WriteData_16bitEht>
	uint8_t sendByte = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	uint8_t testByte = 0;
 800047e:	2300      	movs	r3, #0
 8000480:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	uint8_t offset = 0;
 8000484:	2300      	movs	r3, #0
 8000486:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	uint16_t addr = LCD_GRAPHIC_START_ADDR;
 800048a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800048e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	uint8_t addrDiff = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41


	for(uint8_t rowCounter = 0;rowCounter < LCD_HEIGHT_PX; rowCounter++){
 8000498:	2300      	movs	r3, #0
 800049a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800049e:	f997 3040 	ldrsb.w	r3, [r7, #64]	; 0x40
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	f2c0 80c7 	blt.w	8000636 <_ZN10ImgControl17writeScreenMirrorEv+0x230>

		if(screenMirrorLast[rowCounter].any()){
 80004a8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80004ac:	3380      	adds	r3, #128	; 0x80
 80004ae:	015b      	lsls	r3, r3, #5
 80004b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004b2:	4413      	add	r3, r2
 80004b4:	3304      	adds	r3, #4
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 f947 	bl	800074a <_ZNKSt6bitsetILj240EE3anyEv>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	f000 80ae 	beq.w	8000620 <_ZN10ImgControl17writeScreenMirrorEv+0x21a>
			offset = 0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

			lcdDriver->WriteData_16bit(LCD_setAddressPointer, addr);				//set Address pointer to Graphic home Address
 80004ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80004d2:	2124      	movs	r1, #36	; 0x24
 80004d4:	4618      	mov	r0, r3
 80004d6:	f000 fb98 	bl	8000c0a <_ZN9LCDDriver15WriteData_16bitEht>
			for(uint8_t columnCounter = 0; columnCounter < 40; columnCounter++){
 80004da:	2300      	movs	r3, #0
 80004dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80004e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80004e4:	2b27      	cmp	r3, #39	; 0x27
 80004e6:	f200 8097 	bhi.w	8000618 <_ZN10ImgControl17writeScreenMirrorEv+0x212>
				sendByte = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				testByte = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
				for(uint8_t bitCounter = 0; bitCounter<6; bitCounter++){
 80004f6:	2300      	movs	r3, #0
 80004f8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80004fc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000500:	2b05      	cmp	r3, #5
 8000502:	d856      	bhi.n	80005b2 <_ZN10ImgControl17writeScreenMirrorEv+0x1ac>
					sendByte |= screenMirror[rowCounter][bitCounter+offset];
 8000504:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000508:	015b      	lsls	r3, r3, #5
 800050a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800050c:	4413      	add	r3, r2
 800050e:	1d19      	adds	r1, r3, #4
 8000510:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8000514:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000518:	4413      	add	r3, r2
 800051a:	461a      	mov	r2, r3
 800051c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000520:	4618      	mov	r0, r3
 8000522:	f000 f8b5 	bl	8000690 <_ZNSt6bitsetILj240EEixEj>
 8000526:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f91a 	bl	8000764 <_ZNKSt6bitsetILj240EE9referencecvbEv>
 8000530:	4603      	mov	r3, r0
 8000532:	b25a      	sxtb	r2, r3
 8000534:	f997 3046 	ldrsb.w	r3, [r7, #70]	; 0x46
 8000538:	4313      	orrs	r3, r2
 800053a:	b25b      	sxtb	r3, r3
 800053c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000540:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000544:	4618      	mov	r0, r3
 8000546:	f000 f8b2 	bl	80006ae <_ZNSt6bitsetILj240EE9referenceD1Ev>
					testByte |= screenMirrorLast[rowCounter][bitCounter+offset];
 800054a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800054e:	3380      	adds	r3, #128	; 0x80
 8000550:	015b      	lsls	r3, r3, #5
 8000552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000554:	4413      	add	r3, r2
 8000556:	1d19      	adds	r1, r3, #4
 8000558:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800055c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000560:	4413      	add	r3, r2
 8000562:	461a      	mov	r2, r3
 8000564:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000568:	4618      	mov	r0, r3
 800056a:	f000 f891 	bl	8000690 <_ZNSt6bitsetILj240EEixEj>
 800056e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f8f6 	bl	8000764 <_ZNKSt6bitsetILj240EE9referencecvbEv>
 8000578:	4603      	mov	r3, r0
 800057a:	b25a      	sxtb	r2, r3
 800057c:	f997 3045 	ldrsb.w	r3, [r7, #69]	; 0x45
 8000580:	4313      	orrs	r3, r2
 8000582:	b25b      	sxtb	r3, r3
 8000584:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8000588:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800058c:	4618      	mov	r0, r3
 800058e:	f000 f88e 	bl	80006ae <_ZNSt6bitsetILj240EE9referenceD1Ev>
					sendByte<<=1;
 8000592:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					testByte<<=1;
 800059c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
				for(uint8_t bitCounter = 0; bitCounter<6; bitCounter++){
 80005a6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80005aa:	3301      	adds	r3, #1
 80005ac:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80005b0:	e7a4      	b.n	80004fc <_ZN10ImgControl17writeScreenMirrorEv+0xf6>
				//	screenMirror[rowCounter]>>(bitCounter+1);
				}
				sendByte>>=1;
 80005b2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80005b6:	105b      	asrs	r3, r3, #1
 80005b8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				testByte>>=1;
 80005bc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80005c0:	105b      	asrs	r3, r3, #1
 80005c2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
				if(testByte != 0){
 80005c6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d00f      	beq.n	80005ee <_ZN10ImgControl17writeScreenMirrorEv+0x1e8>
					lcdDriver->WriteData_16bit(LCD_setAddressPointer, addr);
 80005ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80005d6:	2124      	movs	r1, #36	; 0x24
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fb16 	bl	8000c0a <_ZN9LCDDriver15WriteData_16bitEht>
					lcdDriver->WriteData_8bit(LCD_dataWriteAndIncrementADP,sendByte);
 80005de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80005e6:	21c0      	movs	r1, #192	; 0xc0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fad7 	bl	8000b9c <_ZN9LCDDriver14WriteData_8bitEhh>
				}

				addr = addr + 1;
 80005ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80005f2:	3301      	adds	r3, #1
 80005f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				addrDiff++;
 80005f8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80005fc:	3301      	adds	r3, #1
 80005fe:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
				offset += 6;
 8000602:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000606:	3306      	adds	r3, #6
 8000608:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			for(uint8_t columnCounter = 0; columnCounter < 40; columnCounter++){
 800060c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000610:	3301      	adds	r3, #1
 8000612:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000616:	e763      	b.n	80004e0 <_ZN10ImgControl17writeScreenMirrorEv+0xda>
			}



			//addr = addr + (40-addrDiff);
			addrDiff = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800061e:	e004      	b.n	800062a <_ZN10ImgControl17writeScreenMirrorEv+0x224>

		}else{
			addr = addr + 40;
 8000620:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000624:	3328      	adds	r3, #40	; 0x28
 8000626:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	for(uint8_t rowCounter = 0;rowCounter < LCD_HEIGHT_PX; rowCounter++){
 800062a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800062e:	3301      	adds	r3, #1
 8000630:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8000634:	e733      	b.n	800049e <_ZN10ImgControl17writeScreenMirrorEv+0x98>
		}

	}

	for(uint8_t copy = 0; copy < LCD_HEIGHT_PX; copy++){
 8000636:	2300      	movs	r3, #0
 8000638:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800063c:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8000640:	2b00      	cmp	r3, #0
 8000642:	db21      	blt.n	8000688 <_ZN10ImgControl17writeScreenMirrorEv+0x282>
		screenMirrorLast[copy] = screenMirror[copy];
 8000644:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000648:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800064c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800064e:	3280      	adds	r2, #128	; 0x80
 8000650:	0152      	lsls	r2, r2, #5
 8000652:	440a      	add	r2, r1
 8000654:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000656:	015b      	lsls	r3, r3, #5
 8000658:	440b      	add	r3, r1
 800065a:	1d14      	adds	r4, r2, #4
 800065c:	1d1d      	adds	r5, r3, #4
 800065e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000662:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000666:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		screenMirror[copy].reset();
 800066a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800066e:	015b      	lsls	r3, r3, #5
 8000670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000672:	4413      	add	r3, r2
 8000674:	3304      	adds	r3, #4
 8000676:	4618      	mov	r0, r3
 8000678:	f000 f88b 	bl	8000792 <_ZNSt6bitsetILj240EE5resetEv>
	for(uint8_t copy = 0; copy < LCD_HEIGHT_PX; copy++){
 800067c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000680:	3301      	adds	r3, #1
 8000682:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8000686:	e7d9      	b.n	800063c <_ZN10ImgControl17writeScreenMirrorEv+0x236>
	}
}
 8000688:	bf00      	nop
 800068a:	3748      	adds	r7, #72	; 0x48
 800068c:	46bd      	mov	sp, r7
 800068e:	bdb0      	pop	{r4, r5, r7, pc}

08000690 <_ZNSt6bitsetILj240EEixEj>:
       *  required by that DR's resolution.  -pme
       *  The DR has since been changed:  range-checking is a precondition
       *  (users' responsibility), and these functions must not throw.  -pme
       */
      reference
      operator[](size_t __position)
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
      { return reference(*this, __position); }
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	68b9      	ldr	r1, [r7, #8]
 80006a0:	68f8      	ldr	r0, [r7, #12]
 80006a2:	f000 f883 	bl	80007ac <_ZNSt6bitsetILj240EE9referenceC1ERS0_j>
 80006a6:	68f8      	ldr	r0, [r7, #12]
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <_ZNSt6bitsetILj240EE9referenceD1Ev>:
	~reference() _GLIBCXX_NOEXCEPT
 80006ae:	b480      	push	{r7}
 80006b0:	b083      	sub	sp, #12
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
	{ }
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4618      	mov	r0, r3
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <_ZNSt6bitsetILj240EE9referenceaSEb>:
	operator=(bool __x) _GLIBCXX_NOEXCEPT
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	460b      	mov	r3, r1
 80006ce:	70fb      	strb	r3, [r7, #3]
	  if (__x)
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d00d      	beq.n	80006f2 <_ZNSt6bitsetILj240EE9referenceaSEb+0x2e>
	    *_M_wp |= _Base::_S_maskbit(_M_bpos);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 f88c 	bl	80007f8 <_ZNSt12_Base_bitsetILj8EE10_S_maskbitEj>
 80006e0:	4601      	mov	r1, r0
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	430a      	orrs	r2, r1
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	e00d      	b.n	800070e <_ZNSt6bitsetILj240EE9referenceaSEb+0x4a>
	    *_M_wp &= ~_Base::_S_maskbit(_M_bpos);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f87e 	bl	80007f8 <_ZNSt12_Base_bitsetILj8EE10_S_maskbitEj>
 80006fc:	4603      	mov	r3, r0
 80006fe:	43d9      	mvns	r1, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	400a      	ands	r2, r1
 800070c:	601a      	str	r2, [r3, #0]
	  return *this;
 800070e:	687b      	ldr	r3, [r7, #4]
	}
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <_ZSteoILj240EESt6bitsetIXT_EERKS1_S3_>:
      return __result;
    }

  template <size_t _Nb>
    inline bitset<_Nb>
    operator^(const bitset<_Nb>& __x, const bitset<_Nb>& __y) _GLIBCXX_NOEXCEPT
 8000718:	b5b0      	push	{r4, r5, r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
    {
      bitset<_Nb> __result(__x);
 8000724:	68fa      	ldr	r2, [r7, #12]
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	4614      	mov	r4, r2
 800072a:	461d      	mov	r5, r3
 800072c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000730:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000734:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      __result ^= __y;
 8000738:	6879      	ldr	r1, [r7, #4]
 800073a:	68f8      	ldr	r0, [r7, #12]
 800073c:	f000 f86a 	bl	8000814 <_ZNSt6bitsetILj240EEeOERKS0_>
      return __result;
 8000740:	bf00      	nop
    }
 8000742:	68f8      	ldr	r0, [r7, #12]
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bdb0      	pop	{r4, r5, r7, pc}

0800074a <_ZNKSt6bitsetILj240EE3anyEv>:
      any() const _GLIBCXX_NOEXCEPT
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
      { return this->_M_is_any(); }
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f86d 	bl	8000834 <_ZNKSt12_Base_bitsetILj8EE9_M_is_anyEv>
 800075a:	4603      	mov	r3, r0
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <_ZNKSt6bitsetILj240EE9referencecvbEv>:
	operator bool() const _GLIBCXX_NOEXCEPT
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	{ return (*(_M_wp) & _Base::_S_maskbit(_M_bpos)) != 0; }
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	681c      	ldr	r4, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f83e 	bl	80007f8 <_ZNSt12_Base_bitsetILj8EE10_S_maskbitEj>
 800077c:	4603      	mov	r3, r0
 800077e:	4023      	ands	r3, r4
 8000780:	2b00      	cmp	r3, #0
 8000782:	bf14      	ite	ne
 8000784:	2301      	movne	r3, #1
 8000786:	2300      	moveq	r3, #0
 8000788:	b2db      	uxtb	r3, r3
 800078a:	4618      	mov	r0, r3
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	bd90      	pop	{r4, r7, pc}

08000792 <_ZNSt6bitsetILj240EE5resetEv>:
      reset() _GLIBCXX_NOEXCEPT
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
	this->_M_do_reset();
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4618      	mov	r0, r3
 800079e:	f000 f865 	bl	800086c <_ZNSt12_Base_bitsetILj8EE11_M_do_resetEv>
	return *this;
 80007a2:	687b      	ldr	r3, [r7, #4]
      }
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <_ZNSt6bitsetILj240EE9referenceC1ERS0_j>:
	reference(bitset& __b, size_t __pos) _GLIBCXX_NOEXCEPT
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
	  _M_wp = &__b._M_getword(__pos);
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f864 	bl	800088a <_ZNSt12_Base_bitsetILj8EE10_M_getwordEj>
 80007c2:	4602      	mov	r2, r0
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	601a      	str	r2, [r3, #0]
	  _M_bpos = _Base::_S_whichbit(__pos);
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f000 f808 	bl	80007de <_ZNSt12_Base_bitsetILj8EE11_S_whichbitEj>
 80007ce:	4602      	mov	r2, r0
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	605a      	str	r2, [r3, #4]
	}
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	4618      	mov	r0, r3
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <_ZNSt12_Base_bitsetILj8EE11_S_whichbitEj>:
      _S_whichbit(size_t __pos) _GLIBCXX_NOEXCEPT
 80007de:	b480      	push	{r7}
 80007e0:	b083      	sub	sp, #12
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
      { return __pos % _GLIBCXX_BITSET_BITS_PER_WORD; }
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	f003 031f 	and.w	r3, r3, #31
 80007ec:	4618      	mov	r0, r3
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <_ZNSt12_Base_bitsetILj8EE10_S_maskbitEj>:
      _S_maskbit(size_t __pos) _GLIBCXX_NOEXCEPT
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
      { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff ffec 	bl	80007de <_ZNSt12_Base_bitsetILj8EE11_S_whichbitEj>
 8000806:	4602      	mov	r2, r0
 8000808:	2301      	movs	r3, #1
 800080a:	4093      	lsls	r3, r2
 800080c:	4618      	mov	r0, r3
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <_ZNSt6bitsetILj240EEeOERKS0_>:
      operator^=(const bitset<_Nb>& __rhs) _GLIBCXX_NOEXCEPT
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
	this->_M_do_xor(__rhs);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	683a      	ldr	r2, [r7, #0]
 8000822:	4611      	mov	r1, r2
 8000824:	4618      	mov	r0, r3
 8000826:	f000 f840 	bl	80008aa <_ZNSt12_Base_bitsetILj8EE9_M_do_xorERKS0_>
	return *this;
 800082a:	687b      	ldr	r3, [r7, #4]
      }
 800082c:	4618      	mov	r0, r3
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <_ZNKSt12_Base_bitsetILj8EE9_M_is_anyEv>:
      _M_is_any() const _GLIBCXX_NOEXCEPT
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	for (size_t __i = 0; __i < _Nw; __i++)
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	2b07      	cmp	r3, #7
 8000844:	d80b      	bhi.n	800085e <_ZNKSt12_Base_bitsetILj8EE9_M_is_anyEv+0x2a>
	  if (_M_w[__i] != static_cast<_WordT>(0))
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	68fa      	ldr	r2, [r7, #12]
 800084a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <_ZNKSt12_Base_bitsetILj8EE9_M_is_anyEv+0x22>
	    return true;
 8000852:	2301      	movs	r3, #1
 8000854:	e004      	b.n	8000860 <_ZNKSt12_Base_bitsetILj8EE9_M_is_anyEv+0x2c>
	for (size_t __i = 0; __i < _Nw; __i++)
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	3301      	adds	r3, #1
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	e7f0      	b.n	8000840 <_ZNKSt12_Base_bitsetILj8EE9_M_is_anyEv+0xc>
	return false;
 800085e:	2300      	movs	r3, #0
      }
 8000860:	4618      	mov	r0, r3
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <_ZNSt12_Base_bitsetILj8EE11_M_do_resetEv>:
      _M_do_reset() _GLIBCXX_NOEXCEPT
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
      { __builtin_memset(_M_w, 0, _Nw * sizeof(_WordT)); }
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4618      	mov	r0, r3
 8000878:	2320      	movs	r3, #32
 800087a:	461a      	mov	r2, r3
 800087c:	2100      	movs	r1, #0
 800087e:	f002 fcbf 	bl	8003200 <memset>
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <_ZNSt12_Base_bitsetILj8EE10_M_getwordEj>:
      _M_getword(size_t __pos) _GLIBCXX_NOEXCEPT
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
 8000892:	6039      	str	r1, [r7, #0]
      { return _M_w[_S_whichword(__pos)]; }
 8000894:	6838      	ldr	r0, [r7, #0]
 8000896:	f000 f82a 	bl	80008ee <_ZNSt12_Base_bitsetILj8EE12_S_whichwordEj>
 800089a:	4603      	mov	r3, r0
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	4413      	add	r3, r2
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <_ZNSt12_Base_bitsetILj8EE9_M_do_xorERKS0_>:
      _M_do_xor(const _Base_bitset<_Nw>& __x) _GLIBCXX_NOEXCEPT
 80008aa:	b480      	push	{r7}
 80008ac:	b085      	sub	sp, #20
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
 80008b2:	6039      	str	r1, [r7, #0]
	for (size_t __i = 0; __i < _Nw; __i++)
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	2b07      	cmp	r3, #7
 80008bc:	d811      	bhi.n	80008e2 <_ZNSt12_Base_bitsetILj8EE9_M_do_xorERKS0_+0x38>
	  _M_w[__i] ^= __x._M_w[__i];
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	68fa      	ldr	r2, [r7, #12]
 80008c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	68f9      	ldr	r1, [r7, #12]
 80008ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80008ce:	ea82 0103 	eor.w	r1, r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	68fa      	ldr	r2, [r7, #12]
 80008d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (size_t __i = 0; __i < _Nw; __i++)
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	3301      	adds	r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	e7ea      	b.n	80008b8 <_ZNSt12_Base_bitsetILj8EE9_M_do_xorERKS0_+0xe>
      }
 80008e2:	bf00      	nop
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <_ZNSt12_Base_bitsetILj8EE12_S_whichwordEj>:
      _S_whichword(size_t __pos) _GLIBCXX_NOEXCEPT
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
      { return __pos / _GLIBCXX_BITSET_BITS_PER_WORD; }
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	095b      	lsrs	r3, r3, #5
 80008fa:	4618      	mov	r0, r3
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <_ZN9LCDDriverC1Ev>:
#include "i2c.h"
#include "gpio.h"
#include "stdlib.h"
#include "math.h"

LCDDriver::LCDDriver() {
 8000906:	b480      	push	{r7}
 8000908:	b083      	sub	sp, #12
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4618      	mov	r0, r3
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <_ZN9LCDDriver7InitLCDEv>:


void LCDDriver::InitLCD(){
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	Reset();
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f000 fa35 	bl	8000d94 <_ZN9LCDDriver5ResetEv>
	LCD_RD_SET;
 800092a:	2201      	movs	r2, #1
 800092c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000934:	f001 f8ee 	bl	8001b14 <HAL_GPIO_WritePin>
	LCD_WR_SET;
 8000938:	2201      	movs	r2, #1
 800093a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000942:	f001 f8e7 	bl	8001b14 <HAL_GPIO_WritePin>
	SetLCDSize(SIZE_40C);
 8000946:	2100      	movs	r1, #0
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f000 f845 	bl	80009d8 <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E>

	//init REGISTERS SETTING
	WriteData_16bit(LCD_setCursorPointer,0);
 800094e:	2200      	movs	r2, #0
 8000950:	2121      	movs	r1, #33	; 0x21
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f000 f959 	bl	8000c0a <_ZN9LCDDriver15WriteData_16bitEht>
	WriteData_16bit(LCD_setAddressPointer, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2124      	movs	r1, #36	; 0x24
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f000 f954 	bl	8000c0a <_ZN9LCDDriver15WriteData_16bitEht>
	WriteData_16bit(LCD_setOffsetRegister, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2122      	movs	r1, #34	; 0x22
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 f94f 	bl	8000c0a <_ZN9LCDDriver15WriteData_16bitEht>
	//Init SET CONTROL WORD
	WriteData_16bit(LCD_setTextHomeAddress,LCD_TXT_START_ADDR);
 800096c:	2200      	movs	r2, #0
 800096e:	2140      	movs	r1, #64	; 0x40
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f000 f94a 	bl	8000c0a <_ZN9LCDDriver15WriteData_16bitEht>
	WriteData_16bit(LCD_setGraphicHomeAddress, LCD_GRAPHIC_START_ADDR);
 8000976:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800097a:	2142      	movs	r1, #66	; 0x42
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f000 f944 	bl	8000c0a <_ZN9LCDDriver15WriteData_16bitEht>
	//Init MODE SET
	WriteData_8bit(LCD_OR_mode |LCD_InternalCGROM_mode);
 8000982:	2180      	movs	r1, #128	; 0x80
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f000 f8e2 	bl	8000b4e <_ZN9LCDDriver14WriteData_8bitEh>
	//Init DISPLY MODE
	WriteData_8bit(LCD_cursorOnBlinkON | LCD_textONGraphicON);
 800098a:	219f      	movs	r1, #159	; 0x9f
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f000 f8de 	bl	8000b4e <_ZN9LCDDriver14WriteData_8bitEh>
	//Init CURSOR PATTERN SELECT
	WriteData_8bit(LCD_1_lineCursor);
 8000992:	21a0      	movs	r1, #160	; 0xa0
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f000 f8da 	bl	8000b4e <_ZN9LCDDriver14WriteData_8bitEh>
	//Init DATA AUTO READ/WRITE
	WriteData_8bit(LCD_setDataAutoRead);
 800099a:	21b1      	movs	r1, #177	; 0xb1
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f000 f8d6 	bl	8000b4e <_ZN9LCDDriver14WriteData_8bitEh>
	//Init SCREEN REVERSE
	WriteData_16bit(LCD_SCREEN_REVERSE, NORMAL_DISPLAY);
 80009a2:	2200      	movs	r2, #0
 80009a4:	21d0      	movs	r1, #208	; 0xd0
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f000 f92f 	bl	8000c0a <_ZN9LCDDriver15WriteData_16bitEht>
	//Init BLINK TIME
	WriteData_16bit(LCD_BLINK_TIME, BLINK_TIM_0_066);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2150      	movs	r1, #80	; 0x50
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f000 f92a 	bl	8000c0a <_ZN9LCDDriver15WriteData_16bitEht>
	//Init CURSOR AUTO MOVING
	WriteData_16bit(LCD_CursorAutoMoving, AUTO_MOVING_ON);
 80009b6:	2201      	movs	r2, #1
 80009b8:	2160      	movs	r1, #96	; 0x60
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f000 f925 	bl	8000c0a <_ZN9LCDDriver15WriteData_16bitEht>

	ClearDisplay();
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f000 f85e 	bl	8000a82 <_ZN9LCDDriver12ClearDisplayEv>
	SetAddressPointer(0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f000 f8a1 	bl	8000b12 <_ZN9LCDDriver17SetAddressPointerEhh>
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E>:
 * Init the LCD Size (40 Columns / 32 Columns)
 *
 * @param size: LCD Size
 * @return : none
 */
void LCDDriver::SetLCDSize(LCD_SIZE size){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	460b      	mov	r3, r1
 80009e2:	70fb      	strb	r3, [r7, #3]
	if(size == SIZE_40C){
 80009e4:	78fb      	ldrb	r3, [r7, #3]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d122      	bne.n	8000a30 <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E+0x58>
		LCD_SIZE_40;				//set size 40 Columns
 80009ea:	2200      	movs	r2, #0
 80009ec:	2102      	movs	r1, #2
 80009ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f2:	f001 f88f 	bl	8001b14 <HAL_GPIO_WritePin>
		LCD_FONT_68;				//set Fontsize 6x8px
 80009f6:	2201      	movs	r2, #1
 80009f8:	2101      	movs	r1, #1
 80009fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fe:	f001 f889 	bl	8001b14 <HAL_GPIO_WritePin>
		LCD_XY_SIZE.column = LCD_WIDTH_PX/6;	//set LCD size struct to 40 Columns
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2228      	movs	r2, #40	; 0x28
 8000a06:	701a      	strb	r2, [r3, #0]
		LCD_XY_SIZE.row = LCD_WIDTH_PX/8;		//set LCD size struct to 16 Row
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	221e      	movs	r2, #30
 8000a0c:	705a      	strb	r2, [r3, #1]
		LCD_XY_SIZE.patternHeight = 8;		//set pattern height to 8 pixel (pattern is the 6x8 pixel container)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2208      	movs	r2, #8
 8000a12:	709a      	strb	r2, [r3, #2]
		LCD_XY_SIZE.patternWidth =  6;		//set pattern width to 6 pixel (pattern is the 6x8 pixel container)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2206      	movs	r2, #6
 8000a18:	70da      	strb	r2, [r3, #3]
		WriteData_16bit(LCD_setTextArea, 0x0028);	//set TextArea to 40 Columns
 8000a1a:	2228      	movs	r2, #40	; 0x28
 8000a1c:	2141      	movs	r1, #65	; 0x41
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f000 f8f3 	bl	8000c0a <_ZN9LCDDriver15WriteData_16bitEht>
		WriteData_16bit(LCD_setGraphicArea, 0x0028);
 8000a24:	2228      	movs	r2, #40	; 0x28
 8000a26:	2143      	movs	r1, #67	; 0x43
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f000 f8ee 	bl	8000c0a <_ZN9LCDDriver15WriteData_16bitEht>
		LCD_XY_SIZE.patternHeight = 8;		//set pattern height to 8 pixel (pattern is the 6x8 pixel container)
		LCD_XY_SIZE.patternWidth =  8;		//set pattern width to 6 pixel (pattern is the 6x8 pixel container)
		WriteData_16bit(LCD_setTextArea, 0x0020);	//set TextArea to 32 Columns
		WriteData_16bit(LCD_setGraphicArea, 0x0020);
	}
}
 8000a2e:	e024      	b.n	8000a7a <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E+0xa2>
	else if(size == SIZE_32C){
 8000a30:	78fb      	ldrb	r3, [r7, #3]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d121      	bne.n	8000a7a <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E+0xa2>
		LCD_SIZE_32;				//set size 32 Columns
 8000a36:	2201      	movs	r2, #1
 8000a38:	2102      	movs	r1, #2
 8000a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3e:	f001 f869 	bl	8001b14 <HAL_GPIO_WritePin>
		LCD_FONT_88;				//set Fontsize 8x8px
 8000a42:	2200      	movs	r2, #0
 8000a44:	2101      	movs	r1, #1
 8000a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4a:	f001 f863 	bl	8001b14 <HAL_GPIO_WritePin>
		LCD_XY_SIZE.column = 32;	//set LCD size struct to 32 Columns
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2220      	movs	r2, #32
 8000a52:	701a      	strb	r2, [r3, #0]
		LCD_XY_SIZE.row = 16;		//set LCD size struct to 16 Row
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2210      	movs	r2, #16
 8000a58:	705a      	strb	r2, [r3, #1]
		LCD_XY_SIZE.patternHeight = 8;		//set pattern height to 8 pixel (pattern is the 6x8 pixel container)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2208      	movs	r2, #8
 8000a5e:	709a      	strb	r2, [r3, #2]
		LCD_XY_SIZE.patternWidth =  8;		//set pattern width to 6 pixel (pattern is the 6x8 pixel container)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2208      	movs	r2, #8
 8000a64:	70da      	strb	r2, [r3, #3]
		WriteData_16bit(LCD_setTextArea, 0x0020);	//set TextArea to 32 Columns
 8000a66:	2220      	movs	r2, #32
 8000a68:	2141      	movs	r1, #65	; 0x41
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f000 f8cd 	bl	8000c0a <_ZN9LCDDriver15WriteData_16bitEht>
		WriteData_16bit(LCD_setGraphicArea, 0x0020);
 8000a70:	2220      	movs	r2, #32
 8000a72:	2143      	movs	r1, #67	; 0x43
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f000 f8c8 	bl	8000c0a <_ZN9LCDDriver15WriteData_16bitEht>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <_ZN9LCDDriver12ClearDisplayEv>:
 * clears the whole LCD depending on the selected size
 *
 * @param  : none
 * @return : none
 */
void LCDDriver::ClearDisplay(){
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b084      	sub	sp, #16
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]

/*
	uint8_t CH_ARROW[] = {0x00, 0x04, 0x0E, 0x15, 0x04, 0x04, 0x04,0x00};
	setUserChar(CH_ARROW, 0x02,0);
*/
	WriteData_16bit(LCD_setOffsetRegister, 0x0000);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2122      	movs	r1, #34	; 0x22
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f000 f8bb 	bl	8000c0a <_ZN9LCDDriver15WriteData_16bitEht>

	WriteData_16bit(LCD_setAddressPointer, LCD_TXT_START_ADDR);				//set address pointer to text home address
 8000a94:	2200      	movs	r2, #0
 8000a96:	2124      	movs	r1, #36	; 0x24
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f000 f8b6 	bl	8000c0a <_ZN9LCDDriver15WriteData_16bitEht>
	for(uint16_t counter = 0; counter<LCD_XY_SIZE.column*LCD_XY_SIZE.row; counter++){
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	81fb      	strh	r3, [r7, #14]
 8000aa2:	89fa      	ldrh	r2, [r7, #14]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	785b      	ldrb	r3, [r3, #1]
 8000aae:	fb03 f301 	mul.w	r3, r3, r1
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	da08      	bge.n	8000ac8 <_ZN9LCDDriver12ClearDisplayEv+0x46>
		WriteData_16bit(LCD_dataWriteAndIncrementADP, 0x00);	//clear text
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	21c0      	movs	r1, #192	; 0xc0
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f000 f8a5 	bl	8000c0a <_ZN9LCDDriver15WriteData_16bitEht>
	for(uint16_t counter = 0; counter<LCD_XY_SIZE.column*LCD_XY_SIZE.row; counter++){
 8000ac0:	89fb      	ldrh	r3, [r7, #14]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	81fb      	strh	r3, [r7, #14]
 8000ac6:	e7ec      	b.n	8000aa2 <_ZN9LCDDriver12ClearDisplayEv+0x20>
	}


	WriteData_16bit(LCD_setAddressPointer, LCD_GRAPHIC_START_ADDR);				//set Address pointer to Graphic home Address
 8000ac8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000acc:	2124      	movs	r1, #36	; 0x24
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f000 f89b 	bl	8000c0a <_ZN9LCDDriver15WriteData_16bitEht>
	for(int i = 0; i<LCD_XY_SIZE.column*LCD_XY_SIZE.row*8;i++){
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	785b      	ldrb	r3, [r3, #1]
 8000ae2:	fb03 f302 	mul.w	r3, r3, r2
 8000ae6:	00db      	lsls	r3, r3, #3
 8000ae8:	68ba      	ldr	r2, [r7, #8]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	da08      	bge.n	8000b00 <_ZN9LCDDriver12ClearDisplayEv+0x7e>
		WriteData_8bit(LCD_dataWriteAndIncrementADP, 0x00);		//clear graphic
 8000aee:	2200      	movs	r2, #0
 8000af0:	21c0      	movs	r1, #192	; 0xc0
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f000 f852 	bl	8000b9c <_ZN9LCDDriver14WriteData_8bitEhh>
	for(int i = 0; i<LCD_XY_SIZE.column*LCD_XY_SIZE.row*8;i++){
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	3301      	adds	r3, #1
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	e7eb      	b.n	8000ad8 <_ZN9LCDDriver12ClearDisplayEv+0x56>
	}

	WriteData_16bit(LCD_setAddressPointer, LCD_TXT_START_ADDR);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2124      	movs	r1, #36	; 0x24
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f000 f880 	bl	8000c0a <_ZN9LCDDriver15WriteData_16bitEht>
}
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <_ZN9LCDDriver17SetAddressPointerEhh>:
 *
 * @param column: the chosen Column
 * @param row: the chosen Row
 * @return : none;
 */
void LCDDriver::SetAddressPointer(uint8_t column, uint8_t row){
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b084      	sub	sp, #16
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	70fb      	strb	r3, [r7, #3]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	70bb      	strb	r3, [r7, #2]
	uint16_t LCDPointer = row*LCD_XY_SIZE.column + column;	//calculate the AdressPointer depending on the selected LCD Size
 8000b22:	78bb      	ldrb	r3, [r7, #2]
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	fb12 f303 	smulbb	r3, r2, r3
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	78fb      	ldrb	r3, [r7, #3]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	4413      	add	r3, r2
 8000b38:	81fb      	strh	r3, [r7, #14]
	WriteData_16bit(LCD_setAddressPointer, LCDPointer);		//set the AdressPointer
 8000b3a:	89fb      	ldrh	r3, [r7, #14]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	2124      	movs	r1, #36	; 0x24
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f000 f862 	bl	8000c0a <_ZN9LCDDriver15WriteData_16bitEht>
}
 8000b46:	bf00      	nop
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <_ZN9LCDDriver14WriteData_8bitEh>:


bool LCDDriver::WriteData_8bit(uint8_t addr){
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	460b      	mov	r3, r1
 8000b58:	70fb      	strb	r3, [r7, #3]
	LCD_OUTPUT_ENABLE;
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b64:	f000 ffd6 	bl	8001b14 <HAL_GPIO_WritePin>


//	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
//		return false;
//	}
	WriteDataPin(addr);
 8000b68:	78fb      	ldrb	r3, [r7, #3]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 f8b7 	bl	8000ce0 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_COMMAND;
 8000b72:	2201      	movs	r2, #1
 8000b74:	2104      	movs	r1, #4
 8000b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7a:	f000 ffcb 	bl	8001b14 <HAL_GPIO_WritePin>
	PushData();
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f000 f88b 	bl	8000c9a <_ZN9LCDDriver8PushDataEv>

	LCD_OUTPUT_DISABLE;
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8e:	f000 ffc1 	bl	8001b14 <HAL_GPIO_WritePin>
	return true;
 8000b92:	2301      	movs	r3, #1
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <_ZN9LCDDriver14WriteData_8bitEhh>:


bool LCDDriver::WriteData_8bit(uint8_t addr, uint8_t data){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	70fb      	strb	r3, [r7, #3]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	70bb      	strb	r3, [r7, #2]
	LCD_OUTPUT_ENABLE;
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb6:	f000 ffad 	bl	8001b14 <HAL_GPIO_WritePin>

//	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
//		return false;
//	}
	WriteDataPin(data);
 8000bba:	78bb      	ldrb	r3, [r7, #2]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f000 f88e 	bl	8000ce0 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_DATA;
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bcc:	f000 ffa2 	bl	8001b14 <HAL_GPIO_WritePin>
	PushData();
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f000 f862 	bl	8000c9a <_ZN9LCDDriver8PushDataEv>

//	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
//		return false;
//	}
	WriteDataPin(addr);
 8000bd6:	78fb      	ldrb	r3, [r7, #3]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f000 f880 	bl	8000ce0 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_COMMAND;
 8000be0:	2201      	movs	r2, #1
 8000be2:	2104      	movs	r1, #4
 8000be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be8:	f000 ff94 	bl	8001b14 <HAL_GPIO_WritePin>
	PushData();
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f000 f854 	bl	8000c9a <_ZN9LCDDriver8PushDataEv>

	LCD_OUTPUT_DISABLE;
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfc:	f000 ff8a 	bl	8001b14 <HAL_GPIO_WritePin>
	return true;
 8000c00:	2301      	movs	r3, #1
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <_ZN9LCDDriver15WriteData_16bitEht>:

bool LCDDriver::WriteData_16bit(uint8_t addr, uint16_t data) {
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	460b      	mov	r3, r1
 8000c14:	70fb      	strb	r3, [r7, #3]
 8000c16:	4613      	mov	r3, r2
 8000c18:	803b      	strh	r3, [r7, #0]
	LCD_OUTPUT_ENABLE;
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c24:	f000 ff76 	bl	8001b14 <HAL_GPIO_WritePin>
//	if (CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR) {
//		return false;
//	}
	WriteDataPin((uint8_t) (data));
 8000c28:	883b      	ldrh	r3, [r7, #0]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f000 f856 	bl	8000ce0 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_DATA;
 8000c34:	2200      	movs	r2, #0
 8000c36:	2104      	movs	r1, #4
 8000c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3c:	f000 ff6a 	bl	8001b14 <HAL_GPIO_WritePin>
	PushData();
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f000 f82a 	bl	8000c9a <_ZN9LCDDriver8PushDataEv>
//	if (CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR) {
//		return false;
//	}
	WriteDataPin((uint8_t) ((data >> 8)));
 8000c46:	883b      	ldrh	r3, [r7, #0]
 8000c48:	121b      	asrs	r3, r3, #8
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f000 f846 	bl	8000ce0 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_DATA;
 8000c54:	2200      	movs	r2, #0
 8000c56:	2104      	movs	r1, #4
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f000 ff5a 	bl	8001b14 <HAL_GPIO_WritePin>
	PushData();
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f000 f81a 	bl	8000c9a <_ZN9LCDDriver8PushDataEv>
//	if (CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR) {
//		return false;
//	}
	WriteDataPin(addr);
 8000c66:	78fb      	ldrb	r3, [r7, #3]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f000 f838 	bl	8000ce0 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_COMMAND;
 8000c70:	2201      	movs	r2, #1
 8000c72:	2104      	movs	r1, #4
 8000c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c78:	f000 ff4c 	bl	8001b14 <HAL_GPIO_WritePin>
	PushData();
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f000 f80c 	bl	8000c9a <_ZN9LCDDriver8PushDataEv>
	LCD_OUTPUT_DISABLE;
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8c:	f000 ff42 	bl	8001b14 <HAL_GPIO_WritePin>
	return true;
 8000c90:	2301      	movs	r3, #1
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <_ZN9LCDDriver8PushDataEv>:


void LCDDriver::PushData(){
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
	//toggle WR and Enable PIN so that the LCD reads the data
	LCD_WR_RESET;
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cac:	f000 ff32 	bl	8001b14 <HAL_GPIO_WritePin>
	LCD_ENABLE;
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2110      	movs	r1, #16
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb8:	f000 ff2c 	bl	8001b14 <HAL_GPIO_WritePin>
	LCD_DISABLE;
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2110      	movs	r1, #16
 8000cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc4:	f000 ff26 	bl	8001b14 <HAL_GPIO_WritePin>
	LCD_WR_SET;
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd2:	f000 ff1f 	bl	8001b14 <HAL_GPIO_WritePin>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <_ZN9LCDDriver12WriteDataPinEh>:
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct_2);
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct_3);
}


void LCDDriver::WriteDataPin(uint8_t data){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, (GPIO_PinState)(data & 0x01));
 8000cec:	78fb      	ldrb	r3, [r7, #3]
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	2110      	movs	r1, #16
 8000cf8:	4824      	ldr	r0, [pc, #144]	; (8000d8c <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000cfa:	f000 ff0b 	bl	8001b14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, (GPIO_PinState)(data & 0x02));
 8000cfe:	78fb      	ldrb	r3, [r7, #3]
 8000d00:	f003 0302 	and.w	r3, r3, #2
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	461a      	mov	r2, r3
 8000d08:	2120      	movs	r1, #32
 8000d0a:	4820      	ldr	r0, [pc, #128]	; (8000d8c <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000d0c:	f000 ff02 	bl	8001b14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, (GPIO_PinState)(data & 0x04));
 8000d10:	78fb      	ldrb	r3, [r7, #3]
 8000d12:	f003 0304 	and.w	r3, r3, #4
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	461a      	mov	r2, r3
 8000d1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d22:	f000 fef7 	bl	8001b14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, (GPIO_PinState)(data & 0x08));
 8000d26:	78fb      	ldrb	r3, [r7, #3]
 8000d28:	f003 0308 	and.w	r3, r3, #8
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	461a      	mov	r2, r3
 8000d30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d38:	f000 feec 	bl	8001b14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (GPIO_PinState)(data & 0x10));
 8000d3c:	78fb      	ldrb	r3, [r7, #3]
 8000d3e:	f003 0310 	and.w	r3, r3, #16
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	461a      	mov	r2, r3
 8000d46:	2102      	movs	r1, #2
 8000d48:	4811      	ldr	r0, [pc, #68]	; (8000d90 <_ZN9LCDDriver12WriteDataPinEh+0xb0>)
 8000d4a:	f000 fee3 	bl	8001b14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (GPIO_PinState)(data & 0x20));
 8000d4e:	78fb      	ldrb	r3, [r7, #3]
 8000d50:	f003 0320 	and.w	r3, r3, #32
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	461a      	mov	r2, r3
 8000d58:	2101      	movs	r1, #1
 8000d5a:	480d      	ldr	r0, [pc, #52]	; (8000d90 <_ZN9LCDDriver12WriteDataPinEh+0xb0>)
 8000d5c:	f000 feda 	bl	8001b14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (GPIO_PinState)(data & 0x40));
 8000d60:	78fb      	ldrb	r3, [r7, #3]
 8000d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	461a      	mov	r2, r3
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	4807      	ldr	r0, [pc, #28]	; (8000d8c <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000d6e:	f000 fed1 	bl	8001b14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (GPIO_PinState)(data & 0x80));
 8000d72:	78fb      	ldrb	r3, [r7, #3]
 8000d74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	4803      	ldr	r0, [pc, #12]	; (8000d8c <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000d80:	f000 fec8 	bl	8001b14 <HAL_GPIO_WritePin>

}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	48000400 	.word	0x48000400
 8000d90:	48001400 	.word	0x48001400

08000d94 <_ZN9LCDDriver5ResetEv>:
 * Reset LCD
 *
 * @param none
 * @return none
 */
void LCDDriver::Reset(){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	LCD_RST_L;
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2108      	movs	r1, #8
 8000da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da4:	f000 feb6 	bl	8001b14 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000da8:	2001      	movs	r0, #1
 8000daa:	f000 fc39 	bl	8001620 <HAL_Delay>
	LCD_RST_H;
 8000dae:	2201      	movs	r2, #1
 8000db0:	2108      	movs	r1, #8
 8000db2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db6:	f000 fead 	bl	8001b14 <HAL_GPIO_WritePin>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	f107 030c 	add.w	r3, r7, #12
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dda:	4b32      	ldr	r3, [pc, #200]	; (8000ea4 <MX_GPIO_Init+0xe0>)
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	4a31      	ldr	r2, [pc, #196]	; (8000ea4 <MX_GPIO_Init+0xe0>)
 8000de0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000de4:	6153      	str	r3, [r2, #20]
 8000de6:	4b2f      	ldr	r3, [pc, #188]	; (8000ea4 <MX_GPIO_Init+0xe0>)
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <MX_GPIO_Init+0xe0>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	4a2b      	ldr	r2, [pc, #172]	; (8000ea4 <MX_GPIO_Init+0xe0>)
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfc:	6153      	str	r3, [r2, #20]
 8000dfe:	4b29      	ldr	r3, [pc, #164]	; (8000ea4 <MX_GPIO_Init+0xe0>)
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	4b26      	ldr	r3, [pc, #152]	; (8000ea4 <MX_GPIO_Init+0xe0>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	4a25      	ldr	r2, [pc, #148]	; (8000ea4 <MX_GPIO_Init+0xe0>)
 8000e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e14:	6153      	str	r3, [r2, #20]
 8000e16:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <MX_GPIO_Init+0xe0>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2103      	movs	r1, #3
 8000e26:	4820      	ldr	r0, [pc, #128]	; (8000ea8 <MX_GPIO_Init+0xe4>)
 8000e28:	f000 fe74 	bl	8001b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FS_Pin|MD2_Pin|CD_Pin|RESET_Pin 
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f641 711f 	movw	r1, #7967	; 0x1f1f
 8000e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e36:	f000 fe6d 	bl	8001b14 <HAL_GPIO_WritePin>
                          |CE_Pin|D3_Pin|RD_Pin|WR_Pin 
                          |D2_Pin|OE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D6_Pin|D0_Pin|D1_Pin, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2133      	movs	r1, #51	; 0x33
 8000e3e:	481b      	ldr	r0, [pc, #108]	; (8000eac <MX_GPIO_Init+0xe8>)
 8000e40:	f000 fe68 	bl	8001b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = D5_Pin|D4_Pin;
 8000e44:	2303      	movs	r3, #3
 8000e46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <MX_GPIO_Init+0xe4>)
 8000e5c:	f000 fce8 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = FS_Pin|MD2_Pin|CD_Pin|RESET_Pin 
 8000e60:	f641 731f 	movw	r3, #7967	; 0x1f1f
 8000e64:	60fb      	str	r3, [r7, #12]
                          |CE_Pin|D3_Pin|RD_Pin|WR_Pin 
                          |D2_Pin|OE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	4619      	mov	r1, r3
 8000e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7c:	f000 fcd8 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D0_Pin|D1_Pin;
 8000e80:	2333      	movs	r3, #51	; 0x33
 8000e82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	4619      	mov	r1, r3
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_GPIO_Init+0xe8>)
 8000e98:	f000 fcca 	bl	8001830 <HAL_GPIO_Init>

}
 8000e9c:	bf00      	nop
 8000e9e:	3720      	adds	r7, #32
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	48001400 	.word	0x48001400
 8000eac:	48000400 	.word	0x48000400

08000eb0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <MX_I2C1_Init+0x74>)
 8000eb6:	4a1c      	ldr	r2, [pc, #112]	; (8000f28 <MX_I2C1_Init+0x78>)
 8000eb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000eba:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <MX_I2C1_Init+0x74>)
 8000ebc:	4a1b      	ldr	r2, [pc, #108]	; (8000f2c <MX_I2C1_Init+0x7c>)
 8000ebe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ec0:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <MX_I2C1_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <MX_I2C1_Init+0x74>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <MX_I2C1_Init+0x74>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <MX_I2C1_Init+0x74>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <MX_I2C1_Init+0x74>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_I2C1_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <MX_I2C1_Init+0x74>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eea:	480e      	ldr	r0, [pc, #56]	; (8000f24 <MX_I2C1_Init+0x74>)
 8000eec:	f000 fe2a 	bl	8001b44 <HAL_I2C_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ef6:	f000 f8d6 	bl	80010a6 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000efa:	2100      	movs	r1, #0
 8000efc:	4809      	ldr	r0, [pc, #36]	; (8000f24 <MX_I2C1_Init+0x74>)
 8000efe:	f000 feb0 	bl	8001c62 <HAL_I2CEx_ConfigAnalogFilter>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f08:	f000 f8cd 	bl	80010a6 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_I2C1_Init+0x74>)
 8000f10:	f000 fef2 	bl	8001cf8 <HAL_I2CEx_ConfigDigitalFilter>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f1a:	f000 f8c4 	bl	80010a6 <Error_Handler>
  }

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20002048 	.word	0x20002048
 8000f28:	40005400 	.word	0x40005400
 8000f2c:	00201d2b 	.word	0x00201d2b

08000f30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a17      	ldr	r2, [pc, #92]	; (8000fac <HAL_I2C_MspInit+0x7c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d127      	bne.n	8000fa2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <HAL_I2C_MspInit+0x80>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	4a16      	ldr	r2, [pc, #88]	; (8000fb0 <HAL_I2C_MspInit+0x80>)
 8000f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f5c:	6153      	str	r3, [r2, #20]
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <HAL_I2C_MspInit+0x80>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f6a:	23c0      	movs	r3, #192	; 0xc0
 8000f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f6e:	2312      	movs	r3, #18
 8000f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f76:	2303      	movs	r3, #3
 8000f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <HAL_I2C_MspInit+0x84>)
 8000f86:	f000 fc53 	bl	8001830 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_I2C_MspInit+0x80>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <HAL_I2C_MspInit+0x80>)
 8000f90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f94:	61d3      	str	r3, [r2, #28]
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_I2C_MspInit+0x80>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	; 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40005400 	.word	0x40005400
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	48000400 	.word	0x48000400

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 8000fbc:	f000 faca 	bl	8001554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc0:	f000 f80a 	bl	8000fd8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc4:	f7ff fefe 	bl	8000dc4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fc8:	f7ff ff72 	bl	8000eb0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
 // HAL_I2C_MspInit(&hi2c1);
  appMain.main();
 8000fcc:	4801      	ldr	r0, [pc, #4]	; (8000fd4 <main+0x1c>)
 8000fce:	f7ff f923 	bl	8000218 <_ZN7AppMain4mainEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <main+0x1a>
 8000fd4:	20000028 	.word	0x20000028

08000fd8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b096      	sub	sp, #88	; 0x58
 8000fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fe2:	2228      	movs	r2, #40	; 0x28
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f002 f90a 	bl	8003200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]
 800100a:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800100c:	2302      	movs	r3, #2
 800100e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001010:	2301      	movs	r3, #1
 8001012:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001014:	2310      	movs	r3, #16
 8001016:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001018:	2302      	movs	r3, #2
 800101a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800101c:	2300      	movs	r3, #0
 800101e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001020:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001024:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001026:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800102a:	4618      	mov	r0, r3
 800102c:	f000 feb0 	bl	8001d90 <HAL_RCC_OscConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	bf14      	ite	ne
 8001036:	2301      	movne	r3, #1
 8001038:	2300      	moveq	r3, #0
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <_Z18SystemClock_Configv+0x6c>
  {
    Error_Handler();
 8001040:	f000 f831 	bl	80010a6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001044:	230f      	movs	r3, #15
 8001046:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001048:	2302      	movs	r3, #2
 800104a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	2102      	movs	r1, #2
 8001060:	4618      	mov	r0, r3
 8001062:	f001 fd9d 	bl	8002ba0 <HAL_RCC_ClockConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	bf14      	ite	ne
 800106c:	2301      	movne	r3, #1
 800106e:	2300      	moveq	r3, #0
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001076:	f000 f816 	bl	80010a6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800107a:	2320      	movs	r3, #32
 800107c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	4618      	mov	r0, r3
 8001086:	f001 ff71 	bl	8002f6c <HAL_RCCEx_PeriphCLKConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	bf14      	ite	ne
 8001090:	2301      	movne	r3, #1
 8001092:	2300      	moveq	r3, #0
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 800109a:	f000 f804 	bl	80010a6 <Error_Handler>
  }
}
 800109e:	bf00      	nop
 80010a0:	3758      	adds	r7, #88	; 0x58
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <_Z41__static_initialization_and_destruction_0ii>:
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d107      	bne.n	80010d4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d102      	bne.n	80010d4 <_Z41__static_initialization_and_destruction_0ii+0x20>
static AppMain appMain;
 80010ce:	4803      	ldr	r0, [pc, #12]	; (80010dc <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80010d0:	f7ff f87a 	bl	80001c8 <_ZN7AppMainC1Ev>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000028 	.word	0x20000028

080010e0 <_GLOBAL__sub_I_main>:
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010e8:	2001      	movs	r0, #1
 80010ea:	f7ff ffe3 	bl	80010b4 <_Z41__static_initialization_and_destruction_0ii>
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <HAL_MspInit+0x44>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <HAL_MspInit+0x44>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6193      	str	r3, [r2, #24]
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <HAL_MspInit+0x44>)
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_MspInit+0x44>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	4a08      	ldr	r2, [pc, #32]	; (8001134 <HAL_MspInit+0x44>)
 8001114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001118:	61d3      	str	r3, [r2, #28]
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_MspInit+0x44>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000

08001138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <HardFault_Handler+0x4>

0800114c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <MemManage_Handler+0x4>

08001152 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001156:	e7fe      	b.n	8001156 <BusFault_Handler+0x4>

08001158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800115c:	e7fe      	b.n	800115c <UsageFault_Handler+0x4>

0800115e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118c:	f000 fa28 	bl	80015e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}

08001194 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <SystemInit+0x28>)
 800119a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800119e:	4a07      	ldr	r2, [pc, #28]	; (80011bc <SystemInit+0x28>)
 80011a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <SystemInit+0x28>)
 80011aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011ae:	609a      	str	r2, [r3, #8]
#endif
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <_ZN11ScreensaverC1EP10ImgControl>:

#include "Screensaver.h"



Screensaver::Screensaver(ImgControl *imgControl){
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
	this->imgControl = imgControl;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	601a      	str	r2, [r3, #0]
	posCounter_y = startPos_y;		//reset position counter
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7ada      	ldrb	r2, [r3, #11]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	725a      	strb	r2, [r3, #9]
	posCounter_x = startPos_x;		//reset position counter
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7a9a      	ldrb	r2, [r3, #10]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	721a      	strb	r2, [r3, #8]
	shapeHeight = 10;	//set shape size to default
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	220a      	movs	r2, #10
 80011e4:	71da      	strb	r2, [r3, #7]
	shapeWidth = 30;	//set shape size to default
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	221e      	movs	r2, #30
 80011ea:	719a      	strb	r2, [r3, #6]
}
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4618      	mov	r0, r3
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <_ZN11Screensaver12setShapeSizeEhh>:
	currentState = s1;	//reset currentState
	nextState = s1;		//reset nextState
	imgControl->clearMirror();	//clear LCD graphic
}

void Screensaver::setShapeSize(uint8_t width, uint8_t height){
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	460b      	mov	r3, r1
 8001204:	70fb      	strb	r3, [r7, #3]
 8001206:	4613      	mov	r3, r2
 8001208:	70bb      	strb	r3, [r7, #2]
	shapeHeight = height;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	78ba      	ldrb	r2, [r7, #2]
 800120e:	71da      	strb	r2, [r3, #7]
	shapeWidth = width;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	78fa      	ldrb	r2, [r7, #3]
 8001214:	719a      	strb	r2, [r3, #6]
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <_ZN11Screensaver11setStartPosEhh>:

void Screensaver::setStartPos(uint8_t x, uint8_t y){
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	460b      	mov	r3, r1
 800122c:	70fb      	strb	r3, [r7, #3]
 800122e:	4613      	mov	r3, r2
 8001230:	70bb      	strb	r3, [r7, #2]
	startPos_x = y;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	78ba      	ldrb	r2, [r7, #2]
 8001236:	729a      	strb	r2, [r3, #10]
	startPos_y = x;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	78fa      	ldrb	r2, [r7, #3]
 800123c:	72da      	strb	r2, [r3, #11]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <_ZN11Screensaver11screensaverEv>:


void Screensaver::screensaver(void){
 800124c:	b5b0      	push	{r4, r5, r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af02      	add	r7, sp, #8
 8001252:	6078      	str	r0, [r7, #4]

	currentState = nextState;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	795a      	ldrb	r2, [r3, #5]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	711a      	strb	r2, [r3, #4]

	switch(currentState){
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	791b      	ldrb	r3, [r3, #4]
 8001260:	2b08      	cmp	r3, #8
 8001262:	f200 8125 	bhi.w	80014b0 <_ZN11Screensaver11screensaverEv+0x264>
 8001266:	a201      	add	r2, pc, #4	; (adr r2, 800126c <_ZN11Screensaver11screensaverEv+0x20>)
 8001268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800126c:	08001291 	.word	0x08001291
 8001270:	080012a9 	.word	0x080012a9
 8001274:	080012eb 	.word	0x080012eb
 8001278:	08001323 	.word	0x08001323
 800127c:	0800135b 	.word	0x0800135b
 8001280:	0800139d 	.word	0x0800139d
 8001284:	080013dd 	.word	0x080013dd
 8001288:	08001427 	.word	0x08001427
 800128c:	08001471 	.word	0x08001471
	case s1:
		posCounter_y = startPos_y;		//reset position counter
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	7ada      	ldrb	r2, [r3, #11]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	725a      	strb	r2, [r3, #9]
		posCounter_x = startPos_x;		//reset position counter
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7a9a      	ldrb	r2, [r3, #10]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	721a      	strb	r2, [r3, #8]
		nextState = s7;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2206      	movs	r2, #6
 80012a4:	715a      	strb	r2, [r3, #5]
		break;
 80012a6:	e116      	b.n	80014d6 <_ZN11Screensaver11screensaverEv+0x28a>
	case s2:
		posCounter_x++;		//reset position counter
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7a1b      	ldrb	r3, [r3, #8]
 80012ac:	3301      	adds	r3, #1
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	721a      	strb	r2, [r3, #8]
		posCounter_y--;		//reset position counter
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	7a5b      	ldrb	r3, [r3, #9]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	725a      	strb	r2, [r3, #9]
		if(posCounter_x == LCD_WIDTH_PX-shapeWidth){
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	7a1b      	ldrb	r3, [r3, #8]
 80012c4:	461a      	mov	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	799b      	ldrb	r3, [r3, #6]
 80012ca:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d102      	bne.n	80012d8 <_ZN11Screensaver11screensaverEv+0x8c>
			nextState = s4;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2203      	movs	r2, #3
 80012d6:	715a      	strb	r2, [r3, #5]
		}
		if(posCounter_y == 0){
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	7a5b      	ldrb	r3, [r3, #9]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f040 80eb 	bne.w	80014b8 <_ZN11Screensaver11screensaverEv+0x26c>
			nextState = s7;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2206      	movs	r2, #6
 80012e6:	715a      	strb	r2, [r3, #5]
		}
		break;
 80012e8:	e0e6      	b.n	80014b8 <_ZN11Screensaver11screensaverEv+0x26c>
	case s3:
		posCounter_x--;		//reset position counter
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	7a1b      	ldrb	r3, [r3, #8]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	721a      	strb	r2, [r3, #8]
		posCounter_y--;		//reset position counter
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	7a5b      	ldrb	r3, [r3, #9]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	725a      	strb	r2, [r3, #9]
		if(posCounter_x == 0){
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	7a1b      	ldrb	r3, [r3, #8]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <_ZN11Screensaver11screensaverEv+0xc4>
			nextState = s9;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2208      	movs	r2, #8
 800130e:	715a      	strb	r2, [r3, #5]
		}
		if(posCounter_y == 0){
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7a5b      	ldrb	r3, [r3, #9]
 8001314:	2b00      	cmp	r3, #0
 8001316:	f040 80d1 	bne.w	80014bc <_ZN11Screensaver11screensaverEv+0x270>
			nextState = s6;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2205      	movs	r2, #5
 800131e:	715a      	strb	r2, [r3, #5]
		}
		break;
 8001320:	e0cc      	b.n	80014bc <_ZN11Screensaver11screensaverEv+0x270>
	case s4:
		posCounter_x--;		//reset position counter
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	7a1b      	ldrb	r3, [r3, #8]
 8001326:	3b01      	subs	r3, #1
 8001328:	b2da      	uxtb	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	721a      	strb	r2, [r3, #8]
		posCounter_y--;		//reset position counter
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7a5b      	ldrb	r3, [r3, #9]
 8001332:	3b01      	subs	r3, #1
 8001334:	b2da      	uxtb	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	725a      	strb	r2, [r3, #9]
		if(posCounter_x == 0){
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	7a1b      	ldrb	r3, [r3, #8]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d102      	bne.n	8001348 <_ZN11Screensaver11screensaverEv+0xfc>
			nextState = s9;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2208      	movs	r2, #8
 8001346:	715a      	strb	r2, [r3, #5]
		}
		if(posCounter_y == 0){
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	7a5b      	ldrb	r3, [r3, #9]
 800134c:	2b00      	cmp	r3, #0
 800134e:	f040 80b7 	bne.w	80014c0 <_ZN11Screensaver11screensaverEv+0x274>
			nextState = s6;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2205      	movs	r2, #5
 8001356:	715a      	strb	r2, [r3, #5]
		}
		break;
 8001358:	e0b2      	b.n	80014c0 <_ZN11Screensaver11screensaverEv+0x274>
	case s5:
		posCounter_x--;		//reset position counter
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7a1b      	ldrb	r3, [r3, #8]
 800135e:	3b01      	subs	r3, #1
 8001360:	b2da      	uxtb	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	721a      	strb	r2, [r3, #8]
		posCounter_y++;		//reset position counter
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7a5b      	ldrb	r3, [r3, #9]
 800136a:	3301      	adds	r3, #1
 800136c:	b2da      	uxtb	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	725a      	strb	r2, [r3, #9]
		if(posCounter_x == 0){
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	7a1b      	ldrb	r3, [r3, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d102      	bne.n	8001380 <_ZN11Screensaver11screensaverEv+0x134>
			nextState = s8;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2207      	movs	r2, #7
 800137e:	715a      	strb	r2, [r3, #5]
		}
		if(posCounter_y == LCD_HEIGHT_PX-shapeHeight){
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7a5b      	ldrb	r3, [r3, #9]
 8001384:	461a      	mov	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	79db      	ldrb	r3, [r3, #7]
 800138a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800138e:	429a      	cmp	r2, r3
 8001390:	f040 8098 	bne.w	80014c4 <_ZN11Screensaver11screensaverEv+0x278>
			nextState = s3;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2202      	movs	r2, #2
 8001398:	715a      	strb	r2, [r3, #5]
		}
		break;
 800139a:	e093      	b.n	80014c4 <_ZN11Screensaver11screensaverEv+0x278>
	case s6:
		posCounter_x--;		//reset position counter
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	7a1b      	ldrb	r3, [r3, #8]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	721a      	strb	r2, [r3, #8]
		posCounter_y++;		//reset position counter
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7a5b      	ldrb	r3, [r3, #9]
 80013ac:	3301      	adds	r3, #1
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	725a      	strb	r2, [r3, #9]
		if(posCounter_x == 0){
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	7a1b      	ldrb	r3, [r3, #8]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d102      	bne.n	80013c2 <_ZN11Screensaver11screensaverEv+0x176>
			nextState = s8;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2207      	movs	r2, #7
 80013c0:	715a      	strb	r2, [r3, #5]
		}
		if(posCounter_y == LCD_HEIGHT_PX-shapeHeight){
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	7a5b      	ldrb	r3, [r3, #9]
 80013c6:	461a      	mov	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	79db      	ldrb	r3, [r3, #7]
 80013cc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d179      	bne.n	80014c8 <_ZN11Screensaver11screensaverEv+0x27c>
			nextState = s3;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2202      	movs	r2, #2
 80013d8:	715a      	strb	r2, [r3, #5]
		}

		break;
 80013da:	e075      	b.n	80014c8 <_ZN11Screensaver11screensaverEv+0x27c>
	case s7:
		posCounter_x++;		//reset position counter
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7a1b      	ldrb	r3, [r3, #8]
 80013e0:	3301      	adds	r3, #1
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	721a      	strb	r2, [r3, #8]
		posCounter_y++;		//reset position counter
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	7a5b      	ldrb	r3, [r3, #9]
 80013ec:	3301      	adds	r3, #1
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	725a      	strb	r2, [r3, #9]
		if(posCounter_x == LCD_WIDTH_PX-shapeWidth){
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7a1b      	ldrb	r3, [r3, #8]
 80013f8:	461a      	mov	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	799b      	ldrb	r3, [r3, #6]
 80013fe:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001402:	429a      	cmp	r2, r3
 8001404:	d102      	bne.n	800140c <_ZN11Screensaver11screensaverEv+0x1c0>
			nextState = s5;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2204      	movs	r2, #4
 800140a:	715a      	strb	r2, [r3, #5]
		}
		if(posCounter_y == LCD_HEIGHT_PX-shapeHeight){
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7a5b      	ldrb	r3, [r3, #9]
 8001410:	461a      	mov	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	79db      	ldrb	r3, [r3, #7]
 8001416:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800141a:	429a      	cmp	r2, r3
 800141c:	d156      	bne.n	80014cc <_ZN11Screensaver11screensaverEv+0x280>
			nextState = s2;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	715a      	strb	r2, [r3, #5]
		}
		break;
 8001424:	e052      	b.n	80014cc <_ZN11Screensaver11screensaverEv+0x280>
	case s8:
		posCounter_x++;		//reset position counter
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	7a1b      	ldrb	r3, [r3, #8]
 800142a:	3301      	adds	r3, #1
 800142c:	b2da      	uxtb	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	721a      	strb	r2, [r3, #8]
		posCounter_y++;		//reset position counter
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7a5b      	ldrb	r3, [r3, #9]
 8001436:	3301      	adds	r3, #1
 8001438:	b2da      	uxtb	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	725a      	strb	r2, [r3, #9]
		if(posCounter_x == LCD_WIDTH_PX-shapeWidth){
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	7a1b      	ldrb	r3, [r3, #8]
 8001442:	461a      	mov	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	799b      	ldrb	r3, [r3, #6]
 8001448:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800144c:	429a      	cmp	r2, r3
 800144e:	d102      	bne.n	8001456 <_ZN11Screensaver11screensaverEv+0x20a>
			nextState = s5;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2204      	movs	r2, #4
 8001454:	715a      	strb	r2, [r3, #5]
		}
		if(posCounter_y == LCD_HEIGHT_PX-shapeHeight){
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7a5b      	ldrb	r3, [r3, #9]
 800145a:	461a      	mov	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	79db      	ldrb	r3, [r3, #7]
 8001460:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001464:	429a      	cmp	r2, r3
 8001466:	d133      	bne.n	80014d0 <_ZN11Screensaver11screensaverEv+0x284>
			nextState = s2;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	715a      	strb	r2, [r3, #5]
		}
		break;
 800146e:	e02f      	b.n	80014d0 <_ZN11Screensaver11screensaverEv+0x284>
	case s9:
		posCounter_x++;		//reset position counter
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7a1b      	ldrb	r3, [r3, #8]
 8001474:	3301      	adds	r3, #1
 8001476:	b2da      	uxtb	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	721a      	strb	r2, [r3, #8]
		posCounter_y--;		//reset position counter
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	7a5b      	ldrb	r3, [r3, #9]
 8001480:	3b01      	subs	r3, #1
 8001482:	b2da      	uxtb	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	725a      	strb	r2, [r3, #9]
		if(posCounter_x == LCD_WIDTH_PX-shapeWidth){
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	7a1b      	ldrb	r3, [r3, #8]
 800148c:	461a      	mov	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	799b      	ldrb	r3, [r3, #6]
 8001492:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001496:	429a      	cmp	r2, r3
 8001498:	d102      	bne.n	80014a0 <_ZN11Screensaver11screensaverEv+0x254>
			nextState = s4;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2203      	movs	r2, #3
 800149e:	715a      	strb	r2, [r3, #5]
		}
		if(posCounter_y == 0){
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	7a5b      	ldrb	r3, [r3, #9]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d115      	bne.n	80014d4 <_ZN11Screensaver11screensaverEv+0x288>
			nextState = s7;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2206      	movs	r2, #6
 80014ac:	715a      	strb	r2, [r3, #5]
		}

		break;
 80014ae:	e011      	b.n	80014d4 <_ZN11Screensaver11screensaverEv+0x288>
	default:
		currentState = s1;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	711a      	strb	r2, [r3, #4]
		break;
 80014b6:	e00e      	b.n	80014d6 <_ZN11Screensaver11screensaverEv+0x28a>
		break;
 80014b8:	bf00      	nop
 80014ba:	e00c      	b.n	80014d6 <_ZN11Screensaver11screensaverEv+0x28a>
		break;
 80014bc:	bf00      	nop
 80014be:	e00a      	b.n	80014d6 <_ZN11Screensaver11screensaverEv+0x28a>
		break;
 80014c0:	bf00      	nop
 80014c2:	e008      	b.n	80014d6 <_ZN11Screensaver11screensaverEv+0x28a>
		break;
 80014c4:	bf00      	nop
 80014c6:	e006      	b.n	80014d6 <_ZN11Screensaver11screensaverEv+0x28a>
		break;
 80014c8:	bf00      	nop
 80014ca:	e004      	b.n	80014d6 <_ZN11Screensaver11screensaverEv+0x28a>
		break;
 80014cc:	bf00      	nop
 80014ce:	e002      	b.n	80014d6 <_ZN11Screensaver11screensaverEv+0x28a>
		break;
 80014d0:	bf00      	nop
 80014d2:	e000      	b.n	80014d6 <_ZN11Screensaver11screensaverEv+0x28a>
		break;
 80014d4:	bf00      	nop
	}

	imgControl->writeRectangle(posCounter_x, posCounter_y, shapeWidth, shapeHeight, 1);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6818      	ldr	r0, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	7a19      	ldrb	r1, [r3, #8]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7a5c      	ldrb	r4, [r3, #9]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	799d      	ldrb	r5, [r3, #6]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	79db      	ldrb	r3, [r3, #7]
 80014ea:	2201      	movs	r2, #1
 80014ec:	9201      	str	r2, [sp, #4]
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	462b      	mov	r3, r5
 80014f2:	4622      	mov	r2, r4
 80014f4:	f7fe fee5 	bl	80002c2 <_ZN10ImgControl14writeRectangleEhhhhh>
	//imgControl->writeScreenMirror();

}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bdb0      	pop	{r4, r5, r7, pc}

08001500 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001538 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001504:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001506:	e003      	b.n	8001510 <LoopCopyDataInit>

08001508 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800150a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800150c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800150e:	3104      	adds	r1, #4

08001510 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001510:	480b      	ldr	r0, [pc, #44]	; (8001540 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001514:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001516:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001518:	d3f6      	bcc.n	8001508 <CopyDataInit>
	ldr	r2, =_sbss
 800151a:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <LoopForever+0x12>)
	b	LoopFillZerobss
 800151c:	e002      	b.n	8001524 <LoopFillZerobss>

0800151e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800151e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001520:	f842 3b04 	str.w	r3, [r2], #4

08001524 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <LoopForever+0x16>)
	cmp	r2, r3
 8001526:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001528:	d3f9      	bcc.n	800151e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800152a:	f7ff fe33 	bl	8001194 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800152e:	f001 fe43 	bl	80031b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001532:	f7ff fd41 	bl	8000fb8 <main>

08001536 <LoopForever>:

LoopForever:
    b LoopForever
 8001536:	e7fe      	b.n	8001536 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001538:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800153c:	08003264 	.word	0x08003264
	ldr	r0, =_sdata
 8001540:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001544:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001548:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800154c:	20002098 	.word	0x20002098

08001550 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC1_2_IRQHandler>
	...

08001554 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_Init+0x28>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a07      	ldr	r2, [pc, #28]	; (800157c <HAL_Init+0x28>)
 800155e:	f043 0310 	orr.w	r3, r3, #16
 8001562:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001564:	2003      	movs	r0, #3
 8001566:	f000 f92f 	bl	80017c8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156a:	2000      	movs	r0, #0
 800156c:	f000 f808 	bl	8001580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001570:	f7ff fdbe 	bl	80010f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40022000 	.word	0x40022000

08001580 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_InitTick+0x54>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_InitTick+0x58>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001596:	fbb3 f3f1 	udiv	r3, r3, r1
 800159a:	fbb2 f3f3 	udiv	r3, r2, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 f939 	bl	8001816 <HAL_SYSTICK_Config>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00e      	b.n	80015cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d80a      	bhi.n	80015ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b4:	2200      	movs	r2, #0
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295
 80015bc:	f000 f90f 	bl	80017de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c0:	4a06      	ldr	r2, [pc, #24]	; (80015dc <HAL_InitTick+0x5c>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e000      	b.n	80015cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000000 	.word	0x20000000
 80015d8:	20000008 	.word	0x20000008
 80015dc:	20000004 	.word	0x20000004

080015e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_IncTick+0x20>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_IncTick+0x24>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	4a04      	ldr	r2, [pc, #16]	; (8001604 <HAL_IncTick+0x24>)
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000008 	.word	0x20000008
 8001604:	20002094 	.word	0x20002094

08001608 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;  
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <HAL_GetTick+0x14>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20002094 	.word	0x20002094

08001620 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001628:	f7ff ffee 	bl	8001608 <HAL_GetTick>
 800162c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001638:	d005      	beq.n	8001646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_Delay+0x40>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4413      	add	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001646:	bf00      	nop
 8001648:	f7ff ffde 	bl	8001608 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	429a      	cmp	r2, r3
 8001656:	d8f7      	bhi.n	8001648 <HAL_Delay+0x28>
  {
  }
}
 8001658:	bf00      	nop
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000008 	.word	0x20000008

08001664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001680:	4013      	ands	r3, r2
 8001682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800168c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001696:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	60d3      	str	r3, [r2, #12]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <__NVIC_GetPriorityGrouping+0x18>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	0a1b      	lsrs	r3, r3, #8
 80016b6:	f003 0307 	and.w	r3, r3, #7
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	6039      	str	r1, [r7, #0]
 80016d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	db0a      	blt.n	80016f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	490c      	ldr	r1, [pc, #48]	; (8001714 <__NVIC_SetPriority+0x4c>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	0112      	lsls	r2, r2, #4
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	440b      	add	r3, r1
 80016ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f0:	e00a      	b.n	8001708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4908      	ldr	r1, [pc, #32]	; (8001718 <__NVIC_SetPriority+0x50>)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	3b04      	subs	r3, #4
 8001700:	0112      	lsls	r2, r2, #4
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	440b      	add	r3, r1
 8001706:	761a      	strb	r2, [r3, #24]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000e100 	.word	0xe000e100
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f1c3 0307 	rsb	r3, r3, #7
 8001736:	2b04      	cmp	r3, #4
 8001738:	bf28      	it	cs
 800173a:	2304      	movcs	r3, #4
 800173c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3304      	adds	r3, #4
 8001742:	2b06      	cmp	r3, #6
 8001744:	d902      	bls.n	800174c <NVIC_EncodePriority+0x30>
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3b03      	subs	r3, #3
 800174a:	e000      	b.n	800174e <NVIC_EncodePriority+0x32>
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	f04f 32ff 	mov.w	r2, #4294967295
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	401a      	ands	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001764:	f04f 31ff 	mov.w	r1, #4294967295
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	43d9      	mvns	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	4313      	orrs	r3, r2
         );
}
 8001776:	4618      	mov	r0, r3
 8001778:	3724      	adds	r7, #36	; 0x24
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001794:	d301      	bcc.n	800179a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001796:	2301      	movs	r3, #1
 8001798:	e00f      	b.n	80017ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <SysTick_Config+0x40>)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a2:	210f      	movs	r1, #15
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295
 80017a8:	f7ff ff8e 	bl	80016c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <SysTick_Config+0x40>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b2:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <SysTick_Config+0x40>)
 80017b4:	2207      	movs	r2, #7
 80017b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	e000e010 	.word	0xe000e010

080017c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ff47 	bl	8001664 <__NVIC_SetPriorityGrouping>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b086      	sub	sp, #24
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f0:	f7ff ff5c 	bl	80016ac <__NVIC_GetPriorityGrouping>
 80017f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	68b9      	ldr	r1, [r7, #8]
 80017fa:	6978      	ldr	r0, [r7, #20]
 80017fc:	f7ff ff8e 	bl	800171c <NVIC_EncodePriority>
 8001800:	4602      	mov	r2, r0
 8001802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff5d 	bl	80016c8 <__NVIC_SetPriority>
}
 800180e:	bf00      	nop
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff ffb0 	bl	8001784 <SysTick_Config>
 8001824:	4603      	mov	r3, r0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001830:	b480      	push	{r7}
 8001832:	b087      	sub	sp, #28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800183e:	e14e      	b.n	8001ade <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	2101      	movs	r1, #1
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	4013      	ands	r3, r2
 800184e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 8140 	beq.w	8001ad8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x38>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b12      	cmp	r3, #18
 8001866:	d123      	bne.n	80018b0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	08da      	lsrs	r2, r3, #3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3208      	adds	r2, #8
 8001870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	220f      	movs	r2, #15
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	691a      	ldr	r2, [r3, #16]
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	08da      	lsrs	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3208      	adds	r2, #8
 80018aa:	6939      	ldr	r1, [r7, #16]
 80018ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	2203      	movs	r2, #3
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0203 	and.w	r2, r3, #3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d00b      	beq.n	8001904 <HAL_GPIO_Init+0xd4>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d007      	beq.n	8001904 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018f8:	2b11      	cmp	r3, #17
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b12      	cmp	r3, #18
 8001902:	d130      	bne.n	8001966 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	2203      	movs	r2, #3
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4313      	orrs	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800193a:	2201      	movs	r2, #1
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	091b      	lsrs	r3, r3, #4
 8001950:	f003 0201 	and.w	r2, r3, #1
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	2203      	movs	r2, #3
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 809a 	beq.w	8001ad8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a4:	4b55      	ldr	r3, [pc, #340]	; (8001afc <HAL_GPIO_Init+0x2cc>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	4a54      	ldr	r2, [pc, #336]	; (8001afc <HAL_GPIO_Init+0x2cc>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6193      	str	r3, [r2, #24]
 80019b0:	4b52      	ldr	r3, [pc, #328]	; (8001afc <HAL_GPIO_Init+0x2cc>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019bc:	4a50      	ldr	r2, [pc, #320]	; (8001b00 <HAL_GPIO_Init+0x2d0>)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	089b      	lsrs	r3, r3, #2
 80019c2:	3302      	adds	r3, #2
 80019c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	220f      	movs	r2, #15
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019e6:	d013      	beq.n	8001a10 <HAL_GPIO_Init+0x1e0>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a46      	ldr	r2, [pc, #280]	; (8001b04 <HAL_GPIO_Init+0x2d4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d00d      	beq.n	8001a0c <HAL_GPIO_Init+0x1dc>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a45      	ldr	r2, [pc, #276]	; (8001b08 <HAL_GPIO_Init+0x2d8>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d007      	beq.n	8001a08 <HAL_GPIO_Init+0x1d8>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a44      	ldr	r2, [pc, #272]	; (8001b0c <HAL_GPIO_Init+0x2dc>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d101      	bne.n	8001a04 <HAL_GPIO_Init+0x1d4>
 8001a00:	2303      	movs	r3, #3
 8001a02:	e006      	b.n	8001a12 <HAL_GPIO_Init+0x1e2>
 8001a04:	2305      	movs	r3, #5
 8001a06:	e004      	b.n	8001a12 <HAL_GPIO_Init+0x1e2>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e002      	b.n	8001a12 <HAL_GPIO_Init+0x1e2>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <HAL_GPIO_Init+0x1e2>
 8001a10:	2300      	movs	r3, #0
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	f002 0203 	and.w	r2, r2, #3
 8001a18:	0092      	lsls	r2, r2, #2
 8001a1a:	4093      	lsls	r3, r2
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a22:	4937      	ldr	r1, [pc, #220]	; (8001b00 <HAL_GPIO_Init+0x2d0>)
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	089b      	lsrs	r3, r3, #2
 8001a28:	3302      	adds	r3, #2
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a30:	4b37      	ldr	r3, [pc, #220]	; (8001b10 <HAL_GPIO_Init+0x2e0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a54:	4a2e      	ldr	r2, [pc, #184]	; (8001b10 <HAL_GPIO_Init+0x2e0>)
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a5a:	4b2d      	ldr	r3, [pc, #180]	; (8001b10 <HAL_GPIO_Init+0x2e0>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a7e:	4a24      	ldr	r2, [pc, #144]	; (8001b10 <HAL_GPIO_Init+0x2e0>)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a84:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <HAL_GPIO_Init+0x2e0>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001aa8:	4a19      	ldr	r2, [pc, #100]	; (8001b10 <HAL_GPIO_Init+0x2e0>)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <HAL_GPIO_Init+0x2e0>)
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ad2:	4a0f      	ldr	r2, [pc, #60]	; (8001b10 <HAL_GPIO_Init+0x2e0>)
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	3301      	adds	r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f47f aea9 	bne.w	8001840 <HAL_GPIO_Init+0x10>
  }
}
 8001aee:	bf00      	nop
 8001af0:	371c      	adds	r7, #28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40010000 	.word	0x40010000
 8001b04:	48000400 	.word	0x48000400
 8001b08:	48000800 	.word	0x48000800
 8001b0c:	48000c00 	.word	0x48000c00
 8001b10:	40010400 	.word	0x40010400

08001b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	807b      	strh	r3, [r7, #2]
 8001b20:	4613      	mov	r3, r2
 8001b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b24:	787b      	ldrb	r3, [r7, #1]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b2a:	887a      	ldrh	r2, [r7, #2]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b30:	e002      	b.n	8001b38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b32:	887a      	ldrh	r2, [r7, #2]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e081      	b.n	8001c5a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d106      	bne.n	8001b70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff f9e0 	bl	8000f30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2224      	movs	r2, #36	; 0x24
 8001b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 0201 	bic.w	r2, r2, #1
 8001b86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ba4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d107      	bne.n	8001bbe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	e006      	b.n	8001bcc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001bca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d104      	bne.n	8001bde <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bdc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bf0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691a      	ldr	r2, [r3, #16]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	ea42 0103 	orr.w	r1, r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	021a      	lsls	r2, r3, #8
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69d9      	ldr	r1, [r3, #28]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1a      	ldr	r2, [r3, #32]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0201 	orr.w	r2, r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2220      	movs	r2, #32
 8001c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b20      	cmp	r3, #32
 8001c76:	d138      	bne.n	8001cea <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d101      	bne.n	8001c86 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e032      	b.n	8001cec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2224      	movs	r2, #36	; 0x24
 8001c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0201 	bic.w	r2, r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cb4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6819      	ldr	r1, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 0201 	orr.w	r2, r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e000      	b.n	8001cec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001cea:	2302      	movs	r3, #2
  }
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b20      	cmp	r3, #32
 8001d0c:	d139      	bne.n	8001d82 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e033      	b.n	8001d84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2224      	movs	r2, #36	; 0x24
 8001d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d4a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 0201 	orr.w	r2, r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2220      	movs	r2, #32
 8001d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	e000      	b.n	8001d84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d82:	2302      	movs	r3, #2
  }
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d102      	bne.n	8001daa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	f000 bef4 	b.w	8002b92 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 816a 	beq.w	800208e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001dba:	4bb3      	ldr	r3, [pc, #716]	; (8002088 <HAL_RCC_OscConfig+0x2f8>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d00c      	beq.n	8001de0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dc6:	4bb0      	ldr	r3, [pc, #704]	; (8002088 <HAL_RCC_OscConfig+0x2f8>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d159      	bne.n	8001e86 <HAL_RCC_OscConfig+0xf6>
 8001dd2:	4bad      	ldr	r3, [pc, #692]	; (8002088 <HAL_RCC_OscConfig+0x2f8>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dde:	d152      	bne.n	8001e86 <HAL_RCC_OscConfig+0xf6>
 8001de0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001de4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001dec:	fa93 f3a3 	rbit	r3, r3
 8001df0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001df4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df8:	fab3 f383 	clz	r3, r3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d102      	bne.n	8001e12 <HAL_RCC_OscConfig+0x82>
 8001e0c:	4b9e      	ldr	r3, [pc, #632]	; (8002088 <HAL_RCC_OscConfig+0x2f8>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	e015      	b.n	8001e3e <HAL_RCC_OscConfig+0xae>
 8001e12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e16:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001e1e:	fa93 f3a3 	rbit	r3, r3
 8001e22:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e2a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001e2e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e32:	fa93 f3a3 	rbit	r3, r3
 8001e36:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001e3a:	4b93      	ldr	r3, [pc, #588]	; (8002088 <HAL_RCC_OscConfig+0x2f8>)
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e42:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001e46:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001e4a:	fa92 f2a2 	rbit	r2, r2
 8001e4e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001e52:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001e56:	fab2 f282 	clz	r2, r2
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	f042 0220 	orr.w	r2, r2, #32
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	f002 021f 	and.w	r2, r2, #31
 8001e66:	2101      	movs	r1, #1
 8001e68:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 810c 	beq.w	800208c <HAL_RCC_OscConfig+0x2fc>
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f040 8106 	bne.w	800208c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	f000 be86 	b.w	8002b92 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e90:	d106      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x110>
 8001e92:	4b7d      	ldr	r3, [pc, #500]	; (8002088 <HAL_RCC_OscConfig+0x2f8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a7c      	ldr	r2, [pc, #496]	; (8002088 <HAL_RCC_OscConfig+0x2f8>)
 8001e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	e030      	b.n	8001f02 <HAL_RCC_OscConfig+0x172>
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x134>
 8001eaa:	4b77      	ldr	r3, [pc, #476]	; (8002088 <HAL_RCC_OscConfig+0x2f8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a76      	ldr	r2, [pc, #472]	; (8002088 <HAL_RCC_OscConfig+0x2f8>)
 8001eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	4b74      	ldr	r3, [pc, #464]	; (8002088 <HAL_RCC_OscConfig+0x2f8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a73      	ldr	r2, [pc, #460]	; (8002088 <HAL_RCC_OscConfig+0x2f8>)
 8001ebc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e01e      	b.n	8001f02 <HAL_RCC_OscConfig+0x172>
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ece:	d10c      	bne.n	8001eea <HAL_RCC_OscConfig+0x15a>
 8001ed0:	4b6d      	ldr	r3, [pc, #436]	; (8002088 <HAL_RCC_OscConfig+0x2f8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a6c      	ldr	r2, [pc, #432]	; (8002088 <HAL_RCC_OscConfig+0x2f8>)
 8001ed6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	4b6a      	ldr	r3, [pc, #424]	; (8002088 <HAL_RCC_OscConfig+0x2f8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a69      	ldr	r2, [pc, #420]	; (8002088 <HAL_RCC_OscConfig+0x2f8>)
 8001ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	e00b      	b.n	8001f02 <HAL_RCC_OscConfig+0x172>
 8001eea:	4b67      	ldr	r3, [pc, #412]	; (8002088 <HAL_RCC_OscConfig+0x2f8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a66      	ldr	r2, [pc, #408]	; (8002088 <HAL_RCC_OscConfig+0x2f8>)
 8001ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	4b64      	ldr	r3, [pc, #400]	; (8002088 <HAL_RCC_OscConfig+0x2f8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a63      	ldr	r2, [pc, #396]	; (8002088 <HAL_RCC_OscConfig+0x2f8>)
 8001efc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f00:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f02:	4b61      	ldr	r3, [pc, #388]	; (8002088 <HAL_RCC_OscConfig+0x2f8>)
 8001f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f06:	f023 020f 	bic.w	r2, r3, #15
 8001f0a:	1d3b      	adds	r3, r7, #4
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	495d      	ldr	r1, [pc, #372]	; (8002088 <HAL_RCC_OscConfig+0x2f8>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d059      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7ff fb72 	bl	8001608 <HAL_GetTick>
 8001f24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f28:	e00a      	b.n	8001f40 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f2a:	f7ff fb6d 	bl	8001608 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	; 0x64
 8001f38:	d902      	bls.n	8001f40 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	f000 be29 	b.w	8002b92 <HAL_RCC_OscConfig+0xe02>
 8001f40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f44:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f48:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001f54:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f58:	fab3 f383 	clz	r3, r3
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d102      	bne.n	8001f72 <HAL_RCC_OscConfig+0x1e2>
 8001f6c:	4b46      	ldr	r3, [pc, #280]	; (8002088 <HAL_RCC_OscConfig+0x2f8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	e015      	b.n	8001f9e <HAL_RCC_OscConfig+0x20e>
 8001f72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f76:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001f7e:	fa93 f3a3 	rbit	r3, r3
 8001f82:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f8a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f8e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001f9a:	4b3b      	ldr	r3, [pc, #236]	; (8002088 <HAL_RCC_OscConfig+0x2f8>)
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fa2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001fa6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001faa:	fa92 f2a2 	rbit	r2, r2
 8001fae:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001fb2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001fb6:	fab2 f282 	clz	r2, r2
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	f042 0220 	orr.w	r2, r2, #32
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	f002 021f 	and.w	r2, r2, #31
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0ab      	beq.n	8001f2a <HAL_RCC_OscConfig+0x19a>
 8001fd2:	e05c      	b.n	800208e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7ff fb18 	bl	8001608 <HAL_GetTick>
 8001fd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fdc:	e00a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fde:	f7ff fb13 	bl	8001608 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b64      	cmp	r3, #100	; 0x64
 8001fec:	d902      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	f000 bdcf 	b.w	8002b92 <HAL_RCC_OscConfig+0xe02>
 8001ff4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002000:	fa93 f3a3 	rbit	r3, r3
 8002004:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002008:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200c:	fab3 f383 	clz	r3, r3
 8002010:	b2db      	uxtb	r3, r3
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	b2db      	uxtb	r3, r3
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d102      	bne.n	8002026 <HAL_RCC_OscConfig+0x296>
 8002020:	4b19      	ldr	r3, [pc, #100]	; (8002088 <HAL_RCC_OscConfig+0x2f8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	e015      	b.n	8002052 <HAL_RCC_OscConfig+0x2c2>
 8002026:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800202a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800203a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800203e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002042:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800204e:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <HAL_RCC_OscConfig+0x2f8>)
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002056:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800205a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800205e:	fa92 f2a2 	rbit	r2, r2
 8002062:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002066:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800206a:	fab2 f282 	clz	r2, r2
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	f042 0220 	orr.w	r2, r2, #32
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	f002 021f 	and.w	r2, r2, #31
 800207a:	2101      	movs	r1, #1
 800207c:	fa01 f202 	lsl.w	r2, r1, r2
 8002080:	4013      	ands	r3, r2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1ab      	bne.n	8001fde <HAL_RCC_OscConfig+0x24e>
 8002086:	e002      	b.n	800208e <HAL_RCC_OscConfig+0x2fe>
 8002088:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800208c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 816f 	beq.w	800237c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800209e:	4bd0      	ldr	r3, [pc, #832]	; (80023e0 <HAL_RCC_OscConfig+0x650>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00b      	beq.n	80020c2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020aa:	4bcd      	ldr	r3, [pc, #820]	; (80023e0 <HAL_RCC_OscConfig+0x650>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d16c      	bne.n	8002190 <HAL_RCC_OscConfig+0x400>
 80020b6:	4bca      	ldr	r3, [pc, #808]	; (80023e0 <HAL_RCC_OscConfig+0x650>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d166      	bne.n	8002190 <HAL_RCC_OscConfig+0x400>
 80020c2:	2302      	movs	r3, #2
 80020c4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80020cc:	fa93 f3a3 	rbit	r3, r3
 80020d0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80020d4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d8:	fab3 f383 	clz	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d102      	bne.n	80020f2 <HAL_RCC_OscConfig+0x362>
 80020ec:	4bbc      	ldr	r3, [pc, #752]	; (80023e0 <HAL_RCC_OscConfig+0x650>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	e013      	b.n	800211a <HAL_RCC_OscConfig+0x38a>
 80020f2:	2302      	movs	r3, #2
 80020f4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80020fc:	fa93 f3a3 	rbit	r3, r3
 8002100:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002104:	2302      	movs	r3, #2
 8002106:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800210a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002116:	4bb2      	ldr	r3, [pc, #712]	; (80023e0 <HAL_RCC_OscConfig+0x650>)
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	2202      	movs	r2, #2
 800211c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002120:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002124:	fa92 f2a2 	rbit	r2, r2
 8002128:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800212c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002130:	fab2 f282 	clz	r2, r2
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	f042 0220 	orr.w	r2, r2, #32
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	f002 021f 	and.w	r2, r2, #31
 8002140:	2101      	movs	r1, #1
 8002142:	fa01 f202 	lsl.w	r2, r1, r2
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d007      	beq.n	800215c <HAL_RCC_OscConfig+0x3cc>
 800214c:	1d3b      	adds	r3, r7, #4
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d002      	beq.n	800215c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	f000 bd1b 	b.w	8002b92 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215c:	4ba0      	ldr	r3, [pc, #640]	; (80023e0 <HAL_RCC_OscConfig+0x650>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	21f8      	movs	r1, #248	; 0xf8
 800216c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002174:	fa91 f1a1 	rbit	r1, r1
 8002178:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800217c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002180:	fab1 f181 	clz	r1, r1
 8002184:	b2c9      	uxtb	r1, r1
 8002186:	408b      	lsls	r3, r1
 8002188:	4995      	ldr	r1, [pc, #596]	; (80023e0 <HAL_RCC_OscConfig+0x650>)
 800218a:	4313      	orrs	r3, r2
 800218c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218e:	e0f5      	b.n	800237c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002190:	1d3b      	adds	r3, r7, #4
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8085 	beq.w	80022a6 <HAL_RCC_OscConfig+0x516>
 800219c:	2301      	movs	r3, #1
 800219e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80021ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b2:	fab3 f383 	clz	r3, r3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	461a      	mov	r2, r3
 80021c4:	2301      	movs	r3, #1
 80021c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7ff fa1e 	bl	8001608 <HAL_GetTick>
 80021cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d0:	e00a      	b.n	80021e8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021d2:	f7ff fa19 	bl	8001608 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d902      	bls.n	80021e8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	f000 bcd5 	b.w	8002b92 <HAL_RCC_OscConfig+0xe02>
 80021e8:	2302      	movs	r3, #2
 80021ea:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80021fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fe:	fab3 f383 	clz	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	095b      	lsrs	r3, r3, #5
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b01      	cmp	r3, #1
 8002210:	d102      	bne.n	8002218 <HAL_RCC_OscConfig+0x488>
 8002212:	4b73      	ldr	r3, [pc, #460]	; (80023e0 <HAL_RCC_OscConfig+0x650>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	e013      	b.n	8002240 <HAL_RCC_OscConfig+0x4b0>
 8002218:	2302      	movs	r3, #2
 800221a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002222:	fa93 f3a3 	rbit	r3, r3
 8002226:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800222a:	2302      	movs	r3, #2
 800222c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002230:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002234:	fa93 f3a3 	rbit	r3, r3
 8002238:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800223c:	4b68      	ldr	r3, [pc, #416]	; (80023e0 <HAL_RCC_OscConfig+0x650>)
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	2202      	movs	r2, #2
 8002242:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002246:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800224a:	fa92 f2a2 	rbit	r2, r2
 800224e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002252:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002256:	fab2 f282 	clz	r2, r2
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	f042 0220 	orr.w	r2, r2, #32
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	f002 021f 	and.w	r2, r2, #31
 8002266:	2101      	movs	r1, #1
 8002268:	fa01 f202 	lsl.w	r2, r1, r2
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0af      	beq.n	80021d2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002272:	4b5b      	ldr	r3, [pc, #364]	; (80023e0 <HAL_RCC_OscConfig+0x650>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800227a:	1d3b      	adds	r3, r7, #4
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	21f8      	movs	r1, #248	; 0xf8
 8002282:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800228a:	fa91 f1a1 	rbit	r1, r1
 800228e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002292:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002296:	fab1 f181 	clz	r1, r1
 800229a:	b2c9      	uxtb	r1, r1
 800229c:	408b      	lsls	r3, r1
 800229e:	4950      	ldr	r1, [pc, #320]	; (80023e0 <HAL_RCC_OscConfig+0x650>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	600b      	str	r3, [r1, #0]
 80022a4:	e06a      	b.n	800237c <HAL_RCC_OscConfig+0x5ec>
 80022a6:	2301      	movs	r3, #1
 80022a8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80022b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022bc:	fab3 f383 	clz	r3, r3
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	461a      	mov	r2, r3
 80022ce:	2300      	movs	r3, #0
 80022d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d2:	f7ff f999 	bl	8001608 <HAL_GetTick>
 80022d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022dc:	f7ff f994 	bl	8001608 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d902      	bls.n	80022f2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	f000 bc50 	b.w	8002b92 <HAL_RCC_OscConfig+0xe02>
 80022f2:	2302      	movs	r3, #2
 80022f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002308:	fab3 f383 	clz	r3, r3
 800230c:	b2db      	uxtb	r3, r3
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d102      	bne.n	8002322 <HAL_RCC_OscConfig+0x592>
 800231c:	4b30      	ldr	r3, [pc, #192]	; (80023e0 <HAL_RCC_OscConfig+0x650>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	e013      	b.n	800234a <HAL_RCC_OscConfig+0x5ba>
 8002322:	2302      	movs	r3, #2
 8002324:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002334:	2302      	movs	r3, #2
 8002336:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800233a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800233e:	fa93 f3a3 	rbit	r3, r3
 8002342:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002346:	4b26      	ldr	r3, [pc, #152]	; (80023e0 <HAL_RCC_OscConfig+0x650>)
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	2202      	movs	r2, #2
 800234c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002350:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002354:	fa92 f2a2 	rbit	r2, r2
 8002358:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800235c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002360:	fab2 f282 	clz	r2, r2
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	f042 0220 	orr.w	r2, r2, #32
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	f002 021f 	and.w	r2, r2, #31
 8002370:	2101      	movs	r1, #1
 8002372:	fa01 f202 	lsl.w	r2, r1, r2
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1af      	bne.n	80022dc <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 80da 	beq.w	8002540 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d069      	beq.n	800246a <HAL_RCC_OscConfig+0x6da>
 8002396:	2301      	movs	r3, #1
 8002398:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80023a0:	fa93 f3a3 	rbit	r3, r3
 80023a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80023a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ac:	fab3 f383 	clz	r3, r3
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	461a      	mov	r2, r3
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_RCC_OscConfig+0x654>)
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	461a      	mov	r2, r3
 80023bc:	2301      	movs	r3, #1
 80023be:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c0:	f7ff f922 	bl	8001608 <HAL_GetTick>
 80023c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c8:	e00e      	b.n	80023e8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ca:	f7ff f91d 	bl	8001608 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d906      	bls.n	80023e8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e3d9      	b.n	8002b92 <HAL_RCC_OscConfig+0xe02>
 80023de:	bf00      	nop
 80023e0:	40021000 	.word	0x40021000
 80023e4:	10908120 	.word	0x10908120
 80023e8:	2302      	movs	r3, #2
 80023ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80023f2:	fa93 f3a3 	rbit	r3, r3
 80023f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80023fa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80023fe:	2202      	movs	r2, #2
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	fa93 f2a3 	rbit	r2, r3
 800240c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002416:	2202      	movs	r2, #2
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	fa93 f2a3 	rbit	r2, r3
 8002424:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002428:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242a:	4ba5      	ldr	r3, [pc, #660]	; (80026c0 <HAL_RCC_OscConfig+0x930>)
 800242c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800242e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002432:	2102      	movs	r1, #2
 8002434:	6019      	str	r1, [r3, #0]
 8002436:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	fa93 f1a3 	rbit	r1, r3
 8002440:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002444:	6019      	str	r1, [r3, #0]
  return result;
 8002446:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	fab3 f383 	clz	r3, r3
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002456:	b2db      	uxtb	r3, r3
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	2101      	movs	r1, #1
 800245e:	fa01 f303 	lsl.w	r3, r1, r3
 8002462:	4013      	ands	r3, r2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0b0      	beq.n	80023ca <HAL_RCC_OscConfig+0x63a>
 8002468:	e06a      	b.n	8002540 <HAL_RCC_OscConfig+0x7b0>
 800246a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	fa93 f2a3 	rbit	r2, r3
 800247c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002480:	601a      	str	r2, [r3, #0]
  return result;
 8002482:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002486:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002488:	fab3 f383 	clz	r3, r3
 800248c:	b2db      	uxtb	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	4b8c      	ldr	r3, [pc, #560]	; (80026c4 <HAL_RCC_OscConfig+0x934>)
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	461a      	mov	r2, r3
 8002498:	2300      	movs	r3, #0
 800249a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249c:	f7ff f8b4 	bl	8001608 <HAL_GetTick>
 80024a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a4:	e009      	b.n	80024ba <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024a6:	f7ff f8af 	bl	8001608 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e36b      	b.n	8002b92 <HAL_RCC_OscConfig+0xe02>
 80024ba:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80024be:	2202      	movs	r2, #2
 80024c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	fa93 f2a3 	rbit	r2, r3
 80024cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80024d6:	2202      	movs	r2, #2
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	fa93 f2a3 	rbit	r2, r3
 80024e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80024ee:	2202      	movs	r2, #2
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	fa93 f2a3 	rbit	r2, r3
 80024fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002500:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002502:	4b6f      	ldr	r3, [pc, #444]	; (80026c0 <HAL_RCC_OscConfig+0x930>)
 8002504:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002506:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800250a:	2102      	movs	r1, #2
 800250c:	6019      	str	r1, [r3, #0]
 800250e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	fa93 f1a3 	rbit	r1, r3
 8002518:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800251c:	6019      	str	r1, [r3, #0]
  return result;
 800251e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	fab3 f383 	clz	r3, r3
 8002528:	b2db      	uxtb	r3, r3
 800252a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800252e:	b2db      	uxtb	r3, r3
 8002530:	f003 031f 	and.w	r3, r3, #31
 8002534:	2101      	movs	r1, #1
 8002536:	fa01 f303 	lsl.w	r3, r1, r3
 800253a:	4013      	ands	r3, r2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1b2      	bne.n	80024a6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002540:	1d3b      	adds	r3, r7, #4
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 8158 	beq.w	8002800 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002550:	2300      	movs	r3, #0
 8002552:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002556:	4b5a      	ldr	r3, [pc, #360]	; (80026c0 <HAL_RCC_OscConfig+0x930>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d112      	bne.n	8002588 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002562:	4b57      	ldr	r3, [pc, #348]	; (80026c0 <HAL_RCC_OscConfig+0x930>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	4a56      	ldr	r2, [pc, #344]	; (80026c0 <HAL_RCC_OscConfig+0x930>)
 8002568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800256c:	61d3      	str	r3, [r2, #28]
 800256e:	4b54      	ldr	r3, [pc, #336]	; (80026c0 <HAL_RCC_OscConfig+0x930>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002576:	f107 0308 	add.w	r3, r7, #8
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	f107 0308 	add.w	r3, r7, #8
 8002580:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002582:	2301      	movs	r3, #1
 8002584:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002588:	4b4f      	ldr	r3, [pc, #316]	; (80026c8 <HAL_RCC_OscConfig+0x938>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002590:	2b00      	cmp	r3, #0
 8002592:	d11a      	bne.n	80025ca <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002594:	4b4c      	ldr	r3, [pc, #304]	; (80026c8 <HAL_RCC_OscConfig+0x938>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a4b      	ldr	r2, [pc, #300]	; (80026c8 <HAL_RCC_OscConfig+0x938>)
 800259a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a0:	f7ff f832 	bl	8001608 <HAL_GetTick>
 80025a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a8:	e009      	b.n	80025be <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025aa:	f7ff f82d 	bl	8001608 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b64      	cmp	r3, #100	; 0x64
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e2e9      	b.n	8002b92 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025be:	4b42      	ldr	r3, [pc, #264]	; (80026c8 <HAL_RCC_OscConfig+0x938>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0ef      	beq.n	80025aa <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ca:	1d3b      	adds	r3, r7, #4
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d106      	bne.n	80025e2 <HAL_RCC_OscConfig+0x852>
 80025d4:	4b3a      	ldr	r3, [pc, #232]	; (80026c0 <HAL_RCC_OscConfig+0x930>)
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	4a39      	ldr	r2, [pc, #228]	; (80026c0 <HAL_RCC_OscConfig+0x930>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6213      	str	r3, [r2, #32]
 80025e0:	e02f      	b.n	8002642 <HAL_RCC_OscConfig+0x8b2>
 80025e2:	1d3b      	adds	r3, r7, #4
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10c      	bne.n	8002606 <HAL_RCC_OscConfig+0x876>
 80025ec:	4b34      	ldr	r3, [pc, #208]	; (80026c0 <HAL_RCC_OscConfig+0x930>)
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	4a33      	ldr	r2, [pc, #204]	; (80026c0 <HAL_RCC_OscConfig+0x930>)
 80025f2:	f023 0301 	bic.w	r3, r3, #1
 80025f6:	6213      	str	r3, [r2, #32]
 80025f8:	4b31      	ldr	r3, [pc, #196]	; (80026c0 <HAL_RCC_OscConfig+0x930>)
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	4a30      	ldr	r2, [pc, #192]	; (80026c0 <HAL_RCC_OscConfig+0x930>)
 80025fe:	f023 0304 	bic.w	r3, r3, #4
 8002602:	6213      	str	r3, [r2, #32]
 8002604:	e01d      	b.n	8002642 <HAL_RCC_OscConfig+0x8b2>
 8002606:	1d3b      	adds	r3, r7, #4
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	2b05      	cmp	r3, #5
 800260e:	d10c      	bne.n	800262a <HAL_RCC_OscConfig+0x89a>
 8002610:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <HAL_RCC_OscConfig+0x930>)
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	4a2a      	ldr	r2, [pc, #168]	; (80026c0 <HAL_RCC_OscConfig+0x930>)
 8002616:	f043 0304 	orr.w	r3, r3, #4
 800261a:	6213      	str	r3, [r2, #32]
 800261c:	4b28      	ldr	r3, [pc, #160]	; (80026c0 <HAL_RCC_OscConfig+0x930>)
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	4a27      	ldr	r2, [pc, #156]	; (80026c0 <HAL_RCC_OscConfig+0x930>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6213      	str	r3, [r2, #32]
 8002628:	e00b      	b.n	8002642 <HAL_RCC_OscConfig+0x8b2>
 800262a:	4b25      	ldr	r3, [pc, #148]	; (80026c0 <HAL_RCC_OscConfig+0x930>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	4a24      	ldr	r2, [pc, #144]	; (80026c0 <HAL_RCC_OscConfig+0x930>)
 8002630:	f023 0301 	bic.w	r3, r3, #1
 8002634:	6213      	str	r3, [r2, #32]
 8002636:	4b22      	ldr	r3, [pc, #136]	; (80026c0 <HAL_RCC_OscConfig+0x930>)
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	4a21      	ldr	r2, [pc, #132]	; (80026c0 <HAL_RCC_OscConfig+0x930>)
 800263c:	f023 0304 	bic.w	r3, r3, #4
 8002640:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d06b      	beq.n	8002724 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264c:	f7fe ffdc 	bl	8001608 <HAL_GetTick>
 8002650:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002654:	e00b      	b.n	800266e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002656:	f7fe ffd7 	bl	8001608 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f241 3288 	movw	r2, #5000	; 0x1388
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e291      	b.n	8002b92 <HAL_RCC_OscConfig+0xe02>
 800266e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002672:	2202      	movs	r2, #2
 8002674:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	fa93 f2a3 	rbit	r2, r3
 8002680:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800268a:	2202      	movs	r2, #2
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	fa93 f2a3 	rbit	r2, r3
 8002698:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800269c:	601a      	str	r2, [r3, #0]
  return result;
 800269e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80026a2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a4:	fab3 f383 	clz	r3, r3
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	f043 0302 	orr.w	r3, r3, #2
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d109      	bne.n	80026cc <HAL_RCC_OscConfig+0x93c>
 80026b8:	4b01      	ldr	r3, [pc, #4]	; (80026c0 <HAL_RCC_OscConfig+0x930>)
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	e014      	b.n	80026e8 <HAL_RCC_OscConfig+0x958>
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000
 80026c4:	10908120 	.word	0x10908120
 80026c8:	40007000 	.word	0x40007000
 80026cc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80026d0:	2202      	movs	r2, #2
 80026d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	fa93 f2a3 	rbit	r2, r3
 80026de:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	4bbb      	ldr	r3, [pc, #748]	; (80029d4 <HAL_RCC_OscConfig+0xc44>)
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80026ec:	2102      	movs	r1, #2
 80026ee:	6011      	str	r1, [r2, #0]
 80026f0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80026f4:	6812      	ldr	r2, [r2, #0]
 80026f6:	fa92 f1a2 	rbit	r1, r2
 80026fa:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80026fe:	6011      	str	r1, [r2, #0]
  return result;
 8002700:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002704:	6812      	ldr	r2, [r2, #0]
 8002706:	fab2 f282 	clz	r2, r2
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	f002 021f 	and.w	r2, r2, #31
 8002716:	2101      	movs	r1, #1
 8002718:	fa01 f202 	lsl.w	r2, r1, r2
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d099      	beq.n	8002656 <HAL_RCC_OscConfig+0x8c6>
 8002722:	e063      	b.n	80027ec <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002724:	f7fe ff70 	bl	8001608 <HAL_GetTick>
 8002728:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800272c:	e00b      	b.n	8002746 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800272e:	f7fe ff6b 	bl	8001608 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	; 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e225      	b.n	8002b92 <HAL_RCC_OscConfig+0xe02>
 8002746:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800274a:	2202      	movs	r2, #2
 800274c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	fa93 f2a3 	rbit	r2, r3
 8002758:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002762:	2202      	movs	r2, #2
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	fa93 f2a3 	rbit	r2, r3
 8002770:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002774:	601a      	str	r2, [r3, #0]
  return result;
 8002776:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800277a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277c:	fab3 f383 	clz	r3, r3
 8002780:	b2db      	uxtb	r3, r3
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	b2db      	uxtb	r3, r3
 8002786:	f043 0302 	orr.w	r3, r3, #2
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d102      	bne.n	8002796 <HAL_RCC_OscConfig+0xa06>
 8002790:	4b90      	ldr	r3, [pc, #576]	; (80029d4 <HAL_RCC_OscConfig+0xc44>)
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	e00d      	b.n	80027b2 <HAL_RCC_OscConfig+0xa22>
 8002796:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800279a:	2202      	movs	r2, #2
 800279c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	fa93 f2a3 	rbit	r2, r3
 80027a8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	4b89      	ldr	r3, [pc, #548]	; (80029d4 <HAL_RCC_OscConfig+0xc44>)
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80027b6:	2102      	movs	r1, #2
 80027b8:	6011      	str	r1, [r2, #0]
 80027ba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	fa92 f1a2 	rbit	r1, r2
 80027c4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80027c8:	6011      	str	r1, [r2, #0]
  return result;
 80027ca:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	fab2 f282 	clz	r2, r2
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	f002 021f 	and.w	r2, r2, #31
 80027e0:	2101      	movs	r1, #1
 80027e2:	fa01 f202 	lsl.w	r2, r1, r2
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1a0      	bne.n	800272e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027ec:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d105      	bne.n	8002800 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f4:	4b77      	ldr	r3, [pc, #476]	; (80029d4 <HAL_RCC_OscConfig+0xc44>)
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	4a76      	ldr	r2, [pc, #472]	; (80029d4 <HAL_RCC_OscConfig+0xc44>)
 80027fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027fe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002800:	1d3b      	adds	r3, r7, #4
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 81c2 	beq.w	8002b90 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800280c:	4b71      	ldr	r3, [pc, #452]	; (80029d4 <HAL_RCC_OscConfig+0xc44>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 030c 	and.w	r3, r3, #12
 8002814:	2b08      	cmp	r3, #8
 8002816:	f000 819c 	beq.w	8002b52 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	2b02      	cmp	r3, #2
 8002822:	f040 8114 	bne.w	8002a4e <HAL_RCC_OscConfig+0xcbe>
 8002826:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800282a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800282e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002830:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	fa93 f2a3 	rbit	r2, r3
 800283a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800283e:	601a      	str	r2, [r3, #0]
  return result;
 8002840:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002844:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002850:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	461a      	mov	r2, r3
 8002858:	2300      	movs	r3, #0
 800285a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285c:	f7fe fed4 	bl	8001608 <HAL_GetTick>
 8002860:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002864:	e009      	b.n	800287a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002866:	f7fe fecf 	bl	8001608 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e18b      	b.n	8002b92 <HAL_RCC_OscConfig+0xe02>
 800287a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800287e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002882:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002884:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	fa93 f2a3 	rbit	r2, r3
 800288e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002892:	601a      	str	r2, [r3, #0]
  return result;
 8002894:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002898:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800289a:	fab3 f383 	clz	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	095b      	lsrs	r3, r3, #5
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d102      	bne.n	80028b4 <HAL_RCC_OscConfig+0xb24>
 80028ae:	4b49      	ldr	r3, [pc, #292]	; (80029d4 <HAL_RCC_OscConfig+0xc44>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	e01b      	b.n	80028ec <HAL_RCC_OscConfig+0xb5c>
 80028b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80028b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	fa93 f2a3 	rbit	r2, r3
 80028c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80028d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	fa93 f2a3 	rbit	r2, r3
 80028e2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	4b3a      	ldr	r3, [pc, #232]	; (80029d4 <HAL_RCC_OscConfig+0xc44>)
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80028f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028f4:	6011      	str	r1, [r2, #0]
 80028f6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	fa92 f1a2 	rbit	r1, r2
 8002900:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002904:	6011      	str	r1, [r2, #0]
  return result;
 8002906:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	fab2 f282 	clz	r2, r2
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	f042 0220 	orr.w	r2, r2, #32
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	f002 021f 	and.w	r2, r2, #31
 800291c:	2101      	movs	r1, #1
 800291e:	fa01 f202 	lsl.w	r2, r1, r2
 8002922:	4013      	ands	r3, r2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d19e      	bne.n	8002866 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002928:	4b2a      	ldr	r3, [pc, #168]	; (80029d4 <HAL_RCC_OscConfig+0xc44>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002930:	1d3b      	adds	r3, r7, #4
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	430b      	orrs	r3, r1
 800293e:	4925      	ldr	r1, [pc, #148]	; (80029d4 <HAL_RCC_OscConfig+0xc44>)
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
 8002944:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002948:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800294c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	fa93 f2a3 	rbit	r2, r3
 8002958:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800295c:	601a      	str	r2, [r3, #0]
  return result;
 800295e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002962:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002964:	fab3 f383 	clz	r3, r3
 8002968:	b2db      	uxtb	r3, r3
 800296a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800296e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	461a      	mov	r2, r3
 8002976:	2301      	movs	r3, #1
 8002978:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297a:	f7fe fe45 	bl	8001608 <HAL_GetTick>
 800297e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002982:	e009      	b.n	8002998 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002984:	f7fe fe40 	bl	8001608 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e0fc      	b.n	8002b92 <HAL_RCC_OscConfig+0xe02>
 8002998:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800299c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	fa93 f2a3 	rbit	r2, r3
 80029ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029b0:	601a      	str	r2, [r3, #0]
  return result;
 80029b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029b8:	fab3 f383 	clz	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d105      	bne.n	80029d8 <HAL_RCC_OscConfig+0xc48>
 80029cc:	4b01      	ldr	r3, [pc, #4]	; (80029d4 <HAL_RCC_OscConfig+0xc44>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	e01e      	b.n	8002a10 <HAL_RCC_OscConfig+0xc80>
 80029d2:	bf00      	nop
 80029d4:	40021000 	.word	0x40021000
 80029d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80029dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	fa93 f2a3 	rbit	r2, r3
 80029ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80029f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	fa93 f2a3 	rbit	r2, r3
 8002a06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	4b63      	ldr	r3, [pc, #396]	; (8002b9c <HAL_RCC_OscConfig+0xe0c>)
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002a14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a18:	6011      	str	r1, [r2, #0]
 8002a1a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	fa92 f1a2 	rbit	r1, r2
 8002a24:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002a28:	6011      	str	r1, [r2, #0]
  return result;
 8002a2a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	fab2 f282 	clz	r2, r2
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	f042 0220 	orr.w	r2, r2, #32
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	f002 021f 	and.w	r2, r2, #31
 8002a40:	2101      	movs	r1, #1
 8002a42:	fa01 f202 	lsl.w	r2, r1, r2
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d09b      	beq.n	8002984 <HAL_RCC_OscConfig+0xbf4>
 8002a4c:	e0a0      	b.n	8002b90 <HAL_RCC_OscConfig+0xe00>
 8002a4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	fa93 f2a3 	rbit	r2, r3
 8002a62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a66:	601a      	str	r2, [r3, #0]
  return result;
 8002a68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a6c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6e:	fab3 f383 	clz	r3, r3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2300      	movs	r3, #0
 8002a82:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7fe fdc0 	bl	8001608 <HAL_GetTick>
 8002a88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8c:	e009      	b.n	8002aa2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a8e:	f7fe fdbb 	bl	8001608 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e077      	b.n	8002b92 <HAL_RCC_OscConfig+0xe02>
 8002aa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002aa6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	fa93 f2a3 	rbit	r2, r3
 8002ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aba:	601a      	str	r2, [r3, #0]
  return result;
 8002abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ac0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac2:	fab3 f383 	clz	r3, r3
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	095b      	lsrs	r3, r3, #5
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d102      	bne.n	8002adc <HAL_RCC_OscConfig+0xd4c>
 8002ad6:	4b31      	ldr	r3, [pc, #196]	; (8002b9c <HAL_RCC_OscConfig+0xe0c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	e01b      	b.n	8002b14 <HAL_RCC_OscConfig+0xd84>
 8002adc:	f107 0320 	add.w	r3, r7, #32
 8002ae0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ae4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	f107 0320 	add.w	r3, r7, #32
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	fa93 f2a3 	rbit	r2, r3
 8002af0:	f107 031c 	add.w	r3, r7, #28
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	f107 0318 	add.w	r3, r7, #24
 8002afa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	f107 0318 	add.w	r3, r7, #24
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	fa93 f2a3 	rbit	r2, r3
 8002b0a:	f107 0314 	add.w	r3, r7, #20
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	4b22      	ldr	r3, [pc, #136]	; (8002b9c <HAL_RCC_OscConfig+0xe0c>)
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	f107 0210 	add.w	r2, r7, #16
 8002b18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b1c:	6011      	str	r1, [r2, #0]
 8002b1e:	f107 0210 	add.w	r2, r7, #16
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	fa92 f1a2 	rbit	r1, r2
 8002b28:	f107 020c 	add.w	r2, r7, #12
 8002b2c:	6011      	str	r1, [r2, #0]
  return result;
 8002b2e:	f107 020c 	add.w	r2, r7, #12
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	fab2 f282 	clz	r2, r2
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	f042 0220 	orr.w	r2, r2, #32
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	f002 021f 	and.w	r2, r2, #31
 8002b44:	2101      	movs	r1, #1
 8002b46:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d19e      	bne.n	8002a8e <HAL_RCC_OscConfig+0xcfe>
 8002b50:	e01e      	b.n	8002b90 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b52:	1d3b      	adds	r3, r7, #4
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e018      	b.n	8002b92 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b60:	4b0e      	ldr	r3, [pc, #56]	; (8002b9c <HAL_RCC_OscConfig+0xe0c>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b68:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b70:	1d3b      	adds	r3, r7, #4
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d108      	bne.n	8002b8c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b7a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b82:	1d3b      	adds	r3, r7, #4
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40021000 	.word	0x40021000

08002ba0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b09e      	sub	sp, #120	; 0x78
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e162      	b.n	8002e7e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb8:	4b90      	ldr	r3, [pc, #576]	; (8002dfc <HAL_RCC_ClockConfig+0x25c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d910      	bls.n	8002be8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc6:	4b8d      	ldr	r3, [pc, #564]	; (8002dfc <HAL_RCC_ClockConfig+0x25c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f023 0207 	bic.w	r2, r3, #7
 8002bce:	498b      	ldr	r1, [pc, #556]	; (8002dfc <HAL_RCC_ClockConfig+0x25c>)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd6:	4b89      	ldr	r3, [pc, #548]	; (8002dfc <HAL_RCC_ClockConfig+0x25c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e14a      	b.n	8002e7e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf4:	4b82      	ldr	r3, [pc, #520]	; (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	497f      	ldr	r1, [pc, #508]	; (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 80dc 	beq.w	8002dcc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d13c      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xf6>
 8002c1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c20:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2c:	fab3 f383 	clz	r3, r3
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d102      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xa6>
 8002c40:	4b6f      	ldr	r3, [pc, #444]	; (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	e00f      	b.n	8002c66 <HAL_RCC_ClockConfig+0xc6>
 8002c46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c4a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c4e:	fa93 f3a3 	rbit	r3, r3
 8002c52:	667b      	str	r3, [r7, #100]	; 0x64
 8002c54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c58:	663b      	str	r3, [r7, #96]	; 0x60
 8002c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c5c:	fa93 f3a3 	rbit	r3, r3
 8002c60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c62:	4b67      	ldr	r3, [pc, #412]	; (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c6a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c6e:	fa92 f2a2 	rbit	r2, r2
 8002c72:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002c74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c76:	fab2 f282 	clz	r2, r2
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	f042 0220 	orr.w	r2, r2, #32
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	f002 021f 	and.w	r2, r2, #31
 8002c86:	2101      	movs	r1, #1
 8002c88:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d17b      	bne.n	8002d8a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e0f3      	b.n	8002e7e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d13c      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x178>
 8002c9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ca2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	095b      	lsrs	r3, r3, #5
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d102      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x128>
 8002cc2:	4b4f      	ldr	r3, [pc, #316]	; (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	e00f      	b.n	8002ce8 <HAL_RCC_ClockConfig+0x148>
 8002cc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ccc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cd0:	fa93 f3a3 	rbit	r3, r3
 8002cd4:	647b      	str	r3, [r7, #68]	; 0x44
 8002cd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cda:	643b      	str	r3, [r7, #64]	; 0x40
 8002cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ce4:	4b46      	ldr	r3, [pc, #280]	; (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cec:	63ba      	str	r2, [r7, #56]	; 0x38
 8002cee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cf0:	fa92 f2a2 	rbit	r2, r2
 8002cf4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002cf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cf8:	fab2 f282 	clz	r2, r2
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	f042 0220 	orr.w	r2, r2, #32
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	f002 021f 	and.w	r2, r2, #31
 8002d08:	2101      	movs	r1, #1
 8002d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0e:	4013      	ands	r3, r2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d13a      	bne.n	8002d8a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0b2      	b.n	8002e7e <HAL_RCC_ClockConfig+0x2de>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1e:	fa93 f3a3 	rbit	r3, r3
 8002d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d26:	fab3 f383 	clz	r3, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	095b      	lsrs	r3, r3, #5
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d102      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x1a0>
 8002d3a:	4b31      	ldr	r3, [pc, #196]	; (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	e00d      	b.n	8002d5c <HAL_RCC_ClockConfig+0x1bc>
 8002d40:	2302      	movs	r3, #2
 8002d42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d46:	fa93 f3a3 	rbit	r3, r3
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	623b      	str	r3, [r7, #32]
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	fa93 f3a3 	rbit	r3, r3
 8002d56:	61fb      	str	r3, [r7, #28]
 8002d58:	4b29      	ldr	r3, [pc, #164]	; (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	61ba      	str	r2, [r7, #24]
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	fa92 f2a2 	rbit	r2, r2
 8002d66:	617a      	str	r2, [r7, #20]
  return result;
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	fab2 f282 	clz	r2, r2
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	f042 0220 	orr.w	r2, r2, #32
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	f002 021f 	and.w	r2, r2, #31
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e079      	b.n	8002e7e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d8a:	4b1d      	ldr	r3, [pc, #116]	; (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f023 0203 	bic.w	r2, r3, #3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	491a      	ldr	r1, [pc, #104]	; (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d9c:	f7fe fc34 	bl	8001608 <HAL_GetTick>
 8002da0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da2:	e00a      	b.n	8002dba <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da4:	f7fe fc30 	bl	8001608 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e061      	b.n	8002e7e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dba:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <HAL_RCC_ClockConfig+0x260>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 020c 	and.w	r2, r3, #12
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d1eb      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <HAL_RCC_ClockConfig+0x25c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d214      	bcs.n	8002e04 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <HAL_RCC_ClockConfig+0x25c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 0207 	bic.w	r2, r3, #7
 8002de2:	4906      	ldr	r1, [pc, #24]	; (8002dfc <HAL_RCC_ClockConfig+0x25c>)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dea:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <HAL_RCC_ClockConfig+0x25c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d005      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e040      	b.n	8002e7e <HAL_RCC_ClockConfig+0x2de>
 8002dfc:	40022000 	.word	0x40022000
 8002e00:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d008      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e10:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <HAL_RCC_ClockConfig+0x2e8>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	491a      	ldr	r1, [pc, #104]	; (8002e88 <HAL_RCC_ClockConfig+0x2e8>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d009      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e2e:	4b16      	ldr	r3, [pc, #88]	; (8002e88 <HAL_RCC_ClockConfig+0x2e8>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4912      	ldr	r1, [pc, #72]	; (8002e88 <HAL_RCC_ClockConfig+0x2e8>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e42:	f000 f829 	bl	8002e98 <HAL_RCC_GetSysClockFreq>
 8002e46:	4601      	mov	r1, r0
 8002e48:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <HAL_RCC_ClockConfig+0x2e8>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e50:	22f0      	movs	r2, #240	; 0xf0
 8002e52:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	fa92 f2a2 	rbit	r2, r2
 8002e5a:	60fa      	str	r2, [r7, #12]
  return result;
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	fab2 f282 	clz	r2, r2
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	40d3      	lsrs	r3, r2
 8002e66:	4a09      	ldr	r2, [pc, #36]	; (8002e8c <HAL_RCC_ClockConfig+0x2ec>)
 8002e68:	5cd3      	ldrb	r3, [r2, r3]
 8002e6a:	fa21 f303 	lsr.w	r3, r1, r3
 8002e6e:	4a08      	ldr	r2, [pc, #32]	; (8002e90 <HAL_RCC_ClockConfig+0x2f0>)
 8002e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e72:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <HAL_RCC_ClockConfig+0x2f4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fe fb82 	bl	8001580 <HAL_InitTick>
  
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3778      	adds	r7, #120	; 0x78
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	08003228 	.word	0x08003228
 8002e90:	20000000 	.word	0x20000000
 8002e94:	20000004 	.word	0x20000004

08002e98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b08b      	sub	sp, #44	; 0x2c
 8002e9c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61bb      	str	r3, [r7, #24]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002eb2:	4b29      	ldr	r3, [pc, #164]	; (8002f58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d002      	beq.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x30>
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d003      	beq.n	8002ece <HAL_RCC_GetSysClockFreq+0x36>
 8002ec6:	e03c      	b.n	8002f42 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ec8:	4b24      	ldr	r3, [pc, #144]	; (8002f5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002eca:	623b      	str	r3, [r7, #32]
      break;
 8002ecc:	e03c      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002ed4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002ed8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	fa92 f2a2 	rbit	r2, r2
 8002ee0:	607a      	str	r2, [r7, #4]
  return result;
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	fab2 f282 	clz	r2, r2
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	40d3      	lsrs	r3, r2
 8002eec:	4a1c      	ldr	r2, [pc, #112]	; (8002f60 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002eee:	5cd3      	ldrb	r3, [r2, r3]
 8002ef0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002ef2:	4b19      	ldr	r3, [pc, #100]	; (8002f58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	220f      	movs	r2, #15
 8002efc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	fa92 f2a2 	rbit	r2, r2
 8002f04:	60fa      	str	r2, [r7, #12]
  return result;
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	fab2 f282 	clz	r2, r2
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	40d3      	lsrs	r3, r2
 8002f10:	4a14      	ldr	r2, [pc, #80]	; (8002f64 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f12:	5cd3      	ldrb	r3, [r2, r3]
 8002f14:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f20:	4a0e      	ldr	r2, [pc, #56]	; (8002f5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	fb02 f303 	mul.w	r3, r2, r3
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f30:	e004      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	4a0c      	ldr	r2, [pc, #48]	; (8002f68 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f36:	fb02 f303 	mul.w	r3, r2, r3
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	623b      	str	r3, [r7, #32]
      break;
 8002f40:	e002      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f42:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f44:	623b      	str	r3, [r7, #32]
      break;
 8002f46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f48:	6a3b      	ldr	r3, [r7, #32]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	372c      	adds	r7, #44	; 0x2c
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	007a1200 	.word	0x007a1200
 8002f60:	08003238 	.word	0x08003238
 8002f64:	08003248 	.word	0x08003248
 8002f68:	003d0900 	.word	0x003d0900

08002f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b092      	sub	sp, #72	; 0x48
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 80d0 	beq.w	800312a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f90:	4b86      	ldr	r3, [pc, #536]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10e      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f9c:	4b83      	ldr	r3, [pc, #524]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	4a82      	ldr	r2, [pc, #520]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa6:	61d3      	str	r3, [r2, #28]
 8002fa8:	4b80      	ldr	r3, [pc, #512]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fba:	4b7d      	ldr	r3, [pc, #500]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d118      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fc6:	4b7a      	ldr	r3, [pc, #488]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a79      	ldr	r2, [pc, #484]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fd2:	f7fe fb19 	bl	8001608 <HAL_GetTick>
 8002fd6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd8:	e008      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fda:	f7fe fb15 	bl	8001608 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b64      	cmp	r3, #100	; 0x64
 8002fe6:	d901      	bls.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e0db      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fec:	4b70      	ldr	r3, [pc, #448]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ff8:	4b6c      	ldr	r3, [pc, #432]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003000:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003004:	2b00      	cmp	r3, #0
 8003006:	d07d      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003010:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003012:	429a      	cmp	r2, r3
 8003014:	d076      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003016:	4b65      	ldr	r3, [pc, #404]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800301e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003020:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003024:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800302e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	b2db      	uxtb	r3, r3
 8003036:	461a      	mov	r2, r3
 8003038:	4b5e      	ldr	r3, [pc, #376]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	461a      	mov	r2, r3
 8003040:	2301      	movs	r3, #1
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003048:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	b2db      	uxtb	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	4b55      	ldr	r3, [pc, #340]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	461a      	mov	r2, r3
 8003064:	2300      	movs	r3, #0
 8003066:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003068:	4a50      	ldr	r2, [pc, #320]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800306a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800306c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800306e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d045      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7fe fac6 	bl	8001608 <HAL_GetTick>
 800307c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307e:	e00a      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003080:	f7fe fac2 	bl	8001608 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f241 3288 	movw	r2, #5000	; 0x1388
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e086      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003096:	2302      	movs	r3, #2
 8003098:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309c:	fa93 f3a3 	rbit	r3, r3
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
 80030a2:	2302      	movs	r3, #2
 80030a4:	623b      	str	r3, [r7, #32]
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	fa93 f3a3 	rbit	r3, r3
 80030ac:	61fb      	str	r3, [r7, #28]
  return result;
 80030ae:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b0:	fab3 f383 	clz	r3, r3
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f043 0302 	orr.w	r3, r3, #2
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d102      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80030c4:	4b39      	ldr	r3, [pc, #228]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	e007      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80030ca:	2302      	movs	r3, #2
 80030cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	fa93 f3a3 	rbit	r3, r3
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	4b35      	ldr	r3, [pc, #212]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	2202      	movs	r2, #2
 80030dc:	613a      	str	r2, [r7, #16]
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	fa92 f2a2 	rbit	r2, r2
 80030e4:	60fa      	str	r2, [r7, #12]
  return result;
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	fab2 f282 	clz	r2, r2
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	f002 021f 	and.w	r2, r2, #31
 80030f8:	2101      	movs	r1, #1
 80030fa:	fa01 f202 	lsl.w	r2, r1, r2
 80030fe:	4013      	ands	r3, r2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0bd      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003104:	4b29      	ldr	r3, [pc, #164]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	4926      	ldr	r1, [pc, #152]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003112:	4313      	orrs	r3, r2
 8003114:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003116:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800311a:	2b01      	cmp	r3, #1
 800311c:	d105      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311e:	4b23      	ldr	r3, [pc, #140]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	4a22      	ldr	r2, [pc, #136]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003128:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d008      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003136:	4b1d      	ldr	r3, [pc, #116]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f023 0203 	bic.w	r2, r3, #3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	491a      	ldr	r1, [pc, #104]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003144:	4313      	orrs	r3, r2
 8003146:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003154:	4b15      	ldr	r3, [pc, #84]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	f023 0210 	bic.w	r2, r3, #16
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4912      	ldr	r1, [pc, #72]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003162:	4313      	orrs	r3, r2
 8003164:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316e:	2b00      	cmp	r3, #0
 8003170:	d008      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003172:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003176:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	490b      	ldr	r1, [pc, #44]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003180:	4313      	orrs	r3, r2
 8003182:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003190:	4b06      	ldr	r3, [pc, #24]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	4903      	ldr	r1, [pc, #12]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3748      	adds	r7, #72	; 0x48
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40007000 	.word	0x40007000
 80031b4:	10908100 	.word	0x10908100

080031b8 <__libc_init_array>:
 80031b8:	b570      	push	{r4, r5, r6, lr}
 80031ba:	4e0d      	ldr	r6, [pc, #52]	; (80031f0 <__libc_init_array+0x38>)
 80031bc:	4c0d      	ldr	r4, [pc, #52]	; (80031f4 <__libc_init_array+0x3c>)
 80031be:	1ba4      	subs	r4, r4, r6
 80031c0:	10a4      	asrs	r4, r4, #2
 80031c2:	2500      	movs	r5, #0
 80031c4:	42a5      	cmp	r5, r4
 80031c6:	d109      	bne.n	80031dc <__libc_init_array+0x24>
 80031c8:	4e0b      	ldr	r6, [pc, #44]	; (80031f8 <__libc_init_array+0x40>)
 80031ca:	4c0c      	ldr	r4, [pc, #48]	; (80031fc <__libc_init_array+0x44>)
 80031cc:	f000 f820 	bl	8003210 <_init>
 80031d0:	1ba4      	subs	r4, r4, r6
 80031d2:	10a4      	asrs	r4, r4, #2
 80031d4:	2500      	movs	r5, #0
 80031d6:	42a5      	cmp	r5, r4
 80031d8:	d105      	bne.n	80031e6 <__libc_init_array+0x2e>
 80031da:	bd70      	pop	{r4, r5, r6, pc}
 80031dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031e0:	4798      	blx	r3
 80031e2:	3501      	adds	r5, #1
 80031e4:	e7ee      	b.n	80031c4 <__libc_init_array+0xc>
 80031e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031ea:	4798      	blx	r3
 80031ec:	3501      	adds	r5, #1
 80031ee:	e7f2      	b.n	80031d6 <__libc_init_array+0x1e>
 80031f0:	08003258 	.word	0x08003258
 80031f4:	08003258 	.word	0x08003258
 80031f8:	08003258 	.word	0x08003258
 80031fc:	08003260 	.word	0x08003260

08003200 <memset>:
 8003200:	4402      	add	r2, r0
 8003202:	4603      	mov	r3, r0
 8003204:	4293      	cmp	r3, r2
 8003206:	d100      	bne.n	800320a <memset+0xa>
 8003208:	4770      	bx	lr
 800320a:	f803 1b01 	strb.w	r1, [r3], #1
 800320e:	e7f9      	b.n	8003204 <memset+0x4>

08003210 <_init>:
 8003210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003212:	bf00      	nop
 8003214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003216:	bc08      	pop	{r3}
 8003218:	469e      	mov	lr, r3
 800321a:	4770      	bx	lr

0800321c <_fini>:
 800321c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321e:	bf00      	nop
 8003220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003222:	bc08      	pop	{r3}
 8003224:	469e      	mov	lr, r3
 8003226:	4770      	bx	lr
