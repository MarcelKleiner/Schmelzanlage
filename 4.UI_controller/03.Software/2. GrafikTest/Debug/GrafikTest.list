
GrafikTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e88  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003010  08003010  00013010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003040  08003040  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003040  08003040  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003040  08003040  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003040  08003040  00013040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003048  08003048  00013048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800304c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002074  2000000c  08003058  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002080  08003058  00022080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023264  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032fd  00000000  00000000  000432a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000908  00000000  00000000  000465a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000800  00000000  00000000  00046ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bf6a  00000000  00000000  000476a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c20d  00000000  00000000  00063612  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f0e0  00000000  00000000  0006f81f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fe8ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002314  00000000  00000000  000fe97c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ff8 	.word	0x08002ff8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002ff8 	.word	0x08002ff8

080001c8 <_ZN7AppMainC1Ev>:

//#include<iostream>
#include<string> // for string class
using namespace std;

AppMain::AppMain() {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4618      	mov	r0, r3
 80001d4:	f000 fc2b 	bl	8000a2e <_ZN9LCDDriverC1Ev>
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	3304      	adds	r3, #4
 80001dc:	687a      	ldr	r2, [r7, #4]
 80001de:	4611      	mov	r1, r2
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 f8d5 	bl	8000390 <_ZN10ImgControlC1EP9LCDDriver>
	// TODO Auto-generated constructor stub

}
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4618      	mov	r0, r3
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}

080001f0 <_ZN7AppMain4mainEv>:

void AppMain::main(){
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b086      	sub	sp, #24
 80001f4:	af02      	add	r7, sp, #8
 80001f6:	6078      	str	r0, [r7, #4]

	imgControl.initImgControl();
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	3304      	adds	r3, #4
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 f8e7 	bl	80003d0 <_ZN10ImgControl14initImgControlEv>
	lcdDriver.SetAddressPointer(0, 15);
	lcdDriver.WriteText("Press F1 to enter BIOS...");

	lcdDriver.WriteRectangle(140, 50, 51, 30, 1);
	*/
	uint8_t i = 0;
 8000202:	2300      	movs	r3, #0
 8000204:	73fb      	strb	r3, [r7, #15]
	uint8_t u = 0;
 8000206:	2300      	movs	r3, #0
 8000208:	73bb      	strb	r3, [r7, #14]
	while(1){

		//unten rechts
		while(i < 113 && u<210){
 800020a:	7bfb      	ldrb	r3, [r7, #15]
 800020c:	2b70      	cmp	r3, #112	; 0x70
 800020e:	d819      	bhi.n	8000244 <_ZN7AppMain4mainEv+0x54>
 8000210:	7bbb      	ldrb	r3, [r7, #14]
 8000212:	2bd1      	cmp	r3, #209	; 0xd1
 8000214:	d816      	bhi.n	8000244 <_ZN7AppMain4mainEv+0x54>
			imgControl.writeRectangle(u, i, 30, 15, 1);
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	1d18      	adds	r0, r3, #4
 800021a:	7bfa      	ldrb	r2, [r7, #15]
 800021c:	7bb9      	ldrb	r1, [r7, #14]
 800021e:	2301      	movs	r3, #1
 8000220:	9301      	str	r3, [sp, #4]
 8000222:	230f      	movs	r3, #15
 8000224:	9300      	str	r3, [sp, #0]
 8000226:	231e      	movs	r3, #30
 8000228:	f000 fa8b 	bl	8000742 <_ZN10ImgControl14writeRectangleEhhhhh>
			imgControl.writeScreenMirror();
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	3304      	adds	r3, #4
 8000230:	4618      	mov	r0, r3
 8000232:	f000 f8da 	bl	80003ea <_ZN10ImgControl17writeScreenMirrorEv>
			i++;
 8000236:	7bfb      	ldrb	r3, [r7, #15]
 8000238:	3301      	adds	r3, #1
 800023a:	73fb      	strb	r3, [r7, #15]
			u++;
 800023c:	7bbb      	ldrb	r3, [r7, #14]
 800023e:	3301      	adds	r3, #1
 8000240:	73bb      	strb	r3, [r7, #14]
		while(i < 113 && u<210){
 8000242:	e7e2      	b.n	800020a <_ZN7AppMain4mainEv+0x1a>
		}

		if(i == 113){
 8000244:	7bfb      	ldrb	r3, [r7, #15]
 8000246:	2b71      	cmp	r3, #113	; 0x71
 8000248:	d15f      	bne.n	800030a <_ZN7AppMain4mainEv+0x11a>
			i--;
 800024a:	7bfb      	ldrb	r3, [r7, #15]
 800024c:	3b01      	subs	r3, #1
 800024e:	73fb      	strb	r3, [r7, #15]
			//----hat unten angeschlagen----
			//nach oben rechts (anschlag unten)
			while(i > 0 && u<210){
 8000250:	7bfb      	ldrb	r3, [r7, #15]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d019      	beq.n	800028a <_ZN7AppMain4mainEv+0x9a>
 8000256:	7bbb      	ldrb	r3, [r7, #14]
 8000258:	2bd1      	cmp	r3, #209	; 0xd1
 800025a:	d816      	bhi.n	800028a <_ZN7AppMain4mainEv+0x9a>
				imgControl.writeRectangle(u, i, 30, 15, 1);
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	1d18      	adds	r0, r3, #4
 8000260:	7bfa      	ldrb	r2, [r7, #15]
 8000262:	7bb9      	ldrb	r1, [r7, #14]
 8000264:	2301      	movs	r3, #1
 8000266:	9301      	str	r3, [sp, #4]
 8000268:	230f      	movs	r3, #15
 800026a:	9300      	str	r3, [sp, #0]
 800026c:	231e      	movs	r3, #30
 800026e:	f000 fa68 	bl	8000742 <_ZN10ImgControl14writeRectangleEhhhhh>
				imgControl.writeScreenMirror();
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	3304      	adds	r3, #4
 8000276:	4618      	mov	r0, r3
 8000278:	f000 f8b7 	bl	80003ea <_ZN10ImgControl17writeScreenMirrorEv>
				i--;
 800027c:	7bfb      	ldrb	r3, [r7, #15]
 800027e:	3b01      	subs	r3, #1
 8000280:	73fb      	strb	r3, [r7, #15]
				u++;
 8000282:	7bbb      	ldrb	r3, [r7, #14]
 8000284:	3301      	adds	r3, #1
 8000286:	73bb      	strb	r3, [r7, #14]
			while(i > 0 && u<210){
 8000288:	e7e2      	b.n	8000250 <_ZN7AppMain4mainEv+0x60>
			}
			if(u==210){
 800028a:	7bbb      	ldrb	r3, [r7, #14]
 800028c:	2bd2      	cmp	r3, #210	; 0xd2
 800028e:	d1bc      	bne.n	800020a <_ZN7AppMain4mainEv+0x1a>
				//nach oben links (anschlag rechts
				while(i > 0 && u>0){
 8000290:	7bfb      	ldrb	r3, [r7, #15]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d019      	beq.n	80002ca <_ZN7AppMain4mainEv+0xda>
 8000296:	7bbb      	ldrb	r3, [r7, #14]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d016      	beq.n	80002ca <_ZN7AppMain4mainEv+0xda>
					imgControl.writeRectangle(u, i, 30, 15, 1);
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	1d18      	adds	r0, r3, #4
 80002a0:	7bfa      	ldrb	r2, [r7, #15]
 80002a2:	7bb9      	ldrb	r1, [r7, #14]
 80002a4:	2301      	movs	r3, #1
 80002a6:	9301      	str	r3, [sp, #4]
 80002a8:	230f      	movs	r3, #15
 80002aa:	9300      	str	r3, [sp, #0]
 80002ac:	231e      	movs	r3, #30
 80002ae:	f000 fa48 	bl	8000742 <_ZN10ImgControl14writeRectangleEhhhhh>
					imgControl.writeScreenMirror();
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	3304      	adds	r3, #4
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 f897 	bl	80003ea <_ZN10ImgControl17writeScreenMirrorEv>
					i--;
 80002bc:	7bfb      	ldrb	r3, [r7, #15]
 80002be:	3b01      	subs	r3, #1
 80002c0:	73fb      	strb	r3, [r7, #15]
					u--;
 80002c2:	7bbb      	ldrb	r3, [r7, #14]
 80002c4:	3b01      	subs	r3, #1
 80002c6:	73bb      	strb	r3, [r7, #14]
				while(i > 0 && u>0){
 80002c8:	e7e2      	b.n	8000290 <_ZN7AppMain4mainEv+0xa0>
				}
				if(i == 0){
 80002ca:	7bfb      	ldrb	r3, [r7, #15]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d19c      	bne.n	800020a <_ZN7AppMain4mainEv+0x1a>
								//hat oben angeschlagen
								//nach unten rechts
								while(i < 113 && u>0){
 80002d0:	7bfb      	ldrb	r3, [r7, #15]
 80002d2:	2b70      	cmp	r3, #112	; 0x70
 80002d4:	d899      	bhi.n	800020a <_ZN7AppMain4mainEv+0x1a>
 80002d6:	7bbb      	ldrb	r3, [r7, #14]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d096      	beq.n	800020a <_ZN7AppMain4mainEv+0x1a>
									imgControl.writeRectangle(u, i, 30, 15, 1);
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	1d18      	adds	r0, r3, #4
 80002e0:	7bfa      	ldrb	r2, [r7, #15]
 80002e2:	7bb9      	ldrb	r1, [r7, #14]
 80002e4:	2301      	movs	r3, #1
 80002e6:	9301      	str	r3, [sp, #4]
 80002e8:	230f      	movs	r3, #15
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	231e      	movs	r3, #30
 80002ee:	f000 fa28 	bl	8000742 <_ZN10ImgControl14writeRectangleEhhhhh>
									imgControl.writeScreenMirror();
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	3304      	adds	r3, #4
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 f877 	bl	80003ea <_ZN10ImgControl17writeScreenMirrorEv>
									i++;
 80002fc:	7bfb      	ldrb	r3, [r7, #15]
 80002fe:	3301      	adds	r3, #1
 8000300:	73fb      	strb	r3, [r7, #15]
									u--;
 8000302:	7bbb      	ldrb	r3, [r7, #14]
 8000304:	3b01      	subs	r3, #1
 8000306:	73bb      	strb	r3, [r7, #14]
								while(i < 113 && u>0){
 8000308:	e7e2      	b.n	80002d0 <_ZN7AppMain4mainEv+0xe0>

			}

		}else{
			//---hat rechts angeschlagen----
			u--;
 800030a:	7bbb      	ldrb	r3, [r7, #14]
 800030c:	3b01      	subs	r3, #1
 800030e:	73bb      	strb	r3, [r7, #14]
			//noch oben links
			while(i < 113 && u<210){
 8000310:	7bfb      	ldrb	r3, [r7, #15]
 8000312:	2b70      	cmp	r3, #112	; 0x70
 8000314:	d819      	bhi.n	800034a <_ZN7AppMain4mainEv+0x15a>
 8000316:	7bbb      	ldrb	r3, [r7, #14]
 8000318:	2bd1      	cmp	r3, #209	; 0xd1
 800031a:	d816      	bhi.n	800034a <_ZN7AppMain4mainEv+0x15a>
				imgControl.writeRectangle(u, i, 30, 15, 1);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	1d18      	adds	r0, r3, #4
 8000320:	7bfa      	ldrb	r2, [r7, #15]
 8000322:	7bb9      	ldrb	r1, [r7, #14]
 8000324:	2301      	movs	r3, #1
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	230f      	movs	r3, #15
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	231e      	movs	r3, #30
 800032e:	f000 fa08 	bl	8000742 <_ZN10ImgControl14writeRectangleEhhhhh>
				imgControl.writeScreenMirror();
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	3304      	adds	r3, #4
 8000336:	4618      	mov	r0, r3
 8000338:	f000 f857 	bl	80003ea <_ZN10ImgControl17writeScreenMirrorEv>
				i--;
 800033c:	7bfb      	ldrb	r3, [r7, #15]
 800033e:	3b01      	subs	r3, #1
 8000340:	73fb      	strb	r3, [r7, #15]
				u--;
 8000342:	7bbb      	ldrb	r3, [r7, #14]
 8000344:	3b01      	subs	r3, #1
 8000346:	73bb      	strb	r3, [r7, #14]
			while(i < 113 && u<210){
 8000348:	e7e2      	b.n	8000310 <_ZN7AppMain4mainEv+0x120>
			}

			if(i == 0){
 800034a:	7bfb      	ldrb	r3, [r7, #15]
 800034c:	2b00      	cmp	r3, #0
 800034e:	f47f af5c 	bne.w	800020a <_ZN7AppMain4mainEv+0x1a>
				//hat oben angeschlagen
				//nach unten rechts
				while(i < 113 && u>0){
 8000352:	7bfb      	ldrb	r3, [r7, #15]
 8000354:	2b70      	cmp	r3, #112	; 0x70
 8000356:	f63f af58 	bhi.w	800020a <_ZN7AppMain4mainEv+0x1a>
 800035a:	7bbb      	ldrb	r3, [r7, #14]
 800035c:	2b00      	cmp	r3, #0
 800035e:	f43f af54 	beq.w	800020a <_ZN7AppMain4mainEv+0x1a>
					imgControl.writeRectangle(u, i, 30, 15, 1);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	1d18      	adds	r0, r3, #4
 8000366:	7bfa      	ldrb	r2, [r7, #15]
 8000368:	7bb9      	ldrb	r1, [r7, #14]
 800036a:	2301      	movs	r3, #1
 800036c:	9301      	str	r3, [sp, #4]
 800036e:	230f      	movs	r3, #15
 8000370:	9300      	str	r3, [sp, #0]
 8000372:	231e      	movs	r3, #30
 8000374:	f000 f9e5 	bl	8000742 <_ZN10ImgControl14writeRectangleEhhhhh>
					imgControl.writeScreenMirror();
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3304      	adds	r3, #4
 800037c:	4618      	mov	r0, r3
 800037e:	f000 f834 	bl	80003ea <_ZN10ImgControl17writeScreenMirrorEv>
					i++;
 8000382:	7bfb      	ldrb	r3, [r7, #15]
 8000384:	3301      	adds	r3, #1
 8000386:	73fb      	strb	r3, [r7, #15]
					u--;
 8000388:	7bbb      	ldrb	r3, [r7, #14]
 800038a:	3b01      	subs	r3, #1
 800038c:	73bb      	strb	r3, [r7, #14]
				while(i < 113 && u>0){
 800038e:	e7e0      	b.n	8000352 <_ZN7AppMain4mainEv+0x162>

08000390 <_ZN10ImgControlC1EP9LCDDriver>:
using namespace std;




ImgControl::ImgControl(LCDDriver *lcdDriver) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	3304      	adds	r3, #4
 800039e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80003a2:	2100      	movs	r1, #0
 80003a4:	4618      	mov	r0, r3
 80003a6:	f002 fe1f 	bl	8002fe8 <memset>
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80003b0:	3304      	adds	r3, #4
 80003b2:	4618      	mov	r0, r3
 80003b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003b8:	461a      	mov	r2, r3
 80003ba:	2100      	movs	r1, #0
 80003bc:	f002 fe14 	bl	8002fe8 <memset>
	this->lcdDriver = lcdDriver;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	683a      	ldr	r2, [r7, #0]
 80003c4:	601a      	str	r2, [r3, #0]
}
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4618      	mov	r0, r3
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <_ZN10ImgControl14initImgControlEv>:


void ImgControl::initImgControl(void){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	this->lcdDriver->InitLCD();
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 fb31 	bl	8000a44 <_ZN9LCDDriver7InitLCDEv>
}
 80003e2:	bf00      	nop
 80003e4:	3708      	adds	r7, #8
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}

080003ea <_ZN10ImgControl17writeScreenMirrorEv>:




void ImgControl::writeScreenMirror(){
 80003ea:	b5b0      	push	{r4, r5, r7, lr}
 80003ec:	b092      	sub	sp, #72	; 0x48
 80003ee:	af00      	add	r7, sp, #0
 80003f0:	6278      	str	r0, [r7, #36]	; 0x24
	//lcdDriver->writeScreen(screenMirror);
	for(uint8_t copy = 0; copy < LCD_HEIGHT; copy++){
 80003f2:	2300      	movs	r3, #0
 80003f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80003f8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	db25      	blt.n	800044c <_ZN10ImgControl17writeScreenMirrorEv+0x62>
		screenMirrorLast[copy] = (screenMirrorLast[copy] ^ screenMirror[copy]);
 8000400:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000404:	3380      	adds	r3, #128	; 0x80
 8000406:	015b      	lsls	r3, r3, #5
 8000408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800040a:	4413      	add	r3, r2
 800040c:	1d19      	adds	r1, r3, #4
 800040e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000412:	015b      	lsls	r3, r3, #5
 8000414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000416:	4413      	add	r3, r2
 8000418:	1d18      	adds	r0, r3, #4
 800041a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800041e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000420:	3380      	adds	r3, #128	; 0x80
 8000422:	015b      	lsls	r3, r3, #5
 8000424:	18d4      	adds	r4, r2, r3
 8000426:	463b      	mov	r3, r7
 8000428:	4602      	mov	r2, r0
 800042a:	4618      	mov	r0, r3
 800042c:	f000 f9c4 	bl	80007b8 <_ZSteoILj240EESt6bitsetIXT_EERKS1_S3_>
 8000430:	3404      	adds	r4, #4
 8000432:	463d      	mov	r5, r7
 8000434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000438:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800043c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(uint8_t copy = 0; copy < LCD_HEIGHT; copy++){
 8000440:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000444:	3301      	adds	r3, #1
 8000446:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800044a:	e7d5      	b.n	80003f8 <_ZN10ImgControl17writeScreenMirrorEv+0xe>
	}

	lcdDriver->WriteData_16bit(LCD_setAddressPointer, LCD_GRAPHIC_START_ADDR);				//set Address pointer to Graphic home Address
 800044c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000454:	2124      	movs	r1, #36	; 0x24
 8000456:	4618      	mov	r0, r3
 8000458:	f000 fc6b 	bl	8000d32 <_ZN9LCDDriver15WriteData_16bitEht>
	uint8_t sendByte = 0;
 800045c:	2300      	movs	r3, #0
 800045e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	uint8_t testByte = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	uint8_t offset = 0;
 8000468:	2300      	movs	r3, #0
 800046a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	uint16_t addr = LCD_GRAPHIC_START_ADDR;
 800046e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000472:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	uint8_t addrDiff = 0;
 8000476:	2300      	movs	r3, #0
 8000478:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41


	for(uint8_t rowCounter = 0;rowCounter < LCD_HEIGHT; rowCounter++){
 800047c:	2300      	movs	r3, #0
 800047e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8000482:	f997 3040 	ldrsb.w	r3, [r7, #64]	; 0x40
 8000486:	2b00      	cmp	r3, #0
 8000488:	f2c0 80c7 	blt.w	800061a <_ZN10ImgControl17writeScreenMirrorEv+0x230>

		if(screenMirrorLast[rowCounter].any()){
 800048c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000490:	3380      	adds	r3, #128	; 0x80
 8000492:	015b      	lsls	r3, r3, #5
 8000494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000496:	4413      	add	r3, r2
 8000498:	3304      	adds	r3, #4
 800049a:	4618      	mov	r0, r3
 800049c:	f000 f9a5 	bl	80007ea <_ZNKSt6bitsetILj240EE3anyEv>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	f000 80ae 	beq.w	8000604 <_ZN10ImgControl17writeScreenMirrorEv+0x21a>
			offset = 0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

			lcdDriver->WriteData_16bit(LCD_setAddressPointer, addr);				//set Address pointer to Graphic home Address
 80004ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80004b6:	2124      	movs	r1, #36	; 0x24
 80004b8:	4618      	mov	r0, r3
 80004ba:	f000 fc3a 	bl	8000d32 <_ZN9LCDDriver15WriteData_16bitEht>
			for(uint8_t columnCounter = 0; columnCounter < 40; columnCounter++){
 80004be:	2300      	movs	r3, #0
 80004c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80004c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80004c8:	2b27      	cmp	r3, #39	; 0x27
 80004ca:	f200 8097 	bhi.w	80005fc <_ZN10ImgControl17writeScreenMirrorEv+0x212>
				sendByte = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				testByte = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
				for(uint8_t bitCounter = 0; bitCounter<6; bitCounter++){
 80004da:	2300      	movs	r3, #0
 80004dc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80004e0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80004e4:	2b05      	cmp	r3, #5
 80004e6:	d856      	bhi.n	8000596 <_ZN10ImgControl17writeScreenMirrorEv+0x1ac>
					sendByte |= screenMirror[rowCounter][bitCounter+offset];
 80004e8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80004ec:	015b      	lsls	r3, r3, #5
 80004ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004f0:	4413      	add	r3, r2
 80004f2:	1d19      	adds	r1, r3, #4
 80004f4:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80004f8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80004fc:	4413      	add	r3, r2
 80004fe:	461a      	mov	r2, r3
 8000500:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000504:	4618      	mov	r0, r3
 8000506:	f000 f97d 	bl	8000804 <_ZNSt6bitsetILj240EEixEj>
 800050a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800050e:	4618      	mov	r0, r3
 8000510:	f000 f992 	bl	8000838 <_ZNKSt6bitsetILj240EE9referencecvbEv>
 8000514:	4603      	mov	r3, r0
 8000516:	b25a      	sxtb	r2, r3
 8000518:	f997 3046 	ldrsb.w	r3, [r7, #70]	; 0x46
 800051c:	4313      	orrs	r3, r2
 800051e:	b25b      	sxtb	r3, r3
 8000520:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000524:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000528:	4618      	mov	r0, r3
 800052a:	f000 f97a 	bl	8000822 <_ZNSt6bitsetILj240EE9referenceD1Ev>
					testByte |= screenMirrorLast[rowCounter][bitCounter+offset];
 800052e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000532:	3380      	adds	r3, #128	; 0x80
 8000534:	015b      	lsls	r3, r3, #5
 8000536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000538:	4413      	add	r3, r2
 800053a:	1d19      	adds	r1, r3, #4
 800053c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8000540:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000544:	4413      	add	r3, r2
 8000546:	461a      	mov	r2, r3
 8000548:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f959 	bl	8000804 <_ZNSt6bitsetILj240EEixEj>
 8000552:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000556:	4618      	mov	r0, r3
 8000558:	f000 f96e 	bl	8000838 <_ZNKSt6bitsetILj240EE9referencecvbEv>
 800055c:	4603      	mov	r3, r0
 800055e:	b25a      	sxtb	r2, r3
 8000560:	f997 3045 	ldrsb.w	r3, [r7, #69]	; 0x45
 8000564:	4313      	orrs	r3, r2
 8000566:	b25b      	sxtb	r3, r3
 8000568:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800056c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000570:	4618      	mov	r0, r3
 8000572:	f000 f956 	bl	8000822 <_ZNSt6bitsetILj240EE9referenceD1Ev>
					sendByte<<=1;
 8000576:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					testByte<<=1;
 8000580:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
				for(uint8_t bitCounter = 0; bitCounter<6; bitCounter++){
 800058a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800058e:	3301      	adds	r3, #1
 8000590:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000594:	e7a4      	b.n	80004e0 <_ZN10ImgControl17writeScreenMirrorEv+0xf6>
				//	screenMirror[rowCounter]>>(bitCounter+1);
				}
				sendByte>>=1;
 8000596:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800059a:	105b      	asrs	r3, r3, #1
 800059c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				testByte>>=1;
 80005a0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80005a4:	105b      	asrs	r3, r3, #1
 80005a6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
				if(testByte != 0){
 80005aa:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d00f      	beq.n	80005d2 <_ZN10ImgControl17writeScreenMirrorEv+0x1e8>
					lcdDriver->WriteData_16bit(LCD_setAddressPointer, addr);
 80005b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80005ba:	2124      	movs	r1, #36	; 0x24
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 fbb8 	bl	8000d32 <_ZN9LCDDriver15WriteData_16bitEht>
					lcdDriver->WriteData_8bit(LCD_dataWriteAndIncrementADP,sendByte);
 80005c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80005ca:	21c0      	movs	r1, #192	; 0xc0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 fb79 	bl	8000cc4 <_ZN9LCDDriver14WriteData_8bitEhh>
				}

				addr = addr + 1;
 80005d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80005d6:	3301      	adds	r3, #1
 80005d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				addrDiff++;
 80005dc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80005e0:	3301      	adds	r3, #1
 80005e2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
				offset += 6;
 80005e6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80005ea:	3306      	adds	r3, #6
 80005ec:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			for(uint8_t columnCounter = 0; columnCounter < 40; columnCounter++){
 80005f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80005f4:	3301      	adds	r3, #1
 80005f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80005fa:	e763      	b.n	80004c4 <_ZN10ImgControl17writeScreenMirrorEv+0xda>
			}



			//addr = addr + (40-addrDiff);
			addrDiff = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8000602:	e004      	b.n	800060e <_ZN10ImgControl17writeScreenMirrorEv+0x224>

		}else{
			addr = addr + 40;
 8000604:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000608:	3328      	adds	r3, #40	; 0x28
 800060a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	for(uint8_t rowCounter = 0;rowCounter < LCD_HEIGHT; rowCounter++){
 800060e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000612:	3301      	adds	r3, #1
 8000614:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8000618:	e733      	b.n	8000482 <_ZN10ImgControl17writeScreenMirrorEv+0x98>
		}

	}

	for(uint8_t copy = 0; copy < LCD_HEIGHT; copy++){
 800061a:	2300      	movs	r3, #0
 800061c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8000620:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8000624:	2b00      	cmp	r3, #0
 8000626:	db21      	blt.n	800066c <_ZN10ImgControl17writeScreenMirrorEv+0x282>
		screenMirrorLast[copy] = screenMirror[copy];
 8000628:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800062c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8000630:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000632:	3280      	adds	r2, #128	; 0x80
 8000634:	0152      	lsls	r2, r2, #5
 8000636:	440a      	add	r2, r1
 8000638:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800063a:	015b      	lsls	r3, r3, #5
 800063c:	440b      	add	r3, r1
 800063e:	1d14      	adds	r4, r2, #4
 8000640:	1d1d      	adds	r5, r3, #4
 8000642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000646:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800064a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		screenMirror[copy].reset();
 800064e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000652:	015b      	lsls	r3, r3, #5
 8000654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000656:	4413      	add	r3, r2
 8000658:	3304      	adds	r3, #4
 800065a:	4618      	mov	r0, r3
 800065c:	f000 f903 	bl	8000866 <_ZNSt6bitsetILj240EE5resetEv>
	for(uint8_t copy = 0; copy < LCD_HEIGHT; copy++){
 8000660:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000664:	3301      	adds	r3, #1
 8000666:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800066a:	e7d9      	b.n	8000620 <_ZN10ImgControl17writeScreenMirrorEv+0x236>
	}
}
 800066c:	bf00      	nop
 800066e:	3748      	adds	r7, #72	; 0x48
 8000670:	46bd      	mov	sp, r7
 8000672:	bdb0      	pop	{r4, r5, r7, pc}

08000674 <_ZN10ImgControl10writeXLineEhhhh>:


void ImgControl::writeXLine(uint8_t startX, uint8_t startY, uint8_t width, uint8_t lineThickness){
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	4608      	mov	r0, r1
 800067e:	4611      	mov	r1, r2
 8000680:	461a      	mov	r2, r3
 8000682:	4603      	mov	r3, r0
 8000684:	70fb      	strb	r3, [r7, #3]
 8000686:	460b      	mov	r3, r1
 8000688:	70bb      	strb	r3, [r7, #2]
 800068a:	4613      	mov	r3, r2
 800068c:	707b      	strb	r3, [r7, #1]
	for(uint8_t i = 0; i<width; i++){
 800068e:	2300      	movs	r3, #0
 8000690:	75fb      	strb	r3, [r7, #23]
 8000692:	7dfa      	ldrb	r2, [r7, #23]
 8000694:	787b      	ldrb	r3, [r7, #1]
 8000696:	429a      	cmp	r2, r3
 8000698:	d21c      	bcs.n	80006d4 <_ZN10ImgControl10writeXLineEhhhh+0x60>
		screenMirror[startY][startX+i] = 1;
 800069a:	78bb      	ldrb	r3, [r7, #2]
 800069c:	015b      	lsls	r3, r3, #5
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	4413      	add	r3, r2
 80006a2:	1d19      	adds	r1, r3, #4
 80006a4:	78fa      	ldrb	r2, [r7, #3]
 80006a6:	7dfb      	ldrb	r3, [r7, #23]
 80006a8:	4413      	add	r3, r2
 80006aa:	461a      	mov	r2, r3
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 f8a7 	bl	8000804 <_ZNSt6bitsetILj240EEixEj>
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	2101      	movs	r1, #1
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 f8df 	bl	8000880 <_ZNSt6bitsetILj240EE9referenceaSEb>
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f8ab 	bl	8000822 <_ZNSt6bitsetILj240EE9referenceD1Ev>
	for(uint8_t i = 0; i<width; i++){
 80006cc:	7dfb      	ldrb	r3, [r7, #23]
 80006ce:	3301      	adds	r3, #1
 80006d0:	75fb      	strb	r3, [r7, #23]
 80006d2:	e7de      	b.n	8000692 <_ZN10ImgControl10writeXLineEhhhh+0x1e>
	}

}
 80006d4:	bf00      	nop
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <_ZN10ImgControl10writeYLineEhhhh>:


void ImgControl::writeYLine(uint8_t startX, uint8_t startY, uint8_t height, uint8_t lineThickness){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	4608      	mov	r0, r1
 80006e6:	4611      	mov	r1, r2
 80006e8:	461a      	mov	r2, r3
 80006ea:	4603      	mov	r3, r0
 80006ec:	70fb      	strb	r3, [r7, #3]
 80006ee:	460b      	mov	r3, r1
 80006f0:	70bb      	strb	r3, [r7, #2]
 80006f2:	4613      	mov	r3, r2
 80006f4:	707b      	strb	r3, [r7, #1]
	for(uint8_t i = 0; i<height; i++){
 80006f6:	2300      	movs	r3, #0
 80006f8:	75fb      	strb	r3, [r7, #23]
 80006fa:	7dfa      	ldrb	r2, [r7, #23]
 80006fc:	787b      	ldrb	r3, [r7, #1]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d21b      	bcs.n	800073a <_ZN10ImgControl10writeYLineEhhhh+0x5e>
		screenMirror[startY+i][startX] = 1;
 8000702:	78ba      	ldrb	r2, [r7, #2]
 8000704:	7dfb      	ldrb	r3, [r7, #23]
 8000706:	4413      	add	r3, r2
 8000708:	015b      	lsls	r3, r3, #5
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	1d19      	adds	r1, r3, #4
 8000710:	78fa      	ldrb	r2, [r7, #3]
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	4618      	mov	r0, r3
 8000718:	f000 f874 	bl	8000804 <_ZNSt6bitsetILj240EEixEj>
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2101      	movs	r1, #1
 8000722:	4618      	mov	r0, r3
 8000724:	f000 f8ac 	bl	8000880 <_ZNSt6bitsetILj240EE9referenceaSEb>
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	4618      	mov	r0, r3
 800072e:	f000 f878 	bl	8000822 <_ZNSt6bitsetILj240EE9referenceD1Ev>
	for(uint8_t i = 0; i<height; i++){
 8000732:	7dfb      	ldrb	r3, [r7, #23]
 8000734:	3301      	adds	r3, #1
 8000736:	75fb      	strb	r3, [r7, #23]
 8000738:	e7df      	b.n	80006fa <_ZN10ImgControl10writeYLineEhhhh+0x1e>
	}
}
 800073a:	bf00      	nop
 800073c:	3718      	adds	r7, #24
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <_ZN10ImgControl14writeRectangleEhhhhh>:


void ImgControl::writeRectangle(uint8_t startX, uint8_t startY, uint8_t width,uint8_t height, uint8_t lineThickness){
 8000742:	b580      	push	{r7, lr}
 8000744:	b084      	sub	sp, #16
 8000746:	af02      	add	r7, sp, #8
 8000748:	6078      	str	r0, [r7, #4]
 800074a:	4608      	mov	r0, r1
 800074c:	4611      	mov	r1, r2
 800074e:	461a      	mov	r2, r3
 8000750:	4603      	mov	r3, r0
 8000752:	70fb      	strb	r3, [r7, #3]
 8000754:	460b      	mov	r3, r1
 8000756:	70bb      	strb	r3, [r7, #2]
 8000758:	4613      	mov	r3, r2
 800075a:	707b      	strb	r3, [r7, #1]
	writeXLine(startX, startY, width, lineThickness);
 800075c:	7878      	ldrb	r0, [r7, #1]
 800075e:	78ba      	ldrb	r2, [r7, #2]
 8000760:	78f9      	ldrb	r1, [r7, #3]
 8000762:	7d3b      	ldrb	r3, [r7, #20]
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	4603      	mov	r3, r0
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff ff83 	bl	8000674 <_ZN10ImgControl10writeXLineEhhhh>
	writeYLine(startX, startY, height, lineThickness);
 800076e:	7c38      	ldrb	r0, [r7, #16]
 8000770:	78ba      	ldrb	r2, [r7, #2]
 8000772:	78f9      	ldrb	r1, [r7, #3]
 8000774:	7d3b      	ldrb	r3, [r7, #20]
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	4603      	mov	r3, r0
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f7ff ffae 	bl	80006dc <_ZN10ImgControl10writeYLineEhhhh>
	writeXLine(startX, startY+height, width, lineThickness);
 8000780:	78ba      	ldrb	r2, [r7, #2]
 8000782:	7c3b      	ldrb	r3, [r7, #16]
 8000784:	4413      	add	r3, r2
 8000786:	b2da      	uxtb	r2, r3
 8000788:	7878      	ldrb	r0, [r7, #1]
 800078a:	78f9      	ldrb	r1, [r7, #3]
 800078c:	7d3b      	ldrb	r3, [r7, #20]
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	4603      	mov	r3, r0
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff ff6e 	bl	8000674 <_ZN10ImgControl10writeXLineEhhhh>
	writeYLine(startX+width, startY, height, lineThickness);
 8000798:	78fa      	ldrb	r2, [r7, #3]
 800079a:	787b      	ldrb	r3, [r7, #1]
 800079c:	4413      	add	r3, r2
 800079e:	b2d9      	uxtb	r1, r3
 80007a0:	7c38      	ldrb	r0, [r7, #16]
 80007a2:	78ba      	ldrb	r2, [r7, #2]
 80007a4:	7d3b      	ldrb	r3, [r7, #20]
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	4603      	mov	r3, r0
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff ff96 	bl	80006dc <_ZN10ImgControl10writeYLineEhhhh>

}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <_ZSteoILj240EESt6bitsetIXT_EERKS1_S3_>:
      return __result;
    }

  template <size_t _Nb>
    inline bitset<_Nb>
    operator^(const bitset<_Nb>& __x, const bitset<_Nb>& __y) _GLIBCXX_NOEXCEPT
 80007b8:	b5b0      	push	{r4, r5, r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
    {
      bitset<_Nb> __result(__x);
 80007c4:	68fa      	ldr	r2, [r7, #12]
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	4614      	mov	r4, r2
 80007ca:	461d      	mov	r5, r3
 80007cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      __result ^= __y;
 80007d8:	6879      	ldr	r1, [r7, #4]
 80007da:	68f8      	ldr	r0, [r7, #12]
 80007dc:	f000 f87a 	bl	80008d4 <_ZNSt6bitsetILj240EEeOERKS0_>
      return __result;
 80007e0:	bf00      	nop
    }
 80007e2:	68f8      	ldr	r0, [r7, #12]
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bdb0      	pop	{r4, r5, r7, pc}

080007ea <_ZNKSt6bitsetILj240EE3anyEv>:
      any() const _GLIBCXX_NOEXCEPT
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
      { return this->_M_is_any(); }
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 f87d 	bl	80008f4 <_ZNKSt12_Base_bitsetILj8EE9_M_is_anyEv>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <_ZNSt6bitsetILj240EEixEj>:
      operator[](size_t __position)
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
      { return reference(*this, __position); }
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	68b9      	ldr	r1, [r7, #8]
 8000814:	68f8      	ldr	r0, [r7, #12]
 8000816:	f000 f889 	bl	800092c <_ZNSt6bitsetILj240EE9referenceC1ERS0_j>
 800081a:	68f8      	ldr	r0, [r7, #12]
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <_ZNSt6bitsetILj240EE9referenceD1Ev>:
	~reference() _GLIBCXX_NOEXCEPT
 8000822:	b480      	push	{r7}
 8000824:	b083      	sub	sp, #12
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
	{ }
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4618      	mov	r0, r3
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <_ZNKSt6bitsetILj240EE9referencecvbEv>:
	operator bool() const _GLIBCXX_NOEXCEPT
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	{ return (*(_M_wp) & _Base::_S_maskbit(_M_bpos)) != 0; }
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	681c      	ldr	r4, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f894 	bl	8000978 <_ZNSt12_Base_bitsetILj8EE10_S_maskbitEj>
 8000850:	4603      	mov	r3, r0
 8000852:	4023      	ands	r3, r4
 8000854:	2b00      	cmp	r3, #0
 8000856:	bf14      	ite	ne
 8000858:	2301      	movne	r3, #1
 800085a:	2300      	moveq	r3, #0
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4618      	mov	r0, r3
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	bd90      	pop	{r4, r7, pc}

08000866 <_ZNSt6bitsetILj240EE5resetEv>:
      reset() _GLIBCXX_NOEXCEPT
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
	this->_M_do_reset();
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4618      	mov	r0, r3
 8000872:	f000 f88f 	bl	8000994 <_ZNSt12_Base_bitsetILj8EE11_M_do_resetEv>
	return *this;
 8000876:	687b      	ldr	r3, [r7, #4]
      }
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <_ZNSt6bitsetILj240EE9referenceaSEb>:
	operator=(bool __x) _GLIBCXX_NOEXCEPT
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	460b      	mov	r3, r1
 800088a:	70fb      	strb	r3, [r7, #3]
	  if (__x)
 800088c:	78fb      	ldrb	r3, [r7, #3]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d00d      	beq.n	80008ae <_ZNSt6bitsetILj240EE9referenceaSEb+0x2e>
	    *_M_wp |= _Base::_S_maskbit(_M_bpos);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f86e 	bl	8000978 <_ZNSt12_Base_bitsetILj8EE10_S_maskbitEj>
 800089c:	4601      	mov	r1, r0
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	430a      	orrs	r2, r1
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	e00d      	b.n	80008ca <_ZNSt6bitsetILj240EE9referenceaSEb+0x4a>
	    *_M_wp &= ~_Base::_S_maskbit(_M_bpos);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f860 	bl	8000978 <_ZNSt12_Base_bitsetILj8EE10_S_maskbitEj>
 80008b8:	4603      	mov	r3, r0
 80008ba:	43d9      	mvns	r1, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	400a      	ands	r2, r1
 80008c8:	601a      	str	r2, [r3, #0]
	  return *this;
 80008ca:	687b      	ldr	r3, [r7, #4]
	}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <_ZNSt6bitsetILj240EEeOERKS0_>:
      operator^=(const bitset<_Nb>& __rhs) _GLIBCXX_NOEXCEPT
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
	this->_M_do_xor(__rhs);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	683a      	ldr	r2, [r7, #0]
 80008e2:	4611      	mov	r1, r2
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 f864 	bl	80009b2 <_ZNSt12_Base_bitsetILj8EE9_M_do_xorERKS0_>
	return *this;
 80008ea:	687b      	ldr	r3, [r7, #4]
      }
 80008ec:	4618      	mov	r0, r3
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <_ZNKSt12_Base_bitsetILj8EE9_M_is_anyEv>:
      _M_is_any() const _GLIBCXX_NOEXCEPT
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	for (size_t __i = 0; __i < _Nw; __i++)
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	2b07      	cmp	r3, #7
 8000904:	d80b      	bhi.n	800091e <_ZNKSt12_Base_bitsetILj8EE9_M_is_anyEv+0x2a>
	  if (_M_w[__i] != static_cast<_WordT>(0))
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	68fa      	ldr	r2, [r7, #12]
 800090a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <_ZNKSt12_Base_bitsetILj8EE9_M_is_anyEv+0x22>
	    return true;
 8000912:	2301      	movs	r3, #1
 8000914:	e004      	b.n	8000920 <_ZNKSt12_Base_bitsetILj8EE9_M_is_anyEv+0x2c>
	for (size_t __i = 0; __i < _Nw; __i++)
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	3301      	adds	r3, #1
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	e7f0      	b.n	8000900 <_ZNKSt12_Base_bitsetILj8EE9_M_is_anyEv+0xc>
	return false;
 800091e:	2300      	movs	r3, #0
      }
 8000920:	4618      	mov	r0, r3
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <_ZNSt6bitsetILj240EE9referenceC1ERS0_j>:
	reference(bitset& __b, size_t __pos) _GLIBCXX_NOEXCEPT
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
	  _M_wp = &__b._M_getword(__pos);
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	4618      	mov	r0, r3
 800093e:	f000 f85a 	bl	80009f6 <_ZNSt12_Base_bitsetILj8EE10_M_getwordEj>
 8000942:	4602      	mov	r2, r0
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	601a      	str	r2, [r3, #0]
	  _M_bpos = _Base::_S_whichbit(__pos);
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f000 f808 	bl	800095e <_ZNSt12_Base_bitsetILj8EE11_S_whichbitEj>
 800094e:	4602      	mov	r2, r0
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	605a      	str	r2, [r3, #4]
	}
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	4618      	mov	r0, r3
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <_ZNSt12_Base_bitsetILj8EE11_S_whichbitEj>:
      _S_whichbit(size_t __pos) _GLIBCXX_NOEXCEPT
 800095e:	b480      	push	{r7}
 8000960:	b083      	sub	sp, #12
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
      { return __pos % _GLIBCXX_BITSET_BITS_PER_WORD; }
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	f003 031f 	and.w	r3, r3, #31
 800096c:	4618      	mov	r0, r3
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <_ZNSt12_Base_bitsetILj8EE10_S_maskbitEj>:
      _S_maskbit(size_t __pos) _GLIBCXX_NOEXCEPT
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
      { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f7ff ffec 	bl	800095e <_ZNSt12_Base_bitsetILj8EE11_S_whichbitEj>
 8000986:	4602      	mov	r2, r0
 8000988:	2301      	movs	r3, #1
 800098a:	4093      	lsls	r3, r2
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <_ZNSt12_Base_bitsetILj8EE11_M_do_resetEv>:
      _M_do_reset() _GLIBCXX_NOEXCEPT
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
      { __builtin_memset(_M_w, 0, _Nw * sizeof(_WordT)); }
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4618      	mov	r0, r3
 80009a0:	2320      	movs	r3, #32
 80009a2:	461a      	mov	r2, r3
 80009a4:	2100      	movs	r1, #0
 80009a6:	f002 fb1f 	bl	8002fe8 <memset>
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <_ZNSt12_Base_bitsetILj8EE9_M_do_xorERKS0_>:
      _M_do_xor(const _Base_bitset<_Nw>& __x) _GLIBCXX_NOEXCEPT
 80009b2:	b480      	push	{r7}
 80009b4:	b085      	sub	sp, #20
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
 80009ba:	6039      	str	r1, [r7, #0]
	for (size_t __i = 0; __i < _Nw; __i++)
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	2b07      	cmp	r3, #7
 80009c4:	d811      	bhi.n	80009ea <_ZNSt12_Base_bitsetILj8EE9_M_do_xorERKS0_+0x38>
	  _M_w[__i] ^= __x._M_w[__i];
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	68fa      	ldr	r2, [r7, #12]
 80009ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	68f9      	ldr	r1, [r7, #12]
 80009d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80009d6:	ea82 0103 	eor.w	r1, r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	68fa      	ldr	r2, [r7, #12]
 80009de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (size_t __i = 0; __i < _Nw; __i++)
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	3301      	adds	r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	e7ea      	b.n	80009c0 <_ZNSt12_Base_bitsetILj8EE9_M_do_xorERKS0_+0xe>
      }
 80009ea:	bf00      	nop
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <_ZNSt12_Base_bitsetILj8EE10_M_getwordEj>:
      _M_getword(size_t __pos) _GLIBCXX_NOEXCEPT
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	6039      	str	r1, [r7, #0]
      { return _M_w[_S_whichword(__pos)]; }
 8000a00:	6838      	ldr	r0, [r7, #0]
 8000a02:	f000 f808 	bl	8000a16 <_ZNSt12_Base_bitsetILj8EE12_S_whichwordEj>
 8000a06:	4603      	mov	r3, r0
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <_ZNSt12_Base_bitsetILj8EE12_S_whichwordEj>:
      _S_whichword(size_t __pos) _GLIBCXX_NOEXCEPT
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
      { return __pos / _GLIBCXX_BITSET_BITS_PER_WORD; }
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	095b      	lsrs	r3, r3, #5
 8000a22:	4618      	mov	r0, r3
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <_ZN9LCDDriverC1Ev>:
#include "i2c.h"
#include "gpio.h"
#include "stdlib.h"
#include "math.h"

LCDDriver::LCDDriver() {
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <_ZN9LCDDriver7InitLCDEv>:


void LCDDriver::InitLCD(){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	Reset();
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f000 fa35 	bl	8000ebc <_ZN9LCDDriver5ResetEv>
	LCD_RD_SET;
 8000a52:	2201      	movs	r2, #1
 8000a54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5c:	f000 ff4e 	bl	80018fc <HAL_GPIO_WritePin>
	LCD_WR_SET;
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6a:	f000 ff47 	bl	80018fc <HAL_GPIO_WritePin>
	SetLCDSize(SIZE_40C);
 8000a6e:	2100      	movs	r1, #0
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f000 f845 	bl	8000b00 <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E>

	//init REGISTERS SETTING
	WriteData_16bit(LCD_setCursorPointer,0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2121      	movs	r1, #33	; 0x21
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f000 f959 	bl	8000d32 <_ZN9LCDDriver15WriteData_16bitEht>
	WriteData_16bit(LCD_setAddressPointer, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2124      	movs	r1, #36	; 0x24
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f000 f954 	bl	8000d32 <_ZN9LCDDriver15WriteData_16bitEht>
	WriteData_16bit(LCD_setOffsetRegister, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2122      	movs	r1, #34	; 0x22
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f000 f94f 	bl	8000d32 <_ZN9LCDDriver15WriteData_16bitEht>
	//Init SET CONTROL WORD
	WriteData_16bit(LCD_setTextHomeAddress,LCD_TXT_START_ADDR);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2140      	movs	r1, #64	; 0x40
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f000 f94a 	bl	8000d32 <_ZN9LCDDriver15WriteData_16bitEht>
	WriteData_16bit(LCD_setGraphicHomeAddress, LCD_GRAPHIC_START_ADDR);
 8000a9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aa2:	2142      	movs	r1, #66	; 0x42
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f000 f944 	bl	8000d32 <_ZN9LCDDriver15WriteData_16bitEht>
	//Init MODE SET
	WriteData_8bit(LCD_OR_mode |LCD_InternalCGROM_mode);
 8000aaa:	2180      	movs	r1, #128	; 0x80
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f000 f8e2 	bl	8000c76 <_ZN9LCDDriver14WriteData_8bitEh>
	//Init DISPLY MODE
	WriteData_8bit(LCD_cursorOnBlinkON | LCD_textONGraphicON);
 8000ab2:	219f      	movs	r1, #159	; 0x9f
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f000 f8de 	bl	8000c76 <_ZN9LCDDriver14WriteData_8bitEh>
	//Init CURSOR PATTERN SELECT
	WriteData_8bit(LCD_1_lineCursor);
 8000aba:	21a0      	movs	r1, #160	; 0xa0
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f000 f8da 	bl	8000c76 <_ZN9LCDDriver14WriteData_8bitEh>
	//Init DATA AUTO READ/WRITE
	WriteData_8bit(LCD_setDataAutoRead);
 8000ac2:	21b1      	movs	r1, #177	; 0xb1
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f000 f8d6 	bl	8000c76 <_ZN9LCDDriver14WriteData_8bitEh>
	//Init SCREEN REVERSE
	WriteData_16bit(LCD_SCREEN_REVERSE, NORMAL_DISPLAY);
 8000aca:	2200      	movs	r2, #0
 8000acc:	21d0      	movs	r1, #208	; 0xd0
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f000 f92f 	bl	8000d32 <_ZN9LCDDriver15WriteData_16bitEht>
	//Init BLINK TIME
	WriteData_16bit(LCD_BLINK_TIME, BLINK_TIM_0_066);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2150      	movs	r1, #80	; 0x50
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 f92a 	bl	8000d32 <_ZN9LCDDriver15WriteData_16bitEht>
	//Init CURSOR AUTO MOVING
	WriteData_16bit(LCD_CursorAutoMoving, AUTO_MOVING_ON);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2160      	movs	r1, #96	; 0x60
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f000 f925 	bl	8000d32 <_ZN9LCDDriver15WriteData_16bitEht>

	ClearDisplay();
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f000 f85e 	bl	8000baa <_ZN9LCDDriver12ClearDisplayEv>
	SetAddressPointer(0, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2100      	movs	r1, #0
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f000 f8a1 	bl	8000c3a <_ZN9LCDDriver17SetAddressPointerEhh>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E>:
 * Init the LCD Size (40 Columns / 32 Columns)
 *
 * @param size: LCD Size
 * @return : none
 */
void LCDDriver::SetLCDSize(LCD_SIZE size){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	70fb      	strb	r3, [r7, #3]
	if(size == SIZE_40C){
 8000b0c:	78fb      	ldrb	r3, [r7, #3]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d122      	bne.n	8000b58 <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E+0x58>
		LCD_SIZE_40;				//set size 40 Columns
 8000b12:	2200      	movs	r2, #0
 8000b14:	2102      	movs	r1, #2
 8000b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1a:	f000 feef 	bl	80018fc <HAL_GPIO_WritePin>
		LCD_FONT_68;				//set Fontsize 6x8px
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2101      	movs	r1, #1
 8000b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b26:	f000 fee9 	bl	80018fc <HAL_GPIO_WritePin>
		LCD_XY_SIZE.column = LCD_WIDTH/6;	//set LCD size struct to 40 Columns
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2228      	movs	r2, #40	; 0x28
 8000b2e:	701a      	strb	r2, [r3, #0]
		LCD_XY_SIZE.row = LCD_WIDTH/8;		//set LCD size struct to 16 Row
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	221e      	movs	r2, #30
 8000b34:	705a      	strb	r2, [r3, #1]
		LCD_XY_SIZE.patternHeight = 8;		//set pattern height to 8 pixel (pattern is the 6x8 pixel container)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2208      	movs	r2, #8
 8000b3a:	709a      	strb	r2, [r3, #2]
		LCD_XY_SIZE.patternWidth =  6;		//set pattern width to 6 pixel (pattern is the 6x8 pixel container)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2206      	movs	r2, #6
 8000b40:	70da      	strb	r2, [r3, #3]
		WriteData_16bit(LCD_setTextArea, 0x0028);	//set TextArea to 40 Columns
 8000b42:	2228      	movs	r2, #40	; 0x28
 8000b44:	2141      	movs	r1, #65	; 0x41
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f000 f8f3 	bl	8000d32 <_ZN9LCDDriver15WriteData_16bitEht>
		WriteData_16bit(LCD_setGraphicArea, 0x0028);
 8000b4c:	2228      	movs	r2, #40	; 0x28
 8000b4e:	2143      	movs	r1, #67	; 0x43
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f000 f8ee 	bl	8000d32 <_ZN9LCDDriver15WriteData_16bitEht>
		LCD_XY_SIZE.patternHeight = 8;		//set pattern height to 8 pixel (pattern is the 6x8 pixel container)
		LCD_XY_SIZE.patternWidth =  8;		//set pattern width to 6 pixel (pattern is the 6x8 pixel container)
		WriteData_16bit(LCD_setTextArea, 0x0020);	//set TextArea to 32 Columns
		WriteData_16bit(LCD_setGraphicArea, 0x0020);
	}
}
 8000b56:	e024      	b.n	8000ba2 <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E+0xa2>
	else if(size == SIZE_32C){
 8000b58:	78fb      	ldrb	r3, [r7, #3]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d121      	bne.n	8000ba2 <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E+0xa2>
		LCD_SIZE_32;				//set size 32 Columns
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2102      	movs	r1, #2
 8000b62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b66:	f000 fec9 	bl	80018fc <HAL_GPIO_WritePin>
		LCD_FONT_88;				//set Fontsize 8x8px
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b72:	f000 fec3 	bl	80018fc <HAL_GPIO_WritePin>
		LCD_XY_SIZE.column = 32;	//set LCD size struct to 32 Columns
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2220      	movs	r2, #32
 8000b7a:	701a      	strb	r2, [r3, #0]
		LCD_XY_SIZE.row = 16;		//set LCD size struct to 16 Row
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2210      	movs	r2, #16
 8000b80:	705a      	strb	r2, [r3, #1]
		LCD_XY_SIZE.patternHeight = 8;		//set pattern height to 8 pixel (pattern is the 6x8 pixel container)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2208      	movs	r2, #8
 8000b86:	709a      	strb	r2, [r3, #2]
		LCD_XY_SIZE.patternWidth =  8;		//set pattern width to 6 pixel (pattern is the 6x8 pixel container)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2208      	movs	r2, #8
 8000b8c:	70da      	strb	r2, [r3, #3]
		WriteData_16bit(LCD_setTextArea, 0x0020);	//set TextArea to 32 Columns
 8000b8e:	2220      	movs	r2, #32
 8000b90:	2141      	movs	r1, #65	; 0x41
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f000 f8cd 	bl	8000d32 <_ZN9LCDDriver15WriteData_16bitEht>
		WriteData_16bit(LCD_setGraphicArea, 0x0020);
 8000b98:	2220      	movs	r2, #32
 8000b9a:	2143      	movs	r1, #67	; 0x43
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f000 f8c8 	bl	8000d32 <_ZN9LCDDriver15WriteData_16bitEht>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <_ZN9LCDDriver12ClearDisplayEv>:
 * clears the whole LCD depending on the selected size
 *
 * @param  : none
 * @return : none
 */
void LCDDriver::ClearDisplay(){
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b084      	sub	sp, #16
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]

/*
	uint8_t CH_ARROW[] = {0x00, 0x04, 0x0E, 0x15, 0x04, 0x04, 0x04,0x00};
	setUserChar(CH_ARROW, 0x02,0);
*/
	WriteData_16bit(LCD_setOffsetRegister, 0x0000);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2122      	movs	r1, #34	; 0x22
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f000 f8bb 	bl	8000d32 <_ZN9LCDDriver15WriteData_16bitEht>

	WriteData_16bit(LCD_setAddressPointer, LCD_TXT_START_ADDR);				//set address pointer to text home address
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2124      	movs	r1, #36	; 0x24
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f000 f8b6 	bl	8000d32 <_ZN9LCDDriver15WriteData_16bitEht>
	for(uint16_t counter = 0; counter<LCD_XY_SIZE.column*LCD_XY_SIZE.row; counter++){
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	81fb      	strh	r3, [r7, #14]
 8000bca:	89fa      	ldrh	r2, [r7, #14]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	785b      	ldrb	r3, [r3, #1]
 8000bd6:	fb03 f301 	mul.w	r3, r3, r1
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	da08      	bge.n	8000bf0 <_ZN9LCDDriver12ClearDisplayEv+0x46>
		WriteData_16bit(LCD_dataWriteAndIncrementADP, 0x00);	//clear text
 8000bde:	2200      	movs	r2, #0
 8000be0:	21c0      	movs	r1, #192	; 0xc0
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f000 f8a5 	bl	8000d32 <_ZN9LCDDriver15WriteData_16bitEht>
	for(uint16_t counter = 0; counter<LCD_XY_SIZE.column*LCD_XY_SIZE.row; counter++){
 8000be8:	89fb      	ldrh	r3, [r7, #14]
 8000bea:	3301      	adds	r3, #1
 8000bec:	81fb      	strh	r3, [r7, #14]
 8000bee:	e7ec      	b.n	8000bca <_ZN9LCDDriver12ClearDisplayEv+0x20>
	}


	WriteData_16bit(LCD_setAddressPointer, LCD_GRAPHIC_START_ADDR);				//set Address pointer to Graphic home Address
 8000bf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bf4:	2124      	movs	r1, #36	; 0x24
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f000 f89b 	bl	8000d32 <_ZN9LCDDriver15WriteData_16bitEht>
	for(int i = 0; i<LCD_XY_SIZE.column*LCD_XY_SIZE.row*8;i++){
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	785b      	ldrb	r3, [r3, #1]
 8000c0a:	fb03 f302 	mul.w	r3, r3, r2
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	68ba      	ldr	r2, [r7, #8]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	da08      	bge.n	8000c28 <_ZN9LCDDriver12ClearDisplayEv+0x7e>
		WriteData_8bit(LCD_dataWriteAndIncrementADP, 0x00);		//clear graphic
 8000c16:	2200      	movs	r2, #0
 8000c18:	21c0      	movs	r1, #192	; 0xc0
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f000 f852 	bl	8000cc4 <_ZN9LCDDriver14WriteData_8bitEhh>
	for(int i = 0; i<LCD_XY_SIZE.column*LCD_XY_SIZE.row*8;i++){
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	3301      	adds	r3, #1
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	e7eb      	b.n	8000c00 <_ZN9LCDDriver12ClearDisplayEv+0x56>
	}

	WriteData_16bit(LCD_setAddressPointer, LCD_TXT_START_ADDR);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2124      	movs	r1, #36	; 0x24
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f000 f880 	bl	8000d32 <_ZN9LCDDriver15WriteData_16bitEht>
}
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <_ZN9LCDDriver17SetAddressPointerEhh>:
 *
 * @param column: the chosen Column
 * @param row: the chosen Row
 * @return : none;
 */
void LCDDriver::SetAddressPointer(uint8_t column, uint8_t row){
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b084      	sub	sp, #16
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
 8000c42:	460b      	mov	r3, r1
 8000c44:	70fb      	strb	r3, [r7, #3]
 8000c46:	4613      	mov	r3, r2
 8000c48:	70bb      	strb	r3, [r7, #2]
	uint16_t LCDPointer = row*LCD_XY_SIZE.column + column;	//calculate the AdressPointer depending on the selected LCD Size
 8000c4a:	78bb      	ldrb	r3, [r7, #2]
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	fb12 f303 	smulbb	r3, r2, r3
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	78fb      	ldrb	r3, [r7, #3]
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	4413      	add	r3, r2
 8000c60:	81fb      	strh	r3, [r7, #14]
	WriteData_16bit(LCD_setAddressPointer, LCDPointer);		//set the AdressPointer
 8000c62:	89fb      	ldrh	r3, [r7, #14]
 8000c64:	461a      	mov	r2, r3
 8000c66:	2124      	movs	r1, #36	; 0x24
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f000 f862 	bl	8000d32 <_ZN9LCDDriver15WriteData_16bitEht>
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <_ZN9LCDDriver14WriteData_8bitEh>:


bool LCDDriver::WriteData_8bit(uint8_t addr){
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
 8000c7e:	460b      	mov	r3, r1
 8000c80:	70fb      	strb	r3, [r7, #3]
	LCD_OUTPUT_ENABLE;
 8000c82:	2201      	movs	r2, #1
 8000c84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8c:	f000 fe36 	bl	80018fc <HAL_GPIO_WritePin>


//	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
//		return false;
//	}
	WriteDataPin(addr);
 8000c90:	78fb      	ldrb	r3, [r7, #3]
 8000c92:	4619      	mov	r1, r3
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f000 f8b7 	bl	8000e08 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_COMMAND;
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2104      	movs	r1, #4
 8000c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca2:	f000 fe2b 	bl	80018fc <HAL_GPIO_WritePin>
	PushData();
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f000 f88b 	bl	8000dc2 <_ZN9LCDDriver8PushDataEv>

	LCD_OUTPUT_DISABLE;
 8000cac:	2200      	movs	r2, #0
 8000cae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb6:	f000 fe21 	bl	80018fc <HAL_GPIO_WritePin>
	return true;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <_ZN9LCDDriver14WriteData_8bitEhh>:


bool LCDDriver::WriteData_8bit(uint8_t addr, uint8_t data){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	70fb      	strb	r3, [r7, #3]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	70bb      	strb	r3, [r7, #2]
	LCD_OUTPUT_ENABLE;
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cde:	f000 fe0d 	bl	80018fc <HAL_GPIO_WritePin>

//	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
//		return false;
//	}
	WriteDataPin(data);
 8000ce2:	78bb      	ldrb	r3, [r7, #2]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f000 f88e 	bl	8000e08 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_DATA;
 8000cec:	2200      	movs	r2, #0
 8000cee:	2104      	movs	r1, #4
 8000cf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf4:	f000 fe02 	bl	80018fc <HAL_GPIO_WritePin>
	PushData();
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f000 f862 	bl	8000dc2 <_ZN9LCDDriver8PushDataEv>

//	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
//		return false;
//	}
	WriteDataPin(addr);
 8000cfe:	78fb      	ldrb	r3, [r7, #3]
 8000d00:	4619      	mov	r1, r3
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f000 f880 	bl	8000e08 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_COMMAND;
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2104      	movs	r1, #4
 8000d0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d10:	f000 fdf4 	bl	80018fc <HAL_GPIO_WritePin>
	PushData();
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f000 f854 	bl	8000dc2 <_ZN9LCDDriver8PushDataEv>

	LCD_OUTPUT_DISABLE;
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d24:	f000 fdea 	bl	80018fc <HAL_GPIO_WritePin>
	return true;
 8000d28:	2301      	movs	r3, #1
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <_ZN9LCDDriver15WriteData_16bitEht>:

bool LCDDriver::WriteData_16bit(uint8_t addr, uint16_t data) {
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	70fb      	strb	r3, [r7, #3]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	803b      	strh	r3, [r7, #0]
	LCD_OUTPUT_ENABLE;
 8000d42:	2201      	movs	r2, #1
 8000d44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4c:	f000 fdd6 	bl	80018fc <HAL_GPIO_WritePin>
//	if (CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR) {
//		return false;
//	}
	WriteDataPin((uint8_t) (data));
 8000d50:	883b      	ldrh	r3, [r7, #0]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	4619      	mov	r1, r3
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f000 f856 	bl	8000e08 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_DATA;
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2104      	movs	r1, #4
 8000d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d64:	f000 fdca 	bl	80018fc <HAL_GPIO_WritePin>
	PushData();
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f000 f82a 	bl	8000dc2 <_ZN9LCDDriver8PushDataEv>
//	if (CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR) {
//		return false;
//	}
	WriteDataPin((uint8_t) ((data >> 8)));
 8000d6e:	883b      	ldrh	r3, [r7, #0]
 8000d70:	121b      	asrs	r3, r3, #8
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	4619      	mov	r1, r3
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f000 f846 	bl	8000e08 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_DATA;
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2104      	movs	r1, #4
 8000d80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d84:	f000 fdba 	bl	80018fc <HAL_GPIO_WritePin>
	PushData();
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f000 f81a 	bl	8000dc2 <_ZN9LCDDriver8PushDataEv>
//	if (CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR) {
//		return false;
//	}
	WriteDataPin(addr);
 8000d8e:	78fb      	ldrb	r3, [r7, #3]
 8000d90:	4619      	mov	r1, r3
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f000 f838 	bl	8000e08 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_COMMAND;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	2104      	movs	r1, #4
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da0:	f000 fdac 	bl	80018fc <HAL_GPIO_WritePin>
	PushData();
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f000 f80c 	bl	8000dc2 <_ZN9LCDDriver8PushDataEv>
	LCD_OUTPUT_DISABLE;
 8000daa:	2200      	movs	r2, #0
 8000dac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db4:	f000 fda2 	bl	80018fc <HAL_GPIO_WritePin>
	return true;
 8000db8:	2301      	movs	r3, #1
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <_ZN9LCDDriver8PushDataEv>:


void LCDDriver::PushData(){
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
	//toggle WR and Enable PIN so that the LCD reads the data
	LCD_WR_RESET;
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd4:	f000 fd92 	bl	80018fc <HAL_GPIO_WritePin>
	LCD_ENABLE;
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2110      	movs	r1, #16
 8000ddc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de0:	f000 fd8c 	bl	80018fc <HAL_GPIO_WritePin>
	LCD_DISABLE;
 8000de4:	2201      	movs	r2, #1
 8000de6:	2110      	movs	r1, #16
 8000de8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dec:	f000 fd86 	bl	80018fc <HAL_GPIO_WritePin>
	LCD_WR_SET;
 8000df0:	2201      	movs	r2, #1
 8000df2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfa:	f000 fd7f 	bl	80018fc <HAL_GPIO_WritePin>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <_ZN9LCDDriver12WriteDataPinEh>:
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct_2);
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct_3);
}


void LCDDriver::WriteDataPin(uint8_t data){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, (GPIO_PinState)(data & 0x01));
 8000e14:	78fb      	ldrb	r3, [r7, #3]
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	2110      	movs	r1, #16
 8000e20:	4824      	ldr	r0, [pc, #144]	; (8000eb4 <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000e22:	f000 fd6b 	bl	80018fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, (GPIO_PinState)(data & 0x02));
 8000e26:	78fb      	ldrb	r3, [r7, #3]
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	461a      	mov	r2, r3
 8000e30:	2120      	movs	r1, #32
 8000e32:	4820      	ldr	r0, [pc, #128]	; (8000eb4 <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000e34:	f000 fd62 	bl	80018fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, (GPIO_PinState)(data & 0x04));
 8000e38:	78fb      	ldrb	r3, [r7, #3]
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	461a      	mov	r2, r3
 8000e42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4a:	f000 fd57 	bl	80018fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, (GPIO_PinState)(data & 0x08));
 8000e4e:	78fb      	ldrb	r3, [r7, #3]
 8000e50:	f003 0308 	and.w	r3, r3, #8
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	461a      	mov	r2, r3
 8000e58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e60:	f000 fd4c 	bl	80018fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (GPIO_PinState)(data & 0x10));
 8000e64:	78fb      	ldrb	r3, [r7, #3]
 8000e66:	f003 0310 	and.w	r3, r3, #16
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	2102      	movs	r1, #2
 8000e70:	4811      	ldr	r0, [pc, #68]	; (8000eb8 <_ZN9LCDDriver12WriteDataPinEh+0xb0>)
 8000e72:	f000 fd43 	bl	80018fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (GPIO_PinState)(data & 0x20));
 8000e76:	78fb      	ldrb	r3, [r7, #3]
 8000e78:	f003 0320 	and.w	r3, r3, #32
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	461a      	mov	r2, r3
 8000e80:	2101      	movs	r1, #1
 8000e82:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <_ZN9LCDDriver12WriteDataPinEh+0xb0>)
 8000e84:	f000 fd3a 	bl	80018fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (GPIO_PinState)(data & 0x40));
 8000e88:	78fb      	ldrb	r3, [r7, #3]
 8000e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	461a      	mov	r2, r3
 8000e92:	2102      	movs	r1, #2
 8000e94:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000e96:	f000 fd31 	bl	80018fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (GPIO_PinState)(data & 0x80));
 8000e9a:	78fb      	ldrb	r3, [r7, #3]
 8000e9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000ea8:	f000 fd28 	bl	80018fc <HAL_GPIO_WritePin>

}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	48000400 	.word	0x48000400
 8000eb8:	48001400 	.word	0x48001400

08000ebc <_ZN9LCDDriver5ResetEv>:
 * Reset LCD
 *
 * @param none
 * @return none
 */
void LCDDriver::Reset(){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	LCD_RST_L;
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2108      	movs	r1, #8
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ecc:	f000 fd16 	bl	80018fc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f000 fa99 	bl	8001408 <HAL_Delay>
	LCD_RST_H;
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	2108      	movs	r1, #8
 8000eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ede:	f000 fd0d 	bl	80018fc <HAL_GPIO_WritePin>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef2:	f107 030c 	add.w	r3, r7, #12
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f02:	4b32      	ldr	r3, [pc, #200]	; (8000fcc <MX_GPIO_Init+0xe0>)
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	4a31      	ldr	r2, [pc, #196]	; (8000fcc <MX_GPIO_Init+0xe0>)
 8000f08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f0c:	6153      	str	r3, [r2, #20]
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <MX_GPIO_Init+0xe0>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b2c      	ldr	r3, [pc, #176]	; (8000fcc <MX_GPIO_Init+0xe0>)
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	4a2b      	ldr	r2, [pc, #172]	; (8000fcc <MX_GPIO_Init+0xe0>)
 8000f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f24:	6153      	str	r3, [r2, #20]
 8000f26:	4b29      	ldr	r3, [pc, #164]	; (8000fcc <MX_GPIO_Init+0xe0>)
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <MX_GPIO_Init+0xe0>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	4a25      	ldr	r2, [pc, #148]	; (8000fcc <MX_GPIO_Init+0xe0>)
 8000f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f3c:	6153      	str	r3, [r2, #20]
 8000f3e:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <MX_GPIO_Init+0xe0>)
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2103      	movs	r1, #3
 8000f4e:	4820      	ldr	r0, [pc, #128]	; (8000fd0 <MX_GPIO_Init+0xe4>)
 8000f50:	f000 fcd4 	bl	80018fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FS_Pin|MD2_Pin|CD_Pin|RESET_Pin 
 8000f54:	2200      	movs	r2, #0
 8000f56:	f641 711f 	movw	r1, #7967	; 0x1f1f
 8000f5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5e:	f000 fccd 	bl	80018fc <HAL_GPIO_WritePin>
                          |CE_Pin|D3_Pin|RD_Pin|WR_Pin 
                          |D2_Pin|OE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D6_Pin|D0_Pin|D1_Pin, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2133      	movs	r1, #51	; 0x33
 8000f66:	481b      	ldr	r0, [pc, #108]	; (8000fd4 <MX_GPIO_Init+0xe8>)
 8000f68:	f000 fcc8 	bl	80018fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = D5_Pin|D4_Pin;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	4619      	mov	r1, r3
 8000f82:	4813      	ldr	r0, [pc, #76]	; (8000fd0 <MX_GPIO_Init+0xe4>)
 8000f84:	f000 fb48 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = FS_Pin|MD2_Pin|CD_Pin|RESET_Pin 
 8000f88:	f641 731f 	movw	r3, #7967	; 0x1f1f
 8000f8c:	60fb      	str	r3, [r7, #12]
                          |CE_Pin|D3_Pin|RD_Pin|WR_Pin 
                          |D2_Pin|OE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f96:	2303      	movs	r3, #3
 8000f98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	f107 030c 	add.w	r3, r7, #12
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa4:	f000 fb38 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D0_Pin|D1_Pin;
 8000fa8:	2333      	movs	r3, #51	; 0x33
 8000faa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_GPIO_Init+0xe8>)
 8000fc0:	f000 fb2a 	bl	8001618 <HAL_GPIO_Init>

}
 8000fc4:	bf00      	nop
 8000fc6:	3720      	adds	r7, #32
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	48001400 	.word	0x48001400
 8000fd4:	48000400 	.word	0x48000400

08000fd8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <MX_I2C1_Init+0x74>)
 8000fde:	4a1c      	ldr	r2, [pc, #112]	; (8001050 <MX_I2C1_Init+0x78>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	; (800104c <MX_I2C1_Init+0x74>)
 8000fe4:	4a1b      	ldr	r2, [pc, #108]	; (8001054 <MX_I2C1_Init+0x7c>)
 8000fe6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fe8:	4b18      	ldr	r3, [pc, #96]	; (800104c <MX_I2C1_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <MX_I2C1_Init+0x74>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <MX_I2C1_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <MX_I2C1_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <MX_I2C1_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <MX_I2C1_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <MX_I2C1_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001012:	480e      	ldr	r0, [pc, #56]	; (800104c <MX_I2C1_Init+0x74>)
 8001014:	f000 fc8a 	bl	800192c <HAL_I2C_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800101e:	f000 f8d6 	bl	80011ce <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001022:	2100      	movs	r1, #0
 8001024:	4809      	ldr	r0, [pc, #36]	; (800104c <MX_I2C1_Init+0x74>)
 8001026:	f000 fd10 	bl	8001a4a <HAL_I2CEx_ConfigAnalogFilter>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001030:	f000 f8cd 	bl	80011ce <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001034:	2100      	movs	r1, #0
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_I2C1_Init+0x74>)
 8001038:	f000 fd52 	bl	8001ae0 <HAL_I2CEx_ConfigDigitalFilter>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001042:	f000 f8c4 	bl	80011ce <Error_Handler>
  }

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20002030 	.word	0x20002030
 8001050:	40005400 	.word	0x40005400
 8001054:	00201d2b 	.word	0x00201d2b

08001058 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a17      	ldr	r2, [pc, #92]	; (80010d4 <HAL_I2C_MspInit+0x7c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d127      	bne.n	80010ca <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <HAL_I2C_MspInit+0x80>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	4a16      	ldr	r2, [pc, #88]	; (80010d8 <HAL_I2C_MspInit+0x80>)
 8001080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001084:	6153      	str	r3, [r2, #20]
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_I2C_MspInit+0x80>)
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001092:	23c0      	movs	r3, #192	; 0xc0
 8001094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001096:	2312      	movs	r3, #18
 8001098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800109a:	2301      	movs	r3, #1
 800109c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010a2:	2304      	movs	r3, #4
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	480b      	ldr	r0, [pc, #44]	; (80010dc <HAL_I2C_MspInit+0x84>)
 80010ae:	f000 fab3 	bl	8001618 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <HAL_I2C_MspInit+0x80>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <HAL_I2C_MspInit+0x80>)
 80010b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010bc:	61d3      	str	r3, [r2, #28]
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_I2C_MspInit+0x80>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010ca:	bf00      	nop
 80010cc:	3728      	adds	r7, #40	; 0x28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40005400 	.word	0x40005400
 80010d8:	40021000 	.word	0x40021000
 80010dc:	48000400 	.word	0x48000400

080010e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 80010e4:	f000 f92a 	bl	800133c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e8:	f000 f80a 	bl	8001100 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ec:	f7ff fefe 	bl	8000eec <MX_GPIO_Init>
  MX_I2C1_Init();
 80010f0:	f7ff ff72 	bl	8000fd8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
 // HAL_I2C_MspInit(&hi2c1);
  appMain.main();
 80010f4:	4801      	ldr	r0, [pc, #4]	; (80010fc <main+0x1c>)
 80010f6:	f7ff f87b 	bl	80001f0 <_ZN7AppMain4mainEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <main+0x1a>
 80010fc:	20000028 	.word	0x20000028

08001100 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b096      	sub	sp, #88	; 0x58
 8001104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001106:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800110a:	2228      	movs	r2, #40	; 0x28
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f001 ff6a 	bl	8002fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]
 8001132:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001134:	2302      	movs	r3, #2
 8001136:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001138:	2301      	movs	r3, #1
 800113a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800113c:	2310      	movs	r3, #16
 800113e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001140:	2302      	movs	r3, #2
 8001142:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001144:	2300      	movs	r3, #0
 8001146:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001148:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800114c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001152:	4618      	mov	r0, r3
 8001154:	f000 fd10 	bl	8001b78 <HAL_RCC_OscConfig>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	bf14      	ite	ne
 800115e:	2301      	movne	r3, #1
 8001160:	2300      	moveq	r3, #0
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <_Z18SystemClock_Configv+0x6c>
  {
    Error_Handler();
 8001168:	f000 f831 	bl	80011ce <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116c:	230f      	movs	r3, #15
 800116e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001170:	2302      	movs	r3, #2
 8001172:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800117c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	2102      	movs	r1, #2
 8001188:	4618      	mov	r0, r3
 800118a:	f001 fbfd 	bl	8002988 <HAL_RCC_ClockConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	bf14      	ite	ne
 8001194:	2301      	movne	r3, #1
 8001196:	2300      	moveq	r3, #0
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800119e:	f000 f816 	bl	80011ce <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011a2:	2320      	movs	r3, #32
 80011a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4618      	mov	r0, r3
 80011ae:	f001 fdd1 	bl	8002d54 <HAL_RCCEx_PeriphCLKConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	bf14      	ite	ne
 80011b8:	2301      	movne	r3, #1
 80011ba:	2300      	moveq	r3, #0
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 80011c2:	f000 f804 	bl	80011ce <Error_Handler>
  }
}
 80011c6:	bf00      	nop
 80011c8:	3758      	adds	r7, #88	; 0x58
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <_Z41__static_initialization_and_destruction_0ii>:
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d107      	bne.n	80011fc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d102      	bne.n	80011fc <_Z41__static_initialization_and_destruction_0ii+0x20>
static AppMain appMain;
 80011f6:	4803      	ldr	r0, [pc, #12]	; (8001204 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80011f8:	f7fe ffe6 	bl	80001c8 <_ZN7AppMainC1Ev>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000028 	.word	0x20000028

08001208 <_GLOBAL__sub_I_main>:
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
 800120c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001210:	2001      	movs	r0, #1
 8001212:	f7ff ffe3 	bl	80011dc <_Z41__static_initialization_and_destruction_0ii>
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <HAL_MspInit+0x44>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	4a0e      	ldr	r2, [pc, #56]	; (800125c <HAL_MspInit+0x44>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6193      	str	r3, [r2, #24]
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <HAL_MspInit+0x44>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_MspInit+0x44>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	4a08      	ldr	r2, [pc, #32]	; (800125c <HAL_MspInit+0x44>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001240:	61d3      	str	r3, [r2, #28]
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_MspInit+0x44>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000

08001260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <HardFault_Handler+0x4>

08001274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <MemManage_Handler+0x4>

0800127a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <BusFault_Handler+0x4>

08001280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <UsageFault_Handler+0x4>

08001286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b4:	f000 f888 	bl	80013c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <SystemInit+0x28>)
 80012c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012c6:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <SystemInit+0x28>)
 80012c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <SystemInit+0x28>)
 80012d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012d6:	609a      	str	r2, [r3, #8]
#endif
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001320 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80012ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80012ee:	e003      	b.n	80012f8 <LoopCopyDataInit>

080012f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80012f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012f6:	3104      	adds	r1, #4

080012f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80012f8:	480b      	ldr	r0, [pc, #44]	; (8001328 <LoopForever+0xa>)
	ldr	r3, =_edata
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <LoopForever+0xe>)
	adds	r2, r0, r1
 80012fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80012fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001300:	d3f6      	bcc.n	80012f0 <CopyDataInit>
	ldr	r2, =_sbss
 8001302:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001304:	e002      	b.n	800130c <LoopFillZerobss>

08001306 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001306:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001308:	f842 3b04 	str.w	r3, [r2], #4

0800130c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <LoopForever+0x16>)
	cmp	r2, r3
 800130e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001310:	d3f9      	bcc.n	8001306 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001312:	f7ff ffd3 	bl	80012bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001316:	f001 fe43 	bl	8002fa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800131a:	f7ff fee1 	bl	80010e0 <main>

0800131e <LoopForever>:

LoopForever:
    b LoopForever
 800131e:	e7fe      	b.n	800131e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001320:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001324:	0800304c 	.word	0x0800304c
	ldr	r0, =_sdata
 8001328:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800132c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001330:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001334:	20002080 	.word	0x20002080

08001338 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001338:	e7fe      	b.n	8001338 <ADC1_2_IRQHandler>
	...

0800133c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <HAL_Init+0x28>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <HAL_Init+0x28>)
 8001346:	f043 0310 	orr.w	r3, r3, #16
 800134a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800134c:	2003      	movs	r0, #3
 800134e:	f000 f92f 	bl	80015b0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001352:	2000      	movs	r0, #0
 8001354:	f000 f808 	bl	8001368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001358:	f7ff ff5e 	bl	8001218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40022000 	.word	0x40022000

08001368 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_InitTick+0x54>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_InitTick+0x58>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001382:	fbb2 f3f3 	udiv	r3, r2, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f000 f939 	bl	80015fe <HAL_SYSTICK_Config>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e00e      	b.n	80013b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b0f      	cmp	r3, #15
 800139a:	d80a      	bhi.n	80013b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800139c:	2200      	movs	r2, #0
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295
 80013a4:	f000 f90f 	bl	80015c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a8:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <HAL_InitTick+0x5c>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e000      	b.n	80013b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000000 	.word	0x20000000
 80013c0:	20000008 	.word	0x20000008
 80013c4:	20000004 	.word	0x20000004

080013c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x20>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_IncTick+0x24>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <HAL_IncTick+0x24>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000008 	.word	0x20000008
 80013ec:	2000207c 	.word	0x2000207c

080013f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <HAL_GetTick+0x14>)
 80013f6:	681b      	ldr	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	2000207c 	.word	0x2000207c

08001408 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001410:	f7ff ffee 	bl	80013f0 <HAL_GetTick>
 8001414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001420:	d005      	beq.n	800142e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_Delay+0x40>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4413      	add	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800142e:	bf00      	nop
 8001430:	f7ff ffde 	bl	80013f0 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	429a      	cmp	r2, r3
 800143e:	d8f7      	bhi.n	8001430 <HAL_Delay+0x28>
  {
  }
}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000008 	.word	0x20000008

0800144c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001468:	4013      	ands	r3, r2
 800146a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147e:	4a04      	ldr	r2, [pc, #16]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	60d3      	str	r3, [r2, #12]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <__NVIC_GetPriorityGrouping+0x18>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	0a1b      	lsrs	r3, r3, #8
 800149e:	f003 0307 	and.w	r3, r3, #7
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	db0a      	blt.n	80014da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	490c      	ldr	r1, [pc, #48]	; (80014fc <__NVIC_SetPriority+0x4c>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	0112      	lsls	r2, r2, #4
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	440b      	add	r3, r1
 80014d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d8:	e00a      	b.n	80014f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4908      	ldr	r1, [pc, #32]	; (8001500 <__NVIC_SetPriority+0x50>)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	3b04      	subs	r3, #4
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	440b      	add	r3, r1
 80014ee:	761a      	strb	r2, [r3, #24]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000e100 	.word	0xe000e100
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	; 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f1c3 0307 	rsb	r3, r3, #7
 800151e:	2b04      	cmp	r3, #4
 8001520:	bf28      	it	cs
 8001522:	2304      	movcs	r3, #4
 8001524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3304      	adds	r3, #4
 800152a:	2b06      	cmp	r3, #6
 800152c:	d902      	bls.n	8001534 <NVIC_EncodePriority+0x30>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3b03      	subs	r3, #3
 8001532:	e000      	b.n	8001536 <NVIC_EncodePriority+0x32>
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	f04f 32ff 	mov.w	r2, #4294967295
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43da      	mvns	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	401a      	ands	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800154c:	f04f 31ff 	mov.w	r1, #4294967295
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	43d9      	mvns	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	4313      	orrs	r3, r2
         );
}
 800155e:	4618      	mov	r0, r3
 8001560:	3724      	adds	r7, #36	; 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3b01      	subs	r3, #1
 8001578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800157c:	d301      	bcc.n	8001582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157e:	2301      	movs	r3, #1
 8001580:	e00f      	b.n	80015a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <SysTick_Config+0x40>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3b01      	subs	r3, #1
 8001588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158a:	210f      	movs	r1, #15
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	f7ff ff8e 	bl	80014b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <SysTick_Config+0x40>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159a:	4b04      	ldr	r3, [pc, #16]	; (80015ac <SysTick_Config+0x40>)
 800159c:	2207      	movs	r2, #7
 800159e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	e000e010 	.word	0xe000e010

080015b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ff47 	bl	800144c <__NVIC_SetPriorityGrouping>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b086      	sub	sp, #24
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
 80015d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d8:	f7ff ff5c 	bl	8001494 <__NVIC_GetPriorityGrouping>
 80015dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	6978      	ldr	r0, [r7, #20]
 80015e4:	f7ff ff8e 	bl	8001504 <NVIC_EncodePriority>
 80015e8:	4602      	mov	r2, r0
 80015ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ee:	4611      	mov	r1, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff5d 	bl	80014b0 <__NVIC_SetPriority>
}
 80015f6:	bf00      	nop
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ffb0 	bl	800156c <SysTick_Config>
 800160c:	4603      	mov	r3, r0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001618:	b480      	push	{r7}
 800161a:	b087      	sub	sp, #28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001626:	e14e      	b.n	80018c6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2101      	movs	r1, #1
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	fa01 f303 	lsl.w	r3, r1, r3
 8001634:	4013      	ands	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 8140 	beq.w	80018c0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b02      	cmp	r3, #2
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x38>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b12      	cmp	r3, #18
 800164e:	d123      	bne.n	8001698 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	08da      	lsrs	r2, r3, #3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3208      	adds	r2, #8
 8001658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800165c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	220f      	movs	r2, #15
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4013      	ands	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	691a      	ldr	r2, [r3, #16]
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	08da      	lsrs	r2, r3, #3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3208      	adds	r2, #8
 8001692:	6939      	ldr	r1, [r7, #16]
 8001694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	2203      	movs	r2, #3
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0203 	and.w	r2, r3, #3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d00b      	beq.n	80016ec <HAL_GPIO_Init+0xd4>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d007      	beq.n	80016ec <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016e0:	2b11      	cmp	r3, #17
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b12      	cmp	r3, #18
 80016ea:	d130      	bne.n	800174e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	2203      	movs	r2, #3
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001722:	2201      	movs	r2, #1
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4013      	ands	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	091b      	lsrs	r3, r3, #4
 8001738:	f003 0201 	and.w	r2, r3, #1
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	2203      	movs	r2, #3
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 809a 	beq.w	80018c0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178c:	4b55      	ldr	r3, [pc, #340]	; (80018e4 <HAL_GPIO_Init+0x2cc>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a54      	ldr	r2, [pc, #336]	; (80018e4 <HAL_GPIO_Init+0x2cc>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b52      	ldr	r3, [pc, #328]	; (80018e4 <HAL_GPIO_Init+0x2cc>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017a4:	4a50      	ldr	r2, [pc, #320]	; (80018e8 <HAL_GPIO_Init+0x2d0>)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	089b      	lsrs	r3, r3, #2
 80017aa:	3302      	adds	r3, #2
 80017ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	220f      	movs	r2, #15
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017ce:	d013      	beq.n	80017f8 <HAL_GPIO_Init+0x1e0>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a46      	ldr	r2, [pc, #280]	; (80018ec <HAL_GPIO_Init+0x2d4>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d00d      	beq.n	80017f4 <HAL_GPIO_Init+0x1dc>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a45      	ldr	r2, [pc, #276]	; (80018f0 <HAL_GPIO_Init+0x2d8>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d007      	beq.n	80017f0 <HAL_GPIO_Init+0x1d8>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a44      	ldr	r2, [pc, #272]	; (80018f4 <HAL_GPIO_Init+0x2dc>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d101      	bne.n	80017ec <HAL_GPIO_Init+0x1d4>
 80017e8:	2303      	movs	r3, #3
 80017ea:	e006      	b.n	80017fa <HAL_GPIO_Init+0x1e2>
 80017ec:	2305      	movs	r3, #5
 80017ee:	e004      	b.n	80017fa <HAL_GPIO_Init+0x1e2>
 80017f0:	2302      	movs	r3, #2
 80017f2:	e002      	b.n	80017fa <HAL_GPIO_Init+0x1e2>
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <HAL_GPIO_Init+0x1e2>
 80017f8:	2300      	movs	r3, #0
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	f002 0203 	and.w	r2, r2, #3
 8001800:	0092      	lsls	r2, r2, #2
 8001802:	4093      	lsls	r3, r2
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800180a:	4937      	ldr	r1, [pc, #220]	; (80018e8 <HAL_GPIO_Init+0x2d0>)
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	089b      	lsrs	r3, r3, #2
 8001810:	3302      	adds	r3, #2
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001818:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <HAL_GPIO_Init+0x2e0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	43db      	mvns	r3, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800183c:	4a2e      	ldr	r2, [pc, #184]	; (80018f8 <HAL_GPIO_Init+0x2e0>)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001842:	4b2d      	ldr	r3, [pc, #180]	; (80018f8 <HAL_GPIO_Init+0x2e0>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	43db      	mvns	r3, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4313      	orrs	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001866:	4a24      	ldr	r2, [pc, #144]	; (80018f8 <HAL_GPIO_Init+0x2e0>)
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800186c:	4b22      	ldr	r3, [pc, #136]	; (80018f8 <HAL_GPIO_Init+0x2e0>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	43db      	mvns	r3, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001890:	4a19      	ldr	r2, [pc, #100]	; (80018f8 <HAL_GPIO_Init+0x2e0>)
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001896:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <HAL_GPIO_Init+0x2e0>)
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	43db      	mvns	r3, r3
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018ba:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <HAL_GPIO_Init+0x2e0>)
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	3301      	adds	r3, #1
 80018c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	fa22 f303 	lsr.w	r3, r2, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f47f aea9 	bne.w	8001628 <HAL_GPIO_Init+0x10>
  }
}
 80018d6:	bf00      	nop
 80018d8:	371c      	adds	r7, #28
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40010000 	.word	0x40010000
 80018ec:	48000400 	.word	0x48000400
 80018f0:	48000800 	.word	0x48000800
 80018f4:	48000c00 	.word	0x48000c00
 80018f8:	40010400 	.word	0x40010400

080018fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	807b      	strh	r3, [r7, #2]
 8001908:	4613      	mov	r3, r2
 800190a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800190c:	787b      	ldrb	r3, [r7, #1]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001912:	887a      	ldrh	r2, [r7, #2]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001918:	e002      	b.n	8001920 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800191a:	887a      	ldrh	r2, [r7, #2]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e081      	b.n	8001a42 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d106      	bne.n	8001958 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff fb80 	bl	8001058 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2224      	movs	r2, #36	; 0x24
 800195c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 0201 	bic.w	r2, r2, #1
 800196e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800197c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800198c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d107      	bne.n	80019a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	e006      	b.n	80019b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80019b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d104      	bne.n	80019c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691a      	ldr	r2, [r3, #16]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	ea42 0103 	orr.w	r1, r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	021a      	lsls	r2, r3, #8
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69d9      	ldr	r1, [r3, #28]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a1a      	ldr	r2, [r3, #32]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0201 	orr.w	r2, r2, #1
 8001a22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b20      	cmp	r3, #32
 8001a5e:	d138      	bne.n	8001ad2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d101      	bne.n	8001a6e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	e032      	b.n	8001ad4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2224      	movs	r2, #36	; 0x24
 8001a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 0201 	bic.w	r2, r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a9c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6819      	ldr	r1, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f042 0201 	orr.w	r2, r2, #1
 8001abc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e000      	b.n	8001ad4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ad2:	2302      	movs	r3, #2
  }
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b20      	cmp	r3, #32
 8001af4:	d139      	bne.n	8001b6a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b00:	2302      	movs	r3, #2
 8001b02:	e033      	b.n	8001b6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2224      	movs	r2, #36	; 0x24
 8001b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0201 	bic.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b32:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	021b      	lsls	r3, r3, #8
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f042 0201 	orr.w	r2, r2, #1
 8001b54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2220      	movs	r2, #32
 8001b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e000      	b.n	8001b6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b6a:	2302      	movs	r3, #2
  }
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d102      	bne.n	8001b92 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	f000 bef4 	b.w	800297a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 816a 	beq.w	8001e76 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ba2:	4bb3      	ldr	r3, [pc, #716]	; (8001e70 <HAL_RCC_OscConfig+0x2f8>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d00c      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bae:	4bb0      	ldr	r3, [pc, #704]	; (8001e70 <HAL_RCC_OscConfig+0x2f8>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d159      	bne.n	8001c6e <HAL_RCC_OscConfig+0xf6>
 8001bba:	4bad      	ldr	r3, [pc, #692]	; (8001e70 <HAL_RCC_OscConfig+0x2f8>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc6:	d152      	bne.n	8001c6e <HAL_RCC_OscConfig+0xf6>
 8001bc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bcc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001bd4:	fa93 f3a3 	rbit	r3, r3
 8001bd8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bdc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be0:	fab3 f383 	clz	r3, r3
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	095b      	lsrs	r3, r3, #5
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d102      	bne.n	8001bfa <HAL_RCC_OscConfig+0x82>
 8001bf4:	4b9e      	ldr	r3, [pc, #632]	; (8001e70 <HAL_RCC_OscConfig+0x2f8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	e015      	b.n	8001c26 <HAL_RCC_OscConfig+0xae>
 8001bfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bfe:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001c06:	fa93 f3a3 	rbit	r3, r3
 8001c0a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001c0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c12:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001c16:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001c22:	4b93      	ldr	r3, [pc, #588]	; (8001e70 <HAL_RCC_OscConfig+0x2f8>)
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c2a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001c2e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001c32:	fa92 f2a2 	rbit	r2, r2
 8001c36:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001c3a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001c3e:	fab2 f282 	clz	r2, r2
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	f042 0220 	orr.w	r2, r2, #32
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	f002 021f 	and.w	r2, r2, #31
 8001c4e:	2101      	movs	r1, #1
 8001c50:	fa01 f202 	lsl.w	r2, r1, r2
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 810c 	beq.w	8001e74 <HAL_RCC_OscConfig+0x2fc>
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f040 8106 	bne.w	8001e74 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	f000 be86 	b.w	800297a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c78:	d106      	bne.n	8001c88 <HAL_RCC_OscConfig+0x110>
 8001c7a:	4b7d      	ldr	r3, [pc, #500]	; (8001e70 <HAL_RCC_OscConfig+0x2f8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a7c      	ldr	r2, [pc, #496]	; (8001e70 <HAL_RCC_OscConfig+0x2f8>)
 8001c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e030      	b.n	8001cea <HAL_RCC_OscConfig+0x172>
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10c      	bne.n	8001cac <HAL_RCC_OscConfig+0x134>
 8001c92:	4b77      	ldr	r3, [pc, #476]	; (8001e70 <HAL_RCC_OscConfig+0x2f8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a76      	ldr	r2, [pc, #472]	; (8001e70 <HAL_RCC_OscConfig+0x2f8>)
 8001c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	4b74      	ldr	r3, [pc, #464]	; (8001e70 <HAL_RCC_OscConfig+0x2f8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a73      	ldr	r2, [pc, #460]	; (8001e70 <HAL_RCC_OscConfig+0x2f8>)
 8001ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	e01e      	b.n	8001cea <HAL_RCC_OscConfig+0x172>
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb6:	d10c      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x15a>
 8001cb8:	4b6d      	ldr	r3, [pc, #436]	; (8001e70 <HAL_RCC_OscConfig+0x2f8>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a6c      	ldr	r2, [pc, #432]	; (8001e70 <HAL_RCC_OscConfig+0x2f8>)
 8001cbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	4b6a      	ldr	r3, [pc, #424]	; (8001e70 <HAL_RCC_OscConfig+0x2f8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a69      	ldr	r2, [pc, #420]	; (8001e70 <HAL_RCC_OscConfig+0x2f8>)
 8001cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	e00b      	b.n	8001cea <HAL_RCC_OscConfig+0x172>
 8001cd2:	4b67      	ldr	r3, [pc, #412]	; (8001e70 <HAL_RCC_OscConfig+0x2f8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a66      	ldr	r2, [pc, #408]	; (8001e70 <HAL_RCC_OscConfig+0x2f8>)
 8001cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4b64      	ldr	r3, [pc, #400]	; (8001e70 <HAL_RCC_OscConfig+0x2f8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a63      	ldr	r2, [pc, #396]	; (8001e70 <HAL_RCC_OscConfig+0x2f8>)
 8001ce4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cea:	4b61      	ldr	r3, [pc, #388]	; (8001e70 <HAL_RCC_OscConfig+0x2f8>)
 8001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cee:	f023 020f 	bic.w	r2, r3, #15
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	495d      	ldr	r1, [pc, #372]	; (8001e70 <HAL_RCC_OscConfig+0x2f8>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d059      	beq.n	8001dbc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7ff fb72 	bl	80013f0 <HAL_GetTick>
 8001d0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d10:	e00a      	b.n	8001d28 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d12:	f7ff fb6d 	bl	80013f0 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d902      	bls.n	8001d28 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	f000 be29 	b.w	800297a <HAL_RCC_OscConfig+0xe02>
 8001d28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d2c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d30:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001d34:	fa93 f3a3 	rbit	r3, r3
 8001d38:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001d3c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d40:	fab3 f383 	clz	r3, r3
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	095b      	lsrs	r3, r3, #5
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d102      	bne.n	8001d5a <HAL_RCC_OscConfig+0x1e2>
 8001d54:	4b46      	ldr	r3, [pc, #280]	; (8001e70 <HAL_RCC_OscConfig+0x2f8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	e015      	b.n	8001d86 <HAL_RCC_OscConfig+0x20e>
 8001d5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d5e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d72:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d76:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001d82:	4b3b      	ldr	r3, [pc, #236]	; (8001e70 <HAL_RCC_OscConfig+0x2f8>)
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d8a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001d8e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d92:	fa92 f2a2 	rbit	r2, r2
 8001d96:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001d9a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001d9e:	fab2 f282 	clz	r2, r2
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	f042 0220 	orr.w	r2, r2, #32
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	f002 021f 	and.w	r2, r2, #31
 8001dae:	2101      	movs	r1, #1
 8001db0:	fa01 f202 	lsl.w	r2, r1, r2
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0ab      	beq.n	8001d12 <HAL_RCC_OscConfig+0x19a>
 8001dba:	e05c      	b.n	8001e76 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fb18 	bl	80013f0 <HAL_GetTick>
 8001dc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc4:	e00a      	b.n	8001ddc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc6:	f7ff fb13 	bl	80013f0 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	; 0x64
 8001dd4:	d902      	bls.n	8001ddc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	f000 bdcf 	b.w	800297a <HAL_RCC_OscConfig+0xe02>
 8001ddc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001de0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001de8:	fa93 f3a3 	rbit	r3, r3
 8001dec:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001df0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df4:	fab3 f383 	clz	r3, r3
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d102      	bne.n	8001e0e <HAL_RCC_OscConfig+0x296>
 8001e08:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <HAL_RCC_OscConfig+0x2f8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	e015      	b.n	8001e3a <HAL_RCC_OscConfig+0x2c2>
 8001e0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e12:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e16:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001e22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e26:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e2a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001e2e:	fa93 f3a3 	rbit	r3, r3
 8001e32:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <HAL_RCC_OscConfig+0x2f8>)
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e3e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001e42:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e46:	fa92 f2a2 	rbit	r2, r2
 8001e4a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001e4e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001e52:	fab2 f282 	clz	r2, r2
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	f042 0220 	orr.w	r2, r2, #32
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	f002 021f 	and.w	r2, r2, #31
 8001e62:	2101      	movs	r1, #1
 8001e64:	fa01 f202 	lsl.w	r2, r1, r2
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1ab      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x24e>
 8001e6e:	e002      	b.n	8001e76 <HAL_RCC_OscConfig+0x2fe>
 8001e70:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 816f 	beq.w	8002164 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e86:	4bd0      	ldr	r3, [pc, #832]	; (80021c8 <HAL_RCC_OscConfig+0x650>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00b      	beq.n	8001eaa <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e92:	4bcd      	ldr	r3, [pc, #820]	; (80021c8 <HAL_RCC_OscConfig+0x650>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d16c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x400>
 8001e9e:	4bca      	ldr	r3, [pc, #808]	; (80021c8 <HAL_RCC_OscConfig+0x650>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d166      	bne.n	8001f78 <HAL_RCC_OscConfig+0x400>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001ebc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec0:	fab3 f383 	clz	r3, r3
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	095b      	lsrs	r3, r3, #5
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d102      	bne.n	8001eda <HAL_RCC_OscConfig+0x362>
 8001ed4:	4bbc      	ldr	r3, [pc, #752]	; (80021c8 <HAL_RCC_OscConfig+0x650>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	e013      	b.n	8001f02 <HAL_RCC_OscConfig+0x38a>
 8001eda:	2302      	movs	r3, #2
 8001edc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001eec:	2302      	movs	r3, #2
 8001eee:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ef2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001efe:	4bb2      	ldr	r3, [pc, #712]	; (80021c8 <HAL_RCC_OscConfig+0x650>)
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	2202      	movs	r2, #2
 8001f04:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001f08:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f0c:	fa92 f2a2 	rbit	r2, r2
 8001f10:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001f14:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001f18:	fab2 f282 	clz	r2, r2
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	f042 0220 	orr.w	r2, r2, #32
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	f002 021f 	and.w	r2, r2, #31
 8001f28:	2101      	movs	r1, #1
 8001f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d007      	beq.n	8001f44 <HAL_RCC_OscConfig+0x3cc>
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d002      	beq.n	8001f44 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	f000 bd1b 	b.w	800297a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f44:	4ba0      	ldr	r3, [pc, #640]	; (80021c8 <HAL_RCC_OscConfig+0x650>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	21f8      	movs	r1, #248	; 0xf8
 8001f54:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001f5c:	fa91 f1a1 	rbit	r1, r1
 8001f60:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001f64:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001f68:	fab1 f181 	clz	r1, r1
 8001f6c:	b2c9      	uxtb	r1, r1
 8001f6e:	408b      	lsls	r3, r1
 8001f70:	4995      	ldr	r1, [pc, #596]	; (80021c8 <HAL_RCC_OscConfig+0x650>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f76:	e0f5      	b.n	8002164 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 8085 	beq.w	800208e <HAL_RCC_OscConfig+0x516>
 8001f84:	2301      	movs	r3, #1
 8001f86:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001f96:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fa4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	461a      	mov	r2, r3
 8001fac:	2301      	movs	r3, #1
 8001fae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7ff fa1e 	bl	80013f0 <HAL_GetTick>
 8001fb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb8:	e00a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fba:	f7ff fa19 	bl	80013f0 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d902      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	f000 bcd5 	b.w	800297a <HAL_RCC_OscConfig+0xe02>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001fe2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	095b      	lsrs	r3, r3, #5
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d102      	bne.n	8002000 <HAL_RCC_OscConfig+0x488>
 8001ffa:	4b73      	ldr	r3, [pc, #460]	; (80021c8 <HAL_RCC_OscConfig+0x650>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	e013      	b.n	8002028 <HAL_RCC_OscConfig+0x4b0>
 8002000:	2302      	movs	r3, #2
 8002002:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002006:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800200a:	fa93 f3a3 	rbit	r3, r3
 800200e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002012:	2302      	movs	r3, #2
 8002014:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002018:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800201c:	fa93 f3a3 	rbit	r3, r3
 8002020:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002024:	4b68      	ldr	r3, [pc, #416]	; (80021c8 <HAL_RCC_OscConfig+0x650>)
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	2202      	movs	r2, #2
 800202a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800202e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002032:	fa92 f2a2 	rbit	r2, r2
 8002036:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800203a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800203e:	fab2 f282 	clz	r2, r2
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	f042 0220 	orr.w	r2, r2, #32
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	f002 021f 	and.w	r2, r2, #31
 800204e:	2101      	movs	r1, #1
 8002050:	fa01 f202 	lsl.w	r2, r1, r2
 8002054:	4013      	ands	r3, r2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0af      	beq.n	8001fba <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205a:	4b5b      	ldr	r3, [pc, #364]	; (80021c8 <HAL_RCC_OscConfig+0x650>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	21f8      	movs	r1, #248	; 0xf8
 800206a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002072:	fa91 f1a1 	rbit	r1, r1
 8002076:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800207a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800207e:	fab1 f181 	clz	r1, r1
 8002082:	b2c9      	uxtb	r1, r1
 8002084:	408b      	lsls	r3, r1
 8002086:	4950      	ldr	r1, [pc, #320]	; (80021c8 <HAL_RCC_OscConfig+0x650>)
 8002088:	4313      	orrs	r3, r2
 800208a:	600b      	str	r3, [r1, #0]
 800208c:	e06a      	b.n	8002164 <HAL_RCC_OscConfig+0x5ec>
 800208e:	2301      	movs	r3, #1
 8002090:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002094:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002098:	fa93 f3a3 	rbit	r3, r3
 800209c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80020a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020a4:	fab3 f383 	clz	r3, r3
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	461a      	mov	r2, r3
 80020b6:	2300      	movs	r3, #0
 80020b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ba:	f7ff f999 	bl	80013f0 <HAL_GetTick>
 80020be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c2:	e00a      	b.n	80020da <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c4:	f7ff f994 	bl	80013f0 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d902      	bls.n	80020da <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	f000 bc50 	b.w	800297a <HAL_RCC_OscConfig+0xe02>
 80020da:	2302      	movs	r3, #2
 80020dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80020e4:	fa93 f3a3 	rbit	r3, r3
 80020e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80020ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f0:	fab3 f383 	clz	r3, r3
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	095b      	lsrs	r3, r3, #5
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b01      	cmp	r3, #1
 8002102:	d102      	bne.n	800210a <HAL_RCC_OscConfig+0x592>
 8002104:	4b30      	ldr	r3, [pc, #192]	; (80021c8 <HAL_RCC_OscConfig+0x650>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	e013      	b.n	8002132 <HAL_RCC_OscConfig+0x5ba>
 800210a:	2302      	movs	r3, #2
 800210c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002110:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002114:	fa93 f3a3 	rbit	r3, r3
 8002118:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800211c:	2302      	movs	r3, #2
 800211e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002122:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800212e:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <HAL_RCC_OscConfig+0x650>)
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	2202      	movs	r2, #2
 8002134:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002138:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800213c:	fa92 f2a2 	rbit	r2, r2
 8002140:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002144:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002148:	fab2 f282 	clz	r2, r2
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	f042 0220 	orr.w	r2, r2, #32
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	f002 021f 	and.w	r2, r2, #31
 8002158:	2101      	movs	r1, #1
 800215a:	fa01 f202 	lsl.w	r2, r1, r2
 800215e:	4013      	ands	r3, r2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1af      	bne.n	80020c4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 80da 	beq.w	8002328 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002174:	1d3b      	adds	r3, r7, #4
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d069      	beq.n	8002252 <HAL_RCC_OscConfig+0x6da>
 800217e:	2301      	movs	r3, #1
 8002180:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002188:	fa93 f3a3 	rbit	r3, r3
 800218c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002194:	fab3 f383 	clz	r3, r3
 8002198:	b2db      	uxtb	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_RCC_OscConfig+0x654>)
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	461a      	mov	r2, r3
 80021a4:	2301      	movs	r3, #1
 80021a6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a8:	f7ff f922 	bl	80013f0 <HAL_GetTick>
 80021ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b0:	e00e      	b.n	80021d0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b2:	f7ff f91d 	bl	80013f0 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d906      	bls.n	80021d0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e3d9      	b.n	800297a <HAL_RCC_OscConfig+0xe02>
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	10908120 	.word	0x10908120
 80021d0:	2302      	movs	r3, #2
 80021d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80021e2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80021e6:	2202      	movs	r2, #2
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	fa93 f2a3 	rbit	r2, r3
 80021f4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80021fe:	2202      	movs	r2, #2
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	fa93 f2a3 	rbit	r2, r3
 800220c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002210:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002212:	4ba5      	ldr	r3, [pc, #660]	; (80024a8 <HAL_RCC_OscConfig+0x930>)
 8002214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002216:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800221a:	2102      	movs	r1, #2
 800221c:	6019      	str	r1, [r3, #0]
 800221e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	fa93 f1a3 	rbit	r1, r3
 8002228:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800222c:	6019      	str	r1, [r3, #0]
  return result;
 800222e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	fab3 f383 	clz	r3, r3
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800223e:	b2db      	uxtb	r3, r3
 8002240:	f003 031f 	and.w	r3, r3, #31
 8002244:	2101      	movs	r1, #1
 8002246:	fa01 f303 	lsl.w	r3, r1, r3
 800224a:	4013      	ands	r3, r2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0b0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x63a>
 8002250:	e06a      	b.n	8002328 <HAL_RCC_OscConfig+0x7b0>
 8002252:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002256:	2201      	movs	r2, #1
 8002258:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	fa93 f2a3 	rbit	r2, r3
 8002264:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002268:	601a      	str	r2, [r3, #0]
  return result;
 800226a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800226e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002270:	fab3 f383 	clz	r3, r3
 8002274:	b2db      	uxtb	r3, r3
 8002276:	461a      	mov	r2, r3
 8002278:	4b8c      	ldr	r3, [pc, #560]	; (80024ac <HAL_RCC_OscConfig+0x934>)
 800227a:	4413      	add	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	461a      	mov	r2, r3
 8002280:	2300      	movs	r3, #0
 8002282:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002284:	f7ff f8b4 	bl	80013f0 <HAL_GetTick>
 8002288:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800228c:	e009      	b.n	80022a2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800228e:	f7ff f8af 	bl	80013f0 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e36b      	b.n	800297a <HAL_RCC_OscConfig+0xe02>
 80022a2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80022a6:	2202      	movs	r2, #2
 80022a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	fa93 f2a3 	rbit	r2, r3
 80022b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80022be:	2202      	movs	r2, #2
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	fa93 f2a3 	rbit	r2, r3
 80022cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80022d6:	2202      	movs	r2, #2
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	fa93 f2a3 	rbit	r2, r3
 80022e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ea:	4b6f      	ldr	r3, [pc, #444]	; (80024a8 <HAL_RCC_OscConfig+0x930>)
 80022ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022ee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80022f2:	2102      	movs	r1, #2
 80022f4:	6019      	str	r1, [r3, #0]
 80022f6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	fa93 f1a3 	rbit	r1, r3
 8002300:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002304:	6019      	str	r1, [r3, #0]
  return result;
 8002306:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	fab3 f383 	clz	r3, r3
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002316:	b2db      	uxtb	r3, r3
 8002318:	f003 031f 	and.w	r3, r3, #31
 800231c:	2101      	movs	r1, #1
 800231e:	fa01 f303 	lsl.w	r3, r1, r3
 8002322:	4013      	ands	r3, r2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1b2      	bne.n	800228e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002328:	1d3b      	adds	r3, r7, #4
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 8158 	beq.w	80025e8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002338:	2300      	movs	r3, #0
 800233a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800233e:	4b5a      	ldr	r3, [pc, #360]	; (80024a8 <HAL_RCC_OscConfig+0x930>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d112      	bne.n	8002370 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800234a:	4b57      	ldr	r3, [pc, #348]	; (80024a8 <HAL_RCC_OscConfig+0x930>)
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	4a56      	ldr	r2, [pc, #344]	; (80024a8 <HAL_RCC_OscConfig+0x930>)
 8002350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002354:	61d3      	str	r3, [r2, #28]
 8002356:	4b54      	ldr	r3, [pc, #336]	; (80024a8 <HAL_RCC_OscConfig+0x930>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800235e:	f107 0308 	add.w	r3, r7, #8
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	f107 0308 	add.w	r3, r7, #8
 8002368:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800236a:	2301      	movs	r3, #1
 800236c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002370:	4b4f      	ldr	r3, [pc, #316]	; (80024b0 <HAL_RCC_OscConfig+0x938>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002378:	2b00      	cmp	r3, #0
 800237a:	d11a      	bne.n	80023b2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800237c:	4b4c      	ldr	r3, [pc, #304]	; (80024b0 <HAL_RCC_OscConfig+0x938>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a4b      	ldr	r2, [pc, #300]	; (80024b0 <HAL_RCC_OscConfig+0x938>)
 8002382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002386:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002388:	f7ff f832 	bl	80013f0 <HAL_GetTick>
 800238c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002390:	e009      	b.n	80023a6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002392:	f7ff f82d 	bl	80013f0 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b64      	cmp	r3, #100	; 0x64
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e2e9      	b.n	800297a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a6:	4b42      	ldr	r3, [pc, #264]	; (80024b0 <HAL_RCC_OscConfig+0x938>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0ef      	beq.n	8002392 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_OscConfig+0x852>
 80023bc:	4b3a      	ldr	r3, [pc, #232]	; (80024a8 <HAL_RCC_OscConfig+0x930>)
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	4a39      	ldr	r2, [pc, #228]	; (80024a8 <HAL_RCC_OscConfig+0x930>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6213      	str	r3, [r2, #32]
 80023c8:	e02f      	b.n	800242a <HAL_RCC_OscConfig+0x8b2>
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10c      	bne.n	80023ee <HAL_RCC_OscConfig+0x876>
 80023d4:	4b34      	ldr	r3, [pc, #208]	; (80024a8 <HAL_RCC_OscConfig+0x930>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4a33      	ldr	r2, [pc, #204]	; (80024a8 <HAL_RCC_OscConfig+0x930>)
 80023da:	f023 0301 	bic.w	r3, r3, #1
 80023de:	6213      	str	r3, [r2, #32]
 80023e0:	4b31      	ldr	r3, [pc, #196]	; (80024a8 <HAL_RCC_OscConfig+0x930>)
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4a30      	ldr	r2, [pc, #192]	; (80024a8 <HAL_RCC_OscConfig+0x930>)
 80023e6:	f023 0304 	bic.w	r3, r3, #4
 80023ea:	6213      	str	r3, [r2, #32]
 80023ec:	e01d      	b.n	800242a <HAL_RCC_OscConfig+0x8b2>
 80023ee:	1d3b      	adds	r3, r7, #4
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b05      	cmp	r3, #5
 80023f6:	d10c      	bne.n	8002412 <HAL_RCC_OscConfig+0x89a>
 80023f8:	4b2b      	ldr	r3, [pc, #172]	; (80024a8 <HAL_RCC_OscConfig+0x930>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4a2a      	ldr	r2, [pc, #168]	; (80024a8 <HAL_RCC_OscConfig+0x930>)
 80023fe:	f043 0304 	orr.w	r3, r3, #4
 8002402:	6213      	str	r3, [r2, #32]
 8002404:	4b28      	ldr	r3, [pc, #160]	; (80024a8 <HAL_RCC_OscConfig+0x930>)
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	4a27      	ldr	r2, [pc, #156]	; (80024a8 <HAL_RCC_OscConfig+0x930>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6213      	str	r3, [r2, #32]
 8002410:	e00b      	b.n	800242a <HAL_RCC_OscConfig+0x8b2>
 8002412:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <HAL_RCC_OscConfig+0x930>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	4a24      	ldr	r2, [pc, #144]	; (80024a8 <HAL_RCC_OscConfig+0x930>)
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	6213      	str	r3, [r2, #32]
 800241e:	4b22      	ldr	r3, [pc, #136]	; (80024a8 <HAL_RCC_OscConfig+0x930>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	4a21      	ldr	r2, [pc, #132]	; (80024a8 <HAL_RCC_OscConfig+0x930>)
 8002424:	f023 0304 	bic.w	r3, r3, #4
 8002428:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800242a:	1d3b      	adds	r3, r7, #4
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d06b      	beq.n	800250c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002434:	f7fe ffdc 	bl	80013f0 <HAL_GetTick>
 8002438:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243c:	e00b      	b.n	8002456 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f7fe ffd7 	bl	80013f0 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f241 3288 	movw	r2, #5000	; 0x1388
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e291      	b.n	800297a <HAL_RCC_OscConfig+0xe02>
 8002456:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800245a:	2202      	movs	r2, #2
 800245c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	fa93 f2a3 	rbit	r2, r3
 8002468:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002472:	2202      	movs	r2, #2
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	fa93 f2a3 	rbit	r2, r3
 8002480:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002484:	601a      	str	r2, [r3, #0]
  return result;
 8002486:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800248a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248c:	fab3 f383 	clz	r3, r3
 8002490:	b2db      	uxtb	r3, r3
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f043 0302 	orr.w	r3, r3, #2
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d109      	bne.n	80024b4 <HAL_RCC_OscConfig+0x93c>
 80024a0:	4b01      	ldr	r3, [pc, #4]	; (80024a8 <HAL_RCC_OscConfig+0x930>)
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	e014      	b.n	80024d0 <HAL_RCC_OscConfig+0x958>
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000
 80024ac:	10908120 	.word	0x10908120
 80024b0:	40007000 	.word	0x40007000
 80024b4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80024b8:	2202      	movs	r2, #2
 80024ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	fa93 f2a3 	rbit	r2, r3
 80024c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	4bbb      	ldr	r3, [pc, #748]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024d4:	2102      	movs	r1, #2
 80024d6:	6011      	str	r1, [r2, #0]
 80024d8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024dc:	6812      	ldr	r2, [r2, #0]
 80024de:	fa92 f1a2 	rbit	r1, r2
 80024e2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80024e6:	6011      	str	r1, [r2, #0]
  return result;
 80024e8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	fab2 f282 	clz	r2, r2
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	f002 021f 	and.w	r2, r2, #31
 80024fe:	2101      	movs	r1, #1
 8002500:	fa01 f202 	lsl.w	r2, r1, r2
 8002504:	4013      	ands	r3, r2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d099      	beq.n	800243e <HAL_RCC_OscConfig+0x8c6>
 800250a:	e063      	b.n	80025d4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250c:	f7fe ff70 	bl	80013f0 <HAL_GetTick>
 8002510:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002514:	e00b      	b.n	800252e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002516:	f7fe ff6b 	bl	80013f0 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	f241 3288 	movw	r2, #5000	; 0x1388
 8002526:	4293      	cmp	r3, r2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e225      	b.n	800297a <HAL_RCC_OscConfig+0xe02>
 800252e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002532:	2202      	movs	r2, #2
 8002534:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	fa93 f2a3 	rbit	r2, r3
 8002540:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800254a:	2202      	movs	r2, #2
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	fa93 f2a3 	rbit	r2, r3
 8002558:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800255c:	601a      	str	r2, [r3, #0]
  return result;
 800255e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002562:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002564:	fab3 f383 	clz	r3, r3
 8002568:	b2db      	uxtb	r3, r3
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	b2db      	uxtb	r3, r3
 800256e:	f043 0302 	orr.w	r3, r3, #2
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d102      	bne.n	800257e <HAL_RCC_OscConfig+0xa06>
 8002578:	4b90      	ldr	r3, [pc, #576]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	e00d      	b.n	800259a <HAL_RCC_OscConfig+0xa22>
 800257e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002582:	2202      	movs	r2, #2
 8002584:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	fa93 f2a3 	rbit	r2, r3
 8002590:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	4b89      	ldr	r3, [pc, #548]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800259e:	2102      	movs	r1, #2
 80025a0:	6011      	str	r1, [r2, #0]
 80025a2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	fa92 f1a2 	rbit	r1, r2
 80025ac:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80025b0:	6011      	str	r1, [r2, #0]
  return result;
 80025b2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	fab2 f282 	clz	r2, r2
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	f002 021f 	and.w	r2, r2, #31
 80025c8:	2101      	movs	r1, #1
 80025ca:	fa01 f202 	lsl.w	r2, r1, r2
 80025ce:	4013      	ands	r3, r2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1a0      	bne.n	8002516 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025d4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d105      	bne.n	80025e8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025dc:	4b77      	ldr	r3, [pc, #476]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	4a76      	ldr	r2, [pc, #472]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 80025e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e8:	1d3b      	adds	r3, r7, #4
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 81c2 	beq.w	8002978 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f4:	4b71      	ldr	r3, [pc, #452]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 030c 	and.w	r3, r3, #12
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	f000 819c 	beq.w	800293a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	2b02      	cmp	r3, #2
 800260a:	f040 8114 	bne.w	8002836 <HAL_RCC_OscConfig+0xcbe>
 800260e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002612:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002616:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	fa93 f2a3 	rbit	r2, r3
 8002622:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002626:	601a      	str	r2, [r3, #0]
  return result;
 8002628:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800262c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262e:	fab3 f383 	clz	r3, r3
 8002632:	b2db      	uxtb	r3, r3
 8002634:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002638:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	461a      	mov	r2, r3
 8002640:	2300      	movs	r3, #0
 8002642:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7fe fed4 	bl	80013f0 <HAL_GetTick>
 8002648:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264c:	e009      	b.n	8002662 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800264e:	f7fe fecf 	bl	80013f0 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e18b      	b.n	800297a <HAL_RCC_OscConfig+0xe02>
 8002662:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002666:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800266a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	fa93 f2a3 	rbit	r2, r3
 8002676:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800267a:	601a      	str	r2, [r3, #0]
  return result;
 800267c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002680:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002682:	fab3 f383 	clz	r3, r3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	095b      	lsrs	r3, r3, #5
 800268a:	b2db      	uxtb	r3, r3
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b01      	cmp	r3, #1
 8002694:	d102      	bne.n	800269c <HAL_RCC_OscConfig+0xb24>
 8002696:	4b49      	ldr	r3, [pc, #292]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	e01b      	b.n	80026d4 <HAL_RCC_OscConfig+0xb5c>
 800269c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80026a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	fa93 f2a3 	rbit	r2, r3
 80026b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80026ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	fa93 f2a3 	rbit	r2, r3
 80026ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	4b3a      	ldr	r3, [pc, #232]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026dc:	6011      	str	r1, [r2, #0]
 80026de:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	fa92 f1a2 	rbit	r1, r2
 80026e8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80026ec:	6011      	str	r1, [r2, #0]
  return result;
 80026ee:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	fab2 f282 	clz	r2, r2
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	f042 0220 	orr.w	r2, r2, #32
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	f002 021f 	and.w	r2, r2, #31
 8002704:	2101      	movs	r1, #1
 8002706:	fa01 f202 	lsl.w	r2, r1, r2
 800270a:	4013      	ands	r3, r2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d19e      	bne.n	800264e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002710:	4b2a      	ldr	r3, [pc, #168]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002718:	1d3b      	adds	r3, r7, #4
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	430b      	orrs	r3, r1
 8002726:	4925      	ldr	r1, [pc, #148]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
 800272c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002730:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002734:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	fa93 f2a3 	rbit	r2, r3
 8002740:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002744:	601a      	str	r2, [r3, #0]
  return result;
 8002746:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800274a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800274c:	fab3 f383 	clz	r3, r3
 8002750:	b2db      	uxtb	r3, r3
 8002752:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002756:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	461a      	mov	r2, r3
 800275e:	2301      	movs	r3, #1
 8002760:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7fe fe45 	bl	80013f0 <HAL_GetTick>
 8002766:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800276a:	e009      	b.n	8002780 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276c:	f7fe fe40 	bl	80013f0 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e0fc      	b.n	800297a <HAL_RCC_OscConfig+0xe02>
 8002780:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002784:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002788:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	fa93 f2a3 	rbit	r2, r3
 8002794:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002798:	601a      	str	r2, [r3, #0]
  return result;
 800279a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800279e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d105      	bne.n	80027c0 <HAL_RCC_OscConfig+0xc48>
 80027b4:	4b01      	ldr	r3, [pc, #4]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	e01e      	b.n	80027f8 <HAL_RCC_OscConfig+0xc80>
 80027ba:	bf00      	nop
 80027bc:	40021000 	.word	0x40021000
 80027c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	fa93 f2a3 	rbit	r2, r3
 80027d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	fa93 f2a3 	rbit	r2, r3
 80027ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	4b63      	ldr	r3, [pc, #396]	; (8002984 <HAL_RCC_OscConfig+0xe0c>)
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002800:	6011      	str	r1, [r2, #0]
 8002802:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	fa92 f1a2 	rbit	r1, r2
 800280c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002810:	6011      	str	r1, [r2, #0]
  return result;
 8002812:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	fab2 f282 	clz	r2, r2
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	f042 0220 	orr.w	r2, r2, #32
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	f002 021f 	and.w	r2, r2, #31
 8002828:	2101      	movs	r1, #1
 800282a:	fa01 f202 	lsl.w	r2, r1, r2
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d09b      	beq.n	800276c <HAL_RCC_OscConfig+0xbf4>
 8002834:	e0a0      	b.n	8002978 <HAL_RCC_OscConfig+0xe00>
 8002836:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800283a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800283e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002840:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	fa93 f2a3 	rbit	r2, r3
 800284a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800284e:	601a      	str	r2, [r3, #0]
  return result;
 8002850:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002854:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002856:	fab3 f383 	clz	r3, r3
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002860:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	461a      	mov	r2, r3
 8002868:	2300      	movs	r3, #0
 800286a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7fe fdc0 	bl	80013f0 <HAL_GetTick>
 8002870:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002874:	e009      	b.n	800288a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002876:	f7fe fdbb 	bl	80013f0 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e077      	b.n	800297a <HAL_RCC_OscConfig+0xe02>
 800288a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800288e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002892:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	fa93 f2a3 	rbit	r2, r3
 800289e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a2:	601a      	str	r2, [r3, #0]
  return result;
 80028a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d102      	bne.n	80028c4 <HAL_RCC_OscConfig+0xd4c>
 80028be:	4b31      	ldr	r3, [pc, #196]	; (8002984 <HAL_RCC_OscConfig+0xe0c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	e01b      	b.n	80028fc <HAL_RCC_OscConfig+0xd84>
 80028c4:	f107 0320 	add.w	r3, r7, #32
 80028c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f107 0320 	add.w	r3, r7, #32
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	fa93 f2a3 	rbit	r2, r3
 80028d8:	f107 031c 	add.w	r3, r7, #28
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	f107 0318 	add.w	r3, r7, #24
 80028e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	f107 0318 	add.w	r3, r7, #24
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	fa93 f2a3 	rbit	r2, r3
 80028f2:	f107 0314 	add.w	r3, r7, #20
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	4b22      	ldr	r3, [pc, #136]	; (8002984 <HAL_RCC_OscConfig+0xe0c>)
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	f107 0210 	add.w	r2, r7, #16
 8002900:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002904:	6011      	str	r1, [r2, #0]
 8002906:	f107 0210 	add.w	r2, r7, #16
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	fa92 f1a2 	rbit	r1, r2
 8002910:	f107 020c 	add.w	r2, r7, #12
 8002914:	6011      	str	r1, [r2, #0]
  return result;
 8002916:	f107 020c 	add.w	r2, r7, #12
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	fab2 f282 	clz	r2, r2
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	f042 0220 	orr.w	r2, r2, #32
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	f002 021f 	and.w	r2, r2, #31
 800292c:	2101      	movs	r1, #1
 800292e:	fa01 f202 	lsl.w	r2, r1, r2
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d19e      	bne.n	8002876 <HAL_RCC_OscConfig+0xcfe>
 8002938:	e01e      	b.n	8002978 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800293a:	1d3b      	adds	r3, r7, #4
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e018      	b.n	800297a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002948:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <HAL_RCC_OscConfig+0xe0c>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002950:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002954:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002958:	1d3b      	adds	r3, r7, #4
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	429a      	cmp	r2, r3
 8002960:	d108      	bne.n	8002974 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002962:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002966:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800296a:	1d3b      	adds	r3, r7, #4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40021000 	.word	0x40021000

08002988 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b09e      	sub	sp, #120	; 0x78
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e162      	b.n	8002c66 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a0:	4b90      	ldr	r3, [pc, #576]	; (8002be4 <HAL_RCC_ClockConfig+0x25c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d910      	bls.n	80029d0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ae:	4b8d      	ldr	r3, [pc, #564]	; (8002be4 <HAL_RCC_ClockConfig+0x25c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 0207 	bic.w	r2, r3, #7
 80029b6:	498b      	ldr	r1, [pc, #556]	; (8002be4 <HAL_RCC_ClockConfig+0x25c>)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029be:	4b89      	ldr	r3, [pc, #548]	; (8002be4 <HAL_RCC_ClockConfig+0x25c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d001      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e14a      	b.n	8002c66 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d008      	beq.n	80029ee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029dc:	4b82      	ldr	r3, [pc, #520]	; (8002be8 <HAL_RCC_ClockConfig+0x260>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	497f      	ldr	r1, [pc, #508]	; (8002be8 <HAL_RCC_ClockConfig+0x260>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 80dc 	beq.w	8002bb4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d13c      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xf6>
 8002a04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a08:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a0c:	fa93 f3a3 	rbit	r3, r3
 8002a10:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a14:	fab3 f383 	clz	r3, r3
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	f043 0301 	orr.w	r3, r3, #1
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d102      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xa6>
 8002a28:	4b6f      	ldr	r3, [pc, #444]	; (8002be8 <HAL_RCC_ClockConfig+0x260>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	e00f      	b.n	8002a4e <HAL_RCC_ClockConfig+0xc6>
 8002a2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a36:	fa93 f3a3 	rbit	r3, r3
 8002a3a:	667b      	str	r3, [r7, #100]	; 0x64
 8002a3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a40:	663b      	str	r3, [r7, #96]	; 0x60
 8002a42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a44:	fa93 f3a3 	rbit	r3, r3
 8002a48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a4a:	4b67      	ldr	r3, [pc, #412]	; (8002be8 <HAL_RCC_ClockConfig+0x260>)
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a52:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a56:	fa92 f2a2 	rbit	r2, r2
 8002a5a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002a5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a5e:	fab2 f282 	clz	r2, r2
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	f042 0220 	orr.w	r2, r2, #32
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	f002 021f 	and.w	r2, r2, #31
 8002a6e:	2101      	movs	r1, #1
 8002a70:	fa01 f202 	lsl.w	r2, r1, r2
 8002a74:	4013      	ands	r3, r2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d17b      	bne.n	8002b72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e0f3      	b.n	8002c66 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d13c      	bne.n	8002b00 <HAL_RCC_ClockConfig+0x178>
 8002a86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a8a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	095b      	lsrs	r3, r3, #5
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d102      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x128>
 8002aaa:	4b4f      	ldr	r3, [pc, #316]	; (8002be8 <HAL_RCC_ClockConfig+0x260>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	e00f      	b.n	8002ad0 <HAL_RCC_ClockConfig+0x148>
 8002ab0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ab4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ab8:	fa93 f3a3 	rbit	r3, r3
 8002abc:	647b      	str	r3, [r7, #68]	; 0x44
 8002abe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ac2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002acc:	4b46      	ldr	r3, [pc, #280]	; (8002be8 <HAL_RCC_ClockConfig+0x260>)
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ad4:	63ba      	str	r2, [r7, #56]	; 0x38
 8002ad6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ad8:	fa92 f2a2 	rbit	r2, r2
 8002adc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002ade:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ae0:	fab2 f282 	clz	r2, r2
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	f042 0220 	orr.w	r2, r2, #32
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	f002 021f 	and.w	r2, r2, #31
 8002af0:	2101      	movs	r1, #1
 8002af2:	fa01 f202 	lsl.w	r2, r1, r2
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d13a      	bne.n	8002b72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0b2      	b.n	8002c66 <HAL_RCC_ClockConfig+0x2de>
 8002b00:	2302      	movs	r3, #2
 8002b02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0e:	fab3 f383 	clz	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d102      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x1a0>
 8002b22:	4b31      	ldr	r3, [pc, #196]	; (8002be8 <HAL_RCC_ClockConfig+0x260>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	e00d      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1bc>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2e:	fa93 f3a3 	rbit	r3, r3
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
 8002b34:	2302      	movs	r3, #2
 8002b36:	623b      	str	r3, [r7, #32]
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	fa93 f3a3 	rbit	r3, r3
 8002b3e:	61fb      	str	r3, [r7, #28]
 8002b40:	4b29      	ldr	r3, [pc, #164]	; (8002be8 <HAL_RCC_ClockConfig+0x260>)
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	2202      	movs	r2, #2
 8002b46:	61ba      	str	r2, [r7, #24]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	fa92 f2a2 	rbit	r2, r2
 8002b4e:	617a      	str	r2, [r7, #20]
  return result;
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	fab2 f282 	clz	r2, r2
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	f042 0220 	orr.w	r2, r2, #32
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	f002 021f 	and.w	r2, r2, #31
 8002b62:	2101      	movs	r1, #1
 8002b64:	fa01 f202 	lsl.w	r2, r1, r2
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e079      	b.n	8002c66 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b72:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <HAL_RCC_ClockConfig+0x260>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f023 0203 	bic.w	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	491a      	ldr	r1, [pc, #104]	; (8002be8 <HAL_RCC_ClockConfig+0x260>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b84:	f7fe fc34 	bl	80013f0 <HAL_GetTick>
 8002b88:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8c:	f7fe fc30 	bl	80013f0 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e061      	b.n	8002c66 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <HAL_RCC_ClockConfig+0x260>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 020c 	and.w	r2, r3, #12
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d1eb      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_RCC_ClockConfig+0x25c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d214      	bcs.n	8002bec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <HAL_RCC_ClockConfig+0x25c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 0207 	bic.w	r2, r3, #7
 8002bca:	4906      	ldr	r1, [pc, #24]	; (8002be4 <HAL_RCC_ClockConfig+0x25c>)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <HAL_RCC_ClockConfig+0x25c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d005      	beq.n	8002bec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e040      	b.n	8002c66 <HAL_RCC_ClockConfig+0x2de>
 8002be4:	40022000 	.word	0x40022000
 8002be8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf8:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <HAL_RCC_ClockConfig+0x2e8>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	491a      	ldr	r1, [pc, #104]	; (8002c70 <HAL_RCC_ClockConfig+0x2e8>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d009      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c16:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <HAL_RCC_ClockConfig+0x2e8>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4912      	ldr	r1, [pc, #72]	; (8002c70 <HAL_RCC_ClockConfig+0x2e8>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c2a:	f000 f829 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8002c2e:	4601      	mov	r1, r0
 8002c30:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <HAL_RCC_ClockConfig+0x2e8>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c38:	22f0      	movs	r2, #240	; 0xf0
 8002c3a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	fa92 f2a2 	rbit	r2, r2
 8002c42:	60fa      	str	r2, [r7, #12]
  return result;
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	fab2 f282 	clz	r2, r2
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	40d3      	lsrs	r3, r2
 8002c4e:	4a09      	ldr	r2, [pc, #36]	; (8002c74 <HAL_RCC_ClockConfig+0x2ec>)
 8002c50:	5cd3      	ldrb	r3, [r2, r3]
 8002c52:	fa21 f303 	lsr.w	r3, r1, r3
 8002c56:	4a08      	ldr	r2, [pc, #32]	; (8002c78 <HAL_RCC_ClockConfig+0x2f0>)
 8002c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c5a:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <HAL_RCC_ClockConfig+0x2f4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fe fb82 	bl	8001368 <HAL_InitTick>
  
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3778      	adds	r7, #120	; 0x78
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
 8002c74:	08003010 	.word	0x08003010
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	20000004 	.word	0x20000004

08002c80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b08b      	sub	sp, #44	; 0x2c
 8002c84:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61fb      	str	r3, [r7, #28]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61bb      	str	r3, [r7, #24]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002c9a:	4b29      	ldr	r3, [pc, #164]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d002      	beq.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x30>
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d003      	beq.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x36>
 8002cae:	e03c      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cb0:	4b24      	ldr	r3, [pc, #144]	; (8002d44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cb2:	623b      	str	r3, [r7, #32]
      break;
 8002cb4:	e03c      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002cbc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002cc0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	fa92 f2a2 	rbit	r2, r2
 8002cc8:	607a      	str	r2, [r7, #4]
  return result;
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	fab2 f282 	clz	r2, r2
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	40d3      	lsrs	r3, r2
 8002cd4:	4a1c      	ldr	r2, [pc, #112]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cd6:	5cd3      	ldrb	r3, [r2, r3]
 8002cd8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002cda:	4b19      	ldr	r3, [pc, #100]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	220f      	movs	r2, #15
 8002ce4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	fa92 f2a2 	rbit	r2, r2
 8002cec:	60fa      	str	r2, [r7, #12]
  return result;
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	fab2 f282 	clz	r2, r2
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	40d3      	lsrs	r3, r2
 8002cf8:	4a14      	ldr	r2, [pc, #80]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002cfa:	5cd3      	ldrb	r3, [r2, r3]
 8002cfc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d008      	beq.n	8002d1a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d08:	4a0e      	ldr	r2, [pc, #56]	; (8002d44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
 8002d18:	e004      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	4a0c      	ldr	r2, [pc, #48]	; (8002d50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d1e:	fb02 f303 	mul.w	r3, r2, r3
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	623b      	str	r3, [r7, #32]
      break;
 8002d28:	e002      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d2a:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d2c:	623b      	str	r3, [r7, #32]
      break;
 8002d2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d30:	6a3b      	ldr	r3, [r7, #32]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	372c      	adds	r7, #44	; 0x2c
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000
 8002d44:	007a1200 	.word	0x007a1200
 8002d48:	08003020 	.word	0x08003020
 8002d4c:	08003030 	.word	0x08003030
 8002d50:	003d0900 	.word	0x003d0900

08002d54 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b092      	sub	sp, #72	; 0x48
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 80d0 	beq.w	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002d72:	2300      	movs	r3, #0
 8002d74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d78:	4b86      	ldr	r3, [pc, #536]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10e      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d84:	4b83      	ldr	r3, [pc, #524]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	4a82      	ldr	r2, [pc, #520]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	61d3      	str	r3, [r2, #28]
 8002d90:	4b80      	ldr	r3, [pc, #512]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d98:	60bb      	str	r3, [r7, #8]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da2:	4b7d      	ldr	r3, [pc, #500]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d118      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dae:	4b7a      	ldr	r3, [pc, #488]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a79      	ldr	r2, [pc, #484]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dba:	f7fe fb19 	bl	80013f0 <HAL_GetTick>
 8002dbe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc2:	f7fe fb15 	bl	80013f0 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b64      	cmp	r3, #100	; 0x64
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e0db      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd4:	4b70      	ldr	r3, [pc, #448]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002de0:	4b6c      	ldr	r3, [pc, #432]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d07d      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d076      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dfe:	4b65      	ldr	r3, [pc, #404]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e0c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e10:	fa93 f3a3 	rbit	r3, r3
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e18:	fab3 f383 	clz	r3, r3
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4b5e      	ldr	r3, [pc, #376]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	461a      	mov	r2, r3
 8002e28:	2301      	movs	r3, #1
 8002e2a:	6013      	str	r3, [r2, #0]
 8002e2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e34:	fa93 f3a3 	rbit	r3, r3
 8002e38:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e3c:	fab3 f383 	clz	r3, r3
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	4b55      	ldr	r3, [pc, #340]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e50:	4a50      	ldr	r2, [pc, #320]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e54:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d045      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7fe fac6 	bl	80013f0 <HAL_GetTick>
 8002e64:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e66:	e00a      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e68:	f7fe fac2 	bl	80013f0 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e086      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e84:	fa93 f3a3 	rbit	r3, r3
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	623b      	str	r3, [r7, #32]
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	fa93 f3a3 	rbit	r3, r3
 8002e94:	61fb      	str	r3, [r7, #28]
  return result;
 8002e96:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e98:	fab3 f383 	clz	r3, r3
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	f043 0302 	orr.w	r3, r3, #2
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d102      	bne.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002eac:	4b39      	ldr	r3, [pc, #228]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	e007      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	4b35      	ldr	r3, [pc, #212]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	613a      	str	r2, [r7, #16]
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	fa92 f2a2 	rbit	r2, r2
 8002ecc:	60fa      	str	r2, [r7, #12]
  return result;
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	fab2 f282 	clz	r2, r2
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	f002 021f 	and.w	r2, r2, #31
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0bd      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002eec:	4b29      	ldr	r3, [pc, #164]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4926      	ldr	r1, [pc, #152]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002efe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d105      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f06:	4b23      	ldr	r3, [pc, #140]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	4a22      	ldr	r2, [pc, #136]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f10:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d008      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f1e:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	f023 0203 	bic.w	r2, r3, #3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	491a      	ldr	r1, [pc, #104]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0320 	and.w	r3, r3, #32
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f3c:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	f023 0210 	bic.w	r2, r3, #16
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	4912      	ldr	r1, [pc, #72]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d008      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	490b      	ldr	r1, [pc, #44]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	4903      	ldr	r1, [pc, #12]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3748      	adds	r7, #72	; 0x48
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40007000 	.word	0x40007000
 8002f9c:	10908100 	.word	0x10908100

08002fa0 <__libc_init_array>:
 8002fa0:	b570      	push	{r4, r5, r6, lr}
 8002fa2:	4e0d      	ldr	r6, [pc, #52]	; (8002fd8 <__libc_init_array+0x38>)
 8002fa4:	4c0d      	ldr	r4, [pc, #52]	; (8002fdc <__libc_init_array+0x3c>)
 8002fa6:	1ba4      	subs	r4, r4, r6
 8002fa8:	10a4      	asrs	r4, r4, #2
 8002faa:	2500      	movs	r5, #0
 8002fac:	42a5      	cmp	r5, r4
 8002fae:	d109      	bne.n	8002fc4 <__libc_init_array+0x24>
 8002fb0:	4e0b      	ldr	r6, [pc, #44]	; (8002fe0 <__libc_init_array+0x40>)
 8002fb2:	4c0c      	ldr	r4, [pc, #48]	; (8002fe4 <__libc_init_array+0x44>)
 8002fb4:	f000 f820 	bl	8002ff8 <_init>
 8002fb8:	1ba4      	subs	r4, r4, r6
 8002fba:	10a4      	asrs	r4, r4, #2
 8002fbc:	2500      	movs	r5, #0
 8002fbe:	42a5      	cmp	r5, r4
 8002fc0:	d105      	bne.n	8002fce <__libc_init_array+0x2e>
 8002fc2:	bd70      	pop	{r4, r5, r6, pc}
 8002fc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fc8:	4798      	blx	r3
 8002fca:	3501      	adds	r5, #1
 8002fcc:	e7ee      	b.n	8002fac <__libc_init_array+0xc>
 8002fce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fd2:	4798      	blx	r3
 8002fd4:	3501      	adds	r5, #1
 8002fd6:	e7f2      	b.n	8002fbe <__libc_init_array+0x1e>
 8002fd8:	08003040 	.word	0x08003040
 8002fdc:	08003040 	.word	0x08003040
 8002fe0:	08003040 	.word	0x08003040
 8002fe4:	08003048 	.word	0x08003048

08002fe8 <memset>:
 8002fe8:	4402      	add	r2, r0
 8002fea:	4603      	mov	r3, r0
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d100      	bne.n	8002ff2 <memset+0xa>
 8002ff0:	4770      	bx	lr
 8002ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ff6:	e7f9      	b.n	8002fec <memset+0x4>

08002ff8 <_init>:
 8002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffa:	bf00      	nop
 8002ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffe:	bc08      	pop	{r3}
 8003000:	469e      	mov	lr, r3
 8003002:	4770      	bx	lr

08003004 <_fini>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	bf00      	nop
 8003008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300a:	bc08      	pop	{r3}
 800300c:	469e      	mov	lr, r3
 800300e:	4770      	bx	lr
