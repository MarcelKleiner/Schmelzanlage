
GrafikTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fc4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800314c  0800314c  0001314c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003270  08003270  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003270  08003270  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003270  08003270  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003270  08003270  00013270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003278  08003278  00013278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800327c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000070  080032ec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  080032ec  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b61e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e59  00000000  00000000  0003b6be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008c0  00000000  00000000  0003e518  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a8  00000000  00000000  0003edd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bd21  00000000  00000000  0003f580  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b6b9  00000000  00000000  0005b2a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e4f2  00000000  00000000  0006695a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f4e4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c4  00000000  00000000  000f4ec8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003134 	.word	0x08003134

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003134 	.word	0x08003134

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <_ZN7AppMainC1Ev>:

//#include<iostream>
#include<string> // for string class
using namespace std;

AppMain::AppMain() {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4618      	mov	r0, r3
 80001e4:	f000 f900 	bl	80003e8 <_ZN9LCDDriverC1Ev>
	// TODO Auto-generated constructor stub

}
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	4618      	mov	r0, r3
 80001ec:	3708      	adds	r7, #8
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
	...

080001f4 <_ZN7AppMain4mainEv>:

void AppMain::main(){
 80001f4:	b590      	push	{r4, r7, lr}
 80001f6:	b0ad      	sub	sp, #180	; 0xb4
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
	lcdDriver.InitLCD();
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4618      	mov	r0, r3
 8000200:	f000 f8fd 	bl	80003fe <_ZN9LCDDriver7InitLCDEv>

	lcdDriver.SetAddressPointer(0, 0);
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2200      	movs	r2, #0
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f000 fa1e 	bl	800064c <_ZN9LCDDriver17SetAddressPointerEhh>
	lcdDriver.WriteText("Copyright (C) 1991-2020, B&K System AG");
 8000210:	687c      	ldr	r4, [r7, #4]
 8000212:	f107 0320 	add.w	r3, r7, #32
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fd9c 	bl	8002d54 <_ZNSaIcEC1Ev>
 800021c:	f107 0220 	add.w	r2, r7, #32
 8000220:	f107 0308 	add.w	r3, r7, #8
 8000224:	496a      	ldr	r1, [pc, #424]	; (80003d0 <_ZN7AppMain4mainEv+0x1dc>)
 8000226:	4618      	mov	r0, r3
 8000228:	f002 fdf8 	bl	8002e1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800022c:	f107 0308 	add.w	r3, r7, #8
 8000230:	4619      	mov	r1, r3
 8000232:	4620      	mov	r0, r4
 8000234:	f000 f940 	bl	80004b8 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000238:	f107 0308 	add.w	r3, r7, #8
 800023c:	4618      	mov	r0, r3
 800023e:	f002 fdbf 	bl	8002dc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000242:	f107 0320 	add.w	r3, r7, #32
 8000246:	4618      	mov	r0, r3
 8000248:	f002 fd85 	bl	8002d56 <_ZNSaIcED1Ev>
	lcdDriver.SetAddressPointer(0, 2);
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2202      	movs	r2, #2
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f000 f9fa 	bl	800064c <_ZN9LCDDriver17SetAddressPointerEhh>
	lcdDriver.WriteText("Init System...");
 8000258:	687c      	ldr	r4, [r7, #4]
 800025a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800025e:	4618      	mov	r0, r3
 8000260:	f002 fd78 	bl	8002d54 <_ZNSaIcEC1Ev>
 8000264:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800026c:	4959      	ldr	r1, [pc, #356]	; (80003d4 <_ZN7AppMain4mainEv+0x1e0>)
 800026e:	4618      	mov	r0, r3
 8000270:	f002 fdd4 	bl	8002e1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000278:	4619      	mov	r1, r3
 800027a:	4620      	mov	r0, r4
 800027c:	f000 f91c 	bl	80004b8 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000284:	4618      	mov	r0, r3
 8000286:	f002 fd9b 	bl	8002dc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800028a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800028e:	4618      	mov	r0, r3
 8000290:	f002 fd61 	bl	8002d56 <_ZNSaIcED1Ev>
	HAL_Delay(1000);
 8000294:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000298:	f000 ff78 	bl	800118c <HAL_Delay>
	lcdDriver.SetAddressPointer(0, 3);
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2203      	movs	r2, #3
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 f9d2 	bl	800064c <_ZN9LCDDriver17SetAddressPointerEhh>
	lcdDriver.WriteText("Booting from internal ROM...");
 80002a8:	687c      	ldr	r4, [r7, #4]
 80002aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002ae:	4618      	mov	r0, r3
 80002b0:	f002 fd50 	bl	8002d54 <_ZNSaIcEC1Ev>
 80002b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80002b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002bc:	4946      	ldr	r1, [pc, #280]	; (80003d8 <_ZN7AppMain4mainEv+0x1e4>)
 80002be:	4618      	mov	r0, r3
 80002c0:	f002 fdac 	bl	8002e1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80002c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002c8:	4619      	mov	r1, r3
 80002ca:	4620      	mov	r0, r4
 80002cc:	f000 f8f4 	bl	80004b8 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80002d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002d4:	4618      	mov	r0, r3
 80002d6:	f002 fd73 	bl	8002dc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80002da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 fd39 	bl	8002d56 <_ZNSaIcED1Ev>
	HAL_Delay(800);
 80002e4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80002e8:	f000 ff50 	bl	800118c <HAL_Delay>
	lcdDriver.SetAddressPointer(0, 5);
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2205      	movs	r2, #5
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 f9aa 	bl	800064c <_ZN9LCDDriver17SetAddressPointerEhh>
	lcdDriver.WriteText("Main Processor : STM32F303K8");
 80002f8:	687c      	ldr	r4, [r7, #4]
 80002fa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80002fe:	4618      	mov	r0, r3
 8000300:	f002 fd28 	bl	8002d54 <_ZNSaIcEC1Ev>
 8000304:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000308:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800030c:	4933      	ldr	r1, [pc, #204]	; (80003dc <_ZN7AppMain4mainEv+0x1e8>)
 800030e:	4618      	mov	r0, r3
 8000310:	f002 fd84 	bl	8002e1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000314:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000318:	4619      	mov	r1, r3
 800031a:	4620      	mov	r0, r4
 800031c:	f000 f8cc 	bl	80004b8 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000320:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000324:	4618      	mov	r0, r3
 8000326:	f002 fd4b 	bl	8002dc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800032a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800032e:	4618      	mov	r0, r3
 8000330:	f002 fd11 	bl	8002d56 <_ZNSaIcED1Ev>
	lcdDriver.SetAddressPointer(0, 6);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	2206      	movs	r2, #6
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f000 f986 	bl	800064c <_ZN9LCDDriver17SetAddressPointerEhh>
	lcdDriver.WriteText("Memory Testing : 64K OK ");
 8000340:	687c      	ldr	r4, [r7, #4]
 8000342:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000346:	4618      	mov	r0, r3
 8000348:	f002 fd04 	bl	8002d54 <_ZNSaIcEC1Ev>
 800034c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8000350:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000354:	4922      	ldr	r1, [pc, #136]	; (80003e0 <_ZN7AppMain4mainEv+0x1ec>)
 8000356:	4618      	mov	r0, r3
 8000358:	f002 fd60 	bl	8002e1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800035c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000360:	4619      	mov	r1, r3
 8000362:	4620      	mov	r0, r4
 8000364:	f000 f8a8 	bl	80004b8 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000368:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800036c:	4618      	mov	r0, r3
 800036e:	f002 fd27 	bl	8002dc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000372:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000376:	4618      	mov	r0, r3
 8000378:	f002 fced 	bl	8002d56 <_ZNSaIcED1Ev>
	HAL_Delay(800);
 800037c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000380:	f000 ff04 	bl	800118c <HAL_Delay>
	lcdDriver.SetAddressPointer(0, 15);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	220f      	movs	r2, #15
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f000 f95e 	bl	800064c <_ZN9LCDDriver17SetAddressPointerEhh>
	lcdDriver.WriteText("Press F1 to enter BIOS...");
 8000390:	687c      	ldr	r4, [r7, #4]
 8000392:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000396:	4618      	mov	r0, r3
 8000398:	f002 fcdc 	bl	8002d54 <_ZNSaIcEC1Ev>
 800039c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80003a0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80003a4:	490f      	ldr	r1, [pc, #60]	; (80003e4 <_ZN7AppMain4mainEv+0x1f0>)
 80003a6:	4618      	mov	r0, r3
 80003a8:	f002 fd38 	bl	8002e1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80003ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80003b0:	4619      	mov	r1, r3
 80003b2:	4620      	mov	r0, r4
 80003b4:	f000 f880 	bl	80004b8 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80003b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80003bc:	4618      	mov	r0, r3
 80003be:	f002 fcff 	bl	8002dc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80003c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80003c6:	4618      	mov	r0, r3
 80003c8:	f002 fcc5 	bl	8002d56 <_ZNSaIcED1Ev>
	while(1){
 80003cc:	e7fe      	b.n	80003cc <_ZN7AppMain4mainEv+0x1d8>
 80003ce:	bf00      	nop
 80003d0:	0800314c 	.word	0x0800314c
 80003d4:	08003174 	.word	0x08003174
 80003d8:	08003184 	.word	0x08003184
 80003dc:	080031a4 	.word	0x080031a4
 80003e0:	080031c4 	.word	0x080031c4
 80003e4:	080031e0 	.word	0x080031e0

080003e8 <_ZN9LCDDriverC1Ev>:
#include "main.h"
#include "i2c.h"
#include "gpio.h"
#include "stdlib.h"

LCDDriver::LCDDriver() {
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4618      	mov	r0, r3
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <_ZN9LCDDriver7InitLCDEv>:


void LCDDriver::InitLCD(){
 80003fe:	b580      	push	{r7, lr}
 8000400:	b082      	sub	sp, #8
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
	Reset();
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f000 fbcc 	bl	8000ba4 <_ZN9LCDDriver5ResetEv>
	LCD_RD_SET;
 800040c:	2201      	movs	r2, #1
 800040e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000416:	f001 f94b 	bl	80016b0 <HAL_GPIO_WritePin>
	LCD_WR_SET;
 800041a:	2201      	movs	r2, #1
 800041c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000420:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000424:	f001 f944 	bl	80016b0 <HAL_GPIO_WritePin>
	SetLCDSize(SIZE_40C);
 8000428:	2100      	movs	r1, #0
 800042a:	6878      	ldr	r0, [r7, #4]
 800042c:	f000 f870 	bl	8000510 <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E>

	//init REGISTERS SETTING
	WriteData_16bit(LCD_setCursorPointer,0);
 8000430:	2200      	movs	r2, #0
 8000432:	2121      	movs	r1, #33	; 0x21
 8000434:	6878      	ldr	r0, [r7, #4]
 8000436:	f000 f9af 	bl	8000798 <_ZN9LCDDriver15WriteData_16bitEht>
	WriteData_16bit(LCD_setAddressPointer, 0);
 800043a:	2200      	movs	r2, #0
 800043c:	2124      	movs	r1, #36	; 0x24
 800043e:	6878      	ldr	r0, [r7, #4]
 8000440:	f000 f9aa 	bl	8000798 <_ZN9LCDDriver15WriteData_16bitEht>
	WriteData_16bit(LCD_setOffsetRegister, 0);
 8000444:	2200      	movs	r2, #0
 8000446:	2122      	movs	r1, #34	; 0x22
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	f000 f9a5 	bl	8000798 <_ZN9LCDDriver15WriteData_16bitEht>
	//Init SET CONTROL WORD
	WriteData_16bit(LCD_setTextHomeAddress,0);
 800044e:	2200      	movs	r2, #0
 8000450:	2140      	movs	r1, #64	; 0x40
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	f000 f9a0 	bl	8000798 <_ZN9LCDDriver15WriteData_16bitEht>
	WriteData_16bit(LCD_setGraphicHomeAddress, 0);
 8000458:	2200      	movs	r2, #0
 800045a:	2142      	movs	r1, #66	; 0x42
 800045c:	6878      	ldr	r0, [r7, #4]
 800045e:	f000 f99b 	bl	8000798 <_ZN9LCDDriver15WriteData_16bitEht>
	//Init MODE SET
	WriteData_8bit(LCD_EXOR_mode |LCD_externalCGRAM_mode);
 8000462:	2189      	movs	r1, #137	; 0x89
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	f000 f90f 	bl	8000688 <_ZN9LCDDriver14WriteData_8bitEh>
	//Init DISPLY MODE
	WriteData_8bit(LCD_cursorOnBlinkON | LCD_textONGraphicOFF);
 800046a:	2197      	movs	r1, #151	; 0x97
 800046c:	6878      	ldr	r0, [r7, #4]
 800046e:	f000 f90b 	bl	8000688 <_ZN9LCDDriver14WriteData_8bitEh>
	//Init CURSOR PATTERN SELECT
	WriteData_8bit(LCD_1_lineCursor);
 8000472:	21a0      	movs	r1, #160	; 0xa0
 8000474:	6878      	ldr	r0, [r7, #4]
 8000476:	f000 f907 	bl	8000688 <_ZN9LCDDriver14WriteData_8bitEh>
	//Init DATA AUTO READ/WRITE
	WriteData_8bit(LCD_setDataAutoRead);
 800047a:	21b1      	movs	r1, #177	; 0xb1
 800047c:	6878      	ldr	r0, [r7, #4]
 800047e:	f000 f903 	bl	8000688 <_ZN9LCDDriver14WriteData_8bitEh>
	//Init SCREEN REVERSE
	WriteData_16bit(LCD_SCREEN_REVERSE, NORMAL_DISPLAY);
 8000482:	2200      	movs	r2, #0
 8000484:	21d0      	movs	r1, #208	; 0xd0
 8000486:	6878      	ldr	r0, [r7, #4]
 8000488:	f000 f986 	bl	8000798 <_ZN9LCDDriver15WriteData_16bitEht>
	//Init BLINK TIME
	WriteData_16bit(LCD_BLINK_TIME, BLINK_TIM_0_066);
 800048c:	2200      	movs	r2, #0
 800048e:	2150      	movs	r1, #80	; 0x50
 8000490:	6878      	ldr	r0, [r7, #4]
 8000492:	f000 f981 	bl	8000798 <_ZN9LCDDriver15WriteData_16bitEht>
	//Init CURSOR AUTO MOVING
	WriteData_16bit(LCD_CursorAutoMoving, AUTO_MOVING_ON);
 8000496:	2201      	movs	r2, #1
 8000498:	2160      	movs	r1, #96	; 0x60
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	f000 f97c 	bl	8000798 <_ZN9LCDDriver15WriteData_16bitEht>


	SetAddressPointer(0, 0);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2100      	movs	r1, #0
 80004a4:	6878      	ldr	r0, [r7, #4]
 80004a6:	f000 f8d1 	bl	800064c <_ZN9LCDDriver17SetAddressPointerEhh>
	ClearDisplay();
 80004aa:	6878      	ldr	r0, [r7, #4]
 80004ac:	f000 f879 	bl	80005a2 <_ZN9LCDDriver12ClearDisplayEv>

}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:


bool LCDDriver::WriteText(string data){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
	uint16_t counter = 0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	81fb      	strh	r3, [r7, #14]
	while(data[counter] != '\0'){
 80004c6:	89fb      	ldrh	r3, [r7, #14]
 80004c8:	4619      	mov	r1, r3
 80004ca:	6838      	ldr	r0, [r7, #0]
 80004cc:	f002 fc7e 	bl	8002dcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80004d0:	4603      	mov	r3, r0
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	bf14      	ite	ne
 80004d8:	2301      	movne	r3, #1
 80004da:	2300      	moveq	r3, #0
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d011      	beq.n	8000506 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e>
		WriteData_8bit(LCD_dataWriteAndIncrementADP,(uint8_t)data[counter]-32);
 80004e2:	89fb      	ldrh	r3, [r7, #14]
 80004e4:	4619      	mov	r1, r3
 80004e6:	6838      	ldr	r0, [r7, #0]
 80004e8:	f002 fc70 	bl	8002dcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80004ec:	4603      	mov	r3, r0
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	3b20      	subs	r3, #32
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	461a      	mov	r2, r3
 80004f6:	21c0      	movs	r1, #192	; 0xc0
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f000 f8fa 	bl	80006f2 <_ZN9LCDDriver14WriteData_8bitEhh>
		counter++;
 80004fe:	89fb      	ldrh	r3, [r7, #14]
 8000500:	3301      	adds	r3, #1
 8000502:	81fb      	strh	r3, [r7, #14]
	while(data[counter] != '\0'){
 8000504:	e7df      	b.n	80004c6 <_ZN9LCDDriver9WriteTextENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe>
	}

	return true;
 8000506:	2301      	movs	r3, #1
}
 8000508:	4618      	mov	r0, r3
 800050a:	3710      	adds	r7, #16
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E>:
 * Init the LCD Size (40 Columns / 32 Columns)
 *
 * @param size: LCD Size
 * @return : none
 */
void LCDDriver::SetLCDSize(LCD_SIZE size){
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	460b      	mov	r3, r1
 800051a:	70fb      	strb	r3, [r7, #3]
	if(size == SIZE_40C){
 800051c:	78fb      	ldrb	r3, [r7, #3]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d11c      	bne.n	800055c <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E+0x4c>
		LCD_SIZE_40;				//set size 40 Columns
 8000522:	2200      	movs	r2, #0
 8000524:	2102      	movs	r1, #2
 8000526:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052a:	f001 f8c1 	bl	80016b0 <HAL_GPIO_WritePin>
		LCD_FONT_68;				//set Fontsize 6x8px
 800052e:	2201      	movs	r2, #1
 8000530:	2101      	movs	r1, #1
 8000532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000536:	f001 f8bb 	bl	80016b0 <HAL_GPIO_WritePin>
		LCD_XY_SIZE.column = 40;	//set LCD size struct to 40 Columns
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2228      	movs	r2, #40	; 0x28
 800053e:	701a      	strb	r2, [r3, #0]
		LCD_XY_SIZE.row = 16;		//set LCD size struct to 16 Row
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2210      	movs	r2, #16
 8000544:	705a      	strb	r2, [r3, #1]
		WriteData_16bit(LCD_setTextArea, 0x0028);	//set TextArea to 32 Columns
 8000546:	2228      	movs	r2, #40	; 0x28
 8000548:	2141      	movs	r1, #65	; 0x41
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f000 f924 	bl	8000798 <_ZN9LCDDriver15WriteData_16bitEht>
		WriteData_16bit(LCD_setGraphicArea, 0x0028);
 8000550:	2228      	movs	r2, #40	; 0x28
 8000552:	2143      	movs	r1, #67	; 0x43
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f000 f91f 	bl	8000798 <_ZN9LCDDriver15WriteData_16bitEht>
		LCD_XY_SIZE.column = 32;	//set LCD size struct to 40 Columns
		LCD_XY_SIZE.row = 16;		//set LCD size struct to 16 Row
		WriteData_16bit(LCD_setTextArea, 0x0020);	//set TextArea to 40 Columns
		WriteData_16bit(LCD_setGraphicArea, 0x0020);
	}
}
 800055a:	e01e      	b.n	800059a <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E+0x8a>
	else if(size == SIZE_32C){
 800055c:	78fb      	ldrb	r3, [r7, #3]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d11b      	bne.n	800059a <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E+0x8a>
		LCD_SIZE_32;				//set size 40 Columns
 8000562:	2201      	movs	r2, #1
 8000564:	2102      	movs	r1, #2
 8000566:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056a:	f001 f8a1 	bl	80016b0 <HAL_GPIO_WritePin>
		LCD_FONT_88;				//set Fontsize 6x8px
 800056e:	2200      	movs	r2, #0
 8000570:	2101      	movs	r1, #1
 8000572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000576:	f001 f89b 	bl	80016b0 <HAL_GPIO_WritePin>
		LCD_XY_SIZE.column = 32;	//set LCD size struct to 40 Columns
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2220      	movs	r2, #32
 800057e:	701a      	strb	r2, [r3, #0]
		LCD_XY_SIZE.row = 16;		//set LCD size struct to 16 Row
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2210      	movs	r2, #16
 8000584:	705a      	strb	r2, [r3, #1]
		WriteData_16bit(LCD_setTextArea, 0x0020);	//set TextArea to 40 Columns
 8000586:	2220      	movs	r2, #32
 8000588:	2141      	movs	r1, #65	; 0x41
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f000 f904 	bl	8000798 <_ZN9LCDDriver15WriteData_16bitEht>
		WriteData_16bit(LCD_setGraphicArea, 0x0020);
 8000590:	2220      	movs	r2, #32
 8000592:	2143      	movs	r1, #67	; 0x43
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f000 f8ff 	bl	8000798 <_ZN9LCDDriver15WriteData_16bitEht>
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <_ZN9LCDDriver12ClearDisplayEv>:
 * clears the whole LCD depending on the selected size
 *
 * @param  : none
 * @return : none
 */
void LCDDriver::ClearDisplay(){
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b084      	sub	sp, #16
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
	WriteData_16bit(LCD_setOffsetRegister, 0x0003);
 80005aa:	2203      	movs	r2, #3
 80005ac:	2122      	movs	r1, #34	; 0x22
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f000 f8f2 	bl	8000798 <_ZN9LCDDriver15WriteData_16bitEht>

	WriteData_16bit(LCD_setAddressPointer, 0x1C00);
 80005b4:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80005b8:	2124      	movs	r1, #36	; 0x24
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f000 f8ec 	bl	8000798 <_ZN9LCDDriver15WriteData_16bitEht>

	WriteData_8bit(LCD_dataWriteAndIncrementADP, 0x0000);
 80005c0:	2200      	movs	r2, #0
 80005c2:	21c0      	movs	r1, #192	; 0xc0
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f000 f894 	bl	80006f2 <_ZN9LCDDriver14WriteData_8bitEhh>
	WriteData_8bit(LCD_dataWriteAndIncrementADP, 0x0004);
 80005ca:	2204      	movs	r2, #4
 80005cc:	21c0      	movs	r1, #192	; 0xc0
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f000 f88f 	bl	80006f2 <_ZN9LCDDriver14WriteData_8bitEhh>
	WriteData_8bit(LCD_dataWriteAndIncrementADP, 0x000E);
 80005d4:	220e      	movs	r2, #14
 80005d6:	21c0      	movs	r1, #192	; 0xc0
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f000 f88a 	bl	80006f2 <_ZN9LCDDriver14WriteData_8bitEhh>
	WriteData_8bit(LCD_dataWriteAndIncrementADP, 0x0015);
 80005de:	2215      	movs	r2, #21
 80005e0:	21c0      	movs	r1, #192	; 0xc0
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f000 f885 	bl	80006f2 <_ZN9LCDDriver14WriteData_8bitEhh>
	WriteData_8bit(LCD_dataWriteAndIncrementADP, 0x0004);
 80005e8:	2204      	movs	r2, #4
 80005ea:	21c0      	movs	r1, #192	; 0xc0
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 f880 	bl	80006f2 <_ZN9LCDDriver14WriteData_8bitEhh>
	WriteData_8bit(LCD_dataWriteAndIncrementADP, 0x0004);
 80005f2:	2204      	movs	r2, #4
 80005f4:	21c0      	movs	r1, #192	; 0xc0
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f000 f87b 	bl	80006f2 <_ZN9LCDDriver14WriteData_8bitEhh>
	WriteData_8bit(LCD_dataWriteAndIncrementADP, 0x0004);
 80005fc:	2204      	movs	r2, #4
 80005fe:	21c0      	movs	r1, #192	; 0xc0
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f000 f876 	bl	80006f2 <_ZN9LCDDriver14WriteData_8bitEhh>
	WriteData_8bit(LCD_dataWriteAndIncrementADP, 0x0000);
 8000606:	2200      	movs	r2, #0
 8000608:	21c0      	movs	r1, #192	; 0xc0
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f000 f871 	bl	80006f2 <_ZN9LCDDriver14WriteData_8bitEhh>

	WriteData_16bit(LCD_setAddressPointer, 0x0000);
 8000610:	2200      	movs	r2, #0
 8000612:	2124      	movs	r1, #36	; 0x24
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 f8bf 	bl	8000798 <_ZN9LCDDriver15WriteData_16bitEht>
	for(uint16_t counter = 0; counter<LCD_XY_SIZE.column*LCD_XY_SIZE.row; counter++){
 800061a:	2300      	movs	r3, #0
 800061c:	81fb      	strh	r3, [r7, #14]
 800061e:	89fa      	ldrh	r2, [r7, #14]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4619      	mov	r1, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	785b      	ldrb	r3, [r3, #1]
 800062a:	fb03 f301 	mul.w	r3, r3, r1
 800062e:	429a      	cmp	r2, r3
 8000630:	da08      	bge.n	8000644 <_ZN9LCDDriver12ClearDisplayEv+0xa2>
		WriteData_8bit(LCD_dataWriteAndIncrementADP, 0x80);
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	21c0      	movs	r1, #192	; 0xc0
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f000 f85b 	bl	80006f2 <_ZN9LCDDriver14WriteData_8bitEhh>
	for(uint16_t counter = 0; counter<LCD_XY_SIZE.column*LCD_XY_SIZE.row; counter++){
 800063c:	89fb      	ldrh	r3, [r7, #14]
 800063e:	3301      	adds	r3, #1
 8000640:	81fb      	strh	r3, [r7, #14]
 8000642:	e7ec      	b.n	800061e <_ZN9LCDDriver12ClearDisplayEv+0x7c>
	}
}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <_ZN9LCDDriver17SetAddressPointerEhh>:
 *
 * @param column: the chosen Column
 * @param row: the chosen Row
 * @return : none;
 */
void LCDDriver::SetAddressPointer(uint8_t column, uint8_t row){
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	70fb      	strb	r3, [r7, #3]
 8000658:	4613      	mov	r3, r2
 800065a:	70bb      	strb	r3, [r7, #2]
	uint16_t LCDPointer = row*LCD_XY_SIZE.column + column;	//calculate the AdressPointer depending on the selected LCD Size
 800065c:	78bb      	ldrb	r3, [r7, #2]
 800065e:	b29a      	uxth	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	b29b      	uxth	r3, r3
 8000666:	fb12 f303 	smulbb	r3, r2, r3
 800066a:	b29a      	uxth	r2, r3
 800066c:	78fb      	ldrb	r3, [r7, #3]
 800066e:	b29b      	uxth	r3, r3
 8000670:	4413      	add	r3, r2
 8000672:	81fb      	strh	r3, [r7, #14]
	WriteData_16bit(LCD_setAddressPointer, LCDPointer);		//set the AdressPointer
 8000674:	89fb      	ldrh	r3, [r7, #14]
 8000676:	461a      	mov	r2, r3
 8000678:	2124      	movs	r1, #36	; 0x24
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f000 f88c 	bl	8000798 <_ZN9LCDDriver15WriteData_16bitEht>
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <_ZN9LCDDriver14WriteData_8bitEh>:


bool LCDDriver::WriteData_8bit(uint8_t addr){
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]
	LCD_OUTPUT_ENABLE;
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800069a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069e:	f001 f807 	bl	80016b0 <HAL_GPIO_WritePin>


	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
 80006a2:	2132      	movs	r1, #50	; 0x32
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f000 f90b 	bl	80008c0 <_ZN9LCDDriver11CheckStatusEh>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	bf0c      	ite	eq
 80006b0:	2301      	moveq	r3, #1
 80006b2:	2300      	movne	r3, #0
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <_ZN9LCDDriver14WriteData_8bitEh+0x36>
		return false;
 80006ba:	2300      	movs	r3, #0
 80006bc:	e015      	b.n	80006ea <_ZN9LCDDriver14WriteData_8bitEh+0x62>
	}
	WriteDataPin(addr);
 80006be:	78fb      	ldrb	r3, [r7, #3]
 80006c0:	4619      	mov	r1, r3
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f000 fa14 	bl	8000af0 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_COMMAND;
 80006c8:	2201      	movs	r2, #1
 80006ca:	2104      	movs	r1, #4
 80006cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d0:	f000 ffee 	bl	80016b0 <HAL_GPIO_WritePin>
	PushData();
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f000 f8d1 	bl	800087c <_ZN9LCDDriver8PushDataEv>

	LCD_OUTPUT_DISABLE;
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e4:	f000 ffe4 	bl	80016b0 <HAL_GPIO_WritePin>
	return true;
 80006e8:	2301      	movs	r3, #1
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <_ZN9LCDDriver14WriteData_8bitEhh>:


bool LCDDriver::WriteData_8bit(uint8_t addr, uint8_t data){
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b082      	sub	sp, #8
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
 80006fa:	460b      	mov	r3, r1
 80006fc:	70fb      	strb	r3, [r7, #3]
 80006fe:	4613      	mov	r3, r2
 8000700:	70bb      	strb	r3, [r7, #2]
	LCD_OUTPUT_ENABLE;
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070c:	f000 ffd0 	bl	80016b0 <HAL_GPIO_WritePin>

	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
 8000710:	2132      	movs	r1, #50	; 0x32
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f000 f8d4 	bl	80008c0 <_ZN9LCDDriver11CheckStatusEh>
 8000718:	4603      	mov	r3, r0
 800071a:	2b01      	cmp	r3, #1
 800071c:	bf0c      	ite	eq
 800071e:	2301      	moveq	r3, #1
 8000720:	2300      	movne	r3, #0
 8000722:	b2db      	uxtb	r3, r3
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <_ZN9LCDDriver14WriteData_8bitEhh+0x3a>
		return false;
 8000728:	2300      	movs	r3, #0
 800072a:	e031      	b.n	8000790 <_ZN9LCDDriver14WriteData_8bitEhh+0x9e>
	}
	WriteDataPin(data);
 800072c:	78bb      	ldrb	r3, [r7, #2]
 800072e:	4619      	mov	r1, r3
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f000 f9dd 	bl	8000af0 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_DATA;
 8000736:	2200      	movs	r2, #0
 8000738:	2104      	movs	r1, #4
 800073a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073e:	f000 ffb7 	bl	80016b0 <HAL_GPIO_WritePin>
	PushData();
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f000 f89a 	bl	800087c <_ZN9LCDDriver8PushDataEv>

	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
 8000748:	2132      	movs	r1, #50	; 0x32
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f000 f8b8 	bl	80008c0 <_ZN9LCDDriver11CheckStatusEh>
 8000750:	4603      	mov	r3, r0
 8000752:	2b01      	cmp	r3, #1
 8000754:	bf0c      	ite	eq
 8000756:	2301      	moveq	r3, #1
 8000758:	2300      	movne	r3, #0
 800075a:	b2db      	uxtb	r3, r3
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <_ZN9LCDDriver14WriteData_8bitEhh+0x72>
		return false;
 8000760:	2300      	movs	r3, #0
 8000762:	e015      	b.n	8000790 <_ZN9LCDDriver14WriteData_8bitEhh+0x9e>
	}
	WriteDataPin(addr);
 8000764:	78fb      	ldrb	r3, [r7, #3]
 8000766:	4619      	mov	r1, r3
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f000 f9c1 	bl	8000af0 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_COMMAND;
 800076e:	2201      	movs	r2, #1
 8000770:	2104      	movs	r1, #4
 8000772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000776:	f000 ff9b 	bl	80016b0 <HAL_GPIO_WritePin>
	PushData();
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f000 f87e 	bl	800087c <_ZN9LCDDriver8PushDataEv>

	LCD_OUTPUT_DISABLE;
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078a:	f000 ff91 	bl	80016b0 <HAL_GPIO_WritePin>
	return true;
 800078e:	2301      	movs	r3, #1
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <_ZN9LCDDriver15WriteData_16bitEht>:

bool LCDDriver::WriteData_16bit(uint8_t addr, uint16_t data){
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	70fb      	strb	r3, [r7, #3]
 80007a4:	4613      	mov	r3, r2
 80007a6:	803b      	strh	r3, [r7, #0]
	LCD_OUTPUT_ENABLE;
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b2:	f000 ff7d 	bl	80016b0 <HAL_GPIO_WritePin>

	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
 80007b6:	2132      	movs	r1, #50	; 0x32
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f000 f881 	bl	80008c0 <_ZN9LCDDriver11CheckStatusEh>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	bf0c      	ite	eq
 80007c4:	2301      	moveq	r3, #1
 80007c6:	2300      	movne	r3, #0
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <_ZN9LCDDriver15WriteData_16bitEht+0x3a>
		return false;
 80007ce:	2300      	movs	r3, #0
 80007d0:	e050      	b.n	8000874 <_ZN9LCDDriver15WriteData_16bitEht+0xdc>
	}
	WriteDataPin((uint8_t)data);
 80007d2:	883b      	ldrh	r3, [r7, #0]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	4619      	mov	r1, r3
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f000 f989 	bl	8000af0 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_DATA;
 80007de:	2200      	movs	r2, #0
 80007e0:	2104      	movs	r1, #4
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e6:	f000 ff63 	bl	80016b0 <HAL_GPIO_WritePin>
	PushData();
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f000 f846 	bl	800087c <_ZN9LCDDriver8PushDataEv>

	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
 80007f0:	2132      	movs	r1, #50	; 0x32
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f000 f864 	bl	80008c0 <_ZN9LCDDriver11CheckStatusEh>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	bf0c      	ite	eq
 80007fe:	2301      	moveq	r3, #1
 8000800:	2300      	movne	r3, #0
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <_ZN9LCDDriver15WriteData_16bitEht+0x74>
		return false;
 8000808:	2300      	movs	r3, #0
 800080a:	e033      	b.n	8000874 <_ZN9LCDDriver15WriteData_16bitEht+0xdc>
	}
	WriteDataPin((uint8_t)(data>>8));
 800080c:	883b      	ldrh	r3, [r7, #0]
 800080e:	121b      	asrs	r3, r3, #8
 8000810:	b2db      	uxtb	r3, r3
 8000812:	4619      	mov	r1, r3
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f000 f96b 	bl	8000af0 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_DATA;
 800081a:	2200      	movs	r2, #0
 800081c:	2104      	movs	r1, #4
 800081e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000822:	f000 ff45 	bl	80016b0 <HAL_GPIO_WritePin>
	PushData();
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f000 f828 	bl	800087c <_ZN9LCDDriver8PushDataEv>

	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
 800082c:	2132      	movs	r1, #50	; 0x32
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f000 f846 	bl	80008c0 <_ZN9LCDDriver11CheckStatusEh>
 8000834:	4603      	mov	r3, r0
 8000836:	2b01      	cmp	r3, #1
 8000838:	bf0c      	ite	eq
 800083a:	2301      	moveq	r3, #1
 800083c:	2300      	movne	r3, #0
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <_ZN9LCDDriver15WriteData_16bitEht+0xb0>
		return false;
 8000844:	2300      	movs	r3, #0
 8000846:	e015      	b.n	8000874 <_ZN9LCDDriver15WriteData_16bitEht+0xdc>
	}
	WriteDataPin(addr);
 8000848:	78fb      	ldrb	r3, [r7, #3]
 800084a:	4619      	mov	r1, r3
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f000 f94f 	bl	8000af0 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_COMMAND;
 8000852:	2201      	movs	r2, #1
 8000854:	2104      	movs	r1, #4
 8000856:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085a:	f000 ff29 	bl	80016b0 <HAL_GPIO_WritePin>
	PushData();
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f000 f80c 	bl	800087c <_ZN9LCDDriver8PushDataEv>

	LCD_OUTPUT_DISABLE;
 8000864:	2200      	movs	r2, #0
 8000866:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800086a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086e:	f000 ff1f 	bl	80016b0 <HAL_GPIO_WritePin>
	return true;
 8000872:	2301      	movs	r3, #1
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <_ZN9LCDDriver8PushDataEv>:

void LCDDriver::PushData(){
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	//toggle WR and Enable PIN so that the LCD reads the data
	LCD_WR_RESET;
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800088a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088e:	f000 ff0f 	bl	80016b0 <HAL_GPIO_WritePin>
	LCD_ENABLE;
 8000892:	2200      	movs	r2, #0
 8000894:	2110      	movs	r1, #16
 8000896:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089a:	f000 ff09 	bl	80016b0 <HAL_GPIO_WritePin>
	LCD_DISABLE;
 800089e:	2201      	movs	r2, #1
 80008a0:	2110      	movs	r1, #16
 80008a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a6:	f000 ff03 	bl	80016b0 <HAL_GPIO_WritePin>
	LCD_WR_SET;
 80008aa:	2201      	movs	r2, #1
 80008ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b4:	f000 fefc 	bl	80016b0 <HAL_GPIO_WritePin>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <_ZN9LCDDriver11CheckStatusEh>:
 * Checking LCD Status register
 *
 * @param timeOut: timeout for statuscheck
 * @return LCD_STATUS: lcdStatus Error / OK
 */
LCDDriver::LCD_STATUS LCDDriver::CheckStatus(uint8_t timeOut){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	460b      	mov	r3, r1
 80008ca:	70fb      	strb	r3, [r7, #3]
	GPIO_Direction(PIN_INPUT);
 80008cc:	2101      	movs	r1, #1
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f000 f8ae 	bl	8000a30 <_ZN9LCDDriver14GPIO_DirectionENS_14PIN_DIRECTION_E>

	LCD_ENABLE;
 80008d4:	2200      	movs	r2, #0
 80008d6:	2110      	movs	r1, #16
 80008d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008dc:	f000 fee8 	bl	80016b0 <HAL_GPIO_WritePin>
	LCD_RD_RESET;
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ea:	f000 fee1 	bl	80016b0 <HAL_GPIO_WritePin>
	LCD_CD_SET;
 80008ee:	2201      	movs	r2, #1
 80008f0:	2104      	movs	r1, #4
 80008f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f6:	f000 fedb 	bl	80016b0 <HAL_GPIO_WritePin>

	while(!(ReadDataPin() | 0x02) && timeOut != 0){
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f000 f826 	bl	800094c <_ZN9LCDDriver11ReadDataPinEv>
 8000900:	2300      	movs	r3, #0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d006      	beq.n	8000914 <_ZN9LCDDriver11CheckStatusEh+0x54>
		HAL_Delay(1);
 8000906:	2001      	movs	r0, #1
 8000908:	f000 fc40 	bl	800118c <HAL_Delay>
		timeOut--;
 800090c:	78fb      	ldrb	r3, [r7, #3]
 800090e:	3b01      	subs	r3, #1
 8000910:	70fb      	strb	r3, [r7, #3]
	while(!(ReadDataPin() | 0x02) && timeOut != 0){
 8000912:	e7f2      	b.n	80008fa <_ZN9LCDDriver11CheckStatusEh+0x3a>
	}

	LCD_DISABLE;
 8000914:	2201      	movs	r2, #1
 8000916:	2110      	movs	r1, #16
 8000918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091c:	f000 fec8 	bl	80016b0 <HAL_GPIO_WritePin>
	LCD_RD_SET;
 8000920:	2201      	movs	r2, #1
 8000922:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092a:	f000 fec1 	bl	80016b0 <HAL_GPIO_WritePin>
	GPIO_Direction(PIN_OUTPUT);
 800092e:	2100      	movs	r1, #0
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f000 f87d 	bl	8000a30 <_ZN9LCDDriver14GPIO_DirectionENS_14PIN_DIRECTION_E>

	return timeOut != 0 ? LCD_STATUS_OK:LCD_STATUS_ERROR;
 8000936:	78fb      	ldrb	r3, [r7, #3]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <_ZN9LCDDriver11CheckStatusEh+0x80>
 800093c:	2300      	movs	r3, #0
 800093e:	e000      	b.n	8000942 <_ZN9LCDDriver11CheckStatusEh+0x82>
 8000940:	2301      	movs	r3, #1
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <_ZN9LCDDriver11ReadDataPinEv>:
 * Read dataport 0-7
 *
 * @param none
 * @return 8bit data from port 0-7 (msb first)
 */
uint8_t LCDDriver::ReadDataPin(){
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	73fb      	strb	r3, [r7, #15]

	data |= HAL_GPIO_ReadPin(D7_GPIO_Port, D7_Pin);
 8000958:	2101      	movs	r1, #1
 800095a:	4833      	ldr	r0, [pc, #204]	; (8000a28 <_ZN9LCDDriver11ReadDataPinEv+0xdc>)
 800095c:	f000 fe90 	bl	8001680 <HAL_GPIO_ReadPin>
 8000960:	4603      	mov	r3, r0
 8000962:	b25a      	sxtb	r2, r3
 8000964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000968:	4313      	orrs	r3, r2
 800096a:	b25b      	sxtb	r3, r3
 800096c:	73fb      	strb	r3, [r7, #15]
	data = (data<<1) | HAL_GPIO_ReadPin(D6_GPIO_Port, D6_Pin);
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	b25c      	sxtb	r4, r3
 8000974:	2102      	movs	r1, #2
 8000976:	482c      	ldr	r0, [pc, #176]	; (8000a28 <_ZN9LCDDriver11ReadDataPinEv+0xdc>)
 8000978:	f000 fe82 	bl	8001680 <HAL_GPIO_ReadPin>
 800097c:	4603      	mov	r3, r0
 800097e:	b25b      	sxtb	r3, r3
 8000980:	4323      	orrs	r3, r4
 8000982:	b25b      	sxtb	r3, r3
 8000984:	73fb      	strb	r3, [r7, #15]
	data = (data<<1) | HAL_GPIO_ReadPin(D5_GPIO_Port, D5_Pin);
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	b25c      	sxtb	r4, r3
 800098c:	2101      	movs	r1, #1
 800098e:	4827      	ldr	r0, [pc, #156]	; (8000a2c <_ZN9LCDDriver11ReadDataPinEv+0xe0>)
 8000990:	f000 fe76 	bl	8001680 <HAL_GPIO_ReadPin>
 8000994:	4603      	mov	r3, r0
 8000996:	b25b      	sxtb	r3, r3
 8000998:	4323      	orrs	r3, r4
 800099a:	b25b      	sxtb	r3, r3
 800099c:	73fb      	strb	r3, [r7, #15]
	data = (data<<1) | HAL_GPIO_ReadPin(D4_GPIO_Port, D4_Pin);
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	b25c      	sxtb	r4, r3
 80009a4:	2102      	movs	r1, #2
 80009a6:	4821      	ldr	r0, [pc, #132]	; (8000a2c <_ZN9LCDDriver11ReadDataPinEv+0xe0>)
 80009a8:	f000 fe6a 	bl	8001680 <HAL_GPIO_ReadPin>
 80009ac:	4603      	mov	r3, r0
 80009ae:	b25b      	sxtb	r3, r3
 80009b0:	4323      	orrs	r3, r4
 80009b2:	b25b      	sxtb	r3, r3
 80009b4:	73fb      	strb	r3, [r7, #15]
	data = (data<<1) | HAL_GPIO_ReadPin(D3_GPIO_Port, D3_Pin);
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	b25c      	sxtb	r4, r3
 80009bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c4:	f000 fe5c 	bl	8001680 <HAL_GPIO_ReadPin>
 80009c8:	4603      	mov	r3, r0
 80009ca:	b25b      	sxtb	r3, r3
 80009cc:	4323      	orrs	r3, r4
 80009ce:	b25b      	sxtb	r3, r3
 80009d0:	73fb      	strb	r3, [r7, #15]
	data = (data<<1) | HAL_GPIO_ReadPin(D2_GPIO_Port, D2_Pin);
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	b25c      	sxtb	r4, r3
 80009d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e0:	f000 fe4e 	bl	8001680 <HAL_GPIO_ReadPin>
 80009e4:	4603      	mov	r3, r0
 80009e6:	b25b      	sxtb	r3, r3
 80009e8:	4323      	orrs	r3, r4
 80009ea:	b25b      	sxtb	r3, r3
 80009ec:	73fb      	strb	r3, [r7, #15]
	data = (data<<1) | HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin);
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	b25c      	sxtb	r4, r3
 80009f4:	2120      	movs	r1, #32
 80009f6:	480c      	ldr	r0, [pc, #48]	; (8000a28 <_ZN9LCDDriver11ReadDataPinEv+0xdc>)
 80009f8:	f000 fe42 	bl	8001680 <HAL_GPIO_ReadPin>
 80009fc:	4603      	mov	r3, r0
 80009fe:	b25b      	sxtb	r3, r3
 8000a00:	4323      	orrs	r3, r4
 8000a02:	b25b      	sxtb	r3, r3
 8000a04:	73fb      	strb	r3, [r7, #15]
	data = (data<<1) | HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin);
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	b25c      	sxtb	r4, r3
 8000a0c:	2110      	movs	r1, #16
 8000a0e:	4806      	ldr	r0, [pc, #24]	; (8000a28 <_ZN9LCDDriver11ReadDataPinEv+0xdc>)
 8000a10:	f000 fe36 	bl	8001680 <HAL_GPIO_ReadPin>
 8000a14:	4603      	mov	r3, r0
 8000a16:	b25b      	sxtb	r3, r3
 8000a18:	4323      	orrs	r3, r4
 8000a1a:	b25b      	sxtb	r3, r3
 8000a1c:	73fb      	strb	r3, [r7, #15]

	return data;
 8000a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd90      	pop	{r4, r7, pc}
 8000a28:	48000400 	.word	0x48000400
 8000a2c:	48001400 	.word	0x48001400

08000a30 <_ZN9LCDDriver14GPIO_DirectionENS_14PIN_DIRECTION_E>:


void LCDDriver::GPIO_Direction(PIN_DIRECTION pinDirection){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b092      	sub	sp, #72	; 0x48
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct_1 = {0};
 8000a3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
	GPIO_InitTypeDef GPIO_InitStruct_2 = {0};
 8000a4c:	f107 0320 	add.w	r3, r7, #32
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
	GPIO_InitTypeDef GPIO_InitStruct_3 = {0};
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct_1.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct_1.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	643b      	str	r3, [r7, #64]	; 0x40
	GPIO_InitStruct_2.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct_2.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct_3.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct_3.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61bb      	str	r3, [r7, #24]

	GPIO_InitStruct_1.Pin = D5_Pin|D4_Pin;
 8000a84:	2303      	movs	r3, #3
 8000a86:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct_2.Pin = D7_Pin|D6_Pin|D0_Pin|D1_Pin;
 8000a88:	2333      	movs	r3, #51	; 0x33
 8000a8a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct_3.Pin = D2_Pin|D3_Pin;
 8000a8c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000a90:	60fb      	str	r3, [r7, #12]


	if(pinDirection == PIN_INPUT){
 8000a92:	78fb      	ldrb	r3, [r7, #3]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d106      	bne.n	8000aa6 <_ZN9LCDDriver14GPIO_DirectionENS_14PIN_DIRECTION_E+0x76>
		GPIO_InitStruct_1.Mode = GPIO_MODE_INPUT;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct_2.Mode = GPIO_MODE_INPUT;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct_3.Mode = GPIO_MODE_INPUT;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	e008      	b.n	8000ab8 <_ZN9LCDDriver14GPIO_DirectionENS_14PIN_DIRECTION_E+0x88>
	}
	else if(pinDirection == PIN_OUTPUT){
 8000aa6:	78fb      	ldrb	r3, [r7, #3]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d105      	bne.n	8000ab8 <_ZN9LCDDriver14GPIO_DirectionENS_14PIN_DIRECTION_E+0x88>
		GPIO_InitStruct_1.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct_2.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct_3.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	613b      	str	r3, [r7, #16]
	}

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct_1);
 8000ab8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000abc:	4619      	mov	r1, r3
 8000abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac2:	f000 fc6b 	bl	800139c <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct_2);
 8000ac6:	f107 0320 	add.w	r3, r7, #32
 8000aca:	4619      	mov	r1, r3
 8000acc:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <_ZN9LCDDriver14GPIO_DirectionENS_14PIN_DIRECTION_E+0xb8>)
 8000ace:	f000 fc65 	bl	800139c <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct_3);
 8000ad2:	f107 030c 	add.w	r3, r7, #12
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <_ZN9LCDDriver14GPIO_DirectionENS_14PIN_DIRECTION_E+0xbc>)
 8000ada:	f000 fc5f 	bl	800139c <HAL_GPIO_Init>
}
 8000ade:	bf00      	nop
 8000ae0:	3748      	adds	r7, #72	; 0x48
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	48000400 	.word	0x48000400
 8000aec:	48001400 	.word	0x48001400

08000af0 <_ZN9LCDDriver12WriteDataPinEh>:


void LCDDriver::WriteDataPin(uint8_t data){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	460b      	mov	r3, r1
 8000afa:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, (GPIO_PinState)(data & 0x01));
 8000afc:	78fb      	ldrb	r3, [r7, #3]
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	461a      	mov	r2, r3
 8000b06:	2110      	movs	r1, #16
 8000b08:	4824      	ldr	r0, [pc, #144]	; (8000b9c <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000b0a:	f000 fdd1 	bl	80016b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, (GPIO_PinState)(data & 0x02));
 8000b0e:	78fb      	ldrb	r3, [r7, #3]
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	461a      	mov	r2, r3
 8000b18:	2120      	movs	r1, #32
 8000b1a:	4820      	ldr	r0, [pc, #128]	; (8000b9c <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000b1c:	f000 fdc8 	bl	80016b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, (GPIO_PinState)(data & 0x04));
 8000b20:	78fb      	ldrb	r3, [r7, #3]
 8000b22:	f003 0304 	and.w	r3, r3, #4
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b32:	f000 fdbd 	bl	80016b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, (GPIO_PinState)(data & 0x08));
 8000b36:	78fb      	ldrb	r3, [r7, #3]
 8000b38:	f003 0308 	and.w	r3, r3, #8
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	461a      	mov	r2, r3
 8000b40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b48:	f000 fdb2 	bl	80016b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (GPIO_PinState)(data & 0x10));
 8000b4c:	78fb      	ldrb	r3, [r7, #3]
 8000b4e:	f003 0310 	and.w	r3, r3, #16
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	461a      	mov	r2, r3
 8000b56:	2102      	movs	r1, #2
 8000b58:	4811      	ldr	r0, [pc, #68]	; (8000ba0 <_ZN9LCDDriver12WriteDataPinEh+0xb0>)
 8000b5a:	f000 fda9 	bl	80016b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (GPIO_PinState)(data & 0x20));
 8000b5e:	78fb      	ldrb	r3, [r7, #3]
 8000b60:	f003 0320 	and.w	r3, r3, #32
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	461a      	mov	r2, r3
 8000b68:	2101      	movs	r1, #1
 8000b6a:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <_ZN9LCDDriver12WriteDataPinEh+0xb0>)
 8000b6c:	f000 fda0 	bl	80016b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (GPIO_PinState)(data & 0x40));
 8000b70:	78fb      	ldrb	r3, [r7, #3]
 8000b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	461a      	mov	r2, r3
 8000b7a:	2102      	movs	r1, #2
 8000b7c:	4807      	ldr	r0, [pc, #28]	; (8000b9c <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000b7e:	f000 fd97 	bl	80016b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (GPIO_PinState)(data & 0x80));
 8000b82:	78fb      	ldrb	r3, [r7, #3]
 8000b84:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	4803      	ldr	r0, [pc, #12]	; (8000b9c <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000b90:	f000 fd8e 	bl	80016b0 <HAL_GPIO_WritePin>

}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	48000400 	.word	0x48000400
 8000ba0:	48001400 	.word	0x48001400

08000ba4 <_ZN9LCDDriver5ResetEv>:
 * Reset LCD
 *
 * @param none
 * @return none
 */
void LCDDriver::Reset(){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	LCD_RST_L;
 8000bac:	2200      	movs	r2, #0
 8000bae:	2108      	movs	r1, #8
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb4:	f000 fd7c 	bl	80016b0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f000 fae7 	bl	800118c <HAL_Delay>
	LCD_RST_H;
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2108      	movs	r1, #8
 8000bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc6:	f000 fd73 	bl	80016b0 <HAL_GPIO_WritePin>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bea:	4b32      	ldr	r3, [pc, #200]	; (8000cb4 <MX_GPIO_Init+0xe0>)
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	4a31      	ldr	r2, [pc, #196]	; (8000cb4 <MX_GPIO_Init+0xe0>)
 8000bf0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bf4:	6153      	str	r3, [r2, #20]
 8000bf6:	4b2f      	ldr	r3, [pc, #188]	; (8000cb4 <MX_GPIO_Init+0xe0>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	4b2c      	ldr	r3, [pc, #176]	; (8000cb4 <MX_GPIO_Init+0xe0>)
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	4a2b      	ldr	r2, [pc, #172]	; (8000cb4 <MX_GPIO_Init+0xe0>)
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0c:	6153      	str	r3, [r2, #20]
 8000c0e:	4b29      	ldr	r3, [pc, #164]	; (8000cb4 <MX_GPIO_Init+0xe0>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1a:	4b26      	ldr	r3, [pc, #152]	; (8000cb4 <MX_GPIO_Init+0xe0>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	4a25      	ldr	r2, [pc, #148]	; (8000cb4 <MX_GPIO_Init+0xe0>)
 8000c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c24:	6153      	str	r3, [r2, #20]
 8000c26:	4b23      	ldr	r3, [pc, #140]	; (8000cb4 <MX_GPIO_Init+0xe0>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2103      	movs	r1, #3
 8000c36:	4820      	ldr	r0, [pc, #128]	; (8000cb8 <MX_GPIO_Init+0xe4>)
 8000c38:	f000 fd3a 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FS_Pin|MD2_Pin|CD_Pin|RESET_Pin 
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f641 711f 	movw	r1, #7967	; 0x1f1f
 8000c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c46:	f000 fd33 	bl	80016b0 <HAL_GPIO_WritePin>
                          |CE_Pin|D3_Pin|RD_Pin|WR_Pin 
                          |D2_Pin|OE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D6_Pin|D0_Pin|D1_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2133      	movs	r1, #51	; 0x33
 8000c4e:	481b      	ldr	r0, [pc, #108]	; (8000cbc <MX_GPIO_Init+0xe8>)
 8000c50:	f000 fd2e 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = D5_Pin|D4_Pin;
 8000c54:	2303      	movs	r3, #3
 8000c56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4813      	ldr	r0, [pc, #76]	; (8000cb8 <MX_GPIO_Init+0xe4>)
 8000c6c:	f000 fb96 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = FS_Pin|MD2_Pin|CD_Pin|RESET_Pin 
 8000c70:	f641 731f 	movw	r3, #7967	; 0x1f1f
 8000c74:	60fb      	str	r3, [r7, #12]
                          |CE_Pin|D3_Pin|RD_Pin|WR_Pin 
                          |D2_Pin|OE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	4619      	mov	r1, r3
 8000c88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8c:	f000 fb86 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D0_Pin|D1_Pin;
 8000c90:	2333      	movs	r3, #51	; 0x33
 8000c92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <MX_GPIO_Init+0xe8>)
 8000ca8:	f000 fb78 	bl	800139c <HAL_GPIO_Init>

}
 8000cac:	bf00      	nop
 8000cae:	3720      	adds	r7, #32
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	48001400 	.word	0x48001400
 8000cbc:	48000400 	.word	0x48000400

08000cc0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cc6:	4a1c      	ldr	r2, [pc, #112]	; (8000d38 <MX_I2C1_Init+0x78>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000ccc:	4a1b      	ldr	r2, [pc, #108]	; (8000d3c <MX_I2C1_Init+0x7c>)
 8000cce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cd0:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cdc:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cfa:	480e      	ldr	r0, [pc, #56]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000cfc:	f000 fcf0 	bl	80016e0 <HAL_I2C_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d06:	f000 f8d6 	bl	8000eb6 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4809      	ldr	r0, [pc, #36]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000d0e:	f000 fd76 	bl	80017fe <HAL_I2CEx_ConfigAnalogFilter>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d18:	f000 f8cd 	bl	8000eb6 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <MX_I2C1_Init+0x74>)
 8000d20:	f000 fdb8 	bl	8001894 <HAL_I2CEx_ConfigDigitalFilter>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d2a:	f000 f8c4 	bl	8000eb6 <Error_Handler>
  }

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200000a0 	.word	0x200000a0
 8000d38:	40005400 	.word	0x40005400
 8000d3c:	00201d2b 	.word	0x00201d2b

08000d40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	; 0x28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a17      	ldr	r2, [pc, #92]	; (8000dbc <HAL_I2C_MspInit+0x7c>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d127      	bne.n	8000db2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <HAL_I2C_MspInit+0x80>)
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	4a16      	ldr	r2, [pc, #88]	; (8000dc0 <HAL_I2C_MspInit+0x80>)
 8000d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d6c:	6153      	str	r3, [r2, #20]
 8000d6e:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <HAL_I2C_MspInit+0x80>)
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d7a:	23c0      	movs	r3, #192	; 0xc0
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d7e:	2312      	movs	r3, #18
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <HAL_I2C_MspInit+0x84>)
 8000d96:	f000 fb01 	bl	800139c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_I2C_MspInit+0x80>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <HAL_I2C_MspInit+0x80>)
 8000da0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000da4:	61d3      	str	r3, [r2, #28]
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_I2C_MspInit+0x80>)
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000db2:	bf00      	nop
 8000db4:	3728      	adds	r7, #40	; 0x28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40005400 	.word	0x40005400
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	48000400 	.word	0x48000400

08000dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000dcc:	f000 f978 	bl	80010c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd0:	f000 f80a 	bl	8000de8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd4:	f7ff fefe 	bl	8000bd4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dd8:	f7ff ff72 	bl	8000cc0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
 // HAL_I2C_MspInit(&hi2c1);
  appMain.main();
 8000ddc:	4801      	ldr	r0, [pc, #4]	; (8000de4 <main+0x1c>)
 8000dde:	f7ff fa09 	bl	80001f4 <_ZN7AppMain4mainEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <main+0x1a>
 8000de4:	2000008c 	.word	0x2000008c

08000de8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b096      	sub	sp, #88	; 0x58
 8000dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000df2:	2228      	movs	r2, #40	; 0x28
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f002 f895 	bl	8002f26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]
 8000e1a:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e20:	2301      	movs	r3, #1
 8000e22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e24:	2310      	movs	r3, #16
 8000e26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e30:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e34:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 fd76 	bl	800192c <HAL_RCC_OscConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	bf14      	ite	ne
 8000e46:	2301      	movne	r3, #1
 8000e48:	2300      	moveq	r3, #0
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <_Z18SystemClock_Configv+0x6c>
  {
    Error_Handler();
 8000e50:	f000 f831 	bl	8000eb6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e54:	230f      	movs	r3, #15
 8000e56:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	2102      	movs	r1, #2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f001 fc63 	bl	800273c <HAL_RCC_ClockConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	bf14      	ite	ne
 8000e7c:	2301      	movne	r3, #1
 8000e7e:	2300      	moveq	r3, #0
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8000e86:	f000 f816 	bl	8000eb6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e8a:	2320      	movs	r3, #32
 8000e8c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	4618      	mov	r0, r3
 8000e96:	f001 fe37 	bl	8002b08 <HAL_RCCEx_PeriphCLKConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	bf14      	ite	ne
 8000ea0:	2301      	movne	r3, #1
 8000ea2:	2300      	moveq	r3, #0
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 8000eaa:	f000 f804 	bl	8000eb6 <Error_Handler>
  }
}
 8000eae:	bf00      	nop
 8000eb0:	3758      	adds	r7, #88	; 0x58
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_Z41__static_initialization_and_destruction_0ii>:
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d107      	bne.n	8000ee4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d102      	bne.n	8000ee4 <_Z41__static_initialization_and_destruction_0ii+0x20>
static AppMain appMain;
 8000ede:	4803      	ldr	r0, [pc, #12]	; (8000eec <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000ee0:	f7ff f97a 	bl	80001d8 <_ZN7AppMainC1Ev>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	2000008c 	.word	0x2000008c

08000ef0 <_GLOBAL__sub_I_main>:
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ef8:	2001      	movs	r0, #1
 8000efa:	f7ff ffe3 	bl	8000ec4 <_Z41__static_initialization_and_destruction_0ii>
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <HAL_MspInit+0x44>)
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <HAL_MspInit+0x44>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6193      	str	r3, [r2, #24]
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <HAL_MspInit+0x44>)
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <HAL_MspInit+0x44>)
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	4a08      	ldr	r2, [pc, #32]	; (8000f44 <HAL_MspInit+0x44>)
 8000f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f28:	61d3      	str	r3, [r2, #28]
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_MspInit+0x44>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40021000 	.word	0x40021000

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <MemManage_Handler+0x4>

08000f62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <BusFault_Handler+0x4>

08000f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <UsageFault_Handler+0x4>

08000f6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9c:	f000 f8d6 	bl	800114c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
	return 1;
 8000fa8:	2301      	movs	r3, #1
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <_kill>:

int _kill(int pid, int sig)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fbe:	f001 ff6d 	bl	8002e9c <__errno>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	2316      	movs	r3, #22
 8000fc6:	6013      	str	r3, [r2, #0]
	return -1;
 8000fc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <_exit>:

void _exit (int status)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ffe7 	bl	8000fb4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fe6:	e7fe      	b.n	8000fe6 <_exit+0x12>

08000fe8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <_sbrk+0x50>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d102      	bne.n	8000ffe <_sbrk+0x16>
		heap_end = &end;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <_sbrk+0x50>)
 8000ffa:	4a10      	ldr	r2, [pc, #64]	; (800103c <_sbrk+0x54>)
 8000ffc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <_sbrk+0x50>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <_sbrk+0x50>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4413      	add	r3, r2
 800100c:	466a      	mov	r2, sp
 800100e:	4293      	cmp	r3, r2
 8001010:	d907      	bls.n	8001022 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001012:	f001 ff43 	bl	8002e9c <__errno>
 8001016:	4602      	mov	r2, r0
 8001018:	230c      	movs	r3, #12
 800101a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800101c:	f04f 33ff 	mov.w	r3, #4294967295
 8001020:	e006      	b.n	8001030 <_sbrk+0x48>
	}

	heap_end += incr;
 8001022:	4b05      	ldr	r3, [pc, #20]	; (8001038 <_sbrk+0x50>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	4a03      	ldr	r2, [pc, #12]	; (8001038 <_sbrk+0x50>)
 800102c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800102e:	68fb      	ldr	r3, [r7, #12]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000090 	.word	0x20000090
 800103c:	200000f8 	.word	0x200000f8

08001040 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <SystemInit+0x28>)
 8001046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104a:	4a07      	ldr	r2, [pc, #28]	; (8001068 <SystemInit+0x28>)
 800104c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <SystemInit+0x28>)
 8001056:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800105a:	609a      	str	r2, [r3, #8]
#endif
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800106c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001070:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001072:	e003      	b.n	800107c <LoopCopyDataInit>

08001074 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001076:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001078:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800107a:	3104      	adds	r1, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800107c:	480b      	ldr	r0, [pc, #44]	; (80010ac <LoopForever+0xa>)
	ldr	r3, =_edata
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001080:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001082:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001084:	d3f6      	bcc.n	8001074 <CopyDataInit>
	ldr	r2, =_sbss
 8001086:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001088:	e002      	b.n	8001090 <LoopFillZerobss>

0800108a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800108a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800108c:	f842 3b04 	str.w	r3, [r2], #4

08001090 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <LoopForever+0x16>)
	cmp	r2, r3
 8001092:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001094:	d3f9      	bcc.n	800108a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001096:	f7ff ffd3 	bl	8001040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800109a:	f001 ff05 	bl	8002ea8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800109e:	f7ff fe93 	bl	8000dc8 <main>

080010a2 <LoopForever>:

LoopForever:
    b LoopForever
 80010a2:	e7fe      	b.n	80010a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010a4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80010a8:	0800327c 	.word	0x0800327c
	ldr	r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010b0:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80010b4:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80010b8:	200000f4 	.word	0x200000f4

080010bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC1_2_IRQHandler>
	...

080010c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <HAL_Init+0x28>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <HAL_Init+0x28>)
 80010ca:	f043 0310 	orr.w	r3, r3, #16
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f000 f92f 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 f808 	bl	80010ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010dc:	f7ff ff10 	bl	8000f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40022000 	.word	0x40022000

080010ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_InitTick+0x54>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x58>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001102:	fbb3 f3f1 	udiv	r3, r3, r1
 8001106:	fbb2 f3f3 	udiv	r3, r2, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f939 	bl	8001382 <HAL_SYSTICK_Config>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e00e      	b.n	8001138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b0f      	cmp	r3, #15
 800111e:	d80a      	bhi.n	8001136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001120:	2200      	movs	r2, #0
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f000 f90f 	bl	800134a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800112c:	4a06      	ldr	r2, [pc, #24]	; (8001148 <HAL_InitTick+0x5c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	e000      	b.n	8001138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000000 	.word	0x20000000
 8001144:	20000008 	.word	0x20000008
 8001148:	20000004 	.word	0x20000004

0800114c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_IncTick+0x20>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x24>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <HAL_IncTick+0x24>)
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000008 	.word	0x20000008
 8001170:	200000ec 	.word	0x200000ec

08001174 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return uwTick;  
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <HAL_GetTick+0x14>)
 800117a:	681b      	ldr	r3, [r3, #0]
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	200000ec 	.word	0x200000ec

0800118c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001194:	f7ff ffee 	bl	8001174 <HAL_GetTick>
 8001198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a4:	d005      	beq.n	80011b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_Delay+0x40>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4413      	add	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011b2:	bf00      	nop
 80011b4:	f7ff ffde 	bl	8001174 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d8f7      	bhi.n	80011b4 <HAL_Delay+0x28>
  {
  }
}
 80011c4:	bf00      	nop
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000008 	.word	0x20000008

080011d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ec:	4013      	ands	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001202:	4a04      	ldr	r2, [pc, #16]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	60d3      	str	r3, [r2, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <__NVIC_GetPriorityGrouping+0x18>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	f003 0307 	and.w	r3, r3, #7
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db0a      	blt.n	800125e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	490c      	ldr	r1, [pc, #48]	; (8001280 <__NVIC_SetPriority+0x4c>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	440b      	add	r3, r1
 8001258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800125c:	e00a      	b.n	8001274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4908      	ldr	r1, [pc, #32]	; (8001284 <__NVIC_SetPriority+0x50>)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	3b04      	subs	r3, #4
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	440b      	add	r3, r1
 8001272:	761a      	strb	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	bf28      	it	cs
 80012a6:	2304      	movcs	r3, #4
 80012a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3304      	adds	r3, #4
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d902      	bls.n	80012b8 <NVIC_EncodePriority+0x30>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	e000      	b.n	80012ba <NVIC_EncodePriority+0x32>
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 32ff 	mov.w	r2, #4294967295
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43d9      	mvns	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	4313      	orrs	r3, r2
         );
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	; 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001300:	d301      	bcc.n	8001306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <SysTick_Config+0x40>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130e:	210f      	movs	r1, #15
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f7ff ff8e 	bl	8001234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <SysTick_Config+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SysTick_Config+0x40>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff47 	bl	80011d0 <__NVIC_SetPriorityGrouping>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800135c:	f7ff ff5c 	bl	8001218 <__NVIC_GetPriorityGrouping>
 8001360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68b9      	ldr	r1, [r7, #8]
 8001366:	6978      	ldr	r0, [r7, #20]
 8001368:	f7ff ff8e 	bl	8001288 <NVIC_EncodePriority>
 800136c:	4602      	mov	r2, r0
 800136e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff5d 	bl	8001234 <__NVIC_SetPriority>
}
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ffb0 	bl	80012f0 <SysTick_Config>
 8001390:	4603      	mov	r3, r0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013aa:	e14e      	b.n	800164a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	2101      	movs	r1, #1
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	fa01 f303 	lsl.w	r3, r1, r3
 80013b8:	4013      	ands	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 8140 	beq.w	8001644 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x38>
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b12      	cmp	r3, #18
 80013d2:	d123      	bne.n	800141c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	08da      	lsrs	r2, r3, #3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3208      	adds	r2, #8
 80013dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	220f      	movs	r2, #15
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	08da      	lsrs	r2, r3, #3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3208      	adds	r2, #8
 8001416:	6939      	ldr	r1, [r7, #16]
 8001418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	2203      	movs	r2, #3
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0203 	and.w	r2, r3, #3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d00b      	beq.n	8001470 <HAL_GPIO_Init+0xd4>
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d007      	beq.n	8001470 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001464:	2b11      	cmp	r3, #17
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b12      	cmp	r3, #18
 800146e:	d130      	bne.n	80014d2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	2203      	movs	r2, #3
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	68da      	ldr	r2, [r3, #12]
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a6:	2201      	movs	r2, #1
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	091b      	lsrs	r3, r3, #4
 80014bc:	f003 0201 	and.w	r2, r3, #1
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	2203      	movs	r2, #3
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 809a 	beq.w	8001644 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001510:	4b55      	ldr	r3, [pc, #340]	; (8001668 <HAL_GPIO_Init+0x2cc>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4a54      	ldr	r2, [pc, #336]	; (8001668 <HAL_GPIO_Init+0x2cc>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6193      	str	r3, [r2, #24]
 800151c:	4b52      	ldr	r3, [pc, #328]	; (8001668 <HAL_GPIO_Init+0x2cc>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001528:	4a50      	ldr	r2, [pc, #320]	; (800166c <HAL_GPIO_Init+0x2d0>)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	089b      	lsrs	r3, r3, #2
 800152e:	3302      	adds	r3, #2
 8001530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	220f      	movs	r2, #15
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001552:	d013      	beq.n	800157c <HAL_GPIO_Init+0x1e0>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a46      	ldr	r2, [pc, #280]	; (8001670 <HAL_GPIO_Init+0x2d4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d00d      	beq.n	8001578 <HAL_GPIO_Init+0x1dc>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a45      	ldr	r2, [pc, #276]	; (8001674 <HAL_GPIO_Init+0x2d8>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d007      	beq.n	8001574 <HAL_GPIO_Init+0x1d8>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a44      	ldr	r2, [pc, #272]	; (8001678 <HAL_GPIO_Init+0x2dc>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d101      	bne.n	8001570 <HAL_GPIO_Init+0x1d4>
 800156c:	2303      	movs	r3, #3
 800156e:	e006      	b.n	800157e <HAL_GPIO_Init+0x1e2>
 8001570:	2305      	movs	r3, #5
 8001572:	e004      	b.n	800157e <HAL_GPIO_Init+0x1e2>
 8001574:	2302      	movs	r3, #2
 8001576:	e002      	b.n	800157e <HAL_GPIO_Init+0x1e2>
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <HAL_GPIO_Init+0x1e2>
 800157c:	2300      	movs	r3, #0
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	f002 0203 	and.w	r2, r2, #3
 8001584:	0092      	lsls	r2, r2, #2
 8001586:	4093      	lsls	r3, r2
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800158e:	4937      	ldr	r1, [pc, #220]	; (800166c <HAL_GPIO_Init+0x2d0>)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	3302      	adds	r3, #2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800159c:	4b37      	ldr	r3, [pc, #220]	; (800167c <HAL_GPIO_Init+0x2e0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015c0:	4a2e      	ldr	r2, [pc, #184]	; (800167c <HAL_GPIO_Init+0x2e0>)
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015c6:	4b2d      	ldr	r3, [pc, #180]	; (800167c <HAL_GPIO_Init+0x2e0>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015ea:	4a24      	ldr	r2, [pc, #144]	; (800167c <HAL_GPIO_Init+0x2e0>)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015f0:	4b22      	ldr	r3, [pc, #136]	; (800167c <HAL_GPIO_Init+0x2e0>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001614:	4a19      	ldr	r2, [pc, #100]	; (800167c <HAL_GPIO_Init+0x2e0>)
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <HAL_GPIO_Init+0x2e0>)
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800163e:	4a0f      	ldr	r2, [pc, #60]	; (800167c <HAL_GPIO_Init+0x2e0>)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	3301      	adds	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	fa22 f303 	lsr.w	r3, r2, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	f47f aea9 	bne.w	80013ac <HAL_GPIO_Init+0x10>
  }
}
 800165a:	bf00      	nop
 800165c:	371c      	adds	r7, #28
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000
 800166c:	40010000 	.word	0x40010000
 8001670:	48000400 	.word	0x48000400
 8001674:	48000800 	.word	0x48000800
 8001678:	48000c00 	.word	0x48000c00
 800167c:	40010400 	.word	0x40010400

08001680 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691a      	ldr	r2, [r3, #16]
 8001690:	887b      	ldrh	r3, [r7, #2]
 8001692:	4013      	ands	r3, r2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001698:	2301      	movs	r3, #1
 800169a:	73fb      	strb	r3, [r7, #15]
 800169c:	e001      	b.n	80016a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
 80016bc:	4613      	mov	r3, r2
 80016be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c0:	787b      	ldrb	r3, [r7, #1]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016c6:	887a      	ldrh	r2, [r7, #2]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016cc:	e002      	b.n	80016d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e081      	b.n	80017f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d106      	bne.n	800170c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff fb1a 	bl	8000d40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2224      	movs	r2, #36	; 0x24
 8001710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0201 	bic.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001730:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001740:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d107      	bne.n	800175a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	e006      	b.n	8001768 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001766:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d104      	bne.n	800177a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001778:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800178c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800179c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	691a      	ldr	r2, [r3, #16]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	ea42 0103 	orr.w	r1, r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	021a      	lsls	r2, r3, #8
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	430a      	orrs	r2, r1
 80017b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69d9      	ldr	r1, [r3, #28]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a1a      	ldr	r2, [r3, #32]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f042 0201 	orr.w	r2, r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2220      	movs	r2, #32
 80017e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b20      	cmp	r3, #32
 8001812:	d138      	bne.n	8001886 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800181a:	2b01      	cmp	r3, #1
 800181c:	d101      	bne.n	8001822 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800181e:	2302      	movs	r3, #2
 8001820:	e032      	b.n	8001888 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2224      	movs	r2, #36	; 0x24
 800182e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0201 	bic.w	r2, r2, #1
 8001840:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001850:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6819      	ldr	r1, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f042 0201 	orr.w	r2, r2, #1
 8001870:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2220      	movs	r2, #32
 8001876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e000      	b.n	8001888 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001886:	2302      	movs	r3, #2
  }
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b20      	cmp	r3, #32
 80018a8:	d139      	bne.n	800191e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e033      	b.n	8001920 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2224      	movs	r2, #36	; 0x24
 80018c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0201 	bic.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f042 0201 	orr.w	r2, r2, #1
 8001908:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2220      	movs	r2, #32
 800190e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	e000      	b.n	8001920 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800191e:	2302      	movs	r3, #2
  }
}
 8001920:	4618      	mov	r0, r3
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001932:	af00      	add	r7, sp, #0
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d102      	bne.n	8001946 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	f000 bef4 	b.w	800272e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 816a 	beq.w	8001c2a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001956:	4bb3      	ldr	r3, [pc, #716]	; (8001c24 <HAL_RCC_OscConfig+0x2f8>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	2b04      	cmp	r3, #4
 8001960:	d00c      	beq.n	800197c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001962:	4bb0      	ldr	r3, [pc, #704]	; (8001c24 <HAL_RCC_OscConfig+0x2f8>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	2b08      	cmp	r3, #8
 800196c:	d159      	bne.n	8001a22 <HAL_RCC_OscConfig+0xf6>
 800196e:	4bad      	ldr	r3, [pc, #692]	; (8001c24 <HAL_RCC_OscConfig+0x2f8>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197a:	d152      	bne.n	8001a22 <HAL_RCC_OscConfig+0xf6>
 800197c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001980:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001984:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001988:	fa93 f3a3 	rbit	r3, r3
 800198c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001990:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001994:	fab3 f383 	clz	r3, r3
 8001998:	b2db      	uxtb	r3, r3
 800199a:	095b      	lsrs	r3, r3, #5
 800199c:	b2db      	uxtb	r3, r3
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d102      	bne.n	80019ae <HAL_RCC_OscConfig+0x82>
 80019a8:	4b9e      	ldr	r3, [pc, #632]	; (8001c24 <HAL_RCC_OscConfig+0x2f8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	e015      	b.n	80019da <HAL_RCC_OscConfig+0xae>
 80019ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019b2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80019ba:	fa93 f3a3 	rbit	r3, r3
 80019be:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80019c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019c6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80019ca:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80019ce:	fa93 f3a3 	rbit	r3, r3
 80019d2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80019d6:	4b93      	ldr	r3, [pc, #588]	; (8001c24 <HAL_RCC_OscConfig+0x2f8>)
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019de:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80019e2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80019e6:	fa92 f2a2 	rbit	r2, r2
 80019ea:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80019ee:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80019f2:	fab2 f282 	clz	r2, r2
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	f042 0220 	orr.w	r2, r2, #32
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	f002 021f 	and.w	r2, r2, #31
 8001a02:	2101      	movs	r1, #1
 8001a04:	fa01 f202 	lsl.w	r2, r1, r2
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 810c 	beq.w	8001c28 <HAL_RCC_OscConfig+0x2fc>
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f040 8106 	bne.w	8001c28 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	f000 be86 	b.w	800272e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2c:	d106      	bne.n	8001a3c <HAL_RCC_OscConfig+0x110>
 8001a2e:	4b7d      	ldr	r3, [pc, #500]	; (8001c24 <HAL_RCC_OscConfig+0x2f8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a7c      	ldr	r2, [pc, #496]	; (8001c24 <HAL_RCC_OscConfig+0x2f8>)
 8001a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e030      	b.n	8001a9e <HAL_RCC_OscConfig+0x172>
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10c      	bne.n	8001a60 <HAL_RCC_OscConfig+0x134>
 8001a46:	4b77      	ldr	r3, [pc, #476]	; (8001c24 <HAL_RCC_OscConfig+0x2f8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a76      	ldr	r2, [pc, #472]	; (8001c24 <HAL_RCC_OscConfig+0x2f8>)
 8001a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b74      	ldr	r3, [pc, #464]	; (8001c24 <HAL_RCC_OscConfig+0x2f8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a73      	ldr	r2, [pc, #460]	; (8001c24 <HAL_RCC_OscConfig+0x2f8>)
 8001a58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e01e      	b.n	8001a9e <HAL_RCC_OscConfig+0x172>
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a6a:	d10c      	bne.n	8001a86 <HAL_RCC_OscConfig+0x15a>
 8001a6c:	4b6d      	ldr	r3, [pc, #436]	; (8001c24 <HAL_RCC_OscConfig+0x2f8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a6c      	ldr	r2, [pc, #432]	; (8001c24 <HAL_RCC_OscConfig+0x2f8>)
 8001a72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	4b6a      	ldr	r3, [pc, #424]	; (8001c24 <HAL_RCC_OscConfig+0x2f8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a69      	ldr	r2, [pc, #420]	; (8001c24 <HAL_RCC_OscConfig+0x2f8>)
 8001a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	e00b      	b.n	8001a9e <HAL_RCC_OscConfig+0x172>
 8001a86:	4b67      	ldr	r3, [pc, #412]	; (8001c24 <HAL_RCC_OscConfig+0x2f8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a66      	ldr	r2, [pc, #408]	; (8001c24 <HAL_RCC_OscConfig+0x2f8>)
 8001a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	4b64      	ldr	r3, [pc, #400]	; (8001c24 <HAL_RCC_OscConfig+0x2f8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a63      	ldr	r2, [pc, #396]	; (8001c24 <HAL_RCC_OscConfig+0x2f8>)
 8001a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a9e:	4b61      	ldr	r3, [pc, #388]	; (8001c24 <HAL_RCC_OscConfig+0x2f8>)
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa2:	f023 020f 	bic.w	r2, r3, #15
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	495d      	ldr	r1, [pc, #372]	; (8001c24 <HAL_RCC_OscConfig+0x2f8>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ab2:	1d3b      	adds	r3, r7, #4
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d059      	beq.n	8001b70 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7ff fb5a 	bl	8001174 <HAL_GetTick>
 8001ac0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac4:	e00a      	b.n	8001adc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac6:	f7ff fb55 	bl	8001174 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b64      	cmp	r3, #100	; 0x64
 8001ad4:	d902      	bls.n	8001adc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	f000 be29 	b.w	800272e <HAL_RCC_OscConfig+0xe02>
 8001adc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001ae8:	fa93 f3a3 	rbit	r3, r3
 8001aec:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001af0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af4:	fab3 f383 	clz	r3, r3
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	095b      	lsrs	r3, r3, #5
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d102      	bne.n	8001b0e <HAL_RCC_OscConfig+0x1e2>
 8001b08:	4b46      	ldr	r3, [pc, #280]	; (8001c24 <HAL_RCC_OscConfig+0x2f8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	e015      	b.n	8001b3a <HAL_RCC_OscConfig+0x20e>
 8001b0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b12:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001b1a:	fa93 f3a3 	rbit	r3, r3
 8001b1e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001b22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b26:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001b2a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001b2e:	fa93 f3a3 	rbit	r3, r3
 8001b32:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001b36:	4b3b      	ldr	r3, [pc, #236]	; (8001c24 <HAL_RCC_OscConfig+0x2f8>)
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b3e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001b42:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001b46:	fa92 f2a2 	rbit	r2, r2
 8001b4a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001b4e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001b52:	fab2 f282 	clz	r2, r2
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	f042 0220 	orr.w	r2, r2, #32
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	f002 021f 	and.w	r2, r2, #31
 8001b62:	2101      	movs	r1, #1
 8001b64:	fa01 f202 	lsl.w	r2, r1, r2
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0ab      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x19a>
 8001b6e:	e05c      	b.n	8001c2a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7ff fb00 	bl	8001174 <HAL_GetTick>
 8001b74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b78:	e00a      	b.n	8001b90 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b7a:	f7ff fafb 	bl	8001174 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b64      	cmp	r3, #100	; 0x64
 8001b88:	d902      	bls.n	8001b90 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	f000 bdcf 	b.w	800272e <HAL_RCC_OscConfig+0xe02>
 8001b90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b94:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001b9c:	fa93 f3a3 	rbit	r3, r3
 8001ba0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001ba4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba8:	fab3 f383 	clz	r3, r3
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d102      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x296>
 8001bbc:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <HAL_RCC_OscConfig+0x2f8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	e015      	b.n	8001bee <HAL_RCC_OscConfig+0x2c2>
 8001bc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bc6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001bce:	fa93 f3a3 	rbit	r3, r3
 8001bd2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001bd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bda:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001bde:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001be2:	fa93 f3a3 	rbit	r3, r3
 8001be6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001bea:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <HAL_RCC_OscConfig+0x2f8>)
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bf2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001bf6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001bfa:	fa92 f2a2 	rbit	r2, r2
 8001bfe:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001c02:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001c06:	fab2 f282 	clz	r2, r2
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	f042 0220 	orr.w	r2, r2, #32
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	f002 021f 	and.w	r2, r2, #31
 8001c16:	2101      	movs	r1, #1
 8001c18:	fa01 f202 	lsl.w	r2, r1, r2
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1ab      	bne.n	8001b7a <HAL_RCC_OscConfig+0x24e>
 8001c22:	e002      	b.n	8001c2a <HAL_RCC_OscConfig+0x2fe>
 8001c24:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 816f 	beq.w	8001f18 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c3a:	4bd0      	ldr	r3, [pc, #832]	; (8001f7c <HAL_RCC_OscConfig+0x650>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00b      	beq.n	8001c5e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c46:	4bcd      	ldr	r3, [pc, #820]	; (8001f7c <HAL_RCC_OscConfig+0x650>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d16c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x400>
 8001c52:	4bca      	ldr	r3, [pc, #808]	; (8001f7c <HAL_RCC_OscConfig+0x650>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d166      	bne.n	8001d2c <HAL_RCC_OscConfig+0x400>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001c70:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c74:	fab3 f383 	clz	r3, r3
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d102      	bne.n	8001c8e <HAL_RCC_OscConfig+0x362>
 8001c88:	4bbc      	ldr	r3, [pc, #752]	; (8001f7c <HAL_RCC_OscConfig+0x650>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	e013      	b.n	8001cb6 <HAL_RCC_OscConfig+0x38a>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001c98:	fa93 f3a3 	rbit	r3, r3
 8001c9c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ca6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001caa:	fa93 f3a3 	rbit	r3, r3
 8001cae:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001cb2:	4bb2      	ldr	r3, [pc, #712]	; (8001f7c <HAL_RCC_OscConfig+0x650>)
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001cbc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001cc0:	fa92 f2a2 	rbit	r2, r2
 8001cc4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001cc8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001ccc:	fab2 f282 	clz	r2, r2
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	f042 0220 	orr.w	r2, r2, #32
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	f002 021f 	and.w	r2, r2, #31
 8001cdc:	2101      	movs	r1, #1
 8001cde:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d007      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x3cc>
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d002      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	f000 bd1b 	b.w	800272e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf8:	4ba0      	ldr	r3, [pc, #640]	; (8001f7c <HAL_RCC_OscConfig+0x650>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	21f8      	movs	r1, #248	; 0xf8
 8001d08:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001d10:	fa91 f1a1 	rbit	r1, r1
 8001d14:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001d18:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001d1c:	fab1 f181 	clz	r1, r1
 8001d20:	b2c9      	uxtb	r1, r1
 8001d22:	408b      	lsls	r3, r1
 8001d24:	4995      	ldr	r1, [pc, #596]	; (8001f7c <HAL_RCC_OscConfig+0x650>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2a:	e0f5      	b.n	8001f18 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 8085 	beq.w	8001e42 <HAL_RCC_OscConfig+0x516>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001d4a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d4e:	fab3 f383 	clz	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	461a      	mov	r2, r3
 8001d60:	2301      	movs	r3, #1
 8001d62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7ff fa06 	bl	8001174 <HAL_GetTick>
 8001d68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6c:	e00a      	b.n	8001d84 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d6e:	f7ff fa01 	bl	8001174 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d902      	bls.n	8001d84 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	f000 bcd5 	b.w	800272e <HAL_RCC_OscConfig+0xe02>
 8001d84:	2302      	movs	r3, #2
 8001d86:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001d96:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	095b      	lsrs	r3, r3, #5
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d102      	bne.n	8001db4 <HAL_RCC_OscConfig+0x488>
 8001dae:	4b73      	ldr	r3, [pc, #460]	; (8001f7c <HAL_RCC_OscConfig+0x650>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	e013      	b.n	8001ddc <HAL_RCC_OscConfig+0x4b0>
 8001db4:	2302      	movs	r3, #2
 8001db6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001dcc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001dd0:	fa93 f3a3 	rbit	r3, r3
 8001dd4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001dd8:	4b68      	ldr	r3, [pc, #416]	; (8001f7c <HAL_RCC_OscConfig+0x650>)
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	2202      	movs	r2, #2
 8001dde:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001de2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001de6:	fa92 f2a2 	rbit	r2, r2
 8001dea:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001dee:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001df2:	fab2 f282 	clz	r2, r2
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	f042 0220 	orr.w	r2, r2, #32
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	f002 021f 	and.w	r2, r2, #31
 8001e02:	2101      	movs	r1, #1
 8001e04:	fa01 f202 	lsl.w	r2, r1, r2
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0af      	beq.n	8001d6e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0e:	4b5b      	ldr	r3, [pc, #364]	; (8001f7c <HAL_RCC_OscConfig+0x650>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	21f8      	movs	r1, #248	; 0xf8
 8001e1e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001e26:	fa91 f1a1 	rbit	r1, r1
 8001e2a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001e2e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001e32:	fab1 f181 	clz	r1, r1
 8001e36:	b2c9      	uxtb	r1, r1
 8001e38:	408b      	lsls	r3, r1
 8001e3a:	4950      	ldr	r1, [pc, #320]	; (8001f7c <HAL_RCC_OscConfig+0x650>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	600b      	str	r3, [r1, #0]
 8001e40:	e06a      	b.n	8001f18 <HAL_RCC_OscConfig+0x5ec>
 8001e42:	2301      	movs	r3, #1
 8001e44:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001e54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e62:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	461a      	mov	r2, r3
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6e:	f7ff f981 	bl	8001174 <HAL_GetTick>
 8001e72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e78:	f7ff f97c 	bl	8001174 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d902      	bls.n	8001e8e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	f000 bc50 	b.w	800272e <HAL_RCC_OscConfig+0xe02>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001e98:	fa93 f3a3 	rbit	r3, r3
 8001e9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001ea0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea4:	fab3 f383 	clz	r3, r3
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d102      	bne.n	8001ebe <HAL_RCC_OscConfig+0x592>
 8001eb8:	4b30      	ldr	r3, [pc, #192]	; (8001f7c <HAL_RCC_OscConfig+0x650>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	e013      	b.n	8001ee6 <HAL_RCC_OscConfig+0x5ba>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ed6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001eda:	fa93 f3a3 	rbit	r3, r3
 8001ede:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001ee2:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <HAL_RCC_OscConfig+0x650>)
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001eec:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ef0:	fa92 f2a2 	rbit	r2, r2
 8001ef4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001ef8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001efc:	fab2 f282 	clz	r2, r2
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	f042 0220 	orr.w	r2, r2, #32
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	f002 021f 	and.w	r2, r2, #31
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1af      	bne.n	8001e78 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 80da 	beq.w	80020dc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d069      	beq.n	8002006 <HAL_RCC_OscConfig+0x6da>
 8001f32:	2301      	movs	r3, #1
 8001f34:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f38:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f3c:	fa93 f3a3 	rbit	r3, r3
 8001f40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f48:	fab3 f383 	clz	r3, r3
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <HAL_RCC_OscConfig+0x654>)
 8001f52:	4413      	add	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	461a      	mov	r2, r3
 8001f58:	2301      	movs	r3, #1
 8001f5a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5c:	f7ff f90a 	bl	8001174 <HAL_GetTick>
 8001f60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f64:	e00e      	b.n	8001f84 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f66:	f7ff f905 	bl	8001174 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d906      	bls.n	8001f84 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e3d9      	b.n	800272e <HAL_RCC_OscConfig+0xe02>
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	10908120 	.word	0x10908120
 8001f84:	2302      	movs	r3, #2
 8001f86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f96:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	fa93 f2a3 	rbit	r2, r3
 8001fa8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	fa93 f2a3 	rbit	r2, r3
 8001fc0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001fc4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc6:	4ba5      	ldr	r3, [pc, #660]	; (800225c <HAL_RCC_OscConfig+0x930>)
 8001fc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fca:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001fce:	2102      	movs	r1, #2
 8001fd0:	6019      	str	r1, [r3, #0]
 8001fd2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	fa93 f1a3 	rbit	r1, r3
 8001fdc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001fe0:	6019      	str	r1, [r3, #0]
  return result;
 8001fe2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	fab3 f383 	clz	r3, r3
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0b0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x63a>
 8002004:	e06a      	b.n	80020dc <HAL_RCC_OscConfig+0x7b0>
 8002006:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800200a:	2201      	movs	r2, #1
 800200c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	fa93 f2a3 	rbit	r2, r3
 8002018:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800201c:	601a      	str	r2, [r3, #0]
  return result;
 800201e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002022:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002024:	fab3 f383 	clz	r3, r3
 8002028:	b2db      	uxtb	r3, r3
 800202a:	461a      	mov	r2, r3
 800202c:	4b8c      	ldr	r3, [pc, #560]	; (8002260 <HAL_RCC_OscConfig+0x934>)
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	461a      	mov	r2, r3
 8002034:	2300      	movs	r3, #0
 8002036:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002038:	f7ff f89c 	bl	8001174 <HAL_GetTick>
 800203c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002040:	e009      	b.n	8002056 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002042:	f7ff f897 	bl	8001174 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e36b      	b.n	800272e <HAL_RCC_OscConfig+0xe02>
 8002056:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800205a:	2202      	movs	r2, #2
 800205c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	fa93 f2a3 	rbit	r2, r3
 8002068:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002072:	2202      	movs	r2, #2
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	fa93 f2a3 	rbit	r2, r3
 8002080:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800208a:	2202      	movs	r2, #2
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	fa93 f2a3 	rbit	r2, r3
 8002098:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800209c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800209e:	4b6f      	ldr	r3, [pc, #444]	; (800225c <HAL_RCC_OscConfig+0x930>)
 80020a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020a2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020a6:	2102      	movs	r1, #2
 80020a8:	6019      	str	r1, [r3, #0]
 80020aa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	fa93 f1a3 	rbit	r1, r3
 80020b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020b8:	6019      	str	r1, [r3, #0]
  return result;
 80020ba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	fab3 f383 	clz	r3, r3
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	f003 031f 	and.w	r3, r3, #31
 80020d0:	2101      	movs	r1, #1
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1b2      	bne.n	8002042 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020dc:	1d3b      	adds	r3, r7, #4
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 8158 	beq.w	800239c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f2:	4b5a      	ldr	r3, [pc, #360]	; (800225c <HAL_RCC_OscConfig+0x930>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d112      	bne.n	8002124 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fe:	4b57      	ldr	r3, [pc, #348]	; (800225c <HAL_RCC_OscConfig+0x930>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	4a56      	ldr	r2, [pc, #344]	; (800225c <HAL_RCC_OscConfig+0x930>)
 8002104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002108:	61d3      	str	r3, [r2, #28]
 800210a:	4b54      	ldr	r3, [pc, #336]	; (800225c <HAL_RCC_OscConfig+0x930>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002112:	f107 0308 	add.w	r3, r7, #8
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	f107 0308 	add.w	r3, r7, #8
 800211c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800211e:	2301      	movs	r3, #1
 8002120:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002124:	4b4f      	ldr	r3, [pc, #316]	; (8002264 <HAL_RCC_OscConfig+0x938>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d11a      	bne.n	8002166 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002130:	4b4c      	ldr	r3, [pc, #304]	; (8002264 <HAL_RCC_OscConfig+0x938>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a4b      	ldr	r2, [pc, #300]	; (8002264 <HAL_RCC_OscConfig+0x938>)
 8002136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213c:	f7ff f81a 	bl	8001174 <HAL_GetTick>
 8002140:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002144:	e009      	b.n	800215a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002146:	f7ff f815 	bl	8001174 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	; 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e2e9      	b.n	800272e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215a:	4b42      	ldr	r3, [pc, #264]	; (8002264 <HAL_RCC_OscConfig+0x938>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0ef      	beq.n	8002146 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002166:	1d3b      	adds	r3, r7, #4
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d106      	bne.n	800217e <HAL_RCC_OscConfig+0x852>
 8002170:	4b3a      	ldr	r3, [pc, #232]	; (800225c <HAL_RCC_OscConfig+0x930>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	4a39      	ldr	r2, [pc, #228]	; (800225c <HAL_RCC_OscConfig+0x930>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	6213      	str	r3, [r2, #32]
 800217c:	e02f      	b.n	80021de <HAL_RCC_OscConfig+0x8b2>
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10c      	bne.n	80021a2 <HAL_RCC_OscConfig+0x876>
 8002188:	4b34      	ldr	r3, [pc, #208]	; (800225c <HAL_RCC_OscConfig+0x930>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	4a33      	ldr	r2, [pc, #204]	; (800225c <HAL_RCC_OscConfig+0x930>)
 800218e:	f023 0301 	bic.w	r3, r3, #1
 8002192:	6213      	str	r3, [r2, #32]
 8002194:	4b31      	ldr	r3, [pc, #196]	; (800225c <HAL_RCC_OscConfig+0x930>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	4a30      	ldr	r2, [pc, #192]	; (800225c <HAL_RCC_OscConfig+0x930>)
 800219a:	f023 0304 	bic.w	r3, r3, #4
 800219e:	6213      	str	r3, [r2, #32]
 80021a0:	e01d      	b.n	80021de <HAL_RCC_OscConfig+0x8b2>
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2b05      	cmp	r3, #5
 80021aa:	d10c      	bne.n	80021c6 <HAL_RCC_OscConfig+0x89a>
 80021ac:	4b2b      	ldr	r3, [pc, #172]	; (800225c <HAL_RCC_OscConfig+0x930>)
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	4a2a      	ldr	r2, [pc, #168]	; (800225c <HAL_RCC_OscConfig+0x930>)
 80021b2:	f043 0304 	orr.w	r3, r3, #4
 80021b6:	6213      	str	r3, [r2, #32]
 80021b8:	4b28      	ldr	r3, [pc, #160]	; (800225c <HAL_RCC_OscConfig+0x930>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	4a27      	ldr	r2, [pc, #156]	; (800225c <HAL_RCC_OscConfig+0x930>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6213      	str	r3, [r2, #32]
 80021c4:	e00b      	b.n	80021de <HAL_RCC_OscConfig+0x8b2>
 80021c6:	4b25      	ldr	r3, [pc, #148]	; (800225c <HAL_RCC_OscConfig+0x930>)
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	4a24      	ldr	r2, [pc, #144]	; (800225c <HAL_RCC_OscConfig+0x930>)
 80021cc:	f023 0301 	bic.w	r3, r3, #1
 80021d0:	6213      	str	r3, [r2, #32]
 80021d2:	4b22      	ldr	r3, [pc, #136]	; (800225c <HAL_RCC_OscConfig+0x930>)
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4a21      	ldr	r2, [pc, #132]	; (800225c <HAL_RCC_OscConfig+0x930>)
 80021d8:	f023 0304 	bic.w	r3, r3, #4
 80021dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d06b      	beq.n	80022c0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e8:	f7fe ffc4 	bl	8001174 <HAL_GetTick>
 80021ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f0:	e00b      	b.n	800220a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f2:	f7fe ffbf 	bl	8001174 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002202:	4293      	cmp	r3, r2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e291      	b.n	800272e <HAL_RCC_OscConfig+0xe02>
 800220a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800220e:	2202      	movs	r2, #2
 8002210:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	fa93 f2a3 	rbit	r2, r3
 800221c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002226:	2202      	movs	r2, #2
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	fa93 f2a3 	rbit	r2, r3
 8002234:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002238:	601a      	str	r2, [r3, #0]
  return result;
 800223a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800223e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002240:	fab3 f383 	clz	r3, r3
 8002244:	b2db      	uxtb	r3, r3
 8002246:	095b      	lsrs	r3, r3, #5
 8002248:	b2db      	uxtb	r3, r3
 800224a:	f043 0302 	orr.w	r3, r3, #2
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d109      	bne.n	8002268 <HAL_RCC_OscConfig+0x93c>
 8002254:	4b01      	ldr	r3, [pc, #4]	; (800225c <HAL_RCC_OscConfig+0x930>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	e014      	b.n	8002284 <HAL_RCC_OscConfig+0x958>
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000
 8002260:	10908120 	.word	0x10908120
 8002264:	40007000 	.word	0x40007000
 8002268:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800226c:	2202      	movs	r2, #2
 800226e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002270:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	fa93 f2a3 	rbit	r2, r3
 800227a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	4bbb      	ldr	r3, [pc, #748]	; (8002570 <HAL_RCC_OscConfig+0xc44>)
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002288:	2102      	movs	r1, #2
 800228a:	6011      	str	r1, [r2, #0]
 800228c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	fa92 f1a2 	rbit	r1, r2
 8002296:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800229a:	6011      	str	r1, [r2, #0]
  return result;
 800229c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	fab2 f282 	clz	r2, r2
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	f002 021f 	and.w	r2, r2, #31
 80022b2:	2101      	movs	r1, #1
 80022b4:	fa01 f202 	lsl.w	r2, r1, r2
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d099      	beq.n	80021f2 <HAL_RCC_OscConfig+0x8c6>
 80022be:	e063      	b.n	8002388 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c0:	f7fe ff58 	bl	8001174 <HAL_GetTick>
 80022c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c8:	e00b      	b.n	80022e2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ca:	f7fe ff53 	bl	8001174 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e225      	b.n	800272e <HAL_RCC_OscConfig+0xe02>
 80022e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80022e6:	2202      	movs	r2, #2
 80022e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	fa93 f2a3 	rbit	r2, r3
 80022f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80022fe:	2202      	movs	r2, #2
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	fa93 f2a3 	rbit	r2, r3
 800230c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002310:	601a      	str	r2, [r3, #0]
  return result;
 8002312:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002316:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002318:	fab3 f383 	clz	r3, r3
 800231c:	b2db      	uxtb	r3, r3
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	b2db      	uxtb	r3, r3
 8002322:	f043 0302 	orr.w	r3, r3, #2
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d102      	bne.n	8002332 <HAL_RCC_OscConfig+0xa06>
 800232c:	4b90      	ldr	r3, [pc, #576]	; (8002570 <HAL_RCC_OscConfig+0xc44>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	e00d      	b.n	800234e <HAL_RCC_OscConfig+0xa22>
 8002332:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002336:	2202      	movs	r2, #2
 8002338:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	fa93 f2a3 	rbit	r2, r3
 8002344:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	4b89      	ldr	r3, [pc, #548]	; (8002570 <HAL_RCC_OscConfig+0xc44>)
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002352:	2102      	movs	r1, #2
 8002354:	6011      	str	r1, [r2, #0]
 8002356:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	fa92 f1a2 	rbit	r1, r2
 8002360:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002364:	6011      	str	r1, [r2, #0]
  return result;
 8002366:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	fab2 f282 	clz	r2, r2
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	f002 021f 	and.w	r2, r2, #31
 800237c:	2101      	movs	r1, #1
 800237e:	fa01 f202 	lsl.w	r2, r1, r2
 8002382:	4013      	ands	r3, r2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1a0      	bne.n	80022ca <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002388:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800238c:	2b01      	cmp	r3, #1
 800238e:	d105      	bne.n	800239c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002390:	4b77      	ldr	r3, [pc, #476]	; (8002570 <HAL_RCC_OscConfig+0xc44>)
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	4a76      	ldr	r2, [pc, #472]	; (8002570 <HAL_RCC_OscConfig+0xc44>)
 8002396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800239a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 81c2 	beq.w	800272c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023a8:	4b71      	ldr	r3, [pc, #452]	; (8002570 <HAL_RCC_OscConfig+0xc44>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 030c 	and.w	r3, r3, #12
 80023b0:	2b08      	cmp	r3, #8
 80023b2:	f000 819c 	beq.w	80026ee <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	f040 8114 	bne.w	80025ea <HAL_RCC_OscConfig+0xcbe>
 80023c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80023c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	fa93 f2a3 	rbit	r2, r3
 80023d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80023da:	601a      	str	r2, [r3, #0]
  return result;
 80023dc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80023e0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	461a      	mov	r2, r3
 80023f4:	2300      	movs	r3, #0
 80023f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7fe febc 	bl	8001174 <HAL_GetTick>
 80023fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002400:	e009      	b.n	8002416 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002402:	f7fe feb7 	bl	8001174 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e18b      	b.n	800272e <HAL_RCC_OscConfig+0xe02>
 8002416:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800241a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800241e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	fa93 f2a3 	rbit	r2, r3
 800242a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800242e:	601a      	str	r2, [r3, #0]
  return result;
 8002430:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002434:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	095b      	lsrs	r3, r3, #5
 800243e:	b2db      	uxtb	r3, r3
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d102      	bne.n	8002450 <HAL_RCC_OscConfig+0xb24>
 800244a:	4b49      	ldr	r3, [pc, #292]	; (8002570 <HAL_RCC_OscConfig+0xc44>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	e01b      	b.n	8002488 <HAL_RCC_OscConfig+0xb5c>
 8002450:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002454:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002458:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	fa93 f2a3 	rbit	r2, r3
 8002464:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800246e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	fa93 f2a3 	rbit	r2, r3
 800247e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	4b3a      	ldr	r3, [pc, #232]	; (8002570 <HAL_RCC_OscConfig+0xc44>)
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800248c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002490:	6011      	str	r1, [r2, #0]
 8002492:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	fa92 f1a2 	rbit	r1, r2
 800249c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80024a0:	6011      	str	r1, [r2, #0]
  return result;
 80024a2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	fab2 f282 	clz	r2, r2
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	f042 0220 	orr.w	r2, r2, #32
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	f002 021f 	and.w	r2, r2, #31
 80024b8:	2101      	movs	r1, #1
 80024ba:	fa01 f202 	lsl.w	r2, r1, r2
 80024be:	4013      	ands	r3, r2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d19e      	bne.n	8002402 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024c4:	4b2a      	ldr	r3, [pc, #168]	; (8002570 <HAL_RCC_OscConfig+0xc44>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024cc:	1d3b      	adds	r3, r7, #4
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	430b      	orrs	r3, r1
 80024da:	4925      	ldr	r1, [pc, #148]	; (8002570 <HAL_RCC_OscConfig+0xc44>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	604b      	str	r3, [r1, #4]
 80024e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	fa93 f2a3 	rbit	r2, r3
 80024f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024f8:	601a      	str	r2, [r3, #0]
  return result;
 80024fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024fe:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002500:	fab3 f383 	clz	r3, r3
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800250a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	461a      	mov	r2, r3
 8002512:	2301      	movs	r3, #1
 8002514:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002516:	f7fe fe2d 	bl	8001174 <HAL_GetTick>
 800251a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800251e:	e009      	b.n	8002534 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002520:	f7fe fe28 	bl	8001174 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e0fc      	b.n	800272e <HAL_RCC_OscConfig+0xe02>
 8002534:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002538:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800253c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	fa93 f2a3 	rbit	r2, r3
 8002548:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800254c:	601a      	str	r2, [r3, #0]
  return result;
 800254e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002552:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	b2db      	uxtb	r3, r3
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b01      	cmp	r3, #1
 8002566:	d105      	bne.n	8002574 <HAL_RCC_OscConfig+0xc48>
 8002568:	4b01      	ldr	r3, [pc, #4]	; (8002570 <HAL_RCC_OscConfig+0xc44>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	e01e      	b.n	80025ac <HAL_RCC_OscConfig+0xc80>
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000
 8002574:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002578:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800257c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	fa93 f2a3 	rbit	r2, r3
 8002588:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002592:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	fa93 f2a3 	rbit	r2, r3
 80025a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	4b63      	ldr	r3, [pc, #396]	; (8002738 <HAL_RCC_OscConfig+0xe0c>)
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025b4:	6011      	str	r1, [r2, #0]
 80025b6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	fa92 f1a2 	rbit	r1, r2
 80025c0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80025c4:	6011      	str	r1, [r2, #0]
  return result;
 80025c6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	fab2 f282 	clz	r2, r2
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	f042 0220 	orr.w	r2, r2, #32
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	f002 021f 	and.w	r2, r2, #31
 80025dc:	2101      	movs	r1, #1
 80025de:	fa01 f202 	lsl.w	r2, r1, r2
 80025e2:	4013      	ands	r3, r2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d09b      	beq.n	8002520 <HAL_RCC_OscConfig+0xbf4>
 80025e8:	e0a0      	b.n	800272c <HAL_RCC_OscConfig+0xe00>
 80025ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	fa93 f2a3 	rbit	r2, r3
 80025fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002602:	601a      	str	r2, [r3, #0]
  return result;
 8002604:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002608:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260a:	fab3 f383 	clz	r3, r3
 800260e:	b2db      	uxtb	r3, r3
 8002610:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002614:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	461a      	mov	r2, r3
 800261c:	2300      	movs	r3, #0
 800261e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002620:	f7fe fda8 	bl	8001174 <HAL_GetTick>
 8002624:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002628:	e009      	b.n	800263e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800262a:	f7fe fda3 	bl	8001174 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e077      	b.n	800272e <HAL_RCC_OscConfig+0xe02>
 800263e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002642:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002646:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	fa93 f2a3 	rbit	r2, r3
 8002652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002656:	601a      	str	r2, [r3, #0]
  return result;
 8002658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800265c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800265e:	fab3 f383 	clz	r3, r3
 8002662:	b2db      	uxtb	r3, r3
 8002664:	095b      	lsrs	r3, r3, #5
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b01      	cmp	r3, #1
 8002670:	d102      	bne.n	8002678 <HAL_RCC_OscConfig+0xd4c>
 8002672:	4b31      	ldr	r3, [pc, #196]	; (8002738 <HAL_RCC_OscConfig+0xe0c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	e01b      	b.n	80026b0 <HAL_RCC_OscConfig+0xd84>
 8002678:	f107 0320 	add.w	r3, r7, #32
 800267c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002680:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	f107 0320 	add.w	r3, r7, #32
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	fa93 f2a3 	rbit	r2, r3
 800268c:	f107 031c 	add.w	r3, r7, #28
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	f107 0318 	add.w	r3, r7, #24
 8002696:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	f107 0318 	add.w	r3, r7, #24
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	fa93 f2a3 	rbit	r2, r3
 80026a6:	f107 0314 	add.w	r3, r7, #20
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	4b22      	ldr	r3, [pc, #136]	; (8002738 <HAL_RCC_OscConfig+0xe0c>)
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	f107 0210 	add.w	r2, r7, #16
 80026b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026b8:	6011      	str	r1, [r2, #0]
 80026ba:	f107 0210 	add.w	r2, r7, #16
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	fa92 f1a2 	rbit	r1, r2
 80026c4:	f107 020c 	add.w	r2, r7, #12
 80026c8:	6011      	str	r1, [r2, #0]
  return result;
 80026ca:	f107 020c 	add.w	r2, r7, #12
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	fab2 f282 	clz	r2, r2
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	f042 0220 	orr.w	r2, r2, #32
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	f002 021f 	and.w	r2, r2, #31
 80026e0:	2101      	movs	r1, #1
 80026e2:	fa01 f202 	lsl.w	r2, r1, r2
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d19e      	bne.n	800262a <HAL_RCC_OscConfig+0xcfe>
 80026ec:	e01e      	b.n	800272c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026ee:	1d3b      	adds	r3, r7, #4
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e018      	b.n	800272e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026fc:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <HAL_RCC_OscConfig+0xe0c>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002704:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002708:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800270c:	1d3b      	adds	r3, r7, #4
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	429a      	cmp	r2, r3
 8002714:	d108      	bne.n	8002728 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002716:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800271a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e000      	b.n	800272e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000

0800273c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b09e      	sub	sp, #120	; 0x78
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002746:	2300      	movs	r3, #0
 8002748:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e162      	b.n	8002a1a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002754:	4b90      	ldr	r3, [pc, #576]	; (8002998 <HAL_RCC_ClockConfig+0x25c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d910      	bls.n	8002784 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002762:	4b8d      	ldr	r3, [pc, #564]	; (8002998 <HAL_RCC_ClockConfig+0x25c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 0207 	bic.w	r2, r3, #7
 800276a:	498b      	ldr	r1, [pc, #556]	; (8002998 <HAL_RCC_ClockConfig+0x25c>)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	4b89      	ldr	r3, [pc, #548]	; (8002998 <HAL_RCC_ClockConfig+0x25c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e14a      	b.n	8002a1a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d008      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002790:	4b82      	ldr	r3, [pc, #520]	; (800299c <HAL_RCC_ClockConfig+0x260>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	497f      	ldr	r1, [pc, #508]	; (800299c <HAL_RCC_ClockConfig+0x260>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 80dc 	beq.w	8002968 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d13c      	bne.n	8002832 <HAL_RCC_ClockConfig+0xf6>
 80027b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027c0:	fa93 f3a3 	rbit	r3, r3
 80027c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80027c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c8:	fab3 f383 	clz	r3, r3
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d102      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xa6>
 80027dc:	4b6f      	ldr	r3, [pc, #444]	; (800299c <HAL_RCC_ClockConfig+0x260>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	e00f      	b.n	8002802 <HAL_RCC_ClockConfig+0xc6>
 80027e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027ea:	fa93 f3a3 	rbit	r3, r3
 80027ee:	667b      	str	r3, [r7, #100]	; 0x64
 80027f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f4:	663b      	str	r3, [r7, #96]	; 0x60
 80027f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027f8:	fa93 f3a3 	rbit	r3, r3
 80027fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027fe:	4b67      	ldr	r3, [pc, #412]	; (800299c <HAL_RCC_ClockConfig+0x260>)
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002806:	65ba      	str	r2, [r7, #88]	; 0x58
 8002808:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800280a:	fa92 f2a2 	rbit	r2, r2
 800280e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002810:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002812:	fab2 f282 	clz	r2, r2
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	f042 0220 	orr.w	r2, r2, #32
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	f002 021f 	and.w	r2, r2, #31
 8002822:	2101      	movs	r1, #1
 8002824:	fa01 f202 	lsl.w	r2, r1, r2
 8002828:	4013      	ands	r3, r2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d17b      	bne.n	8002926 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e0f3      	b.n	8002a1a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d13c      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x178>
 800283a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800283e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002842:	fa93 f3a3 	rbit	r3, r3
 8002846:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	095b      	lsrs	r3, r3, #5
 8002852:	b2db      	uxtb	r3, r3
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b01      	cmp	r3, #1
 800285c:	d102      	bne.n	8002864 <HAL_RCC_ClockConfig+0x128>
 800285e:	4b4f      	ldr	r3, [pc, #316]	; (800299c <HAL_RCC_ClockConfig+0x260>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	e00f      	b.n	8002884 <HAL_RCC_ClockConfig+0x148>
 8002864:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002868:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800286c:	fa93 f3a3 	rbit	r3, r3
 8002870:	647b      	str	r3, [r7, #68]	; 0x44
 8002872:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002876:	643b      	str	r3, [r7, #64]	; 0x40
 8002878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002880:	4b46      	ldr	r3, [pc, #280]	; (800299c <HAL_RCC_ClockConfig+0x260>)
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002888:	63ba      	str	r2, [r7, #56]	; 0x38
 800288a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800288c:	fa92 f2a2 	rbit	r2, r2
 8002890:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002894:	fab2 f282 	clz	r2, r2
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	f042 0220 	orr.w	r2, r2, #32
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	f002 021f 	and.w	r2, r2, #31
 80028a4:	2101      	movs	r1, #1
 80028a6:	fa01 f202 	lsl.w	r2, r1, r2
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d13a      	bne.n	8002926 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0b2      	b.n	8002a1a <HAL_RCC_ClockConfig+0x2de>
 80028b4:	2302      	movs	r3, #2
 80028b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ba:	fa93 f3a3 	rbit	r3, r3
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80028c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	095b      	lsrs	r3, r3, #5
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d102      	bne.n	80028dc <HAL_RCC_ClockConfig+0x1a0>
 80028d6:	4b31      	ldr	r3, [pc, #196]	; (800299c <HAL_RCC_ClockConfig+0x260>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	e00d      	b.n	80028f8 <HAL_RCC_ClockConfig+0x1bc>
 80028dc:	2302      	movs	r3, #2
 80028de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
 80028e8:	2302      	movs	r3, #2
 80028ea:	623b      	str	r3, [r7, #32]
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	fa93 f3a3 	rbit	r3, r3
 80028f2:	61fb      	str	r3, [r7, #28]
 80028f4:	4b29      	ldr	r3, [pc, #164]	; (800299c <HAL_RCC_ClockConfig+0x260>)
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	2202      	movs	r2, #2
 80028fa:	61ba      	str	r2, [r7, #24]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	fa92 f2a2 	rbit	r2, r2
 8002902:	617a      	str	r2, [r7, #20]
  return result;
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	fab2 f282 	clz	r2, r2
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	f042 0220 	orr.w	r2, r2, #32
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	f002 021f 	and.w	r2, r2, #31
 8002916:	2101      	movs	r1, #1
 8002918:	fa01 f202 	lsl.w	r2, r1, r2
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e079      	b.n	8002a1a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002926:	4b1d      	ldr	r3, [pc, #116]	; (800299c <HAL_RCC_ClockConfig+0x260>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f023 0203 	bic.w	r2, r3, #3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	491a      	ldr	r1, [pc, #104]	; (800299c <HAL_RCC_ClockConfig+0x260>)
 8002934:	4313      	orrs	r3, r2
 8002936:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002938:	f7fe fc1c 	bl	8001174 <HAL_GetTick>
 800293c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293e:	e00a      	b.n	8002956 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002940:	f7fe fc18 	bl	8001174 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f241 3288 	movw	r2, #5000	; 0x1388
 800294e:	4293      	cmp	r3, r2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e061      	b.n	8002a1a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002956:	4b11      	ldr	r3, [pc, #68]	; (800299c <HAL_RCC_ClockConfig+0x260>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f003 020c 	and.w	r2, r3, #12
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	429a      	cmp	r2, r3
 8002966:	d1eb      	bne.n	8002940 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002968:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <HAL_RCC_ClockConfig+0x25c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d214      	bcs.n	80029a0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002976:	4b08      	ldr	r3, [pc, #32]	; (8002998 <HAL_RCC_ClockConfig+0x25c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 0207 	bic.w	r2, r3, #7
 800297e:	4906      	ldr	r1, [pc, #24]	; (8002998 <HAL_RCC_ClockConfig+0x25c>)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	4313      	orrs	r3, r2
 8002984:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002986:	4b04      	ldr	r3, [pc, #16]	; (8002998 <HAL_RCC_ClockConfig+0x25c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e040      	b.n	8002a1a <HAL_RCC_ClockConfig+0x2de>
 8002998:	40022000 	.word	0x40022000
 800299c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ac:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <HAL_RCC_ClockConfig+0x2e8>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	491a      	ldr	r1, [pc, #104]	; (8002a24 <HAL_RCC_ClockConfig+0x2e8>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d009      	beq.n	80029de <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ca:	4b16      	ldr	r3, [pc, #88]	; (8002a24 <HAL_RCC_ClockConfig+0x2e8>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4912      	ldr	r1, [pc, #72]	; (8002a24 <HAL_RCC_ClockConfig+0x2e8>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029de:	f000 f829 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 80029e2:	4601      	mov	r1, r0
 80029e4:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <HAL_RCC_ClockConfig+0x2e8>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ec:	22f0      	movs	r2, #240	; 0xf0
 80029ee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	fa92 f2a2 	rbit	r2, r2
 80029f6:	60fa      	str	r2, [r7, #12]
  return result;
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	fab2 f282 	clz	r2, r2
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	40d3      	lsrs	r3, r2
 8002a02:	4a09      	ldr	r2, [pc, #36]	; (8002a28 <HAL_RCC_ClockConfig+0x2ec>)
 8002a04:	5cd3      	ldrb	r3, [r2, r3]
 8002a06:	fa21 f303 	lsr.w	r3, r1, r3
 8002a0a:	4a08      	ldr	r2, [pc, #32]	; (8002a2c <HAL_RCC_ClockConfig+0x2f0>)
 8002a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a0e:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <HAL_RCC_ClockConfig+0x2f4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe fb6a 	bl	80010ec <HAL_InitTick>
  
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3778      	adds	r7, #120	; 0x78
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40021000 	.word	0x40021000
 8002a28:	080031fc 	.word	0x080031fc
 8002a2c:	20000000 	.word	0x20000000
 8002a30:	20000004 	.word	0x20000004

08002a34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b08b      	sub	sp, #44	; 0x2c
 8002a38:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	2300      	movs	r3, #0
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002a4e:	4b29      	ldr	r3, [pc, #164]	; (8002af4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d002      	beq.n	8002a64 <HAL_RCC_GetSysClockFreq+0x30>
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d003      	beq.n	8002a6a <HAL_RCC_GetSysClockFreq+0x36>
 8002a62:	e03c      	b.n	8002ade <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a64:	4b24      	ldr	r3, [pc, #144]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a66:	623b      	str	r3, [r7, #32]
      break;
 8002a68:	e03c      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a70:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a74:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	fa92 f2a2 	rbit	r2, r2
 8002a7c:	607a      	str	r2, [r7, #4]
  return result;
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	fab2 f282 	clz	r2, r2
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	40d3      	lsrs	r3, r2
 8002a88:	4a1c      	ldr	r2, [pc, #112]	; (8002afc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a8a:	5cd3      	ldrb	r3, [r2, r3]
 8002a8c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a8e:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	220f      	movs	r2, #15
 8002a98:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	fa92 f2a2 	rbit	r2, r2
 8002aa0:	60fa      	str	r2, [r7, #12]
  return result;
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	fab2 f282 	clz	r2, r2
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	40d3      	lsrs	r3, r2
 8002aac:	4a14      	ldr	r2, [pc, #80]	; (8002b00 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002aae:	5cd3      	ldrb	r3, [r2, r3]
 8002ab0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002abc:	4a0e      	ldr	r2, [pc, #56]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	fb02 f303 	mul.w	r3, r2, r3
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
 8002acc:	e004      	b.n	8002ad8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	4a0c      	ldr	r2, [pc, #48]	; (8002b04 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ad2:	fb02 f303 	mul.w	r3, r2, r3
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	623b      	str	r3, [r7, #32]
      break;
 8002adc:	e002      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ade:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ae0:	623b      	str	r3, [r7, #32]
      break;
 8002ae2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	372c      	adds	r7, #44	; 0x2c
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40021000 	.word	0x40021000
 8002af8:	007a1200 	.word	0x007a1200
 8002afc:	0800320c 	.word	0x0800320c
 8002b00:	0800321c 	.word	0x0800321c
 8002b04:	003d0900 	.word	0x003d0900

08002b08 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b092      	sub	sp, #72	; 0x48
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 80d0 	beq.w	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002b26:	2300      	movs	r3, #0
 8002b28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b2c:	4b86      	ldr	r3, [pc, #536]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10e      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b38:	4b83      	ldr	r3, [pc, #524]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	4a82      	ldr	r2, [pc, #520]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b42:	61d3      	str	r3, [r2, #28]
 8002b44:	4b80      	ldr	r3, [pc, #512]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b50:	2301      	movs	r3, #1
 8002b52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b56:	4b7d      	ldr	r3, [pc, #500]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d118      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b62:	4b7a      	ldr	r3, [pc, #488]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a79      	ldr	r2, [pc, #484]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b6e:	f7fe fb01 	bl	8001174 <HAL_GetTick>
 8002b72:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b74:	e008      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b76:	f7fe fafd 	bl	8001174 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b64      	cmp	r3, #100	; 0x64
 8002b82:	d901      	bls.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e0db      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b88:	4b70      	ldr	r3, [pc, #448]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b94:	4b6c      	ldr	r3, [pc, #432]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d07d      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d076      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bb2:	4b65      	ldr	r3, [pc, #404]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bc0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc4:	fa93 f3a3 	rbit	r3, r3
 8002bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bcc:	fab3 f383 	clz	r3, r3
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4b5e      	ldr	r3, [pc, #376]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	461a      	mov	r2, r3
 8002bdc:	2301      	movs	r3, #1
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002be4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be8:	fa93 f3a3 	rbit	r3, r3
 8002bec:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bf0:	fab3 f383 	clz	r3, r3
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	4b55      	ldr	r3, [pc, #340]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	461a      	mov	r2, r3
 8002c00:	2300      	movs	r3, #0
 8002c02:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c04:	4a50      	ldr	r2, [pc, #320]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c08:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d045      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe faae 	bl	8001174 <HAL_GetTick>
 8002c18:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1a:	e00a      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c1c:	f7fe faaa 	bl	8001174 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e086      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002c32:	2302      	movs	r3, #2
 8002c34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c38:	fa93 f3a3 	rbit	r3, r3
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3e:	2302      	movs	r3, #2
 8002c40:	623b      	str	r3, [r7, #32]
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	61fb      	str	r3, [r7, #28]
  return result;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c4c:	fab3 f383 	clz	r3, r3
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	f043 0302 	orr.w	r3, r3, #2
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d102      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002c60:	4b39      	ldr	r3, [pc, #228]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	e007      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002c66:	2302      	movs	r3, #2
 8002c68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	fa93 f3a3 	rbit	r3, r3
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	4b35      	ldr	r3, [pc, #212]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	2202      	movs	r2, #2
 8002c78:	613a      	str	r2, [r7, #16]
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	fa92 f2a2 	rbit	r2, r2
 8002c80:	60fa      	str	r2, [r7, #12]
  return result;
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	fab2 f282 	clz	r2, r2
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	f002 021f 	and.w	r2, r2, #31
 8002c94:	2101      	movs	r1, #1
 8002c96:	fa01 f202 	lsl.w	r2, r1, r2
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0bd      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002ca0:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	4926      	ldr	r1, [pc, #152]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cb2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d105      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cba:	4b23      	ldr	r3, [pc, #140]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	4a22      	ldr	r2, [pc, #136]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cd2:	4b1d      	ldr	r3, [pc, #116]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	f023 0203 	bic.w	r2, r3, #3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	491a      	ldr	r1, [pc, #104]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cf0:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	f023 0210 	bic.w	r2, r3, #16
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4912      	ldr	r1, [pc, #72]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d0e:	4b0e      	ldr	r3, [pc, #56]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d12:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	490b      	ldr	r1, [pc, #44]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002d2c:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	4903      	ldr	r1, [pc, #12]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3748      	adds	r7, #72	; 0x48
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	40007000 	.word	0x40007000
 8002d50:	10908100 	.word	0x10908100

08002d54 <_ZNSaIcEC1Ev>:
 8002d54:	4770      	bx	lr

08002d56 <_ZNSaIcED1Ev>:
 8002d56:	4770      	bx	lr

08002d58 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8002d58:	b10a      	cbz	r2, 8002d5e <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8002d5a:	f000 b8d9 	b.w	8002f10 <memcpy>
 8002d5e:	4770      	bx	lr

08002d60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8002d60:	b508      	push	{r3, lr}
 8002d62:	680b      	ldr	r3, [r1, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	da02      	bge.n	8002d6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8002d68:	4809      	ldr	r0, [pc, #36]	; (8002d90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8002d6a:	f000 f88c 	bl	8002e86 <_ZSt20__throw_length_errorPKc>
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d908      	bls.n	8002d84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8002d72:	0052      	lsls	r2, r2, #1
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d205      	bcs.n	8002d84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8002d78:	2a00      	cmp	r2, #0
 8002d7a:	bfb6      	itet	lt
 8002d7c:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8002d80:	600a      	strge	r2, [r1, #0]
 8002d82:	600b      	strlt	r3, [r1, #0]
 8002d84:	6808      	ldr	r0, [r1, #0]
 8002d86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002d8a:	3001      	adds	r0, #1
 8002d8c:	f000 b85c 	b.w	8002e48 <_Znwj>
 8002d90:	08003256 	.word	0x08003256

08002d94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8002d94:	4603      	mov	r3, r0
 8002d96:	f853 0b08 	ldr.w	r0, [r3], #8
 8002d9a:	4298      	cmp	r0, r3
 8002d9c:	d001      	beq.n	8002da2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8002d9e:	f000 b86d 	b.w	8002e7c <_ZdlPv>
 8002da2:	4770      	bx	lr

08002da4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8002da4:	2a01      	cmp	r2, #1
 8002da6:	b510      	push	{r4, lr}
 8002da8:	d102      	bne.n	8002db0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8002daa:	780a      	ldrb	r2, [r1, #0]
 8002dac:	7002      	strb	r2, [r0, #0]
 8002dae:	bd10      	pop	{r4, pc}
 8002db0:	f7ff ffd2 	bl	8002d58 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8002db4:	e7fb      	b.n	8002dae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08002db6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8002db6:	b508      	push	{r3, lr}
 8002db8:	1a52      	subs	r2, r2, r1
 8002dba:	f7ff fff3 	bl	8002da4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8002dbe:	bd08      	pop	{r3, pc}

08002dc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8002dc0:	b510      	push	{r4, lr}
 8002dc2:	4604      	mov	r4, r0
 8002dc4:	f7ff ffe6 	bl	8002d94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8002dc8:	4620      	mov	r0, r4
 8002dca:	bd10      	pop	{r4, pc}

08002dcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8002dcc:	6800      	ldr	r0, [r0, #0]
 8002dce:	4408      	add	r0, r1
 8002dd0:	4770      	bx	lr
	...

08002dd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8002dd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	4616      	mov	r6, r2
 8002dda:	460d      	mov	r5, r1
 8002ddc:	b919      	cbnz	r1, 8002de6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8002dde:	b112      	cbz	r2, 8002de6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8002de0:	480d      	ldr	r0, [pc, #52]	; (8002e18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8002de2:	f000 f84d 	bl	8002e80 <_ZSt19__throw_logic_errorPKc>
 8002de6:	1b73      	subs	r3, r6, r5
 8002de8:	2b0f      	cmp	r3, #15
 8002dea:	9301      	str	r3, [sp, #4]
 8002dec:	d907      	bls.n	8002dfe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8002dee:	2200      	movs	r2, #0
 8002df0:	a901      	add	r1, sp, #4
 8002df2:	4620      	mov	r0, r4
 8002df4:	f7ff ffb4 	bl	8002d60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8002df8:	9b01      	ldr	r3, [sp, #4]
 8002dfa:	6020      	str	r0, [r4, #0]
 8002dfc:	60a3      	str	r3, [r4, #8]
 8002dfe:	4632      	mov	r2, r6
 8002e00:	4629      	mov	r1, r5
 8002e02:	6820      	ldr	r0, [r4, #0]
 8002e04:	f7ff ffd7 	bl	8002db6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8002e08:	9b01      	ldr	r3, [sp, #4]
 8002e0a:	6822      	ldr	r2, [r4, #0]
 8002e0c:	6063      	str	r3, [r4, #4]
 8002e0e:	2100      	movs	r1, #0
 8002e10:	54d1      	strb	r1, [r2, r3]
 8002e12:	b002      	add	sp, #8
 8002e14:	bd70      	pop	{r4, r5, r6, pc}
 8002e16:	bf00      	nop
 8002e18:	0800322c 	.word	0x0800322c

08002e1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8002e1c:	b538      	push	{r3, r4, r5, lr}
 8002e1e:	f100 0308 	add.w	r3, r0, #8
 8002e22:	4604      	mov	r4, r0
 8002e24:	6003      	str	r3, [r0, #0]
 8002e26:	460d      	mov	r5, r1
 8002e28:	b159      	cbz	r1, 8002e42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8002e2a:	4608      	mov	r0, r1
 8002e2c:	f7fd f9cc 	bl	80001c8 <strlen>
 8002e30:	182a      	adds	r2, r5, r0
 8002e32:	4620      	mov	r0, r4
 8002e34:	f04f 0300 	mov.w	r3, #0
 8002e38:	4629      	mov	r1, r5
 8002e3a:	f7ff ffcb 	bl	8002dd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8002e3e:	4620      	mov	r0, r4
 8002e40:	bd38      	pop	{r3, r4, r5, pc}
 8002e42:	f04f 32ff 	mov.w	r2, #4294967295
 8002e46:	e7f4      	b.n	8002e32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08002e48 <_Znwj>:
 8002e48:	b510      	push	{r4, lr}
 8002e4a:	2800      	cmp	r0, #0
 8002e4c:	bf14      	ite	ne
 8002e4e:	4604      	movne	r4, r0
 8002e50:	2401      	moveq	r4, #1
 8002e52:	4620      	mov	r0, r4
 8002e54:	f000 f84c 	bl	8002ef0 <malloc>
 8002e58:	b930      	cbnz	r0, 8002e68 <_Znwj+0x20>
 8002e5a:	f000 f807 	bl	8002e6c <_ZSt15get_new_handlerv>
 8002e5e:	b908      	cbnz	r0, 8002e64 <_Znwj+0x1c>
 8002e60:	f000 f814 	bl	8002e8c <abort>
 8002e64:	4780      	blx	r0
 8002e66:	e7f4      	b.n	8002e52 <_Znwj+0xa>
 8002e68:	bd10      	pop	{r4, pc}
	...

08002e6c <_ZSt15get_new_handlerv>:
 8002e6c:	4b02      	ldr	r3, [pc, #8]	; (8002e78 <_ZSt15get_new_handlerv+0xc>)
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	f3bf 8f5b 	dmb	ish
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20000094 	.word	0x20000094

08002e7c <_ZdlPv>:
 8002e7c:	f000 b840 	b.w	8002f00 <free>

08002e80 <_ZSt19__throw_logic_errorPKc>:
 8002e80:	b508      	push	{r3, lr}
 8002e82:	f000 f803 	bl	8002e8c <abort>

08002e86 <_ZSt20__throw_length_errorPKc>:
 8002e86:	b508      	push	{r3, lr}
 8002e88:	f000 f800 	bl	8002e8c <abort>

08002e8c <abort>:
 8002e8c:	b508      	push	{r3, lr}
 8002e8e:	2006      	movs	r0, #6
 8002e90:	f000 f932 	bl	80030f8 <raise>
 8002e94:	2001      	movs	r0, #1
 8002e96:	f7fe f89d 	bl	8000fd4 <_exit>
	...

08002e9c <__errno>:
 8002e9c:	4b01      	ldr	r3, [pc, #4]	; (8002ea4 <__errno+0x8>)
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	2000000c 	.word	0x2000000c

08002ea8 <__libc_init_array>:
 8002ea8:	b570      	push	{r4, r5, r6, lr}
 8002eaa:	4e0d      	ldr	r6, [pc, #52]	; (8002ee0 <__libc_init_array+0x38>)
 8002eac:	4c0d      	ldr	r4, [pc, #52]	; (8002ee4 <__libc_init_array+0x3c>)
 8002eae:	1ba4      	subs	r4, r4, r6
 8002eb0:	10a4      	asrs	r4, r4, #2
 8002eb2:	2500      	movs	r5, #0
 8002eb4:	42a5      	cmp	r5, r4
 8002eb6:	d109      	bne.n	8002ecc <__libc_init_array+0x24>
 8002eb8:	4e0b      	ldr	r6, [pc, #44]	; (8002ee8 <__libc_init_array+0x40>)
 8002eba:	4c0c      	ldr	r4, [pc, #48]	; (8002eec <__libc_init_array+0x44>)
 8002ebc:	f000 f93a 	bl	8003134 <_init>
 8002ec0:	1ba4      	subs	r4, r4, r6
 8002ec2:	10a4      	asrs	r4, r4, #2
 8002ec4:	2500      	movs	r5, #0
 8002ec6:	42a5      	cmp	r5, r4
 8002ec8:	d105      	bne.n	8002ed6 <__libc_init_array+0x2e>
 8002eca:	bd70      	pop	{r4, r5, r6, pc}
 8002ecc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ed0:	4798      	blx	r3
 8002ed2:	3501      	adds	r5, #1
 8002ed4:	e7ee      	b.n	8002eb4 <__libc_init_array+0xc>
 8002ed6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002eda:	4798      	blx	r3
 8002edc:	3501      	adds	r5, #1
 8002ede:	e7f2      	b.n	8002ec6 <__libc_init_array+0x1e>
 8002ee0:	08003270 	.word	0x08003270
 8002ee4:	08003270 	.word	0x08003270
 8002ee8:	08003270 	.word	0x08003270
 8002eec:	08003278 	.word	0x08003278

08002ef0 <malloc>:
 8002ef0:	4b02      	ldr	r3, [pc, #8]	; (8002efc <malloc+0xc>)
 8002ef2:	4601      	mov	r1, r0
 8002ef4:	6818      	ldr	r0, [r3, #0]
 8002ef6:	f000 b86d 	b.w	8002fd4 <_malloc_r>
 8002efa:	bf00      	nop
 8002efc:	2000000c 	.word	0x2000000c

08002f00 <free>:
 8002f00:	4b02      	ldr	r3, [pc, #8]	; (8002f0c <free+0xc>)
 8002f02:	4601      	mov	r1, r0
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	f000 b817 	b.w	8002f38 <_free_r>
 8002f0a:	bf00      	nop
 8002f0c:	2000000c 	.word	0x2000000c

08002f10 <memcpy>:
 8002f10:	b510      	push	{r4, lr}
 8002f12:	1e43      	subs	r3, r0, #1
 8002f14:	440a      	add	r2, r1
 8002f16:	4291      	cmp	r1, r2
 8002f18:	d100      	bne.n	8002f1c <memcpy+0xc>
 8002f1a:	bd10      	pop	{r4, pc}
 8002f1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f24:	e7f7      	b.n	8002f16 <memcpy+0x6>

08002f26 <memset>:
 8002f26:	4402      	add	r2, r0
 8002f28:	4603      	mov	r3, r0
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d100      	bne.n	8002f30 <memset+0xa>
 8002f2e:	4770      	bx	lr
 8002f30:	f803 1b01 	strb.w	r1, [r3], #1
 8002f34:	e7f9      	b.n	8002f2a <memset+0x4>
	...

08002f38 <_free_r>:
 8002f38:	b538      	push	{r3, r4, r5, lr}
 8002f3a:	4605      	mov	r5, r0
 8002f3c:	2900      	cmp	r1, #0
 8002f3e:	d045      	beq.n	8002fcc <_free_r+0x94>
 8002f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f44:	1f0c      	subs	r4, r1, #4
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	bfb8      	it	lt
 8002f4a:	18e4      	addlt	r4, r4, r3
 8002f4c:	f000 f8f0 	bl	8003130 <__malloc_lock>
 8002f50:	4a1f      	ldr	r2, [pc, #124]	; (8002fd0 <_free_r+0x98>)
 8002f52:	6813      	ldr	r3, [r2, #0]
 8002f54:	4610      	mov	r0, r2
 8002f56:	b933      	cbnz	r3, 8002f66 <_free_r+0x2e>
 8002f58:	6063      	str	r3, [r4, #4]
 8002f5a:	6014      	str	r4, [r2, #0]
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f62:	f000 b8e6 	b.w	8003132 <__malloc_unlock>
 8002f66:	42a3      	cmp	r3, r4
 8002f68:	d90c      	bls.n	8002f84 <_free_r+0x4c>
 8002f6a:	6821      	ldr	r1, [r4, #0]
 8002f6c:	1862      	adds	r2, r4, r1
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	bf04      	itt	eq
 8002f72:	681a      	ldreq	r2, [r3, #0]
 8002f74:	685b      	ldreq	r3, [r3, #4]
 8002f76:	6063      	str	r3, [r4, #4]
 8002f78:	bf04      	itt	eq
 8002f7a:	1852      	addeq	r2, r2, r1
 8002f7c:	6022      	streq	r2, [r4, #0]
 8002f7e:	6004      	str	r4, [r0, #0]
 8002f80:	e7ec      	b.n	8002f5c <_free_r+0x24>
 8002f82:	4613      	mov	r3, r2
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	b10a      	cbz	r2, 8002f8c <_free_r+0x54>
 8002f88:	42a2      	cmp	r2, r4
 8002f8a:	d9fa      	bls.n	8002f82 <_free_r+0x4a>
 8002f8c:	6819      	ldr	r1, [r3, #0]
 8002f8e:	1858      	adds	r0, r3, r1
 8002f90:	42a0      	cmp	r0, r4
 8002f92:	d10b      	bne.n	8002fac <_free_r+0x74>
 8002f94:	6820      	ldr	r0, [r4, #0]
 8002f96:	4401      	add	r1, r0
 8002f98:	1858      	adds	r0, r3, r1
 8002f9a:	4282      	cmp	r2, r0
 8002f9c:	6019      	str	r1, [r3, #0]
 8002f9e:	d1dd      	bne.n	8002f5c <_free_r+0x24>
 8002fa0:	6810      	ldr	r0, [r2, #0]
 8002fa2:	6852      	ldr	r2, [r2, #4]
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	4401      	add	r1, r0
 8002fa8:	6019      	str	r1, [r3, #0]
 8002faa:	e7d7      	b.n	8002f5c <_free_r+0x24>
 8002fac:	d902      	bls.n	8002fb4 <_free_r+0x7c>
 8002fae:	230c      	movs	r3, #12
 8002fb0:	602b      	str	r3, [r5, #0]
 8002fb2:	e7d3      	b.n	8002f5c <_free_r+0x24>
 8002fb4:	6820      	ldr	r0, [r4, #0]
 8002fb6:	1821      	adds	r1, r4, r0
 8002fb8:	428a      	cmp	r2, r1
 8002fba:	bf04      	itt	eq
 8002fbc:	6811      	ldreq	r1, [r2, #0]
 8002fbe:	6852      	ldreq	r2, [r2, #4]
 8002fc0:	6062      	str	r2, [r4, #4]
 8002fc2:	bf04      	itt	eq
 8002fc4:	1809      	addeq	r1, r1, r0
 8002fc6:	6021      	streq	r1, [r4, #0]
 8002fc8:	605c      	str	r4, [r3, #4]
 8002fca:	e7c7      	b.n	8002f5c <_free_r+0x24>
 8002fcc:	bd38      	pop	{r3, r4, r5, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000098 	.word	0x20000098

08002fd4 <_malloc_r>:
 8002fd4:	b570      	push	{r4, r5, r6, lr}
 8002fd6:	1ccd      	adds	r5, r1, #3
 8002fd8:	f025 0503 	bic.w	r5, r5, #3
 8002fdc:	3508      	adds	r5, #8
 8002fde:	2d0c      	cmp	r5, #12
 8002fe0:	bf38      	it	cc
 8002fe2:	250c      	movcc	r5, #12
 8002fe4:	2d00      	cmp	r5, #0
 8002fe6:	4606      	mov	r6, r0
 8002fe8:	db01      	blt.n	8002fee <_malloc_r+0x1a>
 8002fea:	42a9      	cmp	r1, r5
 8002fec:	d903      	bls.n	8002ff6 <_malloc_r+0x22>
 8002fee:	230c      	movs	r3, #12
 8002ff0:	6033      	str	r3, [r6, #0]
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	bd70      	pop	{r4, r5, r6, pc}
 8002ff6:	f000 f89b 	bl	8003130 <__malloc_lock>
 8002ffa:	4a21      	ldr	r2, [pc, #132]	; (8003080 <_malloc_r+0xac>)
 8002ffc:	6814      	ldr	r4, [r2, #0]
 8002ffe:	4621      	mov	r1, r4
 8003000:	b991      	cbnz	r1, 8003028 <_malloc_r+0x54>
 8003002:	4c20      	ldr	r4, [pc, #128]	; (8003084 <_malloc_r+0xb0>)
 8003004:	6823      	ldr	r3, [r4, #0]
 8003006:	b91b      	cbnz	r3, 8003010 <_malloc_r+0x3c>
 8003008:	4630      	mov	r0, r6
 800300a:	f000 f83d 	bl	8003088 <_sbrk_r>
 800300e:	6020      	str	r0, [r4, #0]
 8003010:	4629      	mov	r1, r5
 8003012:	4630      	mov	r0, r6
 8003014:	f000 f838 	bl	8003088 <_sbrk_r>
 8003018:	1c43      	adds	r3, r0, #1
 800301a:	d124      	bne.n	8003066 <_malloc_r+0x92>
 800301c:	230c      	movs	r3, #12
 800301e:	6033      	str	r3, [r6, #0]
 8003020:	4630      	mov	r0, r6
 8003022:	f000 f886 	bl	8003132 <__malloc_unlock>
 8003026:	e7e4      	b.n	8002ff2 <_malloc_r+0x1e>
 8003028:	680b      	ldr	r3, [r1, #0]
 800302a:	1b5b      	subs	r3, r3, r5
 800302c:	d418      	bmi.n	8003060 <_malloc_r+0x8c>
 800302e:	2b0b      	cmp	r3, #11
 8003030:	d90f      	bls.n	8003052 <_malloc_r+0x7e>
 8003032:	600b      	str	r3, [r1, #0]
 8003034:	50cd      	str	r5, [r1, r3]
 8003036:	18cc      	adds	r4, r1, r3
 8003038:	4630      	mov	r0, r6
 800303a:	f000 f87a 	bl	8003132 <__malloc_unlock>
 800303e:	f104 000b 	add.w	r0, r4, #11
 8003042:	1d23      	adds	r3, r4, #4
 8003044:	f020 0007 	bic.w	r0, r0, #7
 8003048:	1ac3      	subs	r3, r0, r3
 800304a:	d0d3      	beq.n	8002ff4 <_malloc_r+0x20>
 800304c:	425a      	negs	r2, r3
 800304e:	50e2      	str	r2, [r4, r3]
 8003050:	e7d0      	b.n	8002ff4 <_malloc_r+0x20>
 8003052:	428c      	cmp	r4, r1
 8003054:	684b      	ldr	r3, [r1, #4]
 8003056:	bf16      	itet	ne
 8003058:	6063      	strne	r3, [r4, #4]
 800305a:	6013      	streq	r3, [r2, #0]
 800305c:	460c      	movne	r4, r1
 800305e:	e7eb      	b.n	8003038 <_malloc_r+0x64>
 8003060:	460c      	mov	r4, r1
 8003062:	6849      	ldr	r1, [r1, #4]
 8003064:	e7cc      	b.n	8003000 <_malloc_r+0x2c>
 8003066:	1cc4      	adds	r4, r0, #3
 8003068:	f024 0403 	bic.w	r4, r4, #3
 800306c:	42a0      	cmp	r0, r4
 800306e:	d005      	beq.n	800307c <_malloc_r+0xa8>
 8003070:	1a21      	subs	r1, r4, r0
 8003072:	4630      	mov	r0, r6
 8003074:	f000 f808 	bl	8003088 <_sbrk_r>
 8003078:	3001      	adds	r0, #1
 800307a:	d0cf      	beq.n	800301c <_malloc_r+0x48>
 800307c:	6025      	str	r5, [r4, #0]
 800307e:	e7db      	b.n	8003038 <_malloc_r+0x64>
 8003080:	20000098 	.word	0x20000098
 8003084:	2000009c 	.word	0x2000009c

08003088 <_sbrk_r>:
 8003088:	b538      	push	{r3, r4, r5, lr}
 800308a:	4c06      	ldr	r4, [pc, #24]	; (80030a4 <_sbrk_r+0x1c>)
 800308c:	2300      	movs	r3, #0
 800308e:	4605      	mov	r5, r0
 8003090:	4608      	mov	r0, r1
 8003092:	6023      	str	r3, [r4, #0]
 8003094:	f7fd ffa8 	bl	8000fe8 <_sbrk>
 8003098:	1c43      	adds	r3, r0, #1
 800309a:	d102      	bne.n	80030a2 <_sbrk_r+0x1a>
 800309c:	6823      	ldr	r3, [r4, #0]
 800309e:	b103      	cbz	r3, 80030a2 <_sbrk_r+0x1a>
 80030a0:	602b      	str	r3, [r5, #0]
 80030a2:	bd38      	pop	{r3, r4, r5, pc}
 80030a4:	200000f0 	.word	0x200000f0

080030a8 <_raise_r>:
 80030a8:	291f      	cmp	r1, #31
 80030aa:	b538      	push	{r3, r4, r5, lr}
 80030ac:	4604      	mov	r4, r0
 80030ae:	460d      	mov	r5, r1
 80030b0:	d904      	bls.n	80030bc <_raise_r+0x14>
 80030b2:	2316      	movs	r3, #22
 80030b4:	6003      	str	r3, [r0, #0]
 80030b6:	f04f 30ff 	mov.w	r0, #4294967295
 80030ba:	bd38      	pop	{r3, r4, r5, pc}
 80030bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80030be:	b112      	cbz	r2, 80030c6 <_raise_r+0x1e>
 80030c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80030c4:	b94b      	cbnz	r3, 80030da <_raise_r+0x32>
 80030c6:	4620      	mov	r0, r4
 80030c8:	f000 f830 	bl	800312c <_getpid_r>
 80030cc:	462a      	mov	r2, r5
 80030ce:	4601      	mov	r1, r0
 80030d0:	4620      	mov	r0, r4
 80030d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030d6:	f000 b817 	b.w	8003108 <_kill_r>
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d00a      	beq.n	80030f4 <_raise_r+0x4c>
 80030de:	1c59      	adds	r1, r3, #1
 80030e0:	d103      	bne.n	80030ea <_raise_r+0x42>
 80030e2:	2316      	movs	r3, #22
 80030e4:	6003      	str	r3, [r0, #0]
 80030e6:	2001      	movs	r0, #1
 80030e8:	e7e7      	b.n	80030ba <_raise_r+0x12>
 80030ea:	2400      	movs	r4, #0
 80030ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80030f0:	4628      	mov	r0, r5
 80030f2:	4798      	blx	r3
 80030f4:	2000      	movs	r0, #0
 80030f6:	e7e0      	b.n	80030ba <_raise_r+0x12>

080030f8 <raise>:
 80030f8:	4b02      	ldr	r3, [pc, #8]	; (8003104 <raise+0xc>)
 80030fa:	4601      	mov	r1, r0
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	f7ff bfd3 	b.w	80030a8 <_raise_r>
 8003102:	bf00      	nop
 8003104:	2000000c 	.word	0x2000000c

08003108 <_kill_r>:
 8003108:	b538      	push	{r3, r4, r5, lr}
 800310a:	4c07      	ldr	r4, [pc, #28]	; (8003128 <_kill_r+0x20>)
 800310c:	2300      	movs	r3, #0
 800310e:	4605      	mov	r5, r0
 8003110:	4608      	mov	r0, r1
 8003112:	4611      	mov	r1, r2
 8003114:	6023      	str	r3, [r4, #0]
 8003116:	f7fd ff4d 	bl	8000fb4 <_kill>
 800311a:	1c43      	adds	r3, r0, #1
 800311c:	d102      	bne.n	8003124 <_kill_r+0x1c>
 800311e:	6823      	ldr	r3, [r4, #0]
 8003120:	b103      	cbz	r3, 8003124 <_kill_r+0x1c>
 8003122:	602b      	str	r3, [r5, #0]
 8003124:	bd38      	pop	{r3, r4, r5, pc}
 8003126:	bf00      	nop
 8003128:	200000f0 	.word	0x200000f0

0800312c <_getpid_r>:
 800312c:	f7fd bf3a 	b.w	8000fa4 <_getpid>

08003130 <__malloc_lock>:
 8003130:	4770      	bx	lr

08003132 <__malloc_unlock>:
 8003132:	4770      	bx	lr

08003134 <_init>:
 8003134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003136:	bf00      	nop
 8003138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313a:	bc08      	pop	{r3}
 800313c:	469e      	mov	lr, r3
 800313e:	4770      	bx	lr

08003140 <_fini>:
 8003140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003142:	bf00      	nop
 8003144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003146:	bc08      	pop	{r3}
 8003148:	469e      	mov	lr, r3
 800314a:	4770      	bx	lr
