
GrafikTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f14  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800309c  0800309c  0001309c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030cc  080030cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080030cc  080030cc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030cc  080030cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080030cc  080030cc  000130cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030d4  080030d4  000130d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002074  2000000c  080030e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002080  080030e4  00022080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002357d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000332d  00000000  00000000  000435b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000948  00000000  00000000  000468e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000840  00000000  00000000  00047230  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bf6a  00000000  00000000  00047a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c2c7  00000000  00000000  000639da  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f291  00000000  00000000  0006fca1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fef32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002444  00000000  00000000  000fefb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003084 	.word	0x08003084

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003084 	.word	0x08003084

080001c8 <_ZN7AppMainC1Ev>:

//#include<iostream>
#include<string> // for string class
using namespace std;

AppMain::AppMain() {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4618      	mov	r0, r3
 80001d4:	f000 fc71 	bl	8000aba <_ZN9LCDDriverC1Ev>
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	3304      	adds	r3, #4
 80001dc:	687a      	ldr	r2, [r7, #4]
 80001de:	4611      	mov	r1, r2
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 f87e 	bl	80002e2 <_ZN10ImgControlC1EP9LCDDriver>
	// TODO Auto-generated constructor stub

}
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4618      	mov	r0, r3
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}

080001f0 <_ZN7AppMain4mainEv>:

void AppMain::main(){
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b086      	sub	sp, #24
 80001f4:	af02      	add	r7, sp, #8
 80001f6:	6078      	str	r0, [r7, #4]

	imgControl.initImgControl();
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	3304      	adds	r3, #4
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 f890 	bl	8000322 <_ZN10ImgControl14initImgControlEv>
	lcdDriver.WriteText("Press F1 to enter BIOS...");

	lcdDriver.WriteRectangle(140, 50, 51, 30, 1);
	*/
	while(1){
		for(int i = 0; i<98;i++){
 8000202:	2300      	movs	r3, #0
 8000204:	60fb      	str	r3, [r7, #12]
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	2b61      	cmp	r3, #97	; 0x61
 800020a:	dc32      	bgt.n	8000272 <_ZN7AppMain4mainEv+0x82>
			imgControl.writeRectangle(i, 20, 30, 15, 1);
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	1d18      	adds	r0, r3, #4
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	b2d9      	uxtb	r1, r3
 8000214:	2301      	movs	r3, #1
 8000216:	9301      	str	r3, [sp, #4]
 8000218:	230f      	movs	r3, #15
 800021a:	9300      	str	r3, [sp, #0]
 800021c:	231e      	movs	r3, #30
 800021e:	2214      	movs	r2, #20
 8000220:	f000 f9de 	bl	80005e0 <_ZN10ImgControl14writeRectangleEhhhhh>
			imgControl.writeRectangle(i+100, i, 20, 10, 1);
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	1d18      	adds	r0, r3, #4
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	b2db      	uxtb	r3, r3
 800022c:	3364      	adds	r3, #100	; 0x64
 800022e:	b2d9      	uxtb	r1, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	b2da      	uxtb	r2, r3
 8000234:	2301      	movs	r3, #1
 8000236:	9301      	str	r3, [sp, #4]
 8000238:	230a      	movs	r3, #10
 800023a:	9300      	str	r3, [sp, #0]
 800023c:	2314      	movs	r3, #20
 800023e:	f000 f9cf 	bl	80005e0 <_ZN10ImgControl14writeRectangleEhhhhh>
			imgControl.writeRectangle(i+40, i, 10, 25, 1);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	1d18      	adds	r0, r3, #4
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	b2db      	uxtb	r3, r3
 800024a:	3328      	adds	r3, #40	; 0x28
 800024c:	b2d9      	uxtb	r1, r3
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	b2da      	uxtb	r2, r3
 8000252:	2301      	movs	r3, #1
 8000254:	9301      	str	r3, [sp, #4]
 8000256:	2319      	movs	r3, #25
 8000258:	9300      	str	r3, [sp, #0]
 800025a:	230a      	movs	r3, #10
 800025c:	f000 f9c0 	bl	80005e0 <_ZN10ImgControl14writeRectangleEhhhhh>
			imgControl.writeScreenMirror();
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	3304      	adds	r3, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f000 f869 	bl	800033c <_ZN10ImgControl17writeScreenMirrorEv>
		for(int i = 0; i<98;i++){
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	3301      	adds	r3, #1
 800026e:	60fb      	str	r3, [r7, #12]
 8000270:	e7c9      	b.n	8000206 <_ZN7AppMain4mainEv+0x16>
//			lcdDriver.WriteRectangle(200, i, 30, 20, 0);
//			lcdDriver.WriteRectangle(i, 0, 30, 20, 0);
			//lcdDriver.ClearDisplay();
		}

		for(int i = 98; i>0;i--){
 8000272:	2362      	movs	r3, #98	; 0x62
 8000274:	60bb      	str	r3, [r7, #8]
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	2b00      	cmp	r3, #0
 800027a:	ddc2      	ble.n	8000202 <_ZN7AppMain4mainEv+0x12>
			imgControl.writeRectangle(i, 20, 30, 15, 1);
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	1d18      	adds	r0, r3, #4
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	b2d9      	uxtb	r1, r3
 8000284:	2301      	movs	r3, #1
 8000286:	9301      	str	r3, [sp, #4]
 8000288:	230f      	movs	r3, #15
 800028a:	9300      	str	r3, [sp, #0]
 800028c:	231e      	movs	r3, #30
 800028e:	2214      	movs	r2, #20
 8000290:	f000 f9a6 	bl	80005e0 <_ZN10ImgControl14writeRectangleEhhhhh>
			imgControl.writeRectangle(i+100, i, 20, 10, 1);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	1d18      	adds	r0, r3, #4
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	b2db      	uxtb	r3, r3
 800029c:	3364      	adds	r3, #100	; 0x64
 800029e:	b2d9      	uxtb	r1, r3
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	b2da      	uxtb	r2, r3
 80002a4:	2301      	movs	r3, #1
 80002a6:	9301      	str	r3, [sp, #4]
 80002a8:	230a      	movs	r3, #10
 80002aa:	9300      	str	r3, [sp, #0]
 80002ac:	2314      	movs	r3, #20
 80002ae:	f000 f997 	bl	80005e0 <_ZN10ImgControl14writeRectangleEhhhhh>
			imgControl.writeRectangle(i+40, i, 10, 25, 1);
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	1d18      	adds	r0, r3, #4
 80002b6:	68bb      	ldr	r3, [r7, #8]
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	3328      	adds	r3, #40	; 0x28
 80002bc:	b2d9      	uxtb	r1, r3
 80002be:	68bb      	ldr	r3, [r7, #8]
 80002c0:	b2da      	uxtb	r2, r3
 80002c2:	2301      	movs	r3, #1
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2319      	movs	r3, #25
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	230a      	movs	r3, #10
 80002cc:	f000 f988 	bl	80005e0 <_ZN10ImgControl14writeRectangleEhhhhh>
			imgControl.writeScreenMirror();
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	3304      	adds	r3, #4
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 f831 	bl	800033c <_ZN10ImgControl17writeScreenMirrorEv>
		for(int i = 98; i>0;i--){
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	3b01      	subs	r3, #1
 80002de:	60bb      	str	r3, [r7, #8]
 80002e0:	e7c9      	b.n	8000276 <_ZN7AppMain4mainEv+0x86>

080002e2 <_ZN10ImgControlC1EP9LCDDriver>:
using namespace std;




ImgControl::ImgControl(LCDDriver *lcdDriver) {
 80002e2:	b580      	push	{r7, lr}
 80002e4:	b082      	sub	sp, #8
 80002e6:	af00      	add	r7, sp, #0
 80002e8:	6078      	str	r0, [r7, #4]
 80002ea:	6039      	str	r1, [r7, #0]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	3304      	adds	r3, #4
 80002f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f002 febc 	bl	8003074 <memset>
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000302:	3304      	adds	r3, #4
 8000304:	4618      	mov	r0, r3
 8000306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800030a:	461a      	mov	r2, r3
 800030c:	2100      	movs	r1, #0
 800030e:	f002 feb1 	bl	8003074 <memset>
	this->lcdDriver = lcdDriver;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	683a      	ldr	r2, [r7, #0]
 8000316:	601a      	str	r2, [r3, #0]
}
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4618      	mov	r0, r3
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}

08000322 <_ZN10ImgControl14initImgControlEv>:


void ImgControl::initImgControl(void){
 8000322:	b580      	push	{r7, lr}
 8000324:	b082      	sub	sp, #8
 8000326:	af00      	add	r7, sp, #0
 8000328:	6078      	str	r0, [r7, #4]
	this->lcdDriver->InitLCD();
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4618      	mov	r0, r3
 8000330:	f000 fbce 	bl	8000ad0 <_ZN9LCDDriver7InitLCDEv>
}
 8000334:	bf00      	nop
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}

0800033c <_ZN10ImgControl17writeScreenMirrorEv>:




void ImgControl::writeScreenMirror(){
 800033c:	b5b0      	push	{r4, r5, r7, lr}
 800033e:	b08e      	sub	sp, #56	; 0x38
 8000340:	af00      	add	r7, sp, #0
 8000342:	6278      	str	r0, [r7, #36]	; 0x24
	//lcdDriver->writeScreen(screenMirror);
	for(uint8_t copy = 0; copy < LCD_HEIGHT; copy++){
 8000344:	2300      	movs	r3, #0
 8000346:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800034a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800034e:	2b00      	cmp	r3, #0
 8000350:	db25      	blt.n	800039e <_ZN10ImgControl17writeScreenMirrorEv+0x62>
		screenMirrorLast[copy] = (screenMirrorLast[copy] ^ screenMirror[copy]);
 8000352:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000356:	3380      	adds	r3, #128	; 0x80
 8000358:	015b      	lsls	r3, r3, #5
 800035a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800035c:	4413      	add	r3, r2
 800035e:	1d19      	adds	r1, r3, #4
 8000360:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000364:	015b      	lsls	r3, r3, #5
 8000366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000368:	4413      	add	r3, r2
 800036a:	1d18      	adds	r0, r3, #4
 800036c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000372:	3380      	adds	r3, #128	; 0x80
 8000374:	015b      	lsls	r3, r3, #5
 8000376:	18d4      	adds	r4, r2, r3
 8000378:	463b      	mov	r3, r7
 800037a:	4602      	mov	r2, r0
 800037c:	4618      	mov	r0, r3
 800037e:	f000 f96a 	bl	8000656 <_ZSteoILj240EESt6bitsetIXT_EERKS1_S3_>
 8000382:	3404      	adds	r4, #4
 8000384:	463d      	mov	r5, r7
 8000386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800038a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800038e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(uint8_t copy = 0; copy < LCD_HEIGHT; copy++){
 8000392:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000396:	3301      	adds	r3, #1
 8000398:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800039c:	e7d5      	b.n	800034a <_ZN10ImgControl17writeScreenMirrorEv+0xe>
	}

	lcdDriver->WriteData_16bit(LCD_setAddressPointer, LCD_GRAPHIC_START_ADDR);				//set Address pointer to Graphic home Address
 800039e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003a6:	2124      	movs	r1, #36	; 0x24
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 fd08 	bl	8000dbe <_ZN9LCDDriver15WriteData_16bitEht>
	uint8_t sendByte = 0;
 80003ae:	2300      	movs	r3, #0
 80003b0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint16_t addr = LCD_GRAPHIC_START_ADDR;
 80003b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003b8:	86bb      	strh	r3, [r7, #52]	; 0x34


	for(uint8_t rowCounter = 0;rowCounter < LCD_HEIGHT; rowCounter++){
 80003ba:	2300      	movs	r3, #0
 80003bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80003c0:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	db77      	blt.n	80004b8 <_ZN10ImgControl17writeScreenMirrorEv+0x17c>

		if(screenMirrorLast[rowCounter].any()){
 80003c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80003cc:	3380      	adds	r3, #128	; 0x80
 80003ce:	015b      	lsls	r3, r3, #5
 80003d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003d2:	4413      	add	r3, r2
 80003d4:	3304      	adds	r3, #4
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 f956 	bl	8000688 <_ZNKSt6bitsetILj240EE3anyEv>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d061      	beq.n	80004a6 <_ZN10ImgControl17writeScreenMirrorEv+0x16a>




			lcdDriver->WriteData_16bit(LCD_setAddressPointer, addr);				//set Address pointer to Graphic home Address
 80003e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80003e8:	2124      	movs	r1, #36	; 0x24
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 fce7 	bl	8000dbe <_ZN9LCDDriver15WriteData_16bitEht>
			for(uint8_t columnCounter = 0; columnCounter < 40; columnCounter++){
 80003f0:	2300      	movs	r3, #0
 80003f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80003f6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80003fa:	2b27      	cmp	r3, #39	; 0x27
 80003fc:	d84f      	bhi.n	800049e <_ZN10ImgControl17writeScreenMirrorEv+0x162>
				sendByte = 0;
 80003fe:	2300      	movs	r3, #0
 8000400:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				for(uint8_t bitCounter = 0; bitCounter<6; bitCounter++){
 8000404:	2300      	movs	r3, #0
 8000406:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800040a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800040e:	2b05      	cmp	r3, #5
 8000410:	d832      	bhi.n	8000478 <_ZN10ImgControl17writeScreenMirrorEv+0x13c>
					sendByte |= screenMirror[rowCounter][0];
 8000412:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000416:	015b      	lsls	r3, r3, #5
 8000418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800041a:	4413      	add	r3, r2
 800041c:	1d19      	adds	r1, r3, #4
 800041e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000422:	2200      	movs	r2, #0
 8000424:	4618      	mov	r0, r3
 8000426:	f000 f93c 	bl	80006a2 <_ZNSt6bitsetILj240EEixEj>
 800042a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800042e:	4618      	mov	r0, r3
 8000430:	f000 f951 	bl	80006d6 <_ZNKSt6bitsetILj240EE9referencecvbEv>
 8000434:	4603      	mov	r3, r0
 8000436:	b25a      	sxtb	r2, r3
 8000438:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800043c:	4313      	orrs	r3, r2
 800043e:	b25b      	sxtb	r3, r3
 8000440:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000444:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000448:	4618      	mov	r0, r3
 800044a:	f000 f939 	bl	80006c0 <_ZNSt6bitsetILj240EE9referenceD1Ev>
					sendByte<<=1;
 800044e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000452:	005b      	lsls	r3, r3, #1
 8000454:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					screenMirror[rowCounter]>>=1;
 8000458:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800045c:	015b      	lsls	r3, r3, #5
 800045e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000460:	4413      	add	r3, r2
 8000462:	3304      	adds	r3, #4
 8000464:	2101      	movs	r1, #1
 8000466:	4618      	mov	r0, r3
 8000468:	f000 f94c 	bl	8000704 <_ZNSt6bitsetILj240EErSEj>
				for(uint8_t bitCounter = 0; bitCounter<6; bitCounter++){
 800046c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000470:	3301      	adds	r3, #1
 8000472:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8000476:	e7c8      	b.n	800040a <_ZN10ImgControl17writeScreenMirrorEv+0xce>
				}
				sendByte>>=1;
 8000478:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800047c:	105b      	asrs	r3, r3, #1
 800047e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

				lcdDriver->WriteData_8bit(LCD_dataWriteAndIncrementADP,sendByte);
 8000482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800048a:	21c0      	movs	r1, #192	; 0xc0
 800048c:	4618      	mov	r0, r3
 800048e:	f000 fc5f 	bl	8000d50 <_ZN9LCDDriver14WriteData_8bitEhh>
			for(uint8_t columnCounter = 0; columnCounter < 40; columnCounter++){
 8000492:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000496:	3301      	adds	r3, #1
 8000498:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800049c:	e7ab      	b.n	80003f6 <_ZN10ImgControl17writeScreenMirrorEv+0xba>
			}



			addr = addr + 40;
 800049e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80004a0:	3328      	adds	r3, #40	; 0x28
 80004a2:	86bb      	strh	r3, [r7, #52]	; 0x34
 80004a4:	e002      	b.n	80004ac <_ZN10ImgControl17writeScreenMirrorEv+0x170>

		}else{
			addr = addr + 40;
 80004a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80004a8:	3328      	adds	r3, #40	; 0x28
 80004aa:	86bb      	strh	r3, [r7, #52]	; 0x34
	for(uint8_t rowCounter = 0;rowCounter < LCD_HEIGHT; rowCounter++){
 80004ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80004b0:	3301      	adds	r3, #1
 80004b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80004b6:	e783      	b.n	80003c0 <_ZN10ImgControl17writeScreenMirrorEv+0x84>
		}

	}

	for(uint8_t copy = 0; copy < LCD_HEIGHT; copy++){
 80004b8:	2300      	movs	r3, #0
 80004ba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80004be:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	db21      	blt.n	800050a <_ZN10ImgControl17writeScreenMirrorEv+0x1ce>
		screenMirrorLast[copy] = screenMirror[copy];
 80004c6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80004ca:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80004ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80004d0:	3280      	adds	r2, #128	; 0x80
 80004d2:	0152      	lsls	r2, r2, #5
 80004d4:	440a      	add	r2, r1
 80004d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80004d8:	015b      	lsls	r3, r3, #5
 80004da:	440b      	add	r3, r1
 80004dc:	1d14      	adds	r4, r2, #4
 80004de:	1d1d      	adds	r5, r3, #4
 80004e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80004e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		screenMirror[copy].reset();
 80004ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80004f0:	015b      	lsls	r3, r3, #5
 80004f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004f4:	4413      	add	r3, r2
 80004f6:	3304      	adds	r3, #4
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 f922 	bl	8000742 <_ZNSt6bitsetILj240EE5resetEv>
	for(uint8_t copy = 0; copy < LCD_HEIGHT; copy++){
 80004fe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000502:	3301      	adds	r3, #1
 8000504:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8000508:	e7d9      	b.n	80004be <_ZN10ImgControl17writeScreenMirrorEv+0x182>
	}
}
 800050a:	bf00      	nop
 800050c:	3738      	adds	r7, #56	; 0x38
 800050e:	46bd      	mov	sp, r7
 8000510:	bdb0      	pop	{r4, r5, r7, pc}

08000512 <_ZN10ImgControl10writeXLineEhhhh>:


void ImgControl::writeXLine(uint8_t startX, uint8_t startY, uint8_t width, uint8_t lineThickness){
 8000512:	b580      	push	{r7, lr}
 8000514:	b086      	sub	sp, #24
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
 800051a:	4608      	mov	r0, r1
 800051c:	4611      	mov	r1, r2
 800051e:	461a      	mov	r2, r3
 8000520:	4603      	mov	r3, r0
 8000522:	70fb      	strb	r3, [r7, #3]
 8000524:	460b      	mov	r3, r1
 8000526:	70bb      	strb	r3, [r7, #2]
 8000528:	4613      	mov	r3, r2
 800052a:	707b      	strb	r3, [r7, #1]
	for(uint8_t i = 0; i<width; i++){
 800052c:	2300      	movs	r3, #0
 800052e:	75fb      	strb	r3, [r7, #23]
 8000530:	7dfa      	ldrb	r2, [r7, #23]
 8000532:	787b      	ldrb	r3, [r7, #1]
 8000534:	429a      	cmp	r2, r3
 8000536:	d21c      	bcs.n	8000572 <_ZN10ImgControl10writeXLineEhhhh+0x60>
		screenMirror[startY][startX+i] = 1;
 8000538:	78bb      	ldrb	r3, [r7, #2]
 800053a:	015b      	lsls	r3, r3, #5
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	4413      	add	r3, r2
 8000540:	1d19      	adds	r1, r3, #4
 8000542:	78fa      	ldrb	r2, [r7, #3]
 8000544:	7dfb      	ldrb	r3, [r7, #23]
 8000546:	4413      	add	r3, r2
 8000548:	461a      	mov	r2, r3
 800054a:	f107 030c 	add.w	r3, r7, #12
 800054e:	4618      	mov	r0, r3
 8000550:	f000 f8a7 	bl	80006a2 <_ZNSt6bitsetILj240EEixEj>
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2101      	movs	r1, #1
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f8fe 	bl	800075c <_ZNSt6bitsetILj240EE9referenceaSEb>
 8000560:	f107 030c 	add.w	r3, r7, #12
 8000564:	4618      	mov	r0, r3
 8000566:	f000 f8ab 	bl	80006c0 <_ZNSt6bitsetILj240EE9referenceD1Ev>
	for(uint8_t i = 0; i<width; i++){
 800056a:	7dfb      	ldrb	r3, [r7, #23]
 800056c:	3301      	adds	r3, #1
 800056e:	75fb      	strb	r3, [r7, #23]
 8000570:	e7de      	b.n	8000530 <_ZN10ImgControl10writeXLineEhhhh+0x1e>
	}

}
 8000572:	bf00      	nop
 8000574:	3718      	adds	r7, #24
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <_ZN10ImgControl10writeYLineEhhhh>:


void ImgControl::writeYLine(uint8_t startX, uint8_t startY, uint8_t height, uint8_t lineThickness){
 800057a:	b580      	push	{r7, lr}
 800057c:	b086      	sub	sp, #24
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
 8000582:	4608      	mov	r0, r1
 8000584:	4611      	mov	r1, r2
 8000586:	461a      	mov	r2, r3
 8000588:	4603      	mov	r3, r0
 800058a:	70fb      	strb	r3, [r7, #3]
 800058c:	460b      	mov	r3, r1
 800058e:	70bb      	strb	r3, [r7, #2]
 8000590:	4613      	mov	r3, r2
 8000592:	707b      	strb	r3, [r7, #1]
	for(uint8_t i = 0; i<height; i++){
 8000594:	2300      	movs	r3, #0
 8000596:	75fb      	strb	r3, [r7, #23]
 8000598:	7dfa      	ldrb	r2, [r7, #23]
 800059a:	787b      	ldrb	r3, [r7, #1]
 800059c:	429a      	cmp	r2, r3
 800059e:	d21b      	bcs.n	80005d8 <_ZN10ImgControl10writeYLineEhhhh+0x5e>
		screenMirror[startY+i][startX] = 1;
 80005a0:	78ba      	ldrb	r2, [r7, #2]
 80005a2:	7dfb      	ldrb	r3, [r7, #23]
 80005a4:	4413      	add	r3, r2
 80005a6:	015b      	lsls	r3, r3, #5
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4413      	add	r3, r2
 80005ac:	1d19      	adds	r1, r3, #4
 80005ae:	78fa      	ldrb	r2, [r7, #3]
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f874 	bl	80006a2 <_ZNSt6bitsetILj240EEixEj>
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	2101      	movs	r1, #1
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f8cb 	bl	800075c <_ZNSt6bitsetILj240EE9referenceaSEb>
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f878 	bl	80006c0 <_ZNSt6bitsetILj240EE9referenceD1Ev>
	for(uint8_t i = 0; i<height; i++){
 80005d0:	7dfb      	ldrb	r3, [r7, #23]
 80005d2:	3301      	adds	r3, #1
 80005d4:	75fb      	strb	r3, [r7, #23]
 80005d6:	e7df      	b.n	8000598 <_ZN10ImgControl10writeYLineEhhhh+0x1e>
	}
}
 80005d8:	bf00      	nop
 80005da:	3718      	adds	r7, #24
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <_ZN10ImgControl14writeRectangleEhhhhh>:


void ImgControl::writeRectangle(uint8_t startX, uint8_t startY, uint8_t width,uint8_t height, uint8_t lineThickness){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	4608      	mov	r0, r1
 80005ea:	4611      	mov	r1, r2
 80005ec:	461a      	mov	r2, r3
 80005ee:	4603      	mov	r3, r0
 80005f0:	70fb      	strb	r3, [r7, #3]
 80005f2:	460b      	mov	r3, r1
 80005f4:	70bb      	strb	r3, [r7, #2]
 80005f6:	4613      	mov	r3, r2
 80005f8:	707b      	strb	r3, [r7, #1]
	writeXLine(startX, startY, width, lineThickness);
 80005fa:	7878      	ldrb	r0, [r7, #1]
 80005fc:	78ba      	ldrb	r2, [r7, #2]
 80005fe:	78f9      	ldrb	r1, [r7, #3]
 8000600:	7d3b      	ldrb	r3, [r7, #20]
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	4603      	mov	r3, r0
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f7ff ff83 	bl	8000512 <_ZN10ImgControl10writeXLineEhhhh>
	writeYLine(startX, startY, height, lineThickness);
 800060c:	7c38      	ldrb	r0, [r7, #16]
 800060e:	78ba      	ldrb	r2, [r7, #2]
 8000610:	78f9      	ldrb	r1, [r7, #3]
 8000612:	7d3b      	ldrb	r3, [r7, #20]
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	4603      	mov	r3, r0
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f7ff ffae 	bl	800057a <_ZN10ImgControl10writeYLineEhhhh>
	writeXLine(startX, startY+height, width, lineThickness);
 800061e:	78ba      	ldrb	r2, [r7, #2]
 8000620:	7c3b      	ldrb	r3, [r7, #16]
 8000622:	4413      	add	r3, r2
 8000624:	b2da      	uxtb	r2, r3
 8000626:	7878      	ldrb	r0, [r7, #1]
 8000628:	78f9      	ldrb	r1, [r7, #3]
 800062a:	7d3b      	ldrb	r3, [r7, #20]
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	4603      	mov	r3, r0
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f7ff ff6e 	bl	8000512 <_ZN10ImgControl10writeXLineEhhhh>
	writeYLine(startX+width, startY, height, lineThickness);
 8000636:	78fa      	ldrb	r2, [r7, #3]
 8000638:	787b      	ldrb	r3, [r7, #1]
 800063a:	4413      	add	r3, r2
 800063c:	b2d9      	uxtb	r1, r3
 800063e:	7c38      	ldrb	r0, [r7, #16]
 8000640:	78ba      	ldrb	r2, [r7, #2]
 8000642:	7d3b      	ldrb	r3, [r7, #20]
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	4603      	mov	r3, r0
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff ff96 	bl	800057a <_ZN10ImgControl10writeYLineEhhhh>

}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <_ZSteoILj240EESt6bitsetIXT_EERKS1_S3_>:
      return __result;
    }

  template <size_t _Nb>
    inline bitset<_Nb>
    operator^(const bitset<_Nb>& __x, const bitset<_Nb>& __y) _GLIBCXX_NOEXCEPT
 8000656:	b5b0      	push	{r4, r5, r7, lr}
 8000658:	b084      	sub	sp, #16
 800065a:	af00      	add	r7, sp, #0
 800065c:	60f8      	str	r0, [r7, #12]
 800065e:	60b9      	str	r1, [r7, #8]
 8000660:	607a      	str	r2, [r7, #4]
    {
      bitset<_Nb> __result(__x);
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	4614      	mov	r4, r2
 8000668:	461d      	mov	r5, r3
 800066a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000672:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      __result ^= __y;
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	68f8      	ldr	r0, [r7, #12]
 800067a:	f000 f899 	bl	80007b0 <_ZNSt6bitsetILj240EEeOERKS0_>
      return __result;
 800067e:	bf00      	nop
    }
 8000680:	68f8      	ldr	r0, [r7, #12]
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bdb0      	pop	{r4, r5, r7, pc}

08000688 <_ZNKSt6bitsetILj240EE3anyEv>:
      any() const _GLIBCXX_NOEXCEPT
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
      { return this->_M_is_any(); }
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4618      	mov	r0, r3
 8000694:	f000 f89c 	bl	80007d0 <_ZNKSt12_Base_bitsetILj8EE9_M_is_anyEv>
 8000698:	4603      	mov	r3, r0
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <_ZNSt6bitsetILj240EEixEj>:
      operator[](size_t __position)
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b084      	sub	sp, #16
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	60f8      	str	r0, [r7, #12]
 80006aa:	60b9      	str	r1, [r7, #8]
 80006ac:	607a      	str	r2, [r7, #4]
      { return reference(*this, __position); }
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	68b9      	ldr	r1, [r7, #8]
 80006b2:	68f8      	ldr	r0, [r7, #12]
 80006b4:	f000 f8a8 	bl	8000808 <_ZNSt6bitsetILj240EE9referenceC1ERS0_j>
 80006b8:	68f8      	ldr	r0, [r7, #12]
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <_ZNSt6bitsetILj240EE9referenceD1Ev>:
	~reference() _GLIBCXX_NOEXCEPT
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	{ }
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4618      	mov	r0, r3
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <_ZNKSt6bitsetILj240EE9referencecvbEv>:
	operator bool() const _GLIBCXX_NOEXCEPT
 80006d6:	b590      	push	{r4, r7, lr}
 80006d8:	b083      	sub	sp, #12
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
	{ return (*(_M_wp) & _Base::_S_maskbit(_M_bpos)) != 0; }
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	681c      	ldr	r4, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 f8b3 	bl	8000854 <_ZNSt12_Base_bitsetILj8EE10_S_maskbitEj>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4023      	ands	r3, r4
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	bf14      	ite	ne
 80006f6:	2301      	movne	r3, #1
 80006f8:	2300      	moveq	r3, #0
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	4618      	mov	r0, r3
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	bd90      	pop	{r4, r7, pc}

08000704 <_ZNSt6bitsetILj240EErSEj>:
      operator>>=(size_t __position) _GLIBCXX_NOEXCEPT
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
	if (__builtin_expect(__position < _Nb, 1))
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	2bef      	cmp	r3, #239	; 0xef
 8000712:	bf94      	ite	ls
 8000714:	2301      	movls	r3, #1
 8000716:	2300      	movhi	r3, #0
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d008      	beq.n	8000730 <_ZNSt6bitsetILj240EErSEj+0x2c>
	    this->_M_do_right_shift(__position);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6839      	ldr	r1, [r7, #0]
 8000722:	4618      	mov	r0, r3
 8000724:	f000 f8a4 	bl	8000870 <_ZNSt12_Base_bitsetILj8EE17_M_do_right_shiftEj>
	    this->_M_do_sanitize();
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f000 f912 	bl	8000952 <_ZNSt6bitsetILj240EE14_M_do_sanitizeEv>
 800072e:	e003      	b.n	8000738 <_ZNSt6bitsetILj240EErSEj+0x34>
	  this->_M_do_reset();
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4618      	mov	r0, r3
 8000734:	f000 f91d 	bl	8000972 <_ZNSt12_Base_bitsetILj8EE11_M_do_resetEv>
	return *this;
 8000738:	687b      	ldr	r3, [r7, #4]
      }
 800073a:	4618      	mov	r0, r3
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <_ZNSt6bitsetILj240EE5resetEv>:
      reset() _GLIBCXX_NOEXCEPT
 8000742:	b580      	push	{r7, lr}
 8000744:	b082      	sub	sp, #8
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
	this->_M_do_reset();
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4618      	mov	r0, r3
 800074e:	f000 f910 	bl	8000972 <_ZNSt12_Base_bitsetILj8EE11_M_do_resetEv>
	return *this;
 8000752:	687b      	ldr	r3, [r7, #4]
      }
 8000754:	4618      	mov	r0, r3
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <_ZNSt6bitsetILj240EE9referenceaSEb>:
	operator=(bool __x) _GLIBCXX_NOEXCEPT
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	70fb      	strb	r3, [r7, #3]
	  if (__x)
 8000768:	78fb      	ldrb	r3, [r7, #3]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d00d      	beq.n	800078a <_ZNSt6bitsetILj240EE9referenceaSEb+0x2e>
	    *_M_wp |= _Base::_S_maskbit(_M_bpos);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	4618      	mov	r0, r3
 8000774:	f000 f86e 	bl	8000854 <_ZNSt12_Base_bitsetILj8EE10_S_maskbitEj>
 8000778:	4601      	mov	r1, r0
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	430a      	orrs	r2, r1
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	e00d      	b.n	80007a6 <_ZNSt6bitsetILj240EE9referenceaSEb+0x4a>
	    *_M_wp &= ~_Base::_S_maskbit(_M_bpos);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f860 	bl	8000854 <_ZNSt12_Base_bitsetILj8EE10_S_maskbitEj>
 8000794:	4603      	mov	r3, r0
 8000796:	43d9      	mvns	r1, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	400a      	ands	r2, r1
 80007a4:	601a      	str	r2, [r3, #0]
	  return *this;
 80007a6:	687b      	ldr	r3, [r7, #4]
	}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <_ZNSt6bitsetILj240EEeOERKS0_>:
      operator^=(const bitset<_Nb>& __rhs) _GLIBCXX_NOEXCEPT
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
	this->_M_do_xor(__rhs);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	683a      	ldr	r2, [r7, #0]
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 f8e5 	bl	8000990 <_ZNSt12_Base_bitsetILj8EE9_M_do_xorERKS0_>
	return *this;
 80007c6:	687b      	ldr	r3, [r7, #4]
      }
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <_ZNKSt12_Base_bitsetILj8EE9_M_is_anyEv>:
      _M_is_any() const _GLIBCXX_NOEXCEPT
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	for (size_t __i = 0; __i < _Nw; __i++)
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	2b07      	cmp	r3, #7
 80007e0:	d80b      	bhi.n	80007fa <_ZNKSt12_Base_bitsetILj8EE9_M_is_anyEv+0x2a>
	  if (_M_w[__i] != static_cast<_WordT>(0))
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	68fa      	ldr	r2, [r7, #12]
 80007e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <_ZNKSt12_Base_bitsetILj8EE9_M_is_anyEv+0x22>
	    return true;
 80007ee:	2301      	movs	r3, #1
 80007f0:	e004      	b.n	80007fc <_ZNKSt12_Base_bitsetILj8EE9_M_is_anyEv+0x2c>
	for (size_t __i = 0; __i < _Nw; __i++)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	3301      	adds	r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	e7f0      	b.n	80007dc <_ZNKSt12_Base_bitsetILj8EE9_M_is_anyEv+0xc>
	return false;
 80007fa:	2300      	movs	r3, #0
      }
 80007fc:	4618      	mov	r0, r3
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <_ZNSt6bitsetILj240EE9referenceC1ERS0_j>:
	reference(bitset& __b, size_t __pos) _GLIBCXX_NOEXCEPT
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
	  _M_wp = &__b._M_getword(__pos);
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	4618      	mov	r0, r3
 800081a:	f000 f8db 	bl	80009d4 <_ZNSt12_Base_bitsetILj8EE10_M_getwordEj>
 800081e:	4602      	mov	r2, r0
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	601a      	str	r2, [r3, #0]
	  _M_bpos = _Base::_S_whichbit(__pos);
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f000 f808 	bl	800083a <_ZNSt12_Base_bitsetILj8EE11_S_whichbitEj>
 800082a:	4602      	mov	r2, r0
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	605a      	str	r2, [r3, #4]
	}
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	4618      	mov	r0, r3
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <_ZNSt12_Base_bitsetILj8EE11_S_whichbitEj>:
      _S_whichbit(size_t __pos) _GLIBCXX_NOEXCEPT
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
      { return __pos % _GLIBCXX_BITSET_BITS_PER_WORD; }
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f003 031f 	and.w	r3, r3, #31
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <_ZNSt12_Base_bitsetILj8EE10_S_maskbitEj>:
      _S_maskbit(size_t __pos) _GLIBCXX_NOEXCEPT
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
      { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ffec 	bl	800083a <_ZNSt12_Base_bitsetILj8EE11_S_whichbitEj>
 8000862:	4602      	mov	r2, r0
 8000864:	2301      	movs	r3, #1
 8000866:	4093      	lsls	r3, r2
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <_ZNSt12_Base_bitsetILj8EE17_M_do_right_shiftEj>:
    _Base_bitset<_Nw>::_M_do_right_shift(size_t __shift) _GLIBCXX_NOEXCEPT
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
      if (__builtin_expect(__shift != 0, 1))
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	bf14      	ite	ne
 8000880:	2301      	movne	r3, #1
 8000882:	2300      	moveq	r3, #0
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d05f      	beq.n	800094a <_ZNSt12_Base_bitsetILj8EE17_M_do_right_shiftEj+0xda>
	  const size_t __wshift = __shift / _GLIBCXX_BITSET_BITS_PER_WORD;
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	095b      	lsrs	r3, r3, #5
 800088e:	61fb      	str	r3, [r7, #28]
	  const size_t __offset = __shift % _GLIBCXX_BITSET_BITS_PER_WORD;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	f003 031f 	and.w	r3, r3, #31
 8000896:	61bb      	str	r3, [r7, #24]
	  const size_t __limit = _Nw - __wshift - 1;
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	f1c3 0307 	rsb	r3, r3, #7
 800089e:	617b      	str	r3, [r7, #20]
	  if (__offset == 0)
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d113      	bne.n	80008ce <_ZNSt12_Base_bitsetILj8EE17_M_do_right_shiftEj+0x5e>
	    for (size_t __n = 0; __n <= __limit; ++__n)
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
 80008aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d83c      	bhi.n	800092c <_ZNSt12_Base_bitsetILj8EE17_M_do_right_shiftEj+0xbc>
	      _M_w[__n] = _M_w[__n + __wshift];
 80008b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	441a      	add	r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    for (size_t __n = 0; __n <= __limit; ++__n)
 80008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c8:	3301      	adds	r3, #1
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
 80008cc:	e7ed      	b.n	80008aa <_ZNSt12_Base_bitsetILj8EE17_M_do_right_shiftEj+0x3a>
	      const size_t __sub_offset = (_GLIBCXX_BITSET_BITS_PER_WORD
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	f1c3 0320 	rsb	r3, r3, #32
 80008d4:	613b      	str	r3, [r7, #16]
	      for (size_t __n = 0; __n < __limit; ++__n)
 80008d6:	2300      	movs	r3, #0
 80008d8:	623b      	str	r3, [r7, #32]
 80008da:	6a3a      	ldr	r2, [r7, #32]
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	429a      	cmp	r2, r3
 80008e0:	d21b      	bcs.n	800091a <_ZNSt12_Base_bitsetILj8EE17_M_do_right_shiftEj+0xaa>
		_M_w[__n] = ((_M_w[__n + __wshift] >> __offset)
 80008e2:	6a3a      	ldr	r2, [r7, #32]
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	441a      	add	r2, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008ee:	69bb      	ldr	r3, [r7, #24]
 80008f0:	40da      	lsrs	r2, r3
			     | (_M_w[__n + __wshift + 1] << __sub_offset));
 80008f2:	6a39      	ldr	r1, [r7, #32]
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	440b      	add	r3, r1
 80008f8:	1c59      	adds	r1, r3, #1
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	fa01 f303 	lsl.w	r3, r1, r3
 8000906:	ea42 0103 	orr.w	r1, r2, r3
		_M_w[__n] = ((_M_w[__n + __wshift] >> __offset)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6a3a      	ldr	r2, [r7, #32]
 800090e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	      for (size_t __n = 0; __n < __limit; ++__n)
 8000912:	6a3b      	ldr	r3, [r7, #32]
 8000914:	3301      	adds	r3, #1
 8000916:	623b      	str	r3, [r7, #32]
 8000918:	e7df      	b.n	80008da <_ZNSt12_Base_bitsetILj8EE17_M_do_right_shiftEj+0x6a>
	      _M_w[__limit] = _M_w[_Nw-1] >> __offset;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	69da      	ldr	r2, [r3, #28]
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	fa22 f103 	lsr.w	r1, r2, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	697a      	ldr	r2, [r7, #20]
 8000928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  std::fill(_M_w + __limit + 1, _M_w + _Nw, static_cast<_WordT>(0));
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	3301      	adds	r3, #1
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	18d0      	adds	r0, r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f103 0120 	add.w	r1, r3, #32
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	461a      	mov	r2, r3
 8000946:	f000 f855 	bl	80009f4 <_ZSt4fillIPmmEvT_S1_RKT0_>
    }
 800094a:	bf00      	nop
 800094c:	3728      	adds	r7, #40	; 0x28
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <_ZNSt6bitsetILj240EE14_M_do_sanitizeEv>:
      _M_do_sanitize() _GLIBCXX_NOEXCEPT
 8000952:	b580      	push	{r7, lr}
 8000954:	b082      	sub	sp, #8
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
	__sanitize_type::_S_do_sanitize(this->_M_hiword());
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4618      	mov	r0, r3
 800095e:	f000 f86f 	bl	8000a40 <_ZNSt12_Base_bitsetILj8EE9_M_hiwordEv>
 8000962:	4603      	mov	r3, r0
 8000964:	4618      	mov	r0, r3
 8000966:	f000 f85c 	bl	8000a22 <_ZNSt9_SanitizeILj16EE14_S_do_sanitizeERm>
      }
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <_ZNSt12_Base_bitsetILj8EE11_M_do_resetEv>:
      _M_do_reset() _GLIBCXX_NOEXCEPT
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
      { __builtin_memset(_M_w, 0, _Nw * sizeof(_WordT)); }
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4618      	mov	r0, r3
 800097e:	2320      	movs	r3, #32
 8000980:	461a      	mov	r2, r3
 8000982:	2100      	movs	r1, #0
 8000984:	f002 fb76 	bl	8003074 <memset>
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <_ZNSt12_Base_bitsetILj8EE9_M_do_xorERKS0_>:
      _M_do_xor(const _Base_bitset<_Nw>& __x) _GLIBCXX_NOEXCEPT
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
	for (size_t __i = 0; __i < _Nw; __i++)
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	2b07      	cmp	r3, #7
 80009a2:	d811      	bhi.n	80009c8 <_ZNSt12_Base_bitsetILj8EE9_M_do_xorERKS0_+0x38>
	  _M_w[__i] ^= __x._M_w[__i];
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	68f9      	ldr	r1, [r7, #12]
 80009b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80009b4:	ea82 0103 	eor.w	r1, r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (size_t __i = 0; __i < _Nw; __i++)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	3301      	adds	r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	e7ea      	b.n	800099e <_ZNSt12_Base_bitsetILj8EE9_M_do_xorERKS0_+0xe>
      }
 80009c8:	bf00      	nop
 80009ca:	3714      	adds	r7, #20
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <_ZNSt12_Base_bitsetILj8EE10_M_getwordEj>:
      _M_getword(size_t __pos) _GLIBCXX_NOEXCEPT
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
      { return _M_w[_S_whichword(__pos)]; }
 80009de:	6838      	ldr	r0, [r7, #0]
 80009e0:	f000 f83a 	bl	8000a58 <_ZNSt12_Base_bitsetILj8EE12_S_whichwordEj>
 80009e4:	4603      	mov	r3, r0
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	4413      	add	r3, r2
 80009ec:	4618      	mov	r0, r3
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <_ZSt4fillIPmmEvT_S1_RKT0_>:
   *  types filling contiguous areas of memory, this becomes an inline call
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 80009f4:	b590      	push	{r4, r7, lr}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
 8000a00:	68f8      	ldr	r0, [r7, #12]
 8000a02:	f000 f835 	bl	8000a70 <_ZSt12__niter_baseIPmET_S1_>
 8000a06:	4604      	mov	r4, r0
 8000a08:	68b8      	ldr	r0, [r7, #8]
 8000a0a:	f000 f831 	bl	8000a70 <_ZSt12__niter_baseIPmET_S1_>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	4619      	mov	r1, r3
 8000a14:	4620      	mov	r0, r4
 8000a16:	f000 f836 	bl	8000a86 <_ZSt8__fill_aIPmmEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
		    __value);
    }
 8000a1a:	bf00      	nop
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd90      	pop	{r4, r7, pc}

08000a22 <_ZNSt9_SanitizeILj16EE14_S_do_sanitizeERm>:
      _S_do_sanitize(_WordT& __val) _GLIBCXX_NOEXCEPT
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
      { __val &= ~((~static_cast<_WordT>(0)) << _Extrabits); }
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <_ZNSt12_Base_bitsetILj8EE9_M_hiwordEv>:
      _M_hiword() _GLIBCXX_NOEXCEPT
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
      { return _M_w[_Nw - 1]; }
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	331c      	adds	r3, #28
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <_ZNSt12_Base_bitsetILj8EE12_S_whichwordEj>:
      _S_whichword(size_t __pos) _GLIBCXX_NOEXCEPT
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
      { return __pos / _GLIBCXX_BITSET_BITS_PER_WORD; }
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	095b      	lsrs	r3, r3, #5
 8000a64:	4618      	mov	r0, r3
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <_ZSt12__niter_baseIPmET_S1_>:
    __niter_base(_Iterator __it)
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <_ZSt8__fill_aIPmmEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
 8000a86:	b480      	push	{r7}
 8000a88:	b087      	sub	sp, #28
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	60f8      	str	r0, [r7, #12]
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d006      	beq.n	8000aae <_ZSt8__fill_aIPmmEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x28>
	*__first = __tmp;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	697a      	ldr	r2, [r7, #20]
 8000aa4:	601a      	str	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	e7f4      	b.n	8000a98 <_ZSt8__fill_aIPmmEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x12>
    }
 8000aae:	bf00      	nop
 8000ab0:	371c      	adds	r7, #28
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <_ZN9LCDDriverC1Ev>:
#include "i2c.h"
#include "gpio.h"
#include "stdlib.h"
#include "math.h"

LCDDriver::LCDDriver() {
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <_ZN9LCDDriver7InitLCDEv>:


void LCDDriver::InitLCD(){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	Reset();
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 fa35 	bl	8000f48 <_ZN9LCDDriver5ResetEv>
	LCD_RD_SET;
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae8:	f000 ff4e 	bl	8001988 <HAL_GPIO_WritePin>
	LCD_WR_SET;
 8000aec:	2201      	movs	r2, #1
 8000aee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af6:	f000 ff47 	bl	8001988 <HAL_GPIO_WritePin>
	SetLCDSize(SIZE_40C);
 8000afa:	2100      	movs	r1, #0
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f000 f845 	bl	8000b8c <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E>

	//init REGISTERS SETTING
	WriteData_16bit(LCD_setCursorPointer,0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2121      	movs	r1, #33	; 0x21
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f000 f959 	bl	8000dbe <_ZN9LCDDriver15WriteData_16bitEht>
	WriteData_16bit(LCD_setAddressPointer, 0);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2124      	movs	r1, #36	; 0x24
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f000 f954 	bl	8000dbe <_ZN9LCDDriver15WriteData_16bitEht>
	WriteData_16bit(LCD_setOffsetRegister, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2122      	movs	r1, #34	; 0x22
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f000 f94f 	bl	8000dbe <_ZN9LCDDriver15WriteData_16bitEht>
	//Init SET CONTROL WORD
	WriteData_16bit(LCD_setTextHomeAddress,LCD_TXT_START_ADDR);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2140      	movs	r1, #64	; 0x40
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f000 f94a 	bl	8000dbe <_ZN9LCDDriver15WriteData_16bitEht>
	WriteData_16bit(LCD_setGraphicHomeAddress, LCD_GRAPHIC_START_ADDR);
 8000b2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b2e:	2142      	movs	r1, #66	; 0x42
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f000 f944 	bl	8000dbe <_ZN9LCDDriver15WriteData_16bitEht>
	//Init MODE SET
	WriteData_8bit(LCD_OR_mode |LCD_InternalCGROM_mode);
 8000b36:	2180      	movs	r1, #128	; 0x80
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f000 f8e2 	bl	8000d02 <_ZN9LCDDriver14WriteData_8bitEh>
	//Init DISPLY MODE
	WriteData_8bit(LCD_cursorOnBlinkON | LCD_textONGraphicON);
 8000b3e:	219f      	movs	r1, #159	; 0x9f
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f000 f8de 	bl	8000d02 <_ZN9LCDDriver14WriteData_8bitEh>
	//Init CURSOR PATTERN SELECT
	WriteData_8bit(LCD_1_lineCursor);
 8000b46:	21a0      	movs	r1, #160	; 0xa0
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 f8da 	bl	8000d02 <_ZN9LCDDriver14WriteData_8bitEh>
	//Init DATA AUTO READ/WRITE
	WriteData_8bit(LCD_setDataAutoRead);
 8000b4e:	21b1      	movs	r1, #177	; 0xb1
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f000 f8d6 	bl	8000d02 <_ZN9LCDDriver14WriteData_8bitEh>
	//Init SCREEN REVERSE
	WriteData_16bit(LCD_SCREEN_REVERSE, NORMAL_DISPLAY);
 8000b56:	2200      	movs	r2, #0
 8000b58:	21d0      	movs	r1, #208	; 0xd0
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f000 f92f 	bl	8000dbe <_ZN9LCDDriver15WriteData_16bitEht>
	//Init BLINK TIME
	WriteData_16bit(LCD_BLINK_TIME, BLINK_TIM_0_066);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2150      	movs	r1, #80	; 0x50
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f000 f92a 	bl	8000dbe <_ZN9LCDDriver15WriteData_16bitEht>
	//Init CURSOR AUTO MOVING
	WriteData_16bit(LCD_CursorAutoMoving, AUTO_MOVING_ON);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2160      	movs	r1, #96	; 0x60
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f000 f925 	bl	8000dbe <_ZN9LCDDriver15WriteData_16bitEht>

	ClearDisplay();
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 f85e 	bl	8000c36 <_ZN9LCDDriver12ClearDisplayEv>
	SetAddressPointer(0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f000 f8a1 	bl	8000cc6 <_ZN9LCDDriver17SetAddressPointerEhh>
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E>:
 * Init the LCD Size (40 Columns / 32 Columns)
 *
 * @param size: LCD Size
 * @return : none
 */
void LCDDriver::SetLCDSize(LCD_SIZE size){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	70fb      	strb	r3, [r7, #3]
	if(size == SIZE_40C){
 8000b98:	78fb      	ldrb	r3, [r7, #3]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d122      	bne.n	8000be4 <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E+0x58>
		LCD_SIZE_40;				//set size 40 Columns
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba6:	f000 feef 	bl	8001988 <HAL_GPIO_WritePin>
		LCD_FONT_68;				//set Fontsize 6x8px
 8000baa:	2201      	movs	r2, #1
 8000bac:	2101      	movs	r1, #1
 8000bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb2:	f000 fee9 	bl	8001988 <HAL_GPIO_WritePin>
		LCD_XY_SIZE.column = LCD_WIDTH/6;	//set LCD size struct to 40 Columns
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2228      	movs	r2, #40	; 0x28
 8000bba:	701a      	strb	r2, [r3, #0]
		LCD_XY_SIZE.row = LCD_WIDTH/8;		//set LCD size struct to 16 Row
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	221e      	movs	r2, #30
 8000bc0:	705a      	strb	r2, [r3, #1]
		LCD_XY_SIZE.patternHeight = 8;		//set pattern height to 8 pixel (pattern is the 6x8 pixel container)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2208      	movs	r2, #8
 8000bc6:	709a      	strb	r2, [r3, #2]
		LCD_XY_SIZE.patternWidth =  6;		//set pattern width to 6 pixel (pattern is the 6x8 pixel container)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2206      	movs	r2, #6
 8000bcc:	70da      	strb	r2, [r3, #3]
		WriteData_16bit(LCD_setTextArea, 0x0028);	//set TextArea to 40 Columns
 8000bce:	2228      	movs	r2, #40	; 0x28
 8000bd0:	2141      	movs	r1, #65	; 0x41
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f000 f8f3 	bl	8000dbe <_ZN9LCDDriver15WriteData_16bitEht>
		WriteData_16bit(LCD_setGraphicArea, 0x0028);
 8000bd8:	2228      	movs	r2, #40	; 0x28
 8000bda:	2143      	movs	r1, #67	; 0x43
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 f8ee 	bl	8000dbe <_ZN9LCDDriver15WriteData_16bitEht>
		LCD_XY_SIZE.patternHeight = 8;		//set pattern height to 8 pixel (pattern is the 6x8 pixel container)
		LCD_XY_SIZE.patternWidth =  8;		//set pattern width to 6 pixel (pattern is the 6x8 pixel container)
		WriteData_16bit(LCD_setTextArea, 0x0020);	//set TextArea to 32 Columns
		WriteData_16bit(LCD_setGraphicArea, 0x0020);
	}
}
 8000be2:	e024      	b.n	8000c2e <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E+0xa2>
	else if(size == SIZE_32C){
 8000be4:	78fb      	ldrb	r3, [r7, #3]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d121      	bne.n	8000c2e <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E+0xa2>
		LCD_SIZE_32;				//set size 32 Columns
 8000bea:	2201      	movs	r2, #1
 8000bec:	2102      	movs	r1, #2
 8000bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf2:	f000 fec9 	bl	8001988 <HAL_GPIO_WritePin>
		LCD_FONT_88;				//set Fontsize 8x8px
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfe:	f000 fec3 	bl	8001988 <HAL_GPIO_WritePin>
		LCD_XY_SIZE.column = 32;	//set LCD size struct to 32 Columns
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2220      	movs	r2, #32
 8000c06:	701a      	strb	r2, [r3, #0]
		LCD_XY_SIZE.row = 16;		//set LCD size struct to 16 Row
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2210      	movs	r2, #16
 8000c0c:	705a      	strb	r2, [r3, #1]
		LCD_XY_SIZE.patternHeight = 8;		//set pattern height to 8 pixel (pattern is the 6x8 pixel container)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2208      	movs	r2, #8
 8000c12:	709a      	strb	r2, [r3, #2]
		LCD_XY_SIZE.patternWidth =  8;		//set pattern width to 6 pixel (pattern is the 6x8 pixel container)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2208      	movs	r2, #8
 8000c18:	70da      	strb	r2, [r3, #3]
		WriteData_16bit(LCD_setTextArea, 0x0020);	//set TextArea to 32 Columns
 8000c1a:	2220      	movs	r2, #32
 8000c1c:	2141      	movs	r1, #65	; 0x41
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f000 f8cd 	bl	8000dbe <_ZN9LCDDriver15WriteData_16bitEht>
		WriteData_16bit(LCD_setGraphicArea, 0x0020);
 8000c24:	2220      	movs	r2, #32
 8000c26:	2143      	movs	r1, #67	; 0x43
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f000 f8c8 	bl	8000dbe <_ZN9LCDDriver15WriteData_16bitEht>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <_ZN9LCDDriver12ClearDisplayEv>:
 * clears the whole LCD depending on the selected size
 *
 * @param  : none
 * @return : none
 */
void LCDDriver::ClearDisplay(){
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b084      	sub	sp, #16
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]

/*
	uint8_t CH_ARROW[] = {0x00, 0x04, 0x0E, 0x15, 0x04, 0x04, 0x04,0x00};
	setUserChar(CH_ARROW, 0x02,0);
*/
	WriteData_16bit(LCD_setOffsetRegister, 0x0000);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2122      	movs	r1, #34	; 0x22
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f000 f8bb 	bl	8000dbe <_ZN9LCDDriver15WriteData_16bitEht>

	WriteData_16bit(LCD_setAddressPointer, LCD_TXT_START_ADDR);				//set address pointer to text home address
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2124      	movs	r1, #36	; 0x24
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f000 f8b6 	bl	8000dbe <_ZN9LCDDriver15WriteData_16bitEht>
	for(uint16_t counter = 0; counter<LCD_XY_SIZE.column*LCD_XY_SIZE.row; counter++){
 8000c52:	2300      	movs	r3, #0
 8000c54:	81fb      	strh	r3, [r7, #14]
 8000c56:	89fa      	ldrh	r2, [r7, #14]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	785b      	ldrb	r3, [r3, #1]
 8000c62:	fb03 f301 	mul.w	r3, r3, r1
 8000c66:	429a      	cmp	r2, r3
 8000c68:	da08      	bge.n	8000c7c <_ZN9LCDDriver12ClearDisplayEv+0x46>
		WriteData_16bit(LCD_dataWriteAndIncrementADP, 0x00);	//clear text
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	21c0      	movs	r1, #192	; 0xc0
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f000 f8a5 	bl	8000dbe <_ZN9LCDDriver15WriteData_16bitEht>
	for(uint16_t counter = 0; counter<LCD_XY_SIZE.column*LCD_XY_SIZE.row; counter++){
 8000c74:	89fb      	ldrh	r3, [r7, #14]
 8000c76:	3301      	adds	r3, #1
 8000c78:	81fb      	strh	r3, [r7, #14]
 8000c7a:	e7ec      	b.n	8000c56 <_ZN9LCDDriver12ClearDisplayEv+0x20>
	}


	WriteData_16bit(LCD_setAddressPointer, LCD_GRAPHIC_START_ADDR);				//set Address pointer to Graphic home Address
 8000c7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c80:	2124      	movs	r1, #36	; 0x24
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f000 f89b 	bl	8000dbe <_ZN9LCDDriver15WriteData_16bitEht>
	for(int i = 0; i<LCD_XY_SIZE.column*LCD_XY_SIZE.row*8;i++){
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	785b      	ldrb	r3, [r3, #1]
 8000c96:	fb03 f302 	mul.w	r3, r3, r2
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	68ba      	ldr	r2, [r7, #8]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	da08      	bge.n	8000cb4 <_ZN9LCDDriver12ClearDisplayEv+0x7e>
		WriteData_8bit(LCD_dataWriteAndIncrementADP, 0x00);		//clear graphic
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	21c0      	movs	r1, #192	; 0xc0
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f000 f852 	bl	8000d50 <_ZN9LCDDriver14WriteData_8bitEhh>
	for(int i = 0; i<LCD_XY_SIZE.column*LCD_XY_SIZE.row*8;i++){
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	e7eb      	b.n	8000c8c <_ZN9LCDDriver12ClearDisplayEv+0x56>
	}

	WriteData_16bit(LCD_setAddressPointer, LCD_TXT_START_ADDR);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2124      	movs	r1, #36	; 0x24
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f000 f880 	bl	8000dbe <_ZN9LCDDriver15WriteData_16bitEht>
}
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <_ZN9LCDDriver17SetAddressPointerEhh>:
 *
 * @param column: the chosen Column
 * @param row: the chosen Row
 * @return : none;
 */
void LCDDriver::SetAddressPointer(uint8_t column, uint8_t row){
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b084      	sub	sp, #16
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	460b      	mov	r3, r1
 8000cd0:	70fb      	strb	r3, [r7, #3]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	70bb      	strb	r3, [r7, #2]
	uint16_t LCDPointer = row*LCD_XY_SIZE.column + column;	//calculate the AdressPointer depending on the selected LCD Size
 8000cd6:	78bb      	ldrb	r3, [r7, #2]
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	fb12 f303 	smulbb	r3, r2, r3
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	78fb      	ldrb	r3, [r7, #3]
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	4413      	add	r3, r2
 8000cec:	81fb      	strh	r3, [r7, #14]
	WriteData_16bit(LCD_setAddressPointer, LCDPointer);		//set the AdressPointer
 8000cee:	89fb      	ldrh	r3, [r7, #14]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	2124      	movs	r1, #36	; 0x24
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f000 f862 	bl	8000dbe <_ZN9LCDDriver15WriteData_16bitEht>
}
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_ZN9LCDDriver14WriteData_8bitEh>:


bool LCDDriver::WriteData_8bit(uint8_t addr){
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	70fb      	strb	r3, [r7, #3]
	LCD_OUTPUT_ENABLE;
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d18:	f000 fe36 	bl	8001988 <HAL_GPIO_WritePin>


//	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
//		return false;
//	}
	WriteDataPin(addr);
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	4619      	mov	r1, r3
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f000 f8b7 	bl	8000e94 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_COMMAND;
 8000d26:	2201      	movs	r2, #1
 8000d28:	2104      	movs	r1, #4
 8000d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2e:	f000 fe2b 	bl	8001988 <HAL_GPIO_WritePin>
	PushData();
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f000 f88b 	bl	8000e4e <_ZN9LCDDriver8PushDataEv>

	LCD_OUTPUT_DISABLE;
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d42:	f000 fe21 	bl	8001988 <HAL_GPIO_WritePin>
	return true;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <_ZN9LCDDriver14WriteData_8bitEhh>:


bool LCDDriver::WriteData_8bit(uint8_t addr, uint8_t data){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	70fb      	strb	r3, [r7, #3]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	70bb      	strb	r3, [r7, #2]
	LCD_OUTPUT_ENABLE;
 8000d60:	2201      	movs	r2, #1
 8000d62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6a:	f000 fe0d 	bl	8001988 <HAL_GPIO_WritePin>

//	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
//		return false;
//	}
	WriteDataPin(data);
 8000d6e:	78bb      	ldrb	r3, [r7, #2]
 8000d70:	4619      	mov	r1, r3
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f000 f88e 	bl	8000e94 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_DATA;
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d80:	f000 fe02 	bl	8001988 <HAL_GPIO_WritePin>
	PushData();
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f000 f862 	bl	8000e4e <_ZN9LCDDriver8PushDataEv>

//	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
//		return false;
//	}
	WriteDataPin(addr);
 8000d8a:	78fb      	ldrb	r3, [r7, #3]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f000 f880 	bl	8000e94 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_COMMAND;
 8000d94:	2201      	movs	r2, #1
 8000d96:	2104      	movs	r1, #4
 8000d98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9c:	f000 fdf4 	bl	8001988 <HAL_GPIO_WritePin>
	PushData();
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f000 f854 	bl	8000e4e <_ZN9LCDDriver8PushDataEv>

	LCD_OUTPUT_DISABLE;
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db0:	f000 fdea 	bl	8001988 <HAL_GPIO_WritePin>
	return true;
 8000db4:	2301      	movs	r3, #1
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <_ZN9LCDDriver15WriteData_16bitEht>:

bool LCDDriver::WriteData_16bit(uint8_t addr, uint16_t data) {
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	70fb      	strb	r3, [r7, #3]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	803b      	strh	r3, [r7, #0]
	LCD_OUTPUT_ENABLE;
 8000dce:	2201      	movs	r2, #1
 8000dd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd8:	f000 fdd6 	bl	8001988 <HAL_GPIO_WritePin>
//	if (CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR) {
//		return false;
//	}
	WriteDataPin((uint8_t) (data));
 8000ddc:	883b      	ldrh	r3, [r7, #0]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	4619      	mov	r1, r3
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f000 f856 	bl	8000e94 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_DATA;
 8000de8:	2200      	movs	r2, #0
 8000dea:	2104      	movs	r1, #4
 8000dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df0:	f000 fdca 	bl	8001988 <HAL_GPIO_WritePin>
	PushData();
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f000 f82a 	bl	8000e4e <_ZN9LCDDriver8PushDataEv>
//	if (CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR) {
//		return false;
//	}
	WriteDataPin((uint8_t) ((data >> 8)));
 8000dfa:	883b      	ldrh	r3, [r7, #0]
 8000dfc:	121b      	asrs	r3, r3, #8
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	4619      	mov	r1, r3
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f000 f846 	bl	8000e94 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_DATA;
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2104      	movs	r1, #4
 8000e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e10:	f000 fdba 	bl	8001988 <HAL_GPIO_WritePin>
	PushData();
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f000 f81a 	bl	8000e4e <_ZN9LCDDriver8PushDataEv>
//	if (CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR) {
//		return false;
//	}
	WriteDataPin(addr);
 8000e1a:	78fb      	ldrb	r3, [r7, #3]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f000 f838 	bl	8000e94 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_COMMAND;
 8000e24:	2201      	movs	r2, #1
 8000e26:	2104      	movs	r1, #4
 8000e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2c:	f000 fdac 	bl	8001988 <HAL_GPIO_WritePin>
	PushData();
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f000 f80c 	bl	8000e4e <_ZN9LCDDriver8PushDataEv>
	LCD_OUTPUT_DISABLE;
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e40:	f000 fda2 	bl	8001988 <HAL_GPIO_WritePin>
	return true;
 8000e44:	2301      	movs	r3, #1
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <_ZN9LCDDriver8PushDataEv>:


void LCDDriver::PushData(){
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
	//toggle WR and Enable PIN so that the LCD reads the data
	LCD_WR_RESET;
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e60:	f000 fd92 	bl	8001988 <HAL_GPIO_WritePin>
	LCD_ENABLE;
 8000e64:	2200      	movs	r2, #0
 8000e66:	2110      	movs	r1, #16
 8000e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6c:	f000 fd8c 	bl	8001988 <HAL_GPIO_WritePin>
	LCD_DISABLE;
 8000e70:	2201      	movs	r2, #1
 8000e72:	2110      	movs	r1, #16
 8000e74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e78:	f000 fd86 	bl	8001988 <HAL_GPIO_WritePin>
	LCD_WR_SET;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e86:	f000 fd7f 	bl	8001988 <HAL_GPIO_WritePin>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <_ZN9LCDDriver12WriteDataPinEh>:
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct_2);
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct_3);
}


void LCDDriver::WriteDataPin(uint8_t data){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, (GPIO_PinState)(data & 0x01));
 8000ea0:	78fb      	ldrb	r3, [r7, #3]
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	2110      	movs	r1, #16
 8000eac:	4824      	ldr	r0, [pc, #144]	; (8000f40 <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000eae:	f000 fd6b 	bl	8001988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, (GPIO_PinState)(data & 0x02));
 8000eb2:	78fb      	ldrb	r3, [r7, #3]
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	461a      	mov	r2, r3
 8000ebc:	2120      	movs	r1, #32
 8000ebe:	4820      	ldr	r0, [pc, #128]	; (8000f40 <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000ec0:	f000 fd62 	bl	8001988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, (GPIO_PinState)(data & 0x04));
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	461a      	mov	r2, r3
 8000ece:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed6:	f000 fd57 	bl	8001988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, (GPIO_PinState)(data & 0x08));
 8000eda:	78fb      	ldrb	r3, [r7, #3]
 8000edc:	f003 0308 	and.w	r3, r3, #8
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eec:	f000 fd4c 	bl	8001988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (GPIO_PinState)(data & 0x10));
 8000ef0:	78fb      	ldrb	r3, [r7, #3]
 8000ef2:	f003 0310 	and.w	r3, r3, #16
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	461a      	mov	r2, r3
 8000efa:	2102      	movs	r1, #2
 8000efc:	4811      	ldr	r0, [pc, #68]	; (8000f44 <_ZN9LCDDriver12WriteDataPinEh+0xb0>)
 8000efe:	f000 fd43 	bl	8001988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (GPIO_PinState)(data & 0x20));
 8000f02:	78fb      	ldrb	r3, [r7, #3]
 8000f04:	f003 0320 	and.w	r3, r3, #32
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	480d      	ldr	r0, [pc, #52]	; (8000f44 <_ZN9LCDDriver12WriteDataPinEh+0xb0>)
 8000f10:	f000 fd3a 	bl	8001988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (GPIO_PinState)(data & 0x40));
 8000f14:	78fb      	ldrb	r3, [r7, #3]
 8000f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	2102      	movs	r1, #2
 8000f20:	4807      	ldr	r0, [pc, #28]	; (8000f40 <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000f22:	f000 fd31 	bl	8001988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (GPIO_PinState)(data & 0x80));
 8000f26:	78fb      	ldrb	r3, [r7, #3]
 8000f28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	461a      	mov	r2, r3
 8000f30:	2101      	movs	r1, #1
 8000f32:	4803      	ldr	r0, [pc, #12]	; (8000f40 <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000f34:	f000 fd28 	bl	8001988 <HAL_GPIO_WritePin>

}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	48000400 	.word	0x48000400
 8000f44:	48001400 	.word	0x48001400

08000f48 <_ZN9LCDDriver5ResetEv>:
 * Reset LCD
 *
 * @param none
 * @return none
 */
void LCDDriver::Reset(){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	LCD_RST_L;
 8000f50:	2200      	movs	r2, #0
 8000f52:	2108      	movs	r1, #8
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f58:	f000 fd16 	bl	8001988 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f000 fa99 	bl	8001494 <HAL_Delay>
	LCD_RST_H;
 8000f62:	2201      	movs	r2, #1
 8000f64:	2108      	movs	r1, #8
 8000f66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6a:	f000 fd0d 	bl	8001988 <HAL_GPIO_WritePin>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7e:	f107 030c 	add.w	r3, r7, #12
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f8e:	4b32      	ldr	r3, [pc, #200]	; (8001058 <MX_GPIO_Init+0xe0>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a31      	ldr	r2, [pc, #196]	; (8001058 <MX_GPIO_Init+0xe0>)
 8000f94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f98:	6153      	str	r3, [r2, #20]
 8000f9a:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <MX_GPIO_Init+0xe0>)
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	4b2c      	ldr	r3, [pc, #176]	; (8001058 <MX_GPIO_Init+0xe0>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	4a2b      	ldr	r2, [pc, #172]	; (8001058 <MX_GPIO_Init+0xe0>)
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb0:	6153      	str	r3, [r2, #20]
 8000fb2:	4b29      	ldr	r3, [pc, #164]	; (8001058 <MX_GPIO_Init+0xe0>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	4b26      	ldr	r3, [pc, #152]	; (8001058 <MX_GPIO_Init+0xe0>)
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	4a25      	ldr	r2, [pc, #148]	; (8001058 <MX_GPIO_Init+0xe0>)
 8000fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc8:	6153      	str	r3, [r2, #20]
 8000fca:	4b23      	ldr	r3, [pc, #140]	; (8001058 <MX_GPIO_Init+0xe0>)
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fd2:	603b      	str	r3, [r7, #0]
 8000fd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2103      	movs	r1, #3
 8000fda:	4820      	ldr	r0, [pc, #128]	; (800105c <MX_GPIO_Init+0xe4>)
 8000fdc:	f000 fcd4 	bl	8001988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FS_Pin|MD2_Pin|CD_Pin|RESET_Pin 
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f641 711f 	movw	r1, #7967	; 0x1f1f
 8000fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fea:	f000 fccd 	bl	8001988 <HAL_GPIO_WritePin>
                          |CE_Pin|D3_Pin|RD_Pin|WR_Pin 
                          |D2_Pin|OE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D6_Pin|D0_Pin|D1_Pin, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2133      	movs	r1, #51	; 0x33
 8000ff2:	481b      	ldr	r0, [pc, #108]	; (8001060 <MX_GPIO_Init+0xe8>)
 8000ff4:	f000 fcc8 	bl	8001988 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = D5_Pin|D4_Pin;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	4619      	mov	r1, r3
 800100e:	4813      	ldr	r0, [pc, #76]	; (800105c <MX_GPIO_Init+0xe4>)
 8001010:	f000 fb48 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = FS_Pin|MD2_Pin|CD_Pin|RESET_Pin 
 8001014:	f641 731f 	movw	r3, #7967	; 0x1f1f
 8001018:	60fb      	str	r3, [r7, #12]
                          |CE_Pin|D3_Pin|RD_Pin|WR_Pin 
                          |D2_Pin|OE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	2301      	movs	r3, #1
 800101c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	4619      	mov	r1, r3
 800102c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001030:	f000 fb38 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D0_Pin|D1_Pin;
 8001034:	2333      	movs	r3, #51	; 0x33
 8001036:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001038:	2301      	movs	r3, #1
 800103a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4619      	mov	r1, r3
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_GPIO_Init+0xe8>)
 800104c:	f000 fb2a 	bl	80016a4 <HAL_GPIO_Init>

}
 8001050:	bf00      	nop
 8001052:	3720      	adds	r7, #32
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40021000 	.word	0x40021000
 800105c:	48001400 	.word	0x48001400
 8001060:	48000400 	.word	0x48000400

08001064 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <MX_I2C1_Init+0x74>)
 800106a:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <MX_I2C1_Init+0x78>)
 800106c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_I2C1_Init+0x74>)
 8001070:	4a1b      	ldr	r2, [pc, #108]	; (80010e0 <MX_I2C1_Init+0x7c>)
 8001072:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <MX_I2C1_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <MX_I2C1_Init+0x74>)
 800107c:	2201      	movs	r2, #1
 800107e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <MX_I2C1_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_I2C1_Init+0x74>)
 8001088:	2200      	movs	r2, #0
 800108a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <MX_I2C1_Init+0x74>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_I2C1_Init+0x74>)
 8001094:	2200      	movs	r2, #0
 8001096:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_I2C1_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800109e:	480e      	ldr	r0, [pc, #56]	; (80010d8 <MX_I2C1_Init+0x74>)
 80010a0:	f000 fc8a 	bl	80019b8 <HAL_I2C_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010aa:	f000 f8d6 	bl	800125a <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ae:	2100      	movs	r1, #0
 80010b0:	4809      	ldr	r0, [pc, #36]	; (80010d8 <MX_I2C1_Init+0x74>)
 80010b2:	f000 fd10 	bl	8001ad6 <HAL_I2CEx_ConfigAnalogFilter>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010bc:	f000 f8cd 	bl	800125a <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010c0:	2100      	movs	r1, #0
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_I2C1_Init+0x74>)
 80010c4:	f000 fd52 	bl	8001b6c <HAL_I2CEx_ConfigDigitalFilter>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010ce:	f000 f8c4 	bl	800125a <Error_Handler>
  }

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20002030 	.word	0x20002030
 80010dc:	40005400 	.word	0x40005400
 80010e0:	00201d2b 	.word	0x00201d2b

080010e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a17      	ldr	r2, [pc, #92]	; (8001160 <HAL_I2C_MspInit+0x7c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d127      	bne.n	8001156 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	4b17      	ldr	r3, [pc, #92]	; (8001164 <HAL_I2C_MspInit+0x80>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	4a16      	ldr	r2, [pc, #88]	; (8001164 <HAL_I2C_MspInit+0x80>)
 800110c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001110:	6153      	str	r3, [r2, #20]
 8001112:	4b14      	ldr	r3, [pc, #80]	; (8001164 <HAL_I2C_MspInit+0x80>)
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800111e:	23c0      	movs	r3, #192	; 0xc0
 8001120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001122:	2312      	movs	r3, #18
 8001124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001126:	2301      	movs	r3, #1
 8001128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800112e:	2304      	movs	r3, #4
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4619      	mov	r1, r3
 8001138:	480b      	ldr	r0, [pc, #44]	; (8001168 <HAL_I2C_MspInit+0x84>)
 800113a:	f000 fab3 	bl	80016a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <HAL_I2C_MspInit+0x80>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	4a08      	ldr	r2, [pc, #32]	; (8001164 <HAL_I2C_MspInit+0x80>)
 8001144:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001148:	61d3      	str	r3, [r2, #28]
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_I2C_MspInit+0x80>)
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001156:	bf00      	nop
 8001158:	3728      	adds	r7, #40	; 0x28
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40005400 	.word	0x40005400
 8001164:	40021000 	.word	0x40021000
 8001168:	48000400 	.word	0x48000400

0800116c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8001170:	f000 f92a 	bl	80013c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001174:	f000 f80a 	bl	800118c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001178:	f7ff fefe 	bl	8000f78 <MX_GPIO_Init>
  MX_I2C1_Init();
 800117c:	f7ff ff72 	bl	8001064 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
 // HAL_I2C_MspInit(&hi2c1);
  appMain.main();
 8001180:	4801      	ldr	r0, [pc, #4]	; (8001188 <main+0x1c>)
 8001182:	f7ff f835 	bl	80001f0 <_ZN7AppMain4mainEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001186:	e7fe      	b.n	8001186 <main+0x1a>
 8001188:	20000028 	.word	0x20000028

0800118c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b096      	sub	sp, #88	; 0x58
 8001190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001192:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001196:	2228      	movs	r2, #40	; 0x28
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f001 ff6a 	bl	8003074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]
 80011be:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c0:	2302      	movs	r3, #2
 80011c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c4:	2301      	movs	r3, #1
 80011c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c8:	2310      	movs	r3, #16
 80011ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011cc:	2302      	movs	r3, #2
 80011ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011d0:	2300      	movs	r3, #0
 80011d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80011d4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80011d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 fd10 	bl	8001c04 <HAL_RCC_OscConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	bf14      	ite	ne
 80011ea:	2301      	movne	r3, #1
 80011ec:	2300      	moveq	r3, #0
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <_Z18SystemClock_Configv+0x6c>
  {
    Error_Handler();
 80011f4:	f000 f831 	bl	800125a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f8:	230f      	movs	r3, #15
 80011fa:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fc:	2302      	movs	r3, #2
 80011fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	2102      	movs	r1, #2
 8001214:	4618      	mov	r0, r3
 8001216:	f001 fbfd 	bl	8002a14 <HAL_RCC_ClockConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	bf14      	ite	ne
 8001220:	2301      	movne	r3, #1
 8001222:	2300      	moveq	r3, #0
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800122a:	f000 f816 	bl	800125a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800122e:	2320      	movs	r3, #32
 8001230:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	4618      	mov	r0, r3
 800123a:	f001 fdd1 	bl	8002de0 <HAL_RCCEx_PeriphCLKConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	bf14      	ite	ne
 8001244:	2301      	movne	r3, #1
 8001246:	2300      	moveq	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 800124e:	f000 f804 	bl	800125a <Error_Handler>
  }
}
 8001252:	bf00      	nop
 8001254:	3758      	adds	r7, #88	; 0x58
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <_Z41__static_initialization_and_destruction_0ii>:
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d107      	bne.n	8001288 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800127e:	4293      	cmp	r3, r2
 8001280:	d102      	bne.n	8001288 <_Z41__static_initialization_and_destruction_0ii+0x20>
static AppMain appMain;
 8001282:	4803      	ldr	r0, [pc, #12]	; (8001290 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001284:	f7fe ffa0 	bl	80001c8 <_ZN7AppMainC1Ev>
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000028 	.word	0x20000028

08001294 <_GLOBAL__sub_I_main>:
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
 8001298:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800129c:	2001      	movs	r0, #1
 800129e:	f7ff ffe3 	bl	8001268 <_Z41__static_initialization_and_destruction_0ii>
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_MspInit+0x44>)
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <HAL_MspInit+0x44>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6193      	str	r3, [r2, #24]
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <HAL_MspInit+0x44>)
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_MspInit+0x44>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <HAL_MspInit+0x44>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	61d3      	str	r3, [r2, #28]
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_MspInit+0x44>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40021000 	.word	0x40021000

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <HardFault_Handler+0x4>

08001300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <MemManage_Handler+0x4>

08001306 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130a:	e7fe      	b.n	800130a <BusFault_Handler+0x4>

0800130c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <UsageFault_Handler+0x4>

08001312 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001340:	f000 f888 	bl	8001454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}

08001348 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <SystemInit+0x28>)
 800134e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001352:	4a07      	ldr	r2, [pc, #28]	; (8001370 <SystemInit+0x28>)
 8001354:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800135c:	4b04      	ldr	r3, [pc, #16]	; (8001370 <SystemInit+0x28>)
 800135e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001362:	609a      	str	r2, [r3, #8]
#endif
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013ac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001378:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800137a:	e003      	b.n	8001384 <LoopCopyDataInit>

0800137c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800137e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001380:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001382:	3104      	adds	r1, #4

08001384 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001384:	480b      	ldr	r0, [pc, #44]	; (80013b4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001388:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800138a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800138c:	d3f6      	bcc.n	800137c <CopyDataInit>
	ldr	r2, =_sbss
 800138e:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001390:	e002      	b.n	8001398 <LoopFillZerobss>

08001392 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001392:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001394:	f842 3b04 	str.w	r3, [r2], #4

08001398 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <LoopForever+0x16>)
	cmp	r2, r3
 800139a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800139c:	d3f9      	bcc.n	8001392 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800139e:	f7ff ffd3 	bl	8001348 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013a2:	f001 fe43 	bl	800302c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013a6:	f7ff fee1 	bl	800116c <main>

080013aa <LoopForever>:

LoopForever:
    b LoopForever
 80013aa:	e7fe      	b.n	80013aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013ac:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80013b0:	080030d8 	.word	0x080030d8
	ldr	r0, =_sdata
 80013b4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013b8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80013bc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80013c0:	20002080 	.word	0x20002080

080013c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013c4:	e7fe      	b.n	80013c4 <ADC1_2_IRQHandler>
	...

080013c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <HAL_Init+0x28>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <HAL_Init+0x28>)
 80013d2:	f043 0310 	orr.w	r3, r3, #16
 80013d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d8:	2003      	movs	r0, #3
 80013da:	f000 f92f 	bl	800163c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013de:	2000      	movs	r0, #0
 80013e0:	f000 f808 	bl	80013f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e4:	f7ff ff5e 	bl	80012a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40022000 	.word	0x40022000

080013f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_InitTick+0x54>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_InitTick+0x58>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140a:	fbb3 f3f1 	udiv	r3, r3, r1
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f000 f939 	bl	800168a <HAL_SYSTICK_Config>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e00e      	b.n	8001440 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b0f      	cmp	r3, #15
 8001426:	d80a      	bhi.n	800143e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001428:	2200      	movs	r2, #0
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f000 f90f 	bl	8001652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001434:	4a06      	ldr	r2, [pc, #24]	; (8001450 <HAL_InitTick+0x5c>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	e000      	b.n	8001440 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000000 	.word	0x20000000
 800144c:	20000008 	.word	0x20000008
 8001450:	20000004 	.word	0x20000004

08001454 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_IncTick+0x20>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_IncTick+0x24>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4413      	add	r3, r2
 8001464:	4a04      	ldr	r2, [pc, #16]	; (8001478 <HAL_IncTick+0x24>)
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000008 	.word	0x20000008
 8001478:	2000207c 	.word	0x2000207c

0800147c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <HAL_GetTick+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	2000207c 	.word	0x2000207c

08001494 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800149c:	f7ff ffee 	bl	800147c <HAL_GetTick>
 80014a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ac:	d005      	beq.n	80014ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_Delay+0x40>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4413      	add	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80014ba:	bf00      	nop
 80014bc:	f7ff ffde 	bl	800147c <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d8f7      	bhi.n	80014bc <HAL_Delay+0x28>
  {
  }
}
 80014cc:	bf00      	nop
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000008 	.word	0x20000008

080014d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <__NVIC_SetPriorityGrouping+0x44>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f4:	4013      	ands	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150a:	4a04      	ldr	r2, [pc, #16]	; (800151c <__NVIC_SetPriorityGrouping+0x44>)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	60d3      	str	r3, [r2, #12]
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <__NVIC_GetPriorityGrouping+0x18>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	f003 0307 	and.w	r3, r3, #7
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	db0a      	blt.n	8001566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	b2da      	uxtb	r2, r3
 8001554:	490c      	ldr	r1, [pc, #48]	; (8001588 <__NVIC_SetPriority+0x4c>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	0112      	lsls	r2, r2, #4
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	440b      	add	r3, r1
 8001560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001564:	e00a      	b.n	800157c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4908      	ldr	r1, [pc, #32]	; (800158c <__NVIC_SetPriority+0x50>)
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	3b04      	subs	r3, #4
 8001574:	0112      	lsls	r2, r2, #4
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	440b      	add	r3, r1
 800157a:	761a      	strb	r2, [r3, #24]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000e100 	.word	0xe000e100
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	; 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f1c3 0307 	rsb	r3, r3, #7
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	bf28      	it	cs
 80015ae:	2304      	movcs	r3, #4
 80015b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3304      	adds	r3, #4
 80015b6:	2b06      	cmp	r3, #6
 80015b8:	d902      	bls.n	80015c0 <NVIC_EncodePriority+0x30>
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3b03      	subs	r3, #3
 80015be:	e000      	b.n	80015c2 <NVIC_EncodePriority+0x32>
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	f04f 32ff 	mov.w	r2, #4294967295
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	401a      	ands	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d8:	f04f 31ff 	mov.w	r1, #4294967295
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	43d9      	mvns	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	4313      	orrs	r3, r2
         );
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3724      	adds	r7, #36	; 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3b01      	subs	r3, #1
 8001604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001608:	d301      	bcc.n	800160e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160a:	2301      	movs	r3, #1
 800160c:	e00f      	b.n	800162e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160e:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <SysTick_Config+0x40>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001616:	210f      	movs	r1, #15
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	f7ff ff8e 	bl	800153c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <SysTick_Config+0x40>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001626:	4b04      	ldr	r3, [pc, #16]	; (8001638 <SysTick_Config+0x40>)
 8001628:	2207      	movs	r2, #7
 800162a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	e000e010 	.word	0xe000e010

0800163c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ff47 	bl	80014d8 <__NVIC_SetPriorityGrouping>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001664:	f7ff ff5c 	bl	8001520 <__NVIC_GetPriorityGrouping>
 8001668:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	68b9      	ldr	r1, [r7, #8]
 800166e:	6978      	ldr	r0, [r7, #20]
 8001670:	f7ff ff8e 	bl	8001590 <NVIC_EncodePriority>
 8001674:	4602      	mov	r2, r0
 8001676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff5d 	bl	800153c <__NVIC_SetPriority>
}
 8001682:	bf00      	nop
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ffb0 	bl	80015f8 <SysTick_Config>
 8001698:	4603      	mov	r3, r0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b087      	sub	sp, #28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b2:	e14e      	b.n	8001952 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2101      	movs	r1, #1
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	4013      	ands	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 8140 	beq.w	800194c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x38>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b12      	cmp	r3, #18
 80016da:	d123      	bne.n	8001724 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	08da      	lsrs	r2, r3, #3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3208      	adds	r2, #8
 80016e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	220f      	movs	r2, #15
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	08da      	lsrs	r2, r3, #3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3208      	adds	r2, #8
 800171e:	6939      	ldr	r1, [r7, #16]
 8001720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2203      	movs	r2, #3
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0203 	and.w	r2, r3, #3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d00b      	beq.n	8001778 <HAL_GPIO_Init+0xd4>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d007      	beq.n	8001778 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800176c:	2b11      	cmp	r3, #17
 800176e:	d003      	beq.n	8001778 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b12      	cmp	r3, #18
 8001776:	d130      	bne.n	80017da <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	2203      	movs	r2, #3
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ae:	2201      	movs	r2, #1
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	091b      	lsrs	r3, r3, #4
 80017c4:	f003 0201 	and.w	r2, r3, #1
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	2203      	movs	r2, #3
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 809a 	beq.w	800194c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001818:	4b55      	ldr	r3, [pc, #340]	; (8001970 <HAL_GPIO_Init+0x2cc>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	4a54      	ldr	r2, [pc, #336]	; (8001970 <HAL_GPIO_Init+0x2cc>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6193      	str	r3, [r2, #24]
 8001824:	4b52      	ldr	r3, [pc, #328]	; (8001970 <HAL_GPIO_Init+0x2cc>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001830:	4a50      	ldr	r2, [pc, #320]	; (8001974 <HAL_GPIO_Init+0x2d0>)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	089b      	lsrs	r3, r3, #2
 8001836:	3302      	adds	r3, #2
 8001838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	220f      	movs	r2, #15
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800185a:	d013      	beq.n	8001884 <HAL_GPIO_Init+0x1e0>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a46      	ldr	r2, [pc, #280]	; (8001978 <HAL_GPIO_Init+0x2d4>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d00d      	beq.n	8001880 <HAL_GPIO_Init+0x1dc>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a45      	ldr	r2, [pc, #276]	; (800197c <HAL_GPIO_Init+0x2d8>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d007      	beq.n	800187c <HAL_GPIO_Init+0x1d8>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a44      	ldr	r2, [pc, #272]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d101      	bne.n	8001878 <HAL_GPIO_Init+0x1d4>
 8001874:	2303      	movs	r3, #3
 8001876:	e006      	b.n	8001886 <HAL_GPIO_Init+0x1e2>
 8001878:	2305      	movs	r3, #5
 800187a:	e004      	b.n	8001886 <HAL_GPIO_Init+0x1e2>
 800187c:	2302      	movs	r3, #2
 800187e:	e002      	b.n	8001886 <HAL_GPIO_Init+0x1e2>
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <HAL_GPIO_Init+0x1e2>
 8001884:	2300      	movs	r3, #0
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	f002 0203 	and.w	r2, r2, #3
 800188c:	0092      	lsls	r2, r2, #2
 800188e:	4093      	lsls	r3, r2
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001896:	4937      	ldr	r1, [pc, #220]	; (8001974 <HAL_GPIO_Init+0x2d0>)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	089b      	lsrs	r3, r3, #2
 800189c:	3302      	adds	r3, #2
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018a4:	4b37      	ldr	r3, [pc, #220]	; (8001984 <HAL_GPIO_Init+0x2e0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018c8:	4a2e      	ldr	r2, [pc, #184]	; (8001984 <HAL_GPIO_Init+0x2e0>)
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018ce:	4b2d      	ldr	r3, [pc, #180]	; (8001984 <HAL_GPIO_Init+0x2e0>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018f2:	4a24      	ldr	r2, [pc, #144]	; (8001984 <HAL_GPIO_Init+0x2e0>)
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018f8:	4b22      	ldr	r3, [pc, #136]	; (8001984 <HAL_GPIO_Init+0x2e0>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800191c:	4a19      	ldr	r2, [pc, #100]	; (8001984 <HAL_GPIO_Init+0x2e0>)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001922:	4b18      	ldr	r3, [pc, #96]	; (8001984 <HAL_GPIO_Init+0x2e0>)
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001946:	4a0f      	ldr	r2, [pc, #60]	; (8001984 <HAL_GPIO_Init+0x2e0>)
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	3301      	adds	r3, #1
 8001950:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	fa22 f303 	lsr.w	r3, r2, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	f47f aea9 	bne.w	80016b4 <HAL_GPIO_Init+0x10>
  }
}
 8001962:	bf00      	nop
 8001964:	371c      	adds	r7, #28
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000
 8001974:	40010000 	.word	0x40010000
 8001978:	48000400 	.word	0x48000400
 800197c:	48000800 	.word	0x48000800
 8001980:	48000c00 	.word	0x48000c00
 8001984:	40010400 	.word	0x40010400

08001988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	807b      	strh	r3, [r7, #2]
 8001994:	4613      	mov	r3, r2
 8001996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001998:	787b      	ldrb	r3, [r7, #1]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019a4:	e002      	b.n	80019ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019a6:	887a      	ldrh	r2, [r7, #2]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e081      	b.n	8001ace <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d106      	bne.n	80019e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff fb80 	bl	80010e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2224      	movs	r2, #36	; 0x24
 80019e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0201 	bic.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d107      	bne.n	8001a32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	e006      	b.n	8001a40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d104      	bne.n	8001a52 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	ea42 0103 	orr.w	r1, r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	021a      	lsls	r2, r3, #8
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69d9      	ldr	r1, [r3, #28]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a1a      	ldr	r2, [r3, #32]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2220      	movs	r2, #32
 8001aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b20      	cmp	r3, #32
 8001aea:	d138      	bne.n	8001b5e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e032      	b.n	8001b60 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2224      	movs	r2, #36	; 0x24
 8001b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0201 	bic.w	r2, r2, #1
 8001b18:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b28:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6819      	ldr	r1, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 0201 	orr.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e000      	b.n	8001b60 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b5e:	2302      	movs	r3, #2
  }
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b20      	cmp	r3, #32
 8001b80:	d139      	bne.n	8001bf6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d101      	bne.n	8001b90 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e033      	b.n	8001bf8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2224      	movs	r2, #36	; 0x24
 8001b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0201 	bic.w	r2, r2, #1
 8001bae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bbe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 0201 	orr.w	r2, r2, #1
 8001be0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2220      	movs	r2, #32
 8001be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e000      	b.n	8001bf8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001bf6:	2302      	movs	r3, #2
  }
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d102      	bne.n	8001c1e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	f000 bef4 	b.w	8002a06 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 816a 	beq.w	8001f02 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c2e:	4bb3      	ldr	r3, [pc, #716]	; (8001efc <HAL_RCC_OscConfig+0x2f8>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d00c      	beq.n	8001c54 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c3a:	4bb0      	ldr	r3, [pc, #704]	; (8001efc <HAL_RCC_OscConfig+0x2f8>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d159      	bne.n	8001cfa <HAL_RCC_OscConfig+0xf6>
 8001c46:	4bad      	ldr	r3, [pc, #692]	; (8001efc <HAL_RCC_OscConfig+0x2f8>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c52:	d152      	bne.n	8001cfa <HAL_RCC_OscConfig+0xf6>
 8001c54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c58:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001c60:	fa93 f3a3 	rbit	r3, r3
 8001c64:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c68:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6c:	fab3 f383 	clz	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d102      	bne.n	8001c86 <HAL_RCC_OscConfig+0x82>
 8001c80:	4b9e      	ldr	r3, [pc, #632]	; (8001efc <HAL_RCC_OscConfig+0x2f8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	e015      	b.n	8001cb2 <HAL_RCC_OscConfig+0xae>
 8001c86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c8a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001c92:	fa93 f3a3 	rbit	r3, r3
 8001c96:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001c9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c9e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001ca2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001ca6:	fa93 f3a3 	rbit	r3, r3
 8001caa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001cae:	4b93      	ldr	r3, [pc, #588]	; (8001efc <HAL_RCC_OscConfig+0x2f8>)
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cb6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001cba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001cbe:	fa92 f2a2 	rbit	r2, r2
 8001cc2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001cc6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001cca:	fab2 f282 	clz	r2, r2
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	f042 0220 	orr.w	r2, r2, #32
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	f002 021f 	and.w	r2, r2, #31
 8001cda:	2101      	movs	r1, #1
 8001cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 810c 	beq.w	8001f00 <HAL_RCC_OscConfig+0x2fc>
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f040 8106 	bne.w	8001f00 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	f000 be86 	b.w	8002a06 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d04:	d106      	bne.n	8001d14 <HAL_RCC_OscConfig+0x110>
 8001d06:	4b7d      	ldr	r3, [pc, #500]	; (8001efc <HAL_RCC_OscConfig+0x2f8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a7c      	ldr	r2, [pc, #496]	; (8001efc <HAL_RCC_OscConfig+0x2f8>)
 8001d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	e030      	b.n	8001d76 <HAL_RCC_OscConfig+0x172>
 8001d14:	1d3b      	adds	r3, r7, #4
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10c      	bne.n	8001d38 <HAL_RCC_OscConfig+0x134>
 8001d1e:	4b77      	ldr	r3, [pc, #476]	; (8001efc <HAL_RCC_OscConfig+0x2f8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a76      	ldr	r2, [pc, #472]	; (8001efc <HAL_RCC_OscConfig+0x2f8>)
 8001d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	4b74      	ldr	r3, [pc, #464]	; (8001efc <HAL_RCC_OscConfig+0x2f8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a73      	ldr	r2, [pc, #460]	; (8001efc <HAL_RCC_OscConfig+0x2f8>)
 8001d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	e01e      	b.n	8001d76 <HAL_RCC_OscConfig+0x172>
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d42:	d10c      	bne.n	8001d5e <HAL_RCC_OscConfig+0x15a>
 8001d44:	4b6d      	ldr	r3, [pc, #436]	; (8001efc <HAL_RCC_OscConfig+0x2f8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a6c      	ldr	r2, [pc, #432]	; (8001efc <HAL_RCC_OscConfig+0x2f8>)
 8001d4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	4b6a      	ldr	r3, [pc, #424]	; (8001efc <HAL_RCC_OscConfig+0x2f8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a69      	ldr	r2, [pc, #420]	; (8001efc <HAL_RCC_OscConfig+0x2f8>)
 8001d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	e00b      	b.n	8001d76 <HAL_RCC_OscConfig+0x172>
 8001d5e:	4b67      	ldr	r3, [pc, #412]	; (8001efc <HAL_RCC_OscConfig+0x2f8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a66      	ldr	r2, [pc, #408]	; (8001efc <HAL_RCC_OscConfig+0x2f8>)
 8001d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	4b64      	ldr	r3, [pc, #400]	; (8001efc <HAL_RCC_OscConfig+0x2f8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a63      	ldr	r2, [pc, #396]	; (8001efc <HAL_RCC_OscConfig+0x2f8>)
 8001d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d74:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d76:	4b61      	ldr	r3, [pc, #388]	; (8001efc <HAL_RCC_OscConfig+0x2f8>)
 8001d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7a:	f023 020f 	bic.w	r2, r3, #15
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	495d      	ldr	r1, [pc, #372]	; (8001efc <HAL_RCC_OscConfig+0x2f8>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d059      	beq.n	8001e48 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7ff fb72 	bl	800147c <HAL_GetTick>
 8001d98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9c:	e00a      	b.n	8001db4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d9e:	f7ff fb6d 	bl	800147c <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	; 0x64
 8001dac:	d902      	bls.n	8001db4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	f000 be29 	b.w	8002a06 <HAL_RCC_OscConfig+0xe02>
 8001db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001db8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001dc0:	fa93 f3a3 	rbit	r3, r3
 8001dc4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001dc8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dcc:	fab3 f383 	clz	r3, r3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d102      	bne.n	8001de6 <HAL_RCC_OscConfig+0x1e2>
 8001de0:	4b46      	ldr	r3, [pc, #280]	; (8001efc <HAL_RCC_OscConfig+0x2f8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	e015      	b.n	8001e12 <HAL_RCC_OscConfig+0x20e>
 8001de6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dee:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001df2:	fa93 f3a3 	rbit	r3, r3
 8001df6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001dfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dfe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001e02:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001e06:	fa93 f3a3 	rbit	r3, r3
 8001e0a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001e0e:	4b3b      	ldr	r3, [pc, #236]	; (8001efc <HAL_RCC_OscConfig+0x2f8>)
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e16:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001e1a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001e1e:	fa92 f2a2 	rbit	r2, r2
 8001e22:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001e26:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001e2a:	fab2 f282 	clz	r2, r2
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	f042 0220 	orr.w	r2, r2, #32
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	f002 021f 	and.w	r2, r2, #31
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0ab      	beq.n	8001d9e <HAL_RCC_OscConfig+0x19a>
 8001e46:	e05c      	b.n	8001f02 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e48:	f7ff fb18 	bl	800147c <HAL_GetTick>
 8001e4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e50:	e00a      	b.n	8001e68 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e52:	f7ff fb13 	bl	800147c <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b64      	cmp	r3, #100	; 0x64
 8001e60:	d902      	bls.n	8001e68 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	f000 bdcf 	b.w	8002a06 <HAL_RCC_OscConfig+0xe02>
 8001e68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e6c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e70:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001e74:	fa93 f3a3 	rbit	r3, r3
 8001e78:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001e7c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e80:	fab3 f383 	clz	r3, r3
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d102      	bne.n	8001e9a <HAL_RCC_OscConfig+0x296>
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <HAL_RCC_OscConfig+0x2f8>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	e015      	b.n	8001ec6 <HAL_RCC_OscConfig+0x2c2>
 8001e9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e9e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001eae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eb2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001eb6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <HAL_RCC_OscConfig+0x2f8>)
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001ece:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001ed2:	fa92 f2a2 	rbit	r2, r2
 8001ed6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001eda:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001ede:	fab2 f282 	clz	r2, r2
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	f042 0220 	orr.w	r2, r2, #32
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	f002 021f 	and.w	r2, r2, #31
 8001eee:	2101      	movs	r1, #1
 8001ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1ab      	bne.n	8001e52 <HAL_RCC_OscConfig+0x24e>
 8001efa:	e002      	b.n	8001f02 <HAL_RCC_OscConfig+0x2fe>
 8001efc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 816f 	beq.w	80021f0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f12:	4bd0      	ldr	r3, [pc, #832]	; (8002254 <HAL_RCC_OscConfig+0x650>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00b      	beq.n	8001f36 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f1e:	4bcd      	ldr	r3, [pc, #820]	; (8002254 <HAL_RCC_OscConfig+0x650>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d16c      	bne.n	8002004 <HAL_RCC_OscConfig+0x400>
 8001f2a:	4bca      	ldr	r3, [pc, #808]	; (8002254 <HAL_RCC_OscConfig+0x650>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d166      	bne.n	8002004 <HAL_RCC_OscConfig+0x400>
 8001f36:	2302      	movs	r3, #2
 8001f38:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001f40:	fa93 f3a3 	rbit	r3, r3
 8001f44:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001f48:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4c:	fab3 f383 	clz	r3, r3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d102      	bne.n	8001f66 <HAL_RCC_OscConfig+0x362>
 8001f60:	4bbc      	ldr	r3, [pc, #752]	; (8002254 <HAL_RCC_OscConfig+0x650>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	e013      	b.n	8001f8e <HAL_RCC_OscConfig+0x38a>
 8001f66:	2302      	movs	r3, #2
 8001f68:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001f70:	fa93 f3a3 	rbit	r3, r3
 8001f74:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001f78:	2302      	movs	r3, #2
 8001f7a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001f7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001f8a:	4bb2      	ldr	r3, [pc, #712]	; (8002254 <HAL_RCC_OscConfig+0x650>)
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001f94:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f98:	fa92 f2a2 	rbit	r2, r2
 8001f9c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001fa0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001fa4:	fab2 f282 	clz	r2, r2
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	f042 0220 	orr.w	r2, r2, #32
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	f002 021f 	and.w	r2, r2, #31
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d007      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x3cc>
 8001fc0:	1d3b      	adds	r3, r7, #4
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d002      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	f000 bd1b 	b.w	8002a06 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd0:	4ba0      	ldr	r3, [pc, #640]	; (8002254 <HAL_RCC_OscConfig+0x650>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	21f8      	movs	r1, #248	; 0xf8
 8001fe0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001fe8:	fa91 f1a1 	rbit	r1, r1
 8001fec:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001ff0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001ff4:	fab1 f181 	clz	r1, r1
 8001ff8:	b2c9      	uxtb	r1, r1
 8001ffa:	408b      	lsls	r3, r1
 8001ffc:	4995      	ldr	r1, [pc, #596]	; (8002254 <HAL_RCC_OscConfig+0x650>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002002:	e0f5      	b.n	80021f0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 8085 	beq.w	800211a <HAL_RCC_OscConfig+0x516>
 8002010:	2301      	movs	r3, #1
 8002012:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002022:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002026:	fab3 f383 	clz	r3, r3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002030:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	461a      	mov	r2, r3
 8002038:	2301      	movs	r3, #1
 800203a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7ff fa1e 	bl	800147c <HAL_GetTick>
 8002040:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002044:	e00a      	b.n	800205c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002046:	f7ff fa19 	bl	800147c <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d902      	bls.n	800205c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	f000 bcd5 	b.w	8002a06 <HAL_RCC_OscConfig+0xe02>
 800205c:	2302      	movs	r3, #2
 800205e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002066:	fa93 f3a3 	rbit	r3, r3
 800206a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800206e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002072:	fab3 f383 	clz	r3, r3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	095b      	lsrs	r3, r3, #5
 800207a:	b2db      	uxtb	r3, r3
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b01      	cmp	r3, #1
 8002084:	d102      	bne.n	800208c <HAL_RCC_OscConfig+0x488>
 8002086:	4b73      	ldr	r3, [pc, #460]	; (8002254 <HAL_RCC_OscConfig+0x650>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	e013      	b.n	80020b4 <HAL_RCC_OscConfig+0x4b0>
 800208c:	2302      	movs	r3, #2
 800208e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800209e:	2302      	movs	r3, #2
 80020a0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80020a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80020a8:	fa93 f3a3 	rbit	r3, r3
 80020ac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80020b0:	4b68      	ldr	r3, [pc, #416]	; (8002254 <HAL_RCC_OscConfig+0x650>)
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	2202      	movs	r2, #2
 80020b6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80020ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80020be:	fa92 f2a2 	rbit	r2, r2
 80020c2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80020c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80020ca:	fab2 f282 	clz	r2, r2
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	f042 0220 	orr.w	r2, r2, #32
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	f002 021f 	and.w	r2, r2, #31
 80020da:	2101      	movs	r1, #1
 80020dc:	fa01 f202 	lsl.w	r2, r1, r2
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0af      	beq.n	8002046 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e6:	4b5b      	ldr	r3, [pc, #364]	; (8002254 <HAL_RCC_OscConfig+0x650>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	21f8      	movs	r1, #248	; 0xf8
 80020f6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80020fe:	fa91 f1a1 	rbit	r1, r1
 8002102:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002106:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800210a:	fab1 f181 	clz	r1, r1
 800210e:	b2c9      	uxtb	r1, r1
 8002110:	408b      	lsls	r3, r1
 8002112:	4950      	ldr	r1, [pc, #320]	; (8002254 <HAL_RCC_OscConfig+0x650>)
 8002114:	4313      	orrs	r3, r2
 8002116:	600b      	str	r3, [r1, #0]
 8002118:	e06a      	b.n	80021f0 <HAL_RCC_OscConfig+0x5ec>
 800211a:	2301      	movs	r3, #1
 800211c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002124:	fa93 f3a3 	rbit	r3, r3
 8002128:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800212c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002130:	fab3 f383 	clz	r3, r3
 8002134:	b2db      	uxtb	r3, r3
 8002136:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800213a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	461a      	mov	r2, r3
 8002142:	2300      	movs	r3, #0
 8002144:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002146:	f7ff f999 	bl	800147c <HAL_GetTick>
 800214a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214e:	e00a      	b.n	8002166 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002150:	f7ff f994 	bl	800147c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d902      	bls.n	8002166 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	f000 bc50 	b.w	8002a06 <HAL_RCC_OscConfig+0xe02>
 8002166:	2302      	movs	r3, #2
 8002168:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002170:	fa93 f3a3 	rbit	r3, r3
 8002174:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217c:	fab3 f383 	clz	r3, r3
 8002180:	b2db      	uxtb	r3, r3
 8002182:	095b      	lsrs	r3, r3, #5
 8002184:	b2db      	uxtb	r3, r3
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b01      	cmp	r3, #1
 800218e:	d102      	bne.n	8002196 <HAL_RCC_OscConfig+0x592>
 8002190:	4b30      	ldr	r3, [pc, #192]	; (8002254 <HAL_RCC_OscConfig+0x650>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	e013      	b.n	80021be <HAL_RCC_OscConfig+0x5ba>
 8002196:	2302      	movs	r3, #2
 8002198:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80021a0:	fa93 f3a3 	rbit	r3, r3
 80021a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80021a8:	2302      	movs	r3, #2
 80021aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80021ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80021ba:	4b26      	ldr	r3, [pc, #152]	; (8002254 <HAL_RCC_OscConfig+0x650>)
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	2202      	movs	r2, #2
 80021c0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80021c4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80021c8:	fa92 f2a2 	rbit	r2, r2
 80021cc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80021d0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80021d4:	fab2 f282 	clz	r2, r2
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	f042 0220 	orr.w	r2, r2, #32
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	f002 021f 	and.w	r2, r2, #31
 80021e4:	2101      	movs	r1, #1
 80021e6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1af      	bne.n	8002150 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f0:	1d3b      	adds	r3, r7, #4
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 80da 	beq.w	80023b4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d069      	beq.n	80022de <HAL_RCC_OscConfig+0x6da>
 800220a:	2301      	movs	r3, #1
 800220c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002214:	fa93 f3a3 	rbit	r3, r3
 8002218:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800221c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002220:	fab3 f383 	clz	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	461a      	mov	r2, r3
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_RCC_OscConfig+0x654>)
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	461a      	mov	r2, r3
 8002230:	2301      	movs	r3, #1
 8002232:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002234:	f7ff f922 	bl	800147c <HAL_GetTick>
 8002238:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223c:	e00e      	b.n	800225c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800223e:	f7ff f91d 	bl	800147c <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d906      	bls.n	800225c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e3d9      	b.n	8002a06 <HAL_RCC_OscConfig+0xe02>
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
 8002258:	10908120 	.word	0x10908120
 800225c:	2302      	movs	r3, #2
 800225e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800226e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002272:	2202      	movs	r2, #2
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	fa93 f2a3 	rbit	r2, r3
 8002280:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800228a:	2202      	movs	r2, #2
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	fa93 f2a3 	rbit	r2, r3
 8002298:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800229c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229e:	4ba5      	ldr	r3, [pc, #660]	; (8002534 <HAL_RCC_OscConfig+0x930>)
 80022a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80022a6:	2102      	movs	r1, #2
 80022a8:	6019      	str	r1, [r3, #0]
 80022aa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	fa93 f1a3 	rbit	r1, r3
 80022b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80022b8:	6019      	str	r1, [r3, #0]
  return result;
 80022ba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	fab3 f383 	clz	r3, r3
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	f003 031f 	and.w	r3, r3, #31
 80022d0:	2101      	movs	r1, #1
 80022d2:	fa01 f303 	lsl.w	r3, r1, r3
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0b0      	beq.n	800223e <HAL_RCC_OscConfig+0x63a>
 80022dc:	e06a      	b.n	80023b4 <HAL_RCC_OscConfig+0x7b0>
 80022de:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80022e2:	2201      	movs	r2, #1
 80022e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	fa93 f2a3 	rbit	r2, r3
 80022f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022f4:	601a      	str	r2, [r3, #0]
  return result;
 80022f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022fa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022fc:	fab3 f383 	clz	r3, r3
 8002300:	b2db      	uxtb	r3, r3
 8002302:	461a      	mov	r2, r3
 8002304:	4b8c      	ldr	r3, [pc, #560]	; (8002538 <HAL_RCC_OscConfig+0x934>)
 8002306:	4413      	add	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	461a      	mov	r2, r3
 800230c:	2300      	movs	r3, #0
 800230e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002310:	f7ff f8b4 	bl	800147c <HAL_GetTick>
 8002314:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002318:	e009      	b.n	800232e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800231a:	f7ff f8af 	bl	800147c <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e36b      	b.n	8002a06 <HAL_RCC_OscConfig+0xe02>
 800232e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002332:	2202      	movs	r2, #2
 8002334:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	fa93 f2a3 	rbit	r2, r3
 8002340:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800234a:	2202      	movs	r2, #2
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	fa93 f2a3 	rbit	r2, r3
 8002358:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002362:	2202      	movs	r2, #2
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	fa93 f2a3 	rbit	r2, r3
 8002370:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002374:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002376:	4b6f      	ldr	r3, [pc, #444]	; (8002534 <HAL_RCC_OscConfig+0x930>)
 8002378:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800237a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800237e:	2102      	movs	r1, #2
 8002380:	6019      	str	r1, [r3, #0]
 8002382:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	fa93 f1a3 	rbit	r1, r3
 800238c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002390:	6019      	str	r1, [r3, #0]
  return result;
 8002392:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	2101      	movs	r1, #1
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1b2      	bne.n	800231a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b4:	1d3b      	adds	r3, r7, #4
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 8158 	beq.w	8002674 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c4:	2300      	movs	r3, #0
 80023c6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ca:	4b5a      	ldr	r3, [pc, #360]	; (8002534 <HAL_RCC_OscConfig+0x930>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d112      	bne.n	80023fc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d6:	4b57      	ldr	r3, [pc, #348]	; (8002534 <HAL_RCC_OscConfig+0x930>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	4a56      	ldr	r2, [pc, #344]	; (8002534 <HAL_RCC_OscConfig+0x930>)
 80023dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e0:	61d3      	str	r3, [r2, #28]
 80023e2:	4b54      	ldr	r3, [pc, #336]	; (8002534 <HAL_RCC_OscConfig+0x930>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80023ea:	f107 0308 	add.w	r3, r7, #8
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	f107 0308 	add.w	r3, r7, #8
 80023f4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80023f6:	2301      	movs	r3, #1
 80023f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fc:	4b4f      	ldr	r3, [pc, #316]	; (800253c <HAL_RCC_OscConfig+0x938>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002404:	2b00      	cmp	r3, #0
 8002406:	d11a      	bne.n	800243e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002408:	4b4c      	ldr	r3, [pc, #304]	; (800253c <HAL_RCC_OscConfig+0x938>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a4b      	ldr	r2, [pc, #300]	; (800253c <HAL_RCC_OscConfig+0x938>)
 800240e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002412:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002414:	f7ff f832 	bl	800147c <HAL_GetTick>
 8002418:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241c:	e009      	b.n	8002432 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800241e:	f7ff f82d 	bl	800147c <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e2e9      	b.n	8002a06 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002432:	4b42      	ldr	r3, [pc, #264]	; (800253c <HAL_RCC_OscConfig+0x938>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0ef      	beq.n	800241e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d106      	bne.n	8002456 <HAL_RCC_OscConfig+0x852>
 8002448:	4b3a      	ldr	r3, [pc, #232]	; (8002534 <HAL_RCC_OscConfig+0x930>)
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	4a39      	ldr	r2, [pc, #228]	; (8002534 <HAL_RCC_OscConfig+0x930>)
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	6213      	str	r3, [r2, #32]
 8002454:	e02f      	b.n	80024b6 <HAL_RCC_OscConfig+0x8b2>
 8002456:	1d3b      	adds	r3, r7, #4
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10c      	bne.n	800247a <HAL_RCC_OscConfig+0x876>
 8002460:	4b34      	ldr	r3, [pc, #208]	; (8002534 <HAL_RCC_OscConfig+0x930>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	4a33      	ldr	r2, [pc, #204]	; (8002534 <HAL_RCC_OscConfig+0x930>)
 8002466:	f023 0301 	bic.w	r3, r3, #1
 800246a:	6213      	str	r3, [r2, #32]
 800246c:	4b31      	ldr	r3, [pc, #196]	; (8002534 <HAL_RCC_OscConfig+0x930>)
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	4a30      	ldr	r2, [pc, #192]	; (8002534 <HAL_RCC_OscConfig+0x930>)
 8002472:	f023 0304 	bic.w	r3, r3, #4
 8002476:	6213      	str	r3, [r2, #32]
 8002478:	e01d      	b.n	80024b6 <HAL_RCC_OscConfig+0x8b2>
 800247a:	1d3b      	adds	r3, r7, #4
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b05      	cmp	r3, #5
 8002482:	d10c      	bne.n	800249e <HAL_RCC_OscConfig+0x89a>
 8002484:	4b2b      	ldr	r3, [pc, #172]	; (8002534 <HAL_RCC_OscConfig+0x930>)
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	4a2a      	ldr	r2, [pc, #168]	; (8002534 <HAL_RCC_OscConfig+0x930>)
 800248a:	f043 0304 	orr.w	r3, r3, #4
 800248e:	6213      	str	r3, [r2, #32]
 8002490:	4b28      	ldr	r3, [pc, #160]	; (8002534 <HAL_RCC_OscConfig+0x930>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	4a27      	ldr	r2, [pc, #156]	; (8002534 <HAL_RCC_OscConfig+0x930>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6213      	str	r3, [r2, #32]
 800249c:	e00b      	b.n	80024b6 <HAL_RCC_OscConfig+0x8b2>
 800249e:	4b25      	ldr	r3, [pc, #148]	; (8002534 <HAL_RCC_OscConfig+0x930>)
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	4a24      	ldr	r2, [pc, #144]	; (8002534 <HAL_RCC_OscConfig+0x930>)
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	6213      	str	r3, [r2, #32]
 80024aa:	4b22      	ldr	r3, [pc, #136]	; (8002534 <HAL_RCC_OscConfig+0x930>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4a21      	ldr	r2, [pc, #132]	; (8002534 <HAL_RCC_OscConfig+0x930>)
 80024b0:	f023 0304 	bic.w	r3, r3, #4
 80024b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024b6:	1d3b      	adds	r3, r7, #4
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d06b      	beq.n	8002598 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c0:	f7fe ffdc 	bl	800147c <HAL_GetTick>
 80024c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c8:	e00b      	b.n	80024e2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ca:	f7fe ffd7 	bl	800147c <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024da:	4293      	cmp	r3, r2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e291      	b.n	8002a06 <HAL_RCC_OscConfig+0xe02>
 80024e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80024e6:	2202      	movs	r2, #2
 80024e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	fa93 f2a3 	rbit	r2, r3
 80024f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80024fe:	2202      	movs	r2, #2
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	fa93 f2a3 	rbit	r2, r3
 800250c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002510:	601a      	str	r2, [r3, #0]
  return result;
 8002512:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002516:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	b2db      	uxtb	r3, r3
 8002522:	f043 0302 	orr.w	r3, r3, #2
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d109      	bne.n	8002540 <HAL_RCC_OscConfig+0x93c>
 800252c:	4b01      	ldr	r3, [pc, #4]	; (8002534 <HAL_RCC_OscConfig+0x930>)
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	e014      	b.n	800255c <HAL_RCC_OscConfig+0x958>
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000
 8002538:	10908120 	.word	0x10908120
 800253c:	40007000 	.word	0x40007000
 8002540:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002544:	2202      	movs	r2, #2
 8002546:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	fa93 f2a3 	rbit	r2, r3
 8002552:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	4bbb      	ldr	r3, [pc, #748]	; (8002848 <HAL_RCC_OscConfig+0xc44>)
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002560:	2102      	movs	r1, #2
 8002562:	6011      	str	r1, [r2, #0]
 8002564:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	fa92 f1a2 	rbit	r1, r2
 800256e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002572:	6011      	str	r1, [r2, #0]
  return result;
 8002574:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002578:	6812      	ldr	r2, [r2, #0]
 800257a:	fab2 f282 	clz	r2, r2
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	f002 021f 	and.w	r2, r2, #31
 800258a:	2101      	movs	r1, #1
 800258c:	fa01 f202 	lsl.w	r2, r1, r2
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d099      	beq.n	80024ca <HAL_RCC_OscConfig+0x8c6>
 8002596:	e063      	b.n	8002660 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002598:	f7fe ff70 	bl	800147c <HAL_GetTick>
 800259c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a0:	e00b      	b.n	80025ba <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7fe ff6b 	bl	800147c <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e225      	b.n	8002a06 <HAL_RCC_OscConfig+0xe02>
 80025ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80025be:	2202      	movs	r2, #2
 80025c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	fa93 f2a3 	rbit	r2, r3
 80025cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80025d6:	2202      	movs	r2, #2
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	fa93 f2a3 	rbit	r2, r3
 80025e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80025e8:	601a      	str	r2, [r3, #0]
  return result;
 80025ea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80025ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f0:	fab3 f383 	clz	r3, r3
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	f043 0302 	orr.w	r3, r3, #2
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d102      	bne.n	800260a <HAL_RCC_OscConfig+0xa06>
 8002604:	4b90      	ldr	r3, [pc, #576]	; (8002848 <HAL_RCC_OscConfig+0xc44>)
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	e00d      	b.n	8002626 <HAL_RCC_OscConfig+0xa22>
 800260a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800260e:	2202      	movs	r2, #2
 8002610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	fa93 f2a3 	rbit	r2, r3
 800261c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	4b89      	ldr	r3, [pc, #548]	; (8002848 <HAL_RCC_OscConfig+0xc44>)
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800262a:	2102      	movs	r1, #2
 800262c:	6011      	str	r1, [r2, #0]
 800262e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	fa92 f1a2 	rbit	r1, r2
 8002638:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800263c:	6011      	str	r1, [r2, #0]
  return result;
 800263e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	fab2 f282 	clz	r2, r2
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	f002 021f 	and.w	r2, r2, #31
 8002654:	2101      	movs	r1, #1
 8002656:	fa01 f202 	lsl.w	r2, r1, r2
 800265a:	4013      	ands	r3, r2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1a0      	bne.n	80025a2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002660:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002664:	2b01      	cmp	r3, #1
 8002666:	d105      	bne.n	8002674 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002668:	4b77      	ldr	r3, [pc, #476]	; (8002848 <HAL_RCC_OscConfig+0xc44>)
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	4a76      	ldr	r2, [pc, #472]	; (8002848 <HAL_RCC_OscConfig+0xc44>)
 800266e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002672:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002674:	1d3b      	adds	r3, r7, #4
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 81c2 	beq.w	8002a04 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002680:	4b71      	ldr	r3, [pc, #452]	; (8002848 <HAL_RCC_OscConfig+0xc44>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 030c 	and.w	r3, r3, #12
 8002688:	2b08      	cmp	r3, #8
 800268a:	f000 819c 	beq.w	80029c6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800268e:	1d3b      	adds	r3, r7, #4
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	2b02      	cmp	r3, #2
 8002696:	f040 8114 	bne.w	80028c2 <HAL_RCC_OscConfig+0xcbe>
 800269a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800269e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	fa93 f2a3 	rbit	r2, r3
 80026ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80026b2:	601a      	str	r2, [r3, #0]
  return result;
 80026b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80026b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	461a      	mov	r2, r3
 80026cc:	2300      	movs	r3, #0
 80026ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7fe fed4 	bl	800147c <HAL_GetTick>
 80026d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d8:	e009      	b.n	80026ee <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026da:	f7fe fecf 	bl	800147c <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e18b      	b.n	8002a06 <HAL_RCC_OscConfig+0xe02>
 80026ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80026f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	fa93 f2a3 	rbit	r2, r3
 8002702:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002706:	601a      	str	r2, [r3, #0]
  return result;
 8002708:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800270c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	095b      	lsrs	r3, r3, #5
 8002716:	b2db      	uxtb	r3, r3
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b01      	cmp	r3, #1
 8002720:	d102      	bne.n	8002728 <HAL_RCC_OscConfig+0xb24>
 8002722:	4b49      	ldr	r3, [pc, #292]	; (8002848 <HAL_RCC_OscConfig+0xc44>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	e01b      	b.n	8002760 <HAL_RCC_OscConfig+0xb5c>
 8002728:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800272c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002730:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002732:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	fa93 f2a3 	rbit	r2, r3
 800273c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002746:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	fa93 f2a3 	rbit	r2, r3
 8002756:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	4b3a      	ldr	r3, [pc, #232]	; (8002848 <HAL_RCC_OscConfig+0xc44>)
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002764:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002768:	6011      	str	r1, [r2, #0]
 800276a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	fa92 f1a2 	rbit	r1, r2
 8002774:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002778:	6011      	str	r1, [r2, #0]
  return result;
 800277a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	fab2 f282 	clz	r2, r2
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	f042 0220 	orr.w	r2, r2, #32
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	f002 021f 	and.w	r2, r2, #31
 8002790:	2101      	movs	r1, #1
 8002792:	fa01 f202 	lsl.w	r2, r1, r2
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d19e      	bne.n	80026da <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800279c:	4b2a      	ldr	r3, [pc, #168]	; (8002848 <HAL_RCC_OscConfig+0xc44>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027a4:	1d3b      	adds	r3, r7, #4
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80027aa:	1d3b      	adds	r3, r7, #4
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	430b      	orrs	r3, r1
 80027b2:	4925      	ldr	r1, [pc, #148]	; (8002848 <HAL_RCC_OscConfig+0xc44>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]
 80027b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80027bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	fa93 f2a3 	rbit	r2, r3
 80027cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027d0:	601a      	str	r2, [r3, #0]
  return result;
 80027d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027d6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027d8:	fab3 f383 	clz	r3, r3
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	461a      	mov	r2, r3
 80027ea:	2301      	movs	r3, #1
 80027ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ee:	f7fe fe45 	bl	800147c <HAL_GetTick>
 80027f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027f6:	e009      	b.n	800280c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f8:	f7fe fe40 	bl	800147c <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e0fc      	b.n	8002a06 <HAL_RCC_OscConfig+0xe02>
 800280c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002810:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002814:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	fa93 f2a3 	rbit	r2, r3
 8002820:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002824:	601a      	str	r2, [r3, #0]
  return result;
 8002826:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800282a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800282c:	fab3 f383 	clz	r3, r3
 8002830:	b2db      	uxtb	r3, r3
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	b2db      	uxtb	r3, r3
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b01      	cmp	r3, #1
 800283e:	d105      	bne.n	800284c <HAL_RCC_OscConfig+0xc48>
 8002840:	4b01      	ldr	r3, [pc, #4]	; (8002848 <HAL_RCC_OscConfig+0xc44>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	e01e      	b.n	8002884 <HAL_RCC_OscConfig+0xc80>
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000
 800284c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002850:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002854:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	fa93 f2a3 	rbit	r2, r3
 8002860:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800286a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	fa93 f2a3 	rbit	r2, r3
 800287a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	4b63      	ldr	r3, [pc, #396]	; (8002a10 <HAL_RCC_OscConfig+0xe0c>)
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002888:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800288c:	6011      	str	r1, [r2, #0]
 800288e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	fa92 f1a2 	rbit	r1, r2
 8002898:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800289c:	6011      	str	r1, [r2, #0]
  return result;
 800289e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	fab2 f282 	clz	r2, r2
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	f042 0220 	orr.w	r2, r2, #32
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	f002 021f 	and.w	r2, r2, #31
 80028b4:	2101      	movs	r1, #1
 80028b6:	fa01 f202 	lsl.w	r2, r1, r2
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d09b      	beq.n	80027f8 <HAL_RCC_OscConfig+0xbf4>
 80028c0:	e0a0      	b.n	8002a04 <HAL_RCC_OscConfig+0xe00>
 80028c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	fa93 f2a3 	rbit	r2, r3
 80028d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028da:	601a      	str	r2, [r3, #0]
  return result;
 80028dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e2:	fab3 f383 	clz	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	461a      	mov	r2, r3
 80028f4:	2300      	movs	r3, #0
 80028f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f8:	f7fe fdc0 	bl	800147c <HAL_GetTick>
 80028fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002900:	e009      	b.n	8002916 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002902:	f7fe fdbb 	bl	800147c <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e077      	b.n	8002a06 <HAL_RCC_OscConfig+0xe02>
 8002916:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800291a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800291e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002920:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	fa93 f2a3 	rbit	r2, r3
 800292a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800292e:	601a      	str	r2, [r3, #0]
  return result;
 8002930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002934:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002936:	fab3 f383 	clz	r3, r3
 800293a:	b2db      	uxtb	r3, r3
 800293c:	095b      	lsrs	r3, r3, #5
 800293e:	b2db      	uxtb	r3, r3
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b01      	cmp	r3, #1
 8002948:	d102      	bne.n	8002950 <HAL_RCC_OscConfig+0xd4c>
 800294a:	4b31      	ldr	r3, [pc, #196]	; (8002a10 <HAL_RCC_OscConfig+0xe0c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	e01b      	b.n	8002988 <HAL_RCC_OscConfig+0xd84>
 8002950:	f107 0320 	add.w	r3, r7, #32
 8002954:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002958:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	f107 0320 	add.w	r3, r7, #32
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	fa93 f2a3 	rbit	r2, r3
 8002964:	f107 031c 	add.w	r3, r7, #28
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	f107 0318 	add.w	r3, r7, #24
 800296e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	f107 0318 	add.w	r3, r7, #24
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	fa93 f2a3 	rbit	r2, r3
 800297e:	f107 0314 	add.w	r3, r7, #20
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <HAL_RCC_OscConfig+0xe0c>)
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	f107 0210 	add.w	r2, r7, #16
 800298c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002990:	6011      	str	r1, [r2, #0]
 8002992:	f107 0210 	add.w	r2, r7, #16
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	fa92 f1a2 	rbit	r1, r2
 800299c:	f107 020c 	add.w	r2, r7, #12
 80029a0:	6011      	str	r1, [r2, #0]
  return result;
 80029a2:	f107 020c 	add.w	r2, r7, #12
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	fab2 f282 	clz	r2, r2
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	f042 0220 	orr.w	r2, r2, #32
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	f002 021f 	and.w	r2, r2, #31
 80029b8:	2101      	movs	r1, #1
 80029ba:	fa01 f202 	lsl.w	r2, r1, r2
 80029be:	4013      	ands	r3, r2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d19e      	bne.n	8002902 <HAL_RCC_OscConfig+0xcfe>
 80029c4:	e01e      	b.n	8002a04 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c6:	1d3b      	adds	r3, r7, #4
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e018      	b.n	8002a06 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029d4:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <HAL_RCC_OscConfig+0xe0c>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80029e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029e4:	1d3b      	adds	r3, r7, #4
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d108      	bne.n	8002a00 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80029ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80029f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029f6:	1d3b      	adds	r3, r7, #4
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d001      	beq.n	8002a04 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40021000 	.word	0x40021000

08002a14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b09e      	sub	sp, #120	; 0x78
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e162      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b90      	ldr	r3, [pc, #576]	; (8002c70 <HAL_RCC_ClockConfig+0x25c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d910      	bls.n	8002a5c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b8d      	ldr	r3, [pc, #564]	; (8002c70 <HAL_RCC_ClockConfig+0x25c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 0207 	bic.w	r2, r3, #7
 8002a42:	498b      	ldr	r1, [pc, #556]	; (8002c70 <HAL_RCC_ClockConfig+0x25c>)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4a:	4b89      	ldr	r3, [pc, #548]	; (8002c70 <HAL_RCC_ClockConfig+0x25c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d001      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e14a      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d008      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a68:	4b82      	ldr	r3, [pc, #520]	; (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	497f      	ldr	r1, [pc, #508]	; (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 80dc 	beq.w	8002c40 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d13c      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xf6>
 8002a90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a94:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a98:	fa93 f3a3 	rbit	r3, r3
 8002a9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa0:	fab3 f383 	clz	r3, r3
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d102      	bne.n	8002aba <HAL_RCC_ClockConfig+0xa6>
 8002ab4:	4b6f      	ldr	r3, [pc, #444]	; (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	e00f      	b.n	8002ada <HAL_RCC_ClockConfig+0xc6>
 8002aba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002abe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	667b      	str	r3, [r7, #100]	; 0x64
 8002ac8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002acc:	663b      	str	r3, [r7, #96]	; 0x60
 8002ace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ad6:	4b67      	ldr	r3, [pc, #412]	; (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ade:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ae0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ae2:	fa92 f2a2 	rbit	r2, r2
 8002ae6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002ae8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002aea:	fab2 f282 	clz	r2, r2
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	f042 0220 	orr.w	r2, r2, #32
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	f002 021f 	and.w	r2, r2, #31
 8002afa:	2101      	movs	r1, #1
 8002afc:	fa01 f202 	lsl.w	r2, r1, r2
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d17b      	bne.n	8002bfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e0f3      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d13c      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x178>
 8002b12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b1a:	fa93 f3a3 	rbit	r3, r3
 8002b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b22:	fab3 f383 	clz	r3, r3
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	095b      	lsrs	r3, r3, #5
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d102      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x128>
 8002b36:	4b4f      	ldr	r3, [pc, #316]	; (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	e00f      	b.n	8002b5c <HAL_RCC_ClockConfig+0x148>
 8002b3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	647b      	str	r3, [r7, #68]	; 0x44
 8002b4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b4e:	643b      	str	r3, [r7, #64]	; 0x40
 8002b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b58:	4b46      	ldr	r3, [pc, #280]	; (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b60:	63ba      	str	r2, [r7, #56]	; 0x38
 8002b62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b64:	fa92 f2a2 	rbit	r2, r2
 8002b68:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b6c:	fab2 f282 	clz	r2, r2
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	f042 0220 	orr.w	r2, r2, #32
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	f002 021f 	and.w	r2, r2, #31
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d13a      	bne.n	8002bfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0b2      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x2de>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	095b      	lsrs	r3, r3, #5
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d102      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x1a0>
 8002bae:	4b31      	ldr	r3, [pc, #196]	; (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	e00d      	b.n	8002bd0 <HAL_RCC_ClockConfig+0x1bc>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bba:	fa93 f3a3 	rbit	r3, r3
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	623b      	str	r3, [r7, #32]
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	fa93 f3a3 	rbit	r3, r3
 8002bca:	61fb      	str	r3, [r7, #28]
 8002bcc:	4b29      	ldr	r3, [pc, #164]	; (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	61ba      	str	r2, [r7, #24]
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	fa92 f2a2 	rbit	r2, r2
 8002bda:	617a      	str	r2, [r7, #20]
  return result;
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	fab2 f282 	clz	r2, r2
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	f042 0220 	orr.w	r2, r2, #32
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	f002 021f 	and.w	r2, r2, #31
 8002bee:	2101      	movs	r1, #1
 8002bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e079      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bfe:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f023 0203 	bic.w	r2, r3, #3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	491a      	ldr	r1, [pc, #104]	; (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c10:	f7fe fc34 	bl	800147c <HAL_GetTick>
 8002c14:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c16:	e00a      	b.n	8002c2e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c18:	f7fe fc30 	bl	800147c <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e061      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2e:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <HAL_RCC_ClockConfig+0x260>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f003 020c 	and.w	r2, r3, #12
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d1eb      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c40:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <HAL_RCC_ClockConfig+0x25c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d214      	bcs.n	8002c78 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4e:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <HAL_RCC_ClockConfig+0x25c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f023 0207 	bic.w	r2, r3, #7
 8002c56:	4906      	ldr	r1, [pc, #24]	; (8002c70 <HAL_RCC_ClockConfig+0x25c>)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5e:	4b04      	ldr	r3, [pc, #16]	; (8002c70 <HAL_RCC_ClockConfig+0x25c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d005      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e040      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x2de>
 8002c70:	40022000 	.word	0x40022000
 8002c74:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c84:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <HAL_RCC_ClockConfig+0x2e8>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	491a      	ldr	r1, [pc, #104]	; (8002cfc <HAL_RCC_ClockConfig+0x2e8>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d009      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ca2:	4b16      	ldr	r3, [pc, #88]	; (8002cfc <HAL_RCC_ClockConfig+0x2e8>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	4912      	ldr	r1, [pc, #72]	; (8002cfc <HAL_RCC_ClockConfig+0x2e8>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002cb6:	f000 f829 	bl	8002d0c <HAL_RCC_GetSysClockFreq>
 8002cba:	4601      	mov	r1, r0
 8002cbc:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <HAL_RCC_ClockConfig+0x2e8>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cc4:	22f0      	movs	r2, #240	; 0xf0
 8002cc6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	fa92 f2a2 	rbit	r2, r2
 8002cce:	60fa      	str	r2, [r7, #12]
  return result;
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	fab2 f282 	clz	r2, r2
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	40d3      	lsrs	r3, r2
 8002cda:	4a09      	ldr	r2, [pc, #36]	; (8002d00 <HAL_RCC_ClockConfig+0x2ec>)
 8002cdc:	5cd3      	ldrb	r3, [r2, r3]
 8002cde:	fa21 f303 	lsr.w	r3, r1, r3
 8002ce2:	4a08      	ldr	r2, [pc, #32]	; (8002d04 <HAL_RCC_ClockConfig+0x2f0>)
 8002ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002ce6:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <HAL_RCC_ClockConfig+0x2f4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fe fb82 	bl	80013f4 <HAL_InitTick>
  
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3778      	adds	r7, #120	; 0x78
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	0800309c 	.word	0x0800309c
 8002d04:	20000000 	.word	0x20000000
 8002d08:	20000004 	.word	0x20000004

08002d0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b08b      	sub	sp, #44	; 0x2c
 8002d10:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
 8002d16:	2300      	movs	r3, #0
 8002d18:	61bb      	str	r3, [r7, #24]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002d26:	4b29      	ldr	r3, [pc, #164]	; (8002dcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d002      	beq.n	8002d3c <HAL_RCC_GetSysClockFreq+0x30>
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d003      	beq.n	8002d42 <HAL_RCC_GetSysClockFreq+0x36>
 8002d3a:	e03c      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d3c:	4b24      	ldr	r3, [pc, #144]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d3e:	623b      	str	r3, [r7, #32]
      break;
 8002d40:	e03c      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002d48:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002d4c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	fa92 f2a2 	rbit	r2, r2
 8002d54:	607a      	str	r2, [r7, #4]
  return result;
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	fab2 f282 	clz	r2, r2
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	40d3      	lsrs	r3, r2
 8002d60:	4a1c      	ldr	r2, [pc, #112]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d62:	5cd3      	ldrb	r3, [r2, r3]
 8002d64:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002d66:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	220f      	movs	r2, #15
 8002d70:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	fa92 f2a2 	rbit	r2, r2
 8002d78:	60fa      	str	r2, [r7, #12]
  return result;
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	fab2 f282 	clz	r2, r2
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	40d3      	lsrs	r3, r2
 8002d84:	4a14      	ldr	r2, [pc, #80]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d86:	5cd3      	ldrb	r3, [r2, r3]
 8002d88:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d94:	4a0e      	ldr	r2, [pc, #56]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	fb02 f303 	mul.w	r3, r2, r3
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
 8002da4:	e004      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	4a0c      	ldr	r2, [pc, #48]	; (8002ddc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002daa:	fb02 f303 	mul.w	r3, r2, r3
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	623b      	str	r3, [r7, #32]
      break;
 8002db4:	e002      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002db8:	623b      	str	r3, [r7, #32]
      break;
 8002dba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	372c      	adds	r7, #44	; 0x2c
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	007a1200 	.word	0x007a1200
 8002dd4:	080030ac 	.word	0x080030ac
 8002dd8:	080030bc 	.word	0x080030bc
 8002ddc:	003d0900 	.word	0x003d0900

08002de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b092      	sub	sp, #72	; 0x48
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80d0 	beq.w	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e04:	4b86      	ldr	r3, [pc, #536]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10e      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e10:	4b83      	ldr	r3, [pc, #524]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	4a82      	ldr	r2, [pc, #520]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	61d3      	str	r3, [r2, #28]
 8002e1c:	4b80      	ldr	r3, [pc, #512]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2e:	4b7d      	ldr	r3, [pc, #500]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d118      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e3a:	4b7a      	ldr	r3, [pc, #488]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a79      	ldr	r2, [pc, #484]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e44:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e46:	f7fe fb19 	bl	800147c <HAL_GetTick>
 8002e4a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4c:	e008      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4e:	f7fe fb15 	bl	800147c <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b64      	cmp	r3, #100	; 0x64
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e0db      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e60:	4b70      	ldr	r3, [pc, #448]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f0      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e6c:	4b6c      	ldr	r3, [pc, #432]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e74:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d07d      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d076      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e8a:	4b65      	ldr	r3, [pc, #404]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e98:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	fa93 f3a3 	rbit	r3, r3
 8002ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ea4:	fab3 f383 	clz	r3, r3
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	4b5e      	ldr	r3, [pc, #376]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	6013      	str	r3, [r2, #0]
 8002eb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ebc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ec8:	fab3 f383 	clz	r3, r3
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	461a      	mov	r2, r3
 8002ed0:	4b55      	ldr	r3, [pc, #340]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	2300      	movs	r3, #0
 8002eda:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002edc:	4a50      	ldr	r2, [pc, #320]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d045      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fe fac6 	bl	800147c <HAL_GetTick>
 8002ef0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef2:	e00a      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef4:	f7fe fac2 	bl	800147c <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e086      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f10:	fa93 f3a3 	rbit	r3, r3
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
 8002f16:	2302      	movs	r3, #2
 8002f18:	623b      	str	r3, [r7, #32]
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	fa93 f3a3 	rbit	r3, r3
 8002f20:	61fb      	str	r3, [r7, #28]
  return result;
 8002f22:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f24:	fab3 f383 	clz	r3, r3
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	f043 0302 	orr.w	r3, r3, #2
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d102      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002f38:	4b39      	ldr	r3, [pc, #228]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	e007      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	fa93 f3a3 	rbit	r3, r3
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	4b35      	ldr	r3, [pc, #212]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	2202      	movs	r2, #2
 8002f50:	613a      	str	r2, [r7, #16]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	fa92 f2a2 	rbit	r2, r2
 8002f58:	60fa      	str	r2, [r7, #12]
  return result;
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	fab2 f282 	clz	r2, r2
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	f002 021f 	and.w	r2, r2, #31
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0bd      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f78:	4b29      	ldr	r3, [pc, #164]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	4926      	ldr	r1, [pc, #152]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d105      	bne.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f92:	4b23      	ldr	r3, [pc, #140]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	4a22      	ldr	r2, [pc, #136]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d008      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002faa:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	f023 0203 	bic.w	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	491a      	ldr	r1, [pc, #104]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0320 	and.w	r3, r3, #32
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d008      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fc8:	4b15      	ldr	r3, [pc, #84]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	f023 0210 	bic.w	r2, r3, #16
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	4912      	ldr	r1, [pc, #72]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d008      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fe6:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fea:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	490b      	ldr	r1, [pc, #44]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003008:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	4903      	ldr	r1, [pc, #12]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003012:	4313      	orrs	r3, r2
 8003014:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3748      	adds	r7, #72	; 0x48
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40021000 	.word	0x40021000
 8003024:	40007000 	.word	0x40007000
 8003028:	10908100 	.word	0x10908100

0800302c <__libc_init_array>:
 800302c:	b570      	push	{r4, r5, r6, lr}
 800302e:	4e0d      	ldr	r6, [pc, #52]	; (8003064 <__libc_init_array+0x38>)
 8003030:	4c0d      	ldr	r4, [pc, #52]	; (8003068 <__libc_init_array+0x3c>)
 8003032:	1ba4      	subs	r4, r4, r6
 8003034:	10a4      	asrs	r4, r4, #2
 8003036:	2500      	movs	r5, #0
 8003038:	42a5      	cmp	r5, r4
 800303a:	d109      	bne.n	8003050 <__libc_init_array+0x24>
 800303c:	4e0b      	ldr	r6, [pc, #44]	; (800306c <__libc_init_array+0x40>)
 800303e:	4c0c      	ldr	r4, [pc, #48]	; (8003070 <__libc_init_array+0x44>)
 8003040:	f000 f820 	bl	8003084 <_init>
 8003044:	1ba4      	subs	r4, r4, r6
 8003046:	10a4      	asrs	r4, r4, #2
 8003048:	2500      	movs	r5, #0
 800304a:	42a5      	cmp	r5, r4
 800304c:	d105      	bne.n	800305a <__libc_init_array+0x2e>
 800304e:	bd70      	pop	{r4, r5, r6, pc}
 8003050:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003054:	4798      	blx	r3
 8003056:	3501      	adds	r5, #1
 8003058:	e7ee      	b.n	8003038 <__libc_init_array+0xc>
 800305a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800305e:	4798      	blx	r3
 8003060:	3501      	adds	r5, #1
 8003062:	e7f2      	b.n	800304a <__libc_init_array+0x1e>
 8003064:	080030cc 	.word	0x080030cc
 8003068:	080030cc 	.word	0x080030cc
 800306c:	080030cc 	.word	0x080030cc
 8003070:	080030d4 	.word	0x080030d4

08003074 <memset>:
 8003074:	4402      	add	r2, r0
 8003076:	4603      	mov	r3, r0
 8003078:	4293      	cmp	r3, r2
 800307a:	d100      	bne.n	800307e <memset+0xa>
 800307c:	4770      	bx	lr
 800307e:	f803 1b01 	strb.w	r1, [r3], #1
 8003082:	e7f9      	b.n	8003078 <memset+0x4>

08003084 <_init>:
 8003084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003086:	bf00      	nop
 8003088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800308a:	bc08      	pop	{r3}
 800308c:	469e      	mov	lr, r3
 800308e:	4770      	bx	lr

08003090 <_fini>:
 8003090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003092:	bf00      	nop
 8003094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003096:	bc08      	pop	{r3}
 8003098:	469e      	mov	lr, r3
 800309a:	4770      	bx	lr
