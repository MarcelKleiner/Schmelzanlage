
GrafikTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d54  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002edc  08002edc  00012edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f0c  08002f0c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f0c  08002f0c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f0c  08002f0c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002f0c  08002f0c  00012f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f14  08002f14  00012f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001074  2000000c  08002f24  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001080  08002f24  00021080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000233aa  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000332f  00000000  00000000  000433e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000920  00000000  00000000  00046718  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000818  00000000  00000000  00047038  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bf6a  00000000  00000000  00047850  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c215  00000000  00000000  000637ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f250  00000000  00000000  0006f9cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fec1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002380  00000000  00000000  000fec9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ec4 	.word	0x08002ec4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002ec4 	.word	0x08002ec4

080001c8 <_ZN7AppMainC1Ev>:

//#include<iostream>
#include<string> // for string class
using namespace std;

AppMain::AppMain() {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4618      	mov	r0, r3
 80001d4:	f000 fb92 	bl	80008fc <_ZN9LCDDriverC1Ev>
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	3304      	adds	r3, #4
 80001dc:	687a      	ldr	r2, [r7, #4]
 80001de:	4611      	mov	r1, r2
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 f88a 	bl	80002fa <_ZN10ImgControlC1EP9LCDDriver>
	// TODO Auto-generated constructor stub

}
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4618      	mov	r0, r3
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}

080001f0 <_ZN7AppMain4mainEv>:

void AppMain::main(){
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b086      	sub	sp, #24
 80001f4:	af02      	add	r7, sp, #8
 80001f6:	6078      	str	r0, [r7, #4]

	imgControl.initImgControl();
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	3304      	adds	r3, #4
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 f891 	bl	8000324 <_ZN10ImgControl14initImgControlEv>
	lcdDriver.WriteText("Press F1 to enter BIOS...");

	lcdDriver.WriteRectangle(140, 50, 51, 30, 1);
	*/
	while(1){
		for(int i = 0; i<98;i++){
 8000202:	2300      	movs	r3, #0
 8000204:	60fb      	str	r3, [r7, #12]
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	2b61      	cmp	r3, #97	; 0x61
 800020a:	dc38      	bgt.n	800027e <_ZN7AppMain4mainEv+0x8e>
			imgControl.writeRectangle(i, i, 30, 15, 1);
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	1d18      	adds	r0, r3, #4
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	b2d9      	uxtb	r1, r3
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	b2da      	uxtb	r2, r3
 8000218:	2301      	movs	r3, #1
 800021a:	9301      	str	r3, [sp, #4]
 800021c:	230f      	movs	r3, #15
 800021e:	9300      	str	r3, [sp, #0]
 8000220:	231e      	movs	r3, #30
 8000222:	f000 f958 	bl	80004d6 <_ZN10ImgControl14writeRectangleEhhhhh>
			imgControl.writeRectangle(i+100, i, 20, 10, 1);
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	1d18      	adds	r0, r3, #4
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	b2db      	uxtb	r3, r3
 800022e:	3364      	adds	r3, #100	; 0x64
 8000230:	b2d9      	uxtb	r1, r3
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	b2da      	uxtb	r2, r3
 8000236:	2301      	movs	r3, #1
 8000238:	9301      	str	r3, [sp, #4]
 800023a:	230a      	movs	r3, #10
 800023c:	9300      	str	r3, [sp, #0]
 800023e:	2314      	movs	r3, #20
 8000240:	f000 f949 	bl	80004d6 <_ZN10ImgControl14writeRectangleEhhhhh>
			imgControl.writeRectangle(i+40, i, 10, 25, 1);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	1d18      	adds	r0, r3, #4
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	b2db      	uxtb	r3, r3
 800024c:	3328      	adds	r3, #40	; 0x28
 800024e:	b2d9      	uxtb	r1, r3
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	b2da      	uxtb	r2, r3
 8000254:	2301      	movs	r3, #1
 8000256:	9301      	str	r3, [sp, #4]
 8000258:	2319      	movs	r3, #25
 800025a:	9300      	str	r3, [sp, #0]
 800025c:	230a      	movs	r3, #10
 800025e:	f000 f93a 	bl	80004d6 <_ZN10ImgControl14writeRectangleEhhhhh>
			imgControl.writeScreenMirror();
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	3304      	adds	r3, #4
 8000266:	4618      	mov	r0, r3
 8000268:	f000 f869 	bl	800033e <_ZN10ImgControl17writeScreenMirrorEv>
			imgControl.clearMirror();
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	3304      	adds	r3, #4
 8000270:	4618      	mov	r0, r3
 8000272:	f000 f96b 	bl	800054c <_ZN10ImgControl11clearMirrorEv>
		for(int i = 0; i<98;i++){
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	3301      	adds	r3, #1
 800027a:	60fb      	str	r3, [r7, #12]
 800027c:	e7c3      	b.n	8000206 <_ZN7AppMain4mainEv+0x16>
//			lcdDriver.WriteRectangle(200, i, 30, 20, 0);
//			lcdDriver.WriteRectangle(i, 0, 30, 20, 0);
			//lcdDriver.ClearDisplay();
		}

		for(int i = 98; i>0;i--){
 800027e:	2362      	movs	r3, #98	; 0x62
 8000280:	60bb      	str	r3, [r7, #8]
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	2b00      	cmp	r3, #0
 8000286:	ddbc      	ble.n	8000202 <_ZN7AppMain4mainEv+0x12>
			imgControl.writeRectangle(i, i, 30, 15, 1);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	1d18      	adds	r0, r3, #4
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	b2d9      	uxtb	r1, r3
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	b2da      	uxtb	r2, r3
 8000294:	2301      	movs	r3, #1
 8000296:	9301      	str	r3, [sp, #4]
 8000298:	230f      	movs	r3, #15
 800029a:	9300      	str	r3, [sp, #0]
 800029c:	231e      	movs	r3, #30
 800029e:	f000 f91a 	bl	80004d6 <_ZN10ImgControl14writeRectangleEhhhhh>
			imgControl.writeRectangle(i+100, i, 20, 10, 1);
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	1d18      	adds	r0, r3, #4
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	3364      	adds	r3, #100	; 0x64
 80002ac:	b2d9      	uxtb	r1, r3
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	b2da      	uxtb	r2, r3
 80002b2:	2301      	movs	r3, #1
 80002b4:	9301      	str	r3, [sp, #4]
 80002b6:	230a      	movs	r3, #10
 80002b8:	9300      	str	r3, [sp, #0]
 80002ba:	2314      	movs	r3, #20
 80002bc:	f000 f90b 	bl	80004d6 <_ZN10ImgControl14writeRectangleEhhhhh>
			imgControl.writeRectangle(i+40, i, 10, 25, 1);
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	1d18      	adds	r0, r3, #4
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	3328      	adds	r3, #40	; 0x28
 80002ca:	b2d9      	uxtb	r1, r3
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	2301      	movs	r3, #1
 80002d2:	9301      	str	r3, [sp, #4]
 80002d4:	2319      	movs	r3, #25
 80002d6:	9300      	str	r3, [sp, #0]
 80002d8:	230a      	movs	r3, #10
 80002da:	f000 f8fc 	bl	80004d6 <_ZN10ImgControl14writeRectangleEhhhhh>
			imgControl.writeScreenMirror();
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	3304      	adds	r3, #4
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 f82b 	bl	800033e <_ZN10ImgControl17writeScreenMirrorEv>
			imgControl.clearMirror();
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	3304      	adds	r3, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 f92d 	bl	800054c <_ZN10ImgControl11clearMirrorEv>
		for(int i = 98; i>0;i--){
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	3b01      	subs	r3, #1
 80002f6:	60bb      	str	r3, [r7, #8]
 80002f8:	e7c3      	b.n	8000282 <_ZN7AppMain4mainEv+0x92>

080002fa <_ZN10ImgControlC1EP9LCDDriver>:
using namespace std;




ImgControl::ImgControl(LCDDriver *lcdDriver) {
 80002fa:	b580      	push	{r7, lr}
 80002fc:	b082      	sub	sp, #8
 80002fe:	af00      	add	r7, sp, #0
 8000300:	6078      	str	r0, [r7, #4]
 8000302:	6039      	str	r1, [r7, #0]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	3304      	adds	r3, #4
 8000308:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f002 fdd0 	bl	8002eb4 <memset>
	this->lcdDriver = lcdDriver;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	683a      	ldr	r2, [r7, #0]
 8000318:	601a      	str	r2, [r3, #0]
}
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4618      	mov	r0, r3
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <_ZN10ImgControl14initImgControlEv>:


void ImgControl::initImgControl(void){
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	this->lcdDriver->InitLCD();
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4618      	mov	r0, r3
 8000332:	f000 faee 	bl	8000912 <_ZN9LCDDriver7InitLCDEv>
}
 8000336:	bf00      	nop
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}

0800033e <_ZN10ImgControl17writeScreenMirrorEv>:




void ImgControl::writeScreenMirror(){
 800033e:	b580      	push	{r7, lr}
 8000340:	b086      	sub	sp, #24
 8000342:	af00      	add	r7, sp, #0
 8000344:	6078      	str	r0, [r7, #4]
	//lcdDriver->writeScreen(screenMirror);


	lcdDriver->WriteData_16bit(LCD_setAddressPointer, LCD_GRAPHIC_START_ADDR);				//set Address pointer to Graphic home Address
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800034e:	2124      	movs	r1, #36	; 0x24
 8000350:	4618      	mov	r0, r3
 8000352:	f000 fc55 	bl	8000c00 <_ZN9LCDDriver15WriteData_16bitEht>
	uint16_t addrPointer = LCD_GRAPHIC_START_ADDR;
 8000356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800035a:	827b      	strh	r3, [r7, #18]
	uint8_t sendByte = 0;
 800035c:	2300      	movs	r3, #0
 800035e:	75fb      	strb	r3, [r7, #23]

	for(uint8_t rowCounter = 0;rowCounter < LCD_HEIGHT; rowCounter++){
 8000360:	2300      	movs	r3, #0
 8000362:	75bb      	strb	r3, [r7, #22]
 8000364:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000368:	2b00      	cmp	r3, #0
 800036a:	db49      	blt.n	8000400 <_ZN10ImgControl17writeScreenMirrorEv+0xc2>
		for(uint8_t columnCounter = 0; columnCounter < 40; columnCounter++){
 800036c:	2300      	movs	r3, #0
 800036e:	757b      	strb	r3, [r7, #21]
 8000370:	7d7b      	ldrb	r3, [r7, #21]
 8000372:	2b27      	cmp	r3, #39	; 0x27
 8000374:	d840      	bhi.n	80003f8 <_ZN10ImgControl17writeScreenMirrorEv+0xba>
			sendByte = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	75fb      	strb	r3, [r7, #23]
			for(uint8_t bitCounter = 0; bitCounter<6; bitCounter++){
 800037a:	2300      	movs	r3, #0
 800037c:	753b      	strb	r3, [r7, #20]
 800037e:	7d3b      	ldrb	r3, [r7, #20]
 8000380:	2b05      	cmp	r3, #5
 8000382:	d82b      	bhi.n	80003dc <_ZN10ImgControl17writeScreenMirrorEv+0x9e>
				sendByte |= screenMirror[rowCounter][0];
 8000384:	7dbb      	ldrb	r3, [r7, #22]
 8000386:	015b      	lsls	r3, r3, #5
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	4413      	add	r3, r2
 800038c:	1d19      	adds	r1, r3, #4
 800038e:	f107 0308 	add.w	r3, r7, #8
 8000392:	2200      	movs	r2, #0
 8000394:	4618      	mov	r0, r3
 8000396:	f000 f8f3 	bl	8000580 <_ZNSt6bitsetILj240EEixEj>
 800039a:	f107 0308 	add.w	r3, r7, #8
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 f908 	bl	80005b4 <_ZNKSt6bitsetILj240EE9referencecvbEv>
 80003a4:	4603      	mov	r3, r0
 80003a6:	b25a      	sxtb	r2, r3
 80003a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80003ac:	4313      	orrs	r3, r2
 80003ae:	b25b      	sxtb	r3, r3
 80003b0:	75fb      	strb	r3, [r7, #23]
 80003b2:	f107 0308 	add.w	r3, r7, #8
 80003b6:	4618      	mov	r0, r3
 80003b8:	f000 f8f1 	bl	800059e <_ZNSt6bitsetILj240EE9referenceD1Ev>
				sendByte<<=1;
 80003bc:	7dfb      	ldrb	r3, [r7, #23]
 80003be:	005b      	lsls	r3, r3, #1
 80003c0:	75fb      	strb	r3, [r7, #23]
				screenMirror[rowCounter]>>=1;
 80003c2:	7dbb      	ldrb	r3, [r7, #22]
 80003c4:	015b      	lsls	r3, r3, #5
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	4413      	add	r3, r2
 80003ca:	3304      	adds	r3, #4
 80003cc:	2101      	movs	r1, #1
 80003ce:	4618      	mov	r0, r3
 80003d0:	f000 f907 	bl	80005e2 <_ZNSt6bitsetILj240EErSEj>
			for(uint8_t bitCounter = 0; bitCounter<6; bitCounter++){
 80003d4:	7d3b      	ldrb	r3, [r7, #20]
 80003d6:	3301      	adds	r3, #1
 80003d8:	753b      	strb	r3, [r7, #20]
 80003da:	e7d0      	b.n	800037e <_ZN10ImgControl17writeScreenMirrorEv+0x40>
			}
			sendByte>>=1;
 80003dc:	7dfb      	ldrb	r3, [r7, #23]
 80003de:	105b      	asrs	r3, r3, #1
 80003e0:	75fb      	strb	r3, [r7, #23]

			lcdDriver->WriteData_8bit(LCD_dataWriteAndIncrementADP,sendByte);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	7dfa      	ldrb	r2, [r7, #23]
 80003e8:	21c0      	movs	r1, #192	; 0xc0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 fbd1 	bl	8000b92 <_ZN9LCDDriver14WriteData_8bitEhh>
		for(uint8_t columnCounter = 0; columnCounter < 40; columnCounter++){
 80003f0:	7d7b      	ldrb	r3, [r7, #21]
 80003f2:	3301      	adds	r3, #1
 80003f4:	757b      	strb	r3, [r7, #21]
 80003f6:	e7bb      	b.n	8000370 <_ZN10ImgControl17writeScreenMirrorEv+0x32>
	for(uint8_t rowCounter = 0;rowCounter < LCD_HEIGHT; rowCounter++){
 80003f8:	7dbb      	ldrb	r3, [r7, #22]
 80003fa:	3301      	adds	r3, #1
 80003fc:	75bb      	strb	r3, [r7, #22]
 80003fe:	e7b1      	b.n	8000364 <_ZN10ImgControl17writeScreenMirrorEv+0x26>
		}
	}

}
 8000400:	bf00      	nop
 8000402:	3718      	adds	r7, #24
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <_ZN10ImgControl10writeXLineEhhhh>:


void ImgControl::writeXLine(uint8_t startX, uint8_t startY, uint8_t width, uint8_t lineThickness){
 8000408:	b580      	push	{r7, lr}
 800040a:	b086      	sub	sp, #24
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	4608      	mov	r0, r1
 8000412:	4611      	mov	r1, r2
 8000414:	461a      	mov	r2, r3
 8000416:	4603      	mov	r3, r0
 8000418:	70fb      	strb	r3, [r7, #3]
 800041a:	460b      	mov	r3, r1
 800041c:	70bb      	strb	r3, [r7, #2]
 800041e:	4613      	mov	r3, r2
 8000420:	707b      	strb	r3, [r7, #1]
	for(uint8_t i = 0; i<width; i++){
 8000422:	2300      	movs	r3, #0
 8000424:	75fb      	strb	r3, [r7, #23]
 8000426:	7dfa      	ldrb	r2, [r7, #23]
 8000428:	787b      	ldrb	r3, [r7, #1]
 800042a:	429a      	cmp	r2, r3
 800042c:	d21c      	bcs.n	8000468 <_ZN10ImgControl10writeXLineEhhhh+0x60>
		screenMirror[startY][startX+i] = 1;
 800042e:	78bb      	ldrb	r3, [r7, #2]
 8000430:	015b      	lsls	r3, r3, #5
 8000432:	687a      	ldr	r2, [r7, #4]
 8000434:	4413      	add	r3, r2
 8000436:	1d19      	adds	r1, r3, #4
 8000438:	78fa      	ldrb	r2, [r7, #3]
 800043a:	7dfb      	ldrb	r3, [r7, #23]
 800043c:	4413      	add	r3, r2
 800043e:	461a      	mov	r2, r3
 8000440:	f107 030c 	add.w	r3, r7, #12
 8000444:	4618      	mov	r0, r3
 8000446:	f000 f89b 	bl	8000580 <_ZNSt6bitsetILj240EEixEj>
 800044a:	f107 030c 	add.w	r3, r7, #12
 800044e:	2101      	movs	r1, #1
 8000450:	4618      	mov	r0, r3
 8000452:	f000 f8e5 	bl	8000620 <_ZNSt6bitsetILj240EE9referenceaSEb>
 8000456:	f107 030c 	add.w	r3, r7, #12
 800045a:	4618      	mov	r0, r3
 800045c:	f000 f89f 	bl	800059e <_ZNSt6bitsetILj240EE9referenceD1Ev>
	for(uint8_t i = 0; i<width; i++){
 8000460:	7dfb      	ldrb	r3, [r7, #23]
 8000462:	3301      	adds	r3, #1
 8000464:	75fb      	strb	r3, [r7, #23]
 8000466:	e7de      	b.n	8000426 <_ZN10ImgControl10writeXLineEhhhh+0x1e>
	}

}
 8000468:	bf00      	nop
 800046a:	3718      	adds	r7, #24
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}

08000470 <_ZN10ImgControl10writeYLineEhhhh>:


void ImgControl::writeYLine(uint8_t startX, uint8_t startY, uint8_t height, uint8_t lineThickness){
 8000470:	b580      	push	{r7, lr}
 8000472:	b086      	sub	sp, #24
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	4608      	mov	r0, r1
 800047a:	4611      	mov	r1, r2
 800047c:	461a      	mov	r2, r3
 800047e:	4603      	mov	r3, r0
 8000480:	70fb      	strb	r3, [r7, #3]
 8000482:	460b      	mov	r3, r1
 8000484:	70bb      	strb	r3, [r7, #2]
 8000486:	4613      	mov	r3, r2
 8000488:	707b      	strb	r3, [r7, #1]
	for(uint8_t i = 0; i<height; i++){
 800048a:	2300      	movs	r3, #0
 800048c:	75fb      	strb	r3, [r7, #23]
 800048e:	7dfa      	ldrb	r2, [r7, #23]
 8000490:	787b      	ldrb	r3, [r7, #1]
 8000492:	429a      	cmp	r2, r3
 8000494:	d21b      	bcs.n	80004ce <_ZN10ImgControl10writeYLineEhhhh+0x5e>
		screenMirror[startY+i][startX] = 1;
 8000496:	78ba      	ldrb	r2, [r7, #2]
 8000498:	7dfb      	ldrb	r3, [r7, #23]
 800049a:	4413      	add	r3, r2
 800049c:	015b      	lsls	r3, r3, #5
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	4413      	add	r3, r2
 80004a2:	1d19      	adds	r1, r3, #4
 80004a4:	78fa      	ldrb	r2, [r7, #3]
 80004a6:	f107 030c 	add.w	r3, r7, #12
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 f868 	bl	8000580 <_ZNSt6bitsetILj240EEixEj>
 80004b0:	f107 030c 	add.w	r3, r7, #12
 80004b4:	2101      	movs	r1, #1
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 f8b2 	bl	8000620 <_ZNSt6bitsetILj240EE9referenceaSEb>
 80004bc:	f107 030c 	add.w	r3, r7, #12
 80004c0:	4618      	mov	r0, r3
 80004c2:	f000 f86c 	bl	800059e <_ZNSt6bitsetILj240EE9referenceD1Ev>
	for(uint8_t i = 0; i<height; i++){
 80004c6:	7dfb      	ldrb	r3, [r7, #23]
 80004c8:	3301      	adds	r3, #1
 80004ca:	75fb      	strb	r3, [r7, #23]
 80004cc:	e7df      	b.n	800048e <_ZN10ImgControl10writeYLineEhhhh+0x1e>
	}
}
 80004ce:	bf00      	nop
 80004d0:	3718      	adds	r7, #24
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}

080004d6 <_ZN10ImgControl14writeRectangleEhhhhh>:


void ImgControl::writeRectangle(uint8_t startX, uint8_t startY, uint8_t width,uint8_t height, uint8_t lineThickness){
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b084      	sub	sp, #16
 80004da:	af02      	add	r7, sp, #8
 80004dc:	6078      	str	r0, [r7, #4]
 80004de:	4608      	mov	r0, r1
 80004e0:	4611      	mov	r1, r2
 80004e2:	461a      	mov	r2, r3
 80004e4:	4603      	mov	r3, r0
 80004e6:	70fb      	strb	r3, [r7, #3]
 80004e8:	460b      	mov	r3, r1
 80004ea:	70bb      	strb	r3, [r7, #2]
 80004ec:	4613      	mov	r3, r2
 80004ee:	707b      	strb	r3, [r7, #1]
	writeXLine(startX, startY, width, lineThickness);
 80004f0:	7878      	ldrb	r0, [r7, #1]
 80004f2:	78ba      	ldrb	r2, [r7, #2]
 80004f4:	78f9      	ldrb	r1, [r7, #3]
 80004f6:	7d3b      	ldrb	r3, [r7, #20]
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	4603      	mov	r3, r0
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f7ff ff83 	bl	8000408 <_ZN10ImgControl10writeXLineEhhhh>
	writeYLine(startX, startY, height, lineThickness);
 8000502:	7c38      	ldrb	r0, [r7, #16]
 8000504:	78ba      	ldrb	r2, [r7, #2]
 8000506:	78f9      	ldrb	r1, [r7, #3]
 8000508:	7d3b      	ldrb	r3, [r7, #20]
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	4603      	mov	r3, r0
 800050e:	6878      	ldr	r0, [r7, #4]
 8000510:	f7ff ffae 	bl	8000470 <_ZN10ImgControl10writeYLineEhhhh>
	writeXLine(startX, startY+height, width, lineThickness);
 8000514:	78ba      	ldrb	r2, [r7, #2]
 8000516:	7c3b      	ldrb	r3, [r7, #16]
 8000518:	4413      	add	r3, r2
 800051a:	b2da      	uxtb	r2, r3
 800051c:	7878      	ldrb	r0, [r7, #1]
 800051e:	78f9      	ldrb	r1, [r7, #3]
 8000520:	7d3b      	ldrb	r3, [r7, #20]
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	4603      	mov	r3, r0
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f7ff ff6e 	bl	8000408 <_ZN10ImgControl10writeXLineEhhhh>
	writeYLine(startX+width, startY, height, lineThickness);
 800052c:	78fa      	ldrb	r2, [r7, #3]
 800052e:	787b      	ldrb	r3, [r7, #1]
 8000530:	4413      	add	r3, r2
 8000532:	b2d9      	uxtb	r1, r3
 8000534:	7c38      	ldrb	r0, [r7, #16]
 8000536:	78ba      	ldrb	r2, [r7, #2]
 8000538:	7d3b      	ldrb	r3, [r7, #20]
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	4603      	mov	r3, r0
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f7ff ff96 	bl	8000470 <_ZN10ImgControl10writeYLineEhhhh>

}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <_ZN10ImgControl11clearMirrorEv>:


void ImgControl::clearMirror(){
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i<LCD_HEIGHT;i++){
 8000554:	2300      	movs	r3, #0
 8000556:	73fb      	strb	r3, [r7, #15]
 8000558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800055c:	2b00      	cmp	r3, #0
 800055e:	db0b      	blt.n	8000578 <_ZN10ImgControl11clearMirrorEv+0x2c>
		screenMirror[i].reset();
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	015b      	lsls	r3, r3, #5
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	4413      	add	r3, r2
 8000568:	3304      	adds	r3, #4
 800056a:	4618      	mov	r0, r3
 800056c:	f000 f882 	bl	8000674 <_ZNSt6bitsetILj240EE5resetEv>
	for(uint8_t i = 0; i<LCD_HEIGHT;i++){
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	3301      	adds	r3, #1
 8000574:	73fb      	strb	r3, [r7, #15]
 8000576:	e7ef      	b.n	8000558 <_ZN10ImgControl11clearMirrorEv+0xc>
	}
}
 8000578:	bf00      	nop
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <_ZNSt6bitsetILj240EEixEj>:
       *  required by that DR's resolution.  -pme
       *  The DR has since been changed:  range-checking is a precondition
       *  (users' responsibility), and these functions must not throw.  -pme
       */
      reference
      operator[](size_t __position)
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
      { return reference(*this, __position); }
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	68b9      	ldr	r1, [r7, #8]
 8000590:	68f8      	ldr	r0, [r7, #12]
 8000592:	f000 f87c 	bl	800068e <_ZNSt6bitsetILj240EE9referenceC1ERS0_j>
 8000596:	68f8      	ldr	r0, [r7, #12]
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <_ZNSt6bitsetILj240EE9referenceD1Ev>:
	~reference() _GLIBCXX_NOEXCEPT
 800059e:	b480      	push	{r7}
 80005a0:	b083      	sub	sp, #12
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
	{ }
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4618      	mov	r0, r3
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <_ZNKSt6bitsetILj240EE9referencecvbEv>:
	operator bool() const _GLIBCXX_NOEXCEPT
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	{ return (*(_M_wp) & _Base::_S_maskbit(_M_bpos)) != 0; }
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	681c      	ldr	r4, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 f887 	bl	80006da <_ZNSt12_Base_bitsetILj8EE10_S_maskbitEj>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4023      	ands	r3, r4
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	bf14      	ite	ne
 80005d4:	2301      	movne	r3, #1
 80005d6:	2300      	moveq	r3, #0
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd90      	pop	{r4, r7, pc}

080005e2 <_ZNSt6bitsetILj240EErSEj>:
      operator>>=(size_t __position) _GLIBCXX_NOEXCEPT
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
 80005ea:	6039      	str	r1, [r7, #0]
	if (__builtin_expect(__position < _Nb, 1))
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2bef      	cmp	r3, #239	; 0xef
 80005f0:	bf94      	ite	ls
 80005f2:	2301      	movls	r3, #1
 80005f4:	2300      	movhi	r3, #0
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d008      	beq.n	800060e <_ZNSt6bitsetILj240EErSEj+0x2c>
	    this->_M_do_right_shift(__position);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6839      	ldr	r1, [r7, #0]
 8000600:	4618      	mov	r0, r3
 8000602:	f000 f878 	bl	80006f6 <_ZNSt12_Base_bitsetILj8EE17_M_do_right_shiftEj>
	    this->_M_do_sanitize();
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 f8e6 	bl	80007d8 <_ZNSt6bitsetILj240EE14_M_do_sanitizeEv>
 800060c:	e003      	b.n	8000616 <_ZNSt6bitsetILj240EErSEj+0x34>
	  this->_M_do_reset();
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4618      	mov	r0, r3
 8000612:	f000 f8f1 	bl	80007f8 <_ZNSt12_Base_bitsetILj8EE11_M_do_resetEv>
	return *this;
 8000616:	687b      	ldr	r3, [r7, #4]
      }
 8000618:	4618      	mov	r0, r3
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <_ZNSt6bitsetILj240EE9referenceaSEb>:
	operator=(bool __x) _GLIBCXX_NOEXCEPT
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	70fb      	strb	r3, [r7, #3]
	  if (__x)
 800062c:	78fb      	ldrb	r3, [r7, #3]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d00d      	beq.n	800064e <_ZNSt6bitsetILj240EE9referenceaSEb+0x2e>
	    *_M_wp |= _Base::_S_maskbit(_M_bpos);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	4618      	mov	r0, r3
 8000638:	f000 f84f 	bl	80006da <_ZNSt12_Base_bitsetILj8EE10_S_maskbitEj>
 800063c:	4601      	mov	r1, r0
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	430a      	orrs	r2, r1
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	e00d      	b.n	800066a <_ZNSt6bitsetILj240EE9referenceaSEb+0x4a>
	    *_M_wp &= ~_Base::_S_maskbit(_M_bpos);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f841 	bl	80006da <_ZNSt12_Base_bitsetILj8EE10_S_maskbitEj>
 8000658:	4603      	mov	r3, r0
 800065a:	43d9      	mvns	r1, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	400a      	ands	r2, r1
 8000668:	601a      	str	r2, [r3, #0]
	  return *this;
 800066a:	687b      	ldr	r3, [r7, #4]
	}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <_ZNSt6bitsetILj240EE5resetEv>:
      reset() _GLIBCXX_NOEXCEPT
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	this->_M_do_reset();
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f8ba 	bl	80007f8 <_ZNSt12_Base_bitsetILj8EE11_M_do_resetEv>
	return *this;
 8000684:	687b      	ldr	r3, [r7, #4]
      }
 8000686:	4618      	mov	r0, r3
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <_ZNSt6bitsetILj240EE9referenceC1ERS0_j>:
	reference(bitset& __b, size_t __pos) _GLIBCXX_NOEXCEPT
 800068e:	b580      	push	{r7, lr}
 8000690:	b084      	sub	sp, #16
 8000692:	af00      	add	r7, sp, #0
 8000694:	60f8      	str	r0, [r7, #12]
 8000696:	60b9      	str	r1, [r7, #8]
 8000698:	607a      	str	r2, [r7, #4]
	  _M_wp = &__b._M_getword(__pos);
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	6879      	ldr	r1, [r7, #4]
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f8b9 	bl	8000816 <_ZNSt12_Base_bitsetILj8EE10_M_getwordEj>
 80006a4:	4602      	mov	r2, r0
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	601a      	str	r2, [r3, #0]
	  _M_bpos = _Base::_S_whichbit(__pos);
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f000 f808 	bl	80006c0 <_ZNSt12_Base_bitsetILj8EE11_S_whichbitEj>
 80006b0:	4602      	mov	r2, r0
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	605a      	str	r2, [r3, #4]
	}
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	4618      	mov	r0, r3
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <_ZNSt12_Base_bitsetILj8EE11_S_whichbitEj>:
      _S_whichbit(size_t __pos) _GLIBCXX_NOEXCEPT
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
      { return __pos % _GLIBCXX_BITSET_BITS_PER_WORD; }
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f003 031f 	and.w	r3, r3, #31
 80006ce:	4618      	mov	r0, r3
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <_ZNSt12_Base_bitsetILj8EE10_S_maskbitEj>:
      _S_maskbit(size_t __pos) _GLIBCXX_NOEXCEPT
 80006da:	b580      	push	{r7, lr}
 80006dc:	b082      	sub	sp, #8
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
      { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff ffec 	bl	80006c0 <_ZNSt12_Base_bitsetILj8EE11_S_whichbitEj>
 80006e8:	4602      	mov	r2, r0
 80006ea:	2301      	movs	r3, #1
 80006ec:	4093      	lsls	r3, r2
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <_ZNSt12_Base_bitsetILj8EE17_M_do_right_shiftEj>:
    _Base_bitset<_Nw>::_M_do_right_shift(size_t __shift) _GLIBCXX_NOEXCEPT
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b08a      	sub	sp, #40	; 0x28
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	6039      	str	r1, [r7, #0]
      if (__builtin_expect(__shift != 0, 1))
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	bf14      	ite	ne
 8000706:	2301      	movne	r3, #1
 8000708:	2300      	moveq	r3, #0
 800070a:	b2db      	uxtb	r3, r3
 800070c:	2b00      	cmp	r3, #0
 800070e:	d05f      	beq.n	80007d0 <_ZNSt12_Base_bitsetILj8EE17_M_do_right_shiftEj+0xda>
	  const size_t __wshift = __shift / _GLIBCXX_BITSET_BITS_PER_WORD;
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	095b      	lsrs	r3, r3, #5
 8000714:	61fb      	str	r3, [r7, #28]
	  const size_t __offset = __shift % _GLIBCXX_BITSET_BITS_PER_WORD;
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	f003 031f 	and.w	r3, r3, #31
 800071c:	61bb      	str	r3, [r7, #24]
	  const size_t __limit = _Nw - __wshift - 1;
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	f1c3 0307 	rsb	r3, r3, #7
 8000724:	617b      	str	r3, [r7, #20]
	  if (__offset == 0)
 8000726:	69bb      	ldr	r3, [r7, #24]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d113      	bne.n	8000754 <_ZNSt12_Base_bitsetILj8EE17_M_do_right_shiftEj+0x5e>
	    for (size_t __n = 0; __n <= __limit; ++__n)
 800072c:	2300      	movs	r3, #0
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
 8000730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	429a      	cmp	r2, r3
 8000736:	d83c      	bhi.n	80007b2 <_ZNSt12_Base_bitsetILj8EE17_M_do_right_shiftEj+0xbc>
	      _M_w[__n] = _M_w[__n + __wshift];
 8000738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	441a      	add	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    for (size_t __n = 0; __n <= __limit; ++__n)
 800074c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074e:	3301      	adds	r3, #1
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
 8000752:	e7ed      	b.n	8000730 <_ZNSt12_Base_bitsetILj8EE17_M_do_right_shiftEj+0x3a>
	      const size_t __sub_offset = (_GLIBCXX_BITSET_BITS_PER_WORD
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	f1c3 0320 	rsb	r3, r3, #32
 800075a:	613b      	str	r3, [r7, #16]
	      for (size_t __n = 0; __n < __limit; ++__n)
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
 8000760:	6a3a      	ldr	r2, [r7, #32]
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	429a      	cmp	r2, r3
 8000766:	d21b      	bcs.n	80007a0 <_ZNSt12_Base_bitsetILj8EE17_M_do_right_shiftEj+0xaa>
		_M_w[__n] = ((_M_w[__n + __wshift] >> __offset)
 8000768:	6a3a      	ldr	r2, [r7, #32]
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	441a      	add	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	40da      	lsrs	r2, r3
			     | (_M_w[__n + __wshift + 1] << __sub_offset));
 8000778:	6a39      	ldr	r1, [r7, #32]
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	440b      	add	r3, r1
 800077e:	1c59      	adds	r1, r3, #1
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8000786:	693b      	ldr	r3, [r7, #16]
 8000788:	fa01 f303 	lsl.w	r3, r1, r3
 800078c:	ea42 0103 	orr.w	r1, r2, r3
		_M_w[__n] = ((_M_w[__n + __wshift] >> __offset)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6a3a      	ldr	r2, [r7, #32]
 8000794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	      for (size_t __n = 0; __n < __limit; ++__n)
 8000798:	6a3b      	ldr	r3, [r7, #32]
 800079a:	3301      	adds	r3, #1
 800079c:	623b      	str	r3, [r7, #32]
 800079e:	e7df      	b.n	8000760 <_ZNSt12_Base_bitsetILj8EE17_M_do_right_shiftEj+0x6a>
	      _M_w[__limit] = _M_w[_Nw-1] >> __offset;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	69da      	ldr	r2, [r3, #28]
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	fa22 f103 	lsr.w	r1, r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	697a      	ldr	r2, [r7, #20]
 80007ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  std::fill(_M_w + __limit + 1, _M_w + _Nw, static_cast<_WordT>(0));
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	3301      	adds	r3, #1
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	18d0      	adds	r0, r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f103 0120 	add.w	r1, r3, #32
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	461a      	mov	r2, r3
 80007cc:	f000 f833 	bl	8000836 <_ZSt4fillIPmmEvT_S1_RKT0_>
    }
 80007d0:	bf00      	nop
 80007d2:	3728      	adds	r7, #40	; 0x28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <_ZNSt6bitsetILj240EE14_M_do_sanitizeEv>:
      _M_do_sanitize() _GLIBCXX_NOEXCEPT
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	__sanitize_type::_S_do_sanitize(this->_M_hiword());
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 f84d 	bl	8000882 <_ZNSt12_Base_bitsetILj8EE9_M_hiwordEv>
 80007e8:	4603      	mov	r3, r0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 f83a 	bl	8000864 <_ZNSt9_SanitizeILj16EE14_S_do_sanitizeERm>
      }
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <_ZNSt12_Base_bitsetILj8EE11_M_do_resetEv>:
      _M_do_reset() _GLIBCXX_NOEXCEPT
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
      { __builtin_memset(_M_w, 0, _Nw * sizeof(_WordT)); }
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4618      	mov	r0, r3
 8000804:	2320      	movs	r3, #32
 8000806:	461a      	mov	r2, r3
 8000808:	2100      	movs	r1, #0
 800080a:	f002 fb53 	bl	8002eb4 <memset>
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <_ZNSt12_Base_bitsetILj8EE10_M_getwordEj>:
      _M_getword(size_t __pos) _GLIBCXX_NOEXCEPT
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
 800081e:	6039      	str	r1, [r7, #0]
      { return _M_w[_S_whichword(__pos)]; }
 8000820:	6838      	ldr	r0, [r7, #0]
 8000822:	f000 f83a 	bl	800089a <_ZNSt12_Base_bitsetILj8EE12_S_whichwordEj>
 8000826:	4603      	mov	r3, r0
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	4413      	add	r3, r2
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <_ZSt4fillIPmmEvT_S1_RKT0_>:
   *  types filling contiguous areas of memory, this becomes an inline call
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 8000836:	b590      	push	{r4, r7, lr}
 8000838:	b085      	sub	sp, #20
 800083a:	af00      	add	r7, sp, #0
 800083c:	60f8      	str	r0, [r7, #12]
 800083e:	60b9      	str	r1, [r7, #8]
 8000840:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
 8000842:	68f8      	ldr	r0, [r7, #12]
 8000844:	f000 f835 	bl	80008b2 <_ZSt12__niter_baseIPmET_S1_>
 8000848:	4604      	mov	r4, r0
 800084a:	68b8      	ldr	r0, [r7, #8]
 800084c:	f000 f831 	bl	80008b2 <_ZSt12__niter_baseIPmET_S1_>
 8000850:	4603      	mov	r3, r0
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	4619      	mov	r1, r3
 8000856:	4620      	mov	r0, r4
 8000858:	f000 f836 	bl	80008c8 <_ZSt8__fill_aIPmmEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
		    __value);
    }
 800085c:	bf00      	nop
 800085e:	3714      	adds	r7, #20
 8000860:	46bd      	mov	sp, r7
 8000862:	bd90      	pop	{r4, r7, pc}

08000864 <_ZNSt9_SanitizeILj16EE14_S_do_sanitizeERm>:
      _S_do_sanitize(_WordT& __val) _GLIBCXX_NOEXCEPT
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
      { __val &= ~((~static_cast<_WordT>(0)) << _Extrabits); }
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	b29a      	uxth	r2, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <_ZNSt12_Base_bitsetILj8EE9_M_hiwordEv>:
      _M_hiword() _GLIBCXX_NOEXCEPT
 8000882:	b480      	push	{r7}
 8000884:	b083      	sub	sp, #12
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
      { return _M_w[_Nw - 1]; }
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	331c      	adds	r3, #28
 800088e:	4618      	mov	r0, r3
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <_ZNSt12_Base_bitsetILj8EE12_S_whichwordEj>:
      _S_whichword(size_t __pos) _GLIBCXX_NOEXCEPT
 800089a:	b480      	push	{r7}
 800089c:	b083      	sub	sp, #12
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
      { return __pos / _GLIBCXX_BITSET_BITS_PER_WORD; }
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	095b      	lsrs	r3, r3, #5
 80008a6:	4618      	mov	r0, r3
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <_ZSt12__niter_baseIPmET_S1_>:
    __niter_base(_Iterator __it)
 80008b2:	b480      	push	{r7}
 80008b4:	b083      	sub	sp, #12
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
    { return __it; }
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4618      	mov	r0, r3
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <_ZSt8__fill_aIPmmEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
 80008c8:	b480      	push	{r7}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	429a      	cmp	r2, r3
 80008e0:	d006      	beq.n	80008f0 <_ZSt8__fill_aIPmmEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x28>
	*__first = __tmp;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	697a      	ldr	r2, [r7, #20]
 80008e6:	601a      	str	r2, [r3, #0]
      for (; __first != __last; ++__first)
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	3304      	adds	r3, #4
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	e7f4      	b.n	80008da <_ZSt8__fill_aIPmmEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x12>
    }
 80008f0:	bf00      	nop
 80008f2:	371c      	adds	r7, #28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <_ZN9LCDDriverC1Ev>:
#include "i2c.h"
#include "gpio.h"
#include "stdlib.h"
#include "math.h"

LCDDriver::LCDDriver() {
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4618      	mov	r0, r3
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <_ZN9LCDDriver7InitLCDEv>:


void LCDDriver::InitLCD(){
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
	Reset();
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f000 fa34 	bl	8000d88 <_ZN9LCDDriver5ResetEv>
	LCD_RD_SET;
 8000920:	2201      	movs	r2, #1
 8000922:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092a:	f000 ff4d 	bl	80017c8 <HAL_GPIO_WritePin>
	LCD_WR_SET;
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000938:	f000 ff46 	bl	80017c8 <HAL_GPIO_WritePin>
	SetLCDSize(SIZE_40C);
 800093c:	2100      	movs	r1, #0
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 f845 	bl	80009ce <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E>

	//init REGISTERS SETTING
	WriteData_16bit(LCD_setCursorPointer,0);
 8000944:	2200      	movs	r2, #0
 8000946:	2121      	movs	r1, #33	; 0x21
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f000 f959 	bl	8000c00 <_ZN9LCDDriver15WriteData_16bitEht>
	WriteData_16bit(LCD_setAddressPointer, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2124      	movs	r1, #36	; 0x24
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f000 f954 	bl	8000c00 <_ZN9LCDDriver15WriteData_16bitEht>
	WriteData_16bit(LCD_setOffsetRegister, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2122      	movs	r1, #34	; 0x22
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f000 f94f 	bl	8000c00 <_ZN9LCDDriver15WriteData_16bitEht>
	//Init SET CONTROL WORD
	WriteData_16bit(LCD_setTextHomeAddress,LCD_TXT_START_ADDR);
 8000962:	2200      	movs	r2, #0
 8000964:	2140      	movs	r1, #64	; 0x40
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 f94a 	bl	8000c00 <_ZN9LCDDriver15WriteData_16bitEht>
	WriteData_16bit(LCD_setGraphicHomeAddress, LCD_GRAPHIC_START_ADDR);
 800096c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000970:	2142      	movs	r1, #66	; 0x42
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f000 f944 	bl	8000c00 <_ZN9LCDDriver15WriteData_16bitEht>
	//Init MODE SET
	WriteData_8bit(LCD_OR_mode |LCD_InternalCGROM_mode);
 8000978:	2180      	movs	r1, #128	; 0x80
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f000 f8e2 	bl	8000b44 <_ZN9LCDDriver14WriteData_8bitEh>
	//Init DISPLY MODE
	WriteData_8bit(LCD_cursorOnBlinkON | LCD_textONGraphicON);
 8000980:	219f      	movs	r1, #159	; 0x9f
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f000 f8de 	bl	8000b44 <_ZN9LCDDriver14WriteData_8bitEh>
	//Init CURSOR PATTERN SELECT
	WriteData_8bit(LCD_1_lineCursor);
 8000988:	21a0      	movs	r1, #160	; 0xa0
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f000 f8da 	bl	8000b44 <_ZN9LCDDriver14WriteData_8bitEh>
	//Init DATA AUTO READ/WRITE
	WriteData_8bit(LCD_setDataAutoRead);
 8000990:	21b1      	movs	r1, #177	; 0xb1
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f000 f8d6 	bl	8000b44 <_ZN9LCDDriver14WriteData_8bitEh>
	//Init SCREEN REVERSE
	WriteData_16bit(LCD_SCREEN_REVERSE, NORMAL_DISPLAY);
 8000998:	2200      	movs	r2, #0
 800099a:	21d0      	movs	r1, #208	; 0xd0
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f000 f92f 	bl	8000c00 <_ZN9LCDDriver15WriteData_16bitEht>
	//Init BLINK TIME
	WriteData_16bit(LCD_BLINK_TIME, BLINK_TIM_0_066);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2150      	movs	r1, #80	; 0x50
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f000 f92a 	bl	8000c00 <_ZN9LCDDriver15WriteData_16bitEht>
	//Init CURSOR AUTO MOVING
	WriteData_16bit(LCD_CursorAutoMoving, AUTO_MOVING_ON);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2160      	movs	r1, #96	; 0x60
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f000 f925 	bl	8000c00 <_ZN9LCDDriver15WriteData_16bitEht>

	ClearDisplay();
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f000 f85e 	bl	8000a78 <_ZN9LCDDriver12ClearDisplayEv>
	SetAddressPointer(0, 0);
 80009bc:	2200      	movs	r2, #0
 80009be:	2100      	movs	r1, #0
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f000 f8a1 	bl	8000b08 <_ZN9LCDDriver17SetAddressPointerEhh>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E>:
 * Init the LCD Size (40 Columns / 32 Columns)
 *
 * @param size: LCD Size
 * @return : none
 */
void LCDDriver::SetLCDSize(LCD_SIZE size){
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b082      	sub	sp, #8
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
 80009d6:	460b      	mov	r3, r1
 80009d8:	70fb      	strb	r3, [r7, #3]
	if(size == SIZE_40C){
 80009da:	78fb      	ldrb	r3, [r7, #3]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d122      	bne.n	8000a26 <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E+0x58>
		LCD_SIZE_40;				//set size 40 Columns
 80009e0:	2200      	movs	r2, #0
 80009e2:	2102      	movs	r1, #2
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e8:	f000 feee 	bl	80017c8 <HAL_GPIO_WritePin>
		LCD_FONT_68;				//set Fontsize 6x8px
 80009ec:	2201      	movs	r2, #1
 80009ee:	2101      	movs	r1, #1
 80009f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f4:	f000 fee8 	bl	80017c8 <HAL_GPIO_WritePin>
		LCD_XY_SIZE.column = LCD_WIDTH/6;	//set LCD size struct to 40 Columns
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2228      	movs	r2, #40	; 0x28
 80009fc:	701a      	strb	r2, [r3, #0]
		LCD_XY_SIZE.row = LCD_WIDTH/8;		//set LCD size struct to 16 Row
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	221e      	movs	r2, #30
 8000a02:	705a      	strb	r2, [r3, #1]
		LCD_XY_SIZE.patternHeight = 8;		//set pattern height to 8 pixel (pattern is the 6x8 pixel container)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2208      	movs	r2, #8
 8000a08:	709a      	strb	r2, [r3, #2]
		LCD_XY_SIZE.patternWidth =  6;		//set pattern width to 6 pixel (pattern is the 6x8 pixel container)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2206      	movs	r2, #6
 8000a0e:	70da      	strb	r2, [r3, #3]
		WriteData_16bit(LCD_setTextArea, 0x0028);	//set TextArea to 40 Columns
 8000a10:	2228      	movs	r2, #40	; 0x28
 8000a12:	2141      	movs	r1, #65	; 0x41
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f000 f8f3 	bl	8000c00 <_ZN9LCDDriver15WriteData_16bitEht>
		WriteData_16bit(LCD_setGraphicArea, 0x0028);
 8000a1a:	2228      	movs	r2, #40	; 0x28
 8000a1c:	2143      	movs	r1, #67	; 0x43
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f000 f8ee 	bl	8000c00 <_ZN9LCDDriver15WriteData_16bitEht>
		LCD_XY_SIZE.patternHeight = 8;		//set pattern height to 8 pixel (pattern is the 6x8 pixel container)
		LCD_XY_SIZE.patternWidth =  8;		//set pattern width to 6 pixel (pattern is the 6x8 pixel container)
		WriteData_16bit(LCD_setTextArea, 0x0020);	//set TextArea to 32 Columns
		WriteData_16bit(LCD_setGraphicArea, 0x0020);
	}
}
 8000a24:	e024      	b.n	8000a70 <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E+0xa2>
	else if(size == SIZE_32C){
 8000a26:	78fb      	ldrb	r3, [r7, #3]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d121      	bne.n	8000a70 <_ZN9LCDDriver10SetLCDSizeENS_9LCD_SIZE_E+0xa2>
		LCD_SIZE_32;				//set size 32 Columns
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2102      	movs	r1, #2
 8000a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a34:	f000 fec8 	bl	80017c8 <HAL_GPIO_WritePin>
		LCD_FONT_88;				//set Fontsize 8x8px
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a40:	f000 fec2 	bl	80017c8 <HAL_GPIO_WritePin>
		LCD_XY_SIZE.column = 32;	//set LCD size struct to 32 Columns
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2220      	movs	r2, #32
 8000a48:	701a      	strb	r2, [r3, #0]
		LCD_XY_SIZE.row = 16;		//set LCD size struct to 16 Row
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2210      	movs	r2, #16
 8000a4e:	705a      	strb	r2, [r3, #1]
		LCD_XY_SIZE.patternHeight = 8;		//set pattern height to 8 pixel (pattern is the 6x8 pixel container)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2208      	movs	r2, #8
 8000a54:	709a      	strb	r2, [r3, #2]
		LCD_XY_SIZE.patternWidth =  8;		//set pattern width to 6 pixel (pattern is the 6x8 pixel container)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2208      	movs	r2, #8
 8000a5a:	70da      	strb	r2, [r3, #3]
		WriteData_16bit(LCD_setTextArea, 0x0020);	//set TextArea to 32 Columns
 8000a5c:	2220      	movs	r2, #32
 8000a5e:	2141      	movs	r1, #65	; 0x41
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f000 f8cd 	bl	8000c00 <_ZN9LCDDriver15WriteData_16bitEht>
		WriteData_16bit(LCD_setGraphicArea, 0x0020);
 8000a66:	2220      	movs	r2, #32
 8000a68:	2143      	movs	r1, #67	; 0x43
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f000 f8c8 	bl	8000c00 <_ZN9LCDDriver15WriteData_16bitEht>
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <_ZN9LCDDriver12ClearDisplayEv>:
 * clears the whole LCD depending on the selected size
 *
 * @param  : none
 * @return : none
 */
void LCDDriver::ClearDisplay(){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

/*
	uint8_t CH_ARROW[] = {0x00, 0x04, 0x0E, 0x15, 0x04, 0x04, 0x04,0x00};
	setUserChar(CH_ARROW, 0x02,0);
*/
	WriteData_16bit(LCD_setOffsetRegister, 0x0000);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2122      	movs	r1, #34	; 0x22
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f000 f8bb 	bl	8000c00 <_ZN9LCDDriver15WriteData_16bitEht>

	WriteData_16bit(LCD_setAddressPointer, LCD_TXT_START_ADDR);				//set address pointer to text home address
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2124      	movs	r1, #36	; 0x24
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f000 f8b6 	bl	8000c00 <_ZN9LCDDriver15WriteData_16bitEht>
	for(uint16_t counter = 0; counter<LCD_XY_SIZE.column*LCD_XY_SIZE.row; counter++){
 8000a94:	2300      	movs	r3, #0
 8000a96:	81fb      	strh	r3, [r7, #14]
 8000a98:	89fa      	ldrh	r2, [r7, #14]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	785b      	ldrb	r3, [r3, #1]
 8000aa4:	fb03 f301 	mul.w	r3, r3, r1
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	da08      	bge.n	8000abe <_ZN9LCDDriver12ClearDisplayEv+0x46>
		WriteData_16bit(LCD_dataWriteAndIncrementADP, 0x00);	//clear text
 8000aac:	2200      	movs	r2, #0
 8000aae:	21c0      	movs	r1, #192	; 0xc0
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f000 f8a5 	bl	8000c00 <_ZN9LCDDriver15WriteData_16bitEht>
	for(uint16_t counter = 0; counter<LCD_XY_SIZE.column*LCD_XY_SIZE.row; counter++){
 8000ab6:	89fb      	ldrh	r3, [r7, #14]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	81fb      	strh	r3, [r7, #14]
 8000abc:	e7ec      	b.n	8000a98 <_ZN9LCDDriver12ClearDisplayEv+0x20>
	}


	WriteData_16bit(LCD_setAddressPointer, LCD_GRAPHIC_START_ADDR);				//set Address pointer to Graphic home Address
 8000abe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ac2:	2124      	movs	r1, #36	; 0x24
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f000 f89b 	bl	8000c00 <_ZN9LCDDriver15WriteData_16bitEht>
	for(int i = 0; i<LCD_XY_SIZE.column*LCD_XY_SIZE.row*8;i++){
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	785b      	ldrb	r3, [r3, #1]
 8000ad8:	fb03 f302 	mul.w	r3, r3, r2
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	da08      	bge.n	8000af6 <_ZN9LCDDriver12ClearDisplayEv+0x7e>
		WriteData_8bit(LCD_dataWriteAndIncrementADP, 0x00);		//clear graphic
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	21c0      	movs	r1, #192	; 0xc0
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f000 f852 	bl	8000b92 <_ZN9LCDDriver14WriteData_8bitEhh>
	for(int i = 0; i<LCD_XY_SIZE.column*LCD_XY_SIZE.row*8;i++){
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	3301      	adds	r3, #1
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	e7eb      	b.n	8000ace <_ZN9LCDDriver12ClearDisplayEv+0x56>
	}

	WriteData_16bit(LCD_setAddressPointer, LCD_TXT_START_ADDR);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2124      	movs	r1, #36	; 0x24
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f000 f880 	bl	8000c00 <_ZN9LCDDriver15WriteData_16bitEht>
}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <_ZN9LCDDriver17SetAddressPointerEhh>:
 *
 * @param column: the chosen Column
 * @param row: the chosen Row
 * @return : none;
 */
void LCDDriver::SetAddressPointer(uint8_t column, uint8_t row){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	460b      	mov	r3, r1
 8000b12:	70fb      	strb	r3, [r7, #3]
 8000b14:	4613      	mov	r3, r2
 8000b16:	70bb      	strb	r3, [r7, #2]
	uint16_t LCDPointer = row*LCD_XY_SIZE.column + column;	//calculate the AdressPointer depending on the selected LCD Size
 8000b18:	78bb      	ldrb	r3, [r7, #2]
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	fb12 f303 	smulbb	r3, r2, r3
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	78fb      	ldrb	r3, [r7, #3]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	4413      	add	r3, r2
 8000b2e:	81fb      	strh	r3, [r7, #14]
	WriteData_16bit(LCD_setAddressPointer, LCDPointer);		//set the AdressPointer
 8000b30:	89fb      	ldrh	r3, [r7, #14]
 8000b32:	461a      	mov	r2, r3
 8000b34:	2124      	movs	r1, #36	; 0x24
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f000 f862 	bl	8000c00 <_ZN9LCDDriver15WriteData_16bitEht>
}
 8000b3c:	bf00      	nop
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <_ZN9LCDDriver14WriteData_8bitEh>:


bool LCDDriver::WriteData_8bit(uint8_t addr){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	70fb      	strb	r3, [r7, #3]
	LCD_OUTPUT_ENABLE;
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5a:	f000 fe35 	bl	80017c8 <HAL_GPIO_WritePin>


//	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
//		return false;
//	}
	WriteDataPin(addr);
 8000b5e:	78fb      	ldrb	r3, [r7, #3]
 8000b60:	4619      	mov	r1, r3
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 f8b6 	bl	8000cd4 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_COMMAND;
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2104      	movs	r1, #4
 8000b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b70:	f000 fe2a 	bl	80017c8 <HAL_GPIO_WritePin>
	PushData();
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 f88b 	bl	8000c90 <_ZN9LCDDriver8PushDataEv>

	LCD_OUTPUT_DISABLE;
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b84:	f000 fe20 	bl	80017c8 <HAL_GPIO_WritePin>
	return true;
 8000b88:	2301      	movs	r3, #1
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <_ZN9LCDDriver14WriteData_8bitEhh>:


bool LCDDriver::WriteData_8bit(uint8_t addr, uint8_t data){
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	70fb      	strb	r3, [r7, #3]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	70bb      	strb	r3, [r7, #2]
	LCD_OUTPUT_ENABLE;
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ba8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bac:	f000 fe0c 	bl	80017c8 <HAL_GPIO_WritePin>

//	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
//		return false;
//	}
	WriteDataPin(data);
 8000bb0:	78bb      	ldrb	r3, [r7, #2]
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f000 f88d 	bl	8000cd4 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_DATA;
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc2:	f000 fe01 	bl	80017c8 <HAL_GPIO_WritePin>
	PushData();
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f000 f862 	bl	8000c90 <_ZN9LCDDriver8PushDataEv>

//	if(CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR){
//		return false;
//	}
	WriteDataPin(addr);
 8000bcc:	78fb      	ldrb	r3, [r7, #3]
 8000bce:	4619      	mov	r1, r3
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f000 f87f 	bl	8000cd4 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_COMMAND;
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2104      	movs	r1, #4
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bde:	f000 fdf3 	bl	80017c8 <HAL_GPIO_WritePin>
	PushData();
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f000 f854 	bl	8000c90 <_ZN9LCDDriver8PushDataEv>

	LCD_OUTPUT_DISABLE;
 8000be8:	2200      	movs	r2, #0
 8000bea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf2:	f000 fde9 	bl	80017c8 <HAL_GPIO_WritePin>
	return true;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <_ZN9LCDDriver15WriteData_16bitEht>:

bool LCDDriver::WriteData_16bit(uint8_t addr, uint16_t data) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	70fb      	strb	r3, [r7, #3]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	803b      	strh	r3, [r7, #0]
	LCD_OUTPUT_ENABLE;
 8000c10:	2201      	movs	r2, #1
 8000c12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1a:	f000 fdd5 	bl	80017c8 <HAL_GPIO_WritePin>
//	if (CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR) {
//		return false;
//	}
	WriteDataPin((uint8_t) (data));
 8000c1e:	883b      	ldrh	r3, [r7, #0]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	4619      	mov	r1, r3
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f000 f855 	bl	8000cd4 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_DATA;
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2104      	movs	r1, #4
 8000c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c32:	f000 fdc9 	bl	80017c8 <HAL_GPIO_WritePin>
	PushData();
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f000 f82a 	bl	8000c90 <_ZN9LCDDriver8PushDataEv>
//	if (CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR) {
//		return false;
//	}
	WriteDataPin((uint8_t) ((data >> 8)));
 8000c3c:	883b      	ldrh	r3, [r7, #0]
 8000c3e:	121b      	asrs	r3, r3, #8
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	4619      	mov	r1, r3
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f000 f845 	bl	8000cd4 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_DATA;
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2104      	movs	r1, #4
 8000c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c52:	f000 fdb9 	bl	80017c8 <HAL_GPIO_WritePin>
	PushData();
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f000 f81a 	bl	8000c90 <_ZN9LCDDriver8PushDataEv>
//	if (CheckStatus(LCD_TIMEOUT) == LCD_STATUS_ERROR) {
//		return false;
//	}
	WriteDataPin(addr);
 8000c5c:	78fb      	ldrb	r3, [r7, #3]
 8000c5e:	4619      	mov	r1, r3
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f000 f837 	bl	8000cd4 <_ZN9LCDDriver12WriteDataPinEh>
	LCD_RW_COMMAND;
 8000c66:	2201      	movs	r2, #1
 8000c68:	2104      	movs	r1, #4
 8000c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6e:	f000 fdab 	bl	80017c8 <HAL_GPIO_WritePin>
	PushData();
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f000 f80c 	bl	8000c90 <_ZN9LCDDriver8PushDataEv>
	LCD_OUTPUT_DISABLE;
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c82:	f000 fda1 	bl	80017c8 <HAL_GPIO_WritePin>
	return true;
 8000c86:	2301      	movs	r3, #1
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <_ZN9LCDDriver8PushDataEv>:


void LCDDriver::PushData(){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	//toggle WR and Enable PIN so that the LCD reads the data
	LCD_WR_RESET;
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca2:	f000 fd91 	bl	80017c8 <HAL_GPIO_WritePin>
	LCD_ENABLE;
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2110      	movs	r1, #16
 8000caa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cae:	f000 fd8b 	bl	80017c8 <HAL_GPIO_WritePin>
	LCD_DISABLE;
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2110      	movs	r1, #16
 8000cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cba:	f000 fd85 	bl	80017c8 <HAL_GPIO_WritePin>
	LCD_WR_SET;
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc8:	f000 fd7e 	bl	80017c8 <HAL_GPIO_WritePin>
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <_ZN9LCDDriver12WriteDataPinEh>:
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct_2);
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct_3);
}


void LCDDriver::WriteDataPin(uint8_t data){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, (GPIO_PinState)(data & 0x01));
 8000ce0:	78fb      	ldrb	r3, [r7, #3]
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	461a      	mov	r2, r3
 8000cea:	2110      	movs	r1, #16
 8000cec:	4824      	ldr	r0, [pc, #144]	; (8000d80 <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000cee:	f000 fd6b 	bl	80017c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, (GPIO_PinState)(data & 0x02));
 8000cf2:	78fb      	ldrb	r3, [r7, #3]
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	2120      	movs	r1, #32
 8000cfe:	4820      	ldr	r0, [pc, #128]	; (8000d80 <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000d00:	f000 fd62 	bl	80017c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, (GPIO_PinState)(data & 0x04));
 8000d04:	78fb      	ldrb	r3, [r7, #3]
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d16:	f000 fd57 	bl	80017c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, (GPIO_PinState)(data & 0x08));
 8000d1a:	78fb      	ldrb	r3, [r7, #3]
 8000d1c:	f003 0308 	and.w	r3, r3, #8
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	461a      	mov	r2, r3
 8000d24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2c:	f000 fd4c 	bl	80017c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (GPIO_PinState)(data & 0x10));
 8000d30:	78fb      	ldrb	r3, [r7, #3]
 8000d32:	f003 0310 	and.w	r3, r3, #16
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	461a      	mov	r2, r3
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	4811      	ldr	r0, [pc, #68]	; (8000d84 <_ZN9LCDDriver12WriteDataPinEh+0xb0>)
 8000d3e:	f000 fd43 	bl	80017c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (GPIO_PinState)(data & 0x20));
 8000d42:	78fb      	ldrb	r3, [r7, #3]
 8000d44:	f003 0320 	and.w	r3, r3, #32
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	480d      	ldr	r0, [pc, #52]	; (8000d84 <_ZN9LCDDriver12WriteDataPinEh+0xb0>)
 8000d50:	f000 fd3a 	bl	80017c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (GPIO_PinState)(data & 0x40));
 8000d54:	78fb      	ldrb	r3, [r7, #3]
 8000d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	2102      	movs	r1, #2
 8000d60:	4807      	ldr	r0, [pc, #28]	; (8000d80 <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000d62:	f000 fd31 	bl	80017c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (GPIO_PinState)(data & 0x80));
 8000d66:	78fb      	ldrb	r3, [r7, #3]
 8000d68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	461a      	mov	r2, r3
 8000d70:	2101      	movs	r1, #1
 8000d72:	4803      	ldr	r0, [pc, #12]	; (8000d80 <_ZN9LCDDriver12WriteDataPinEh+0xac>)
 8000d74:	f000 fd28 	bl	80017c8 <HAL_GPIO_WritePin>

}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	48000400 	.word	0x48000400
 8000d84:	48001400 	.word	0x48001400

08000d88 <_ZN9LCDDriver5ResetEv>:
 * Reset LCD
 *
 * @param none
 * @return none
 */
void LCDDriver::Reset(){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	LCD_RST_L;
 8000d90:	2200      	movs	r2, #0
 8000d92:	2108      	movs	r1, #8
 8000d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d98:	f000 fd16 	bl	80017c8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f000 fa99 	bl	80012d4 <HAL_Delay>
	LCD_RST_H;
 8000da2:	2201      	movs	r2, #1
 8000da4:	2108      	movs	r1, #8
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000daa:	f000 fd0d 	bl	80017c8 <HAL_GPIO_WritePin>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dce:	4b32      	ldr	r3, [pc, #200]	; (8000e98 <MX_GPIO_Init+0xe0>)
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	4a31      	ldr	r2, [pc, #196]	; (8000e98 <MX_GPIO_Init+0xe0>)
 8000dd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dd8:	6153      	str	r3, [r2, #20]
 8000dda:	4b2f      	ldr	r3, [pc, #188]	; (8000e98 <MX_GPIO_Init+0xe0>)
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	4b2c      	ldr	r3, [pc, #176]	; (8000e98 <MX_GPIO_Init+0xe0>)
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	4a2b      	ldr	r2, [pc, #172]	; (8000e98 <MX_GPIO_Init+0xe0>)
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df0:	6153      	str	r3, [r2, #20]
 8000df2:	4b29      	ldr	r3, [pc, #164]	; (8000e98 <MX_GPIO_Init+0xe0>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	4b26      	ldr	r3, [pc, #152]	; (8000e98 <MX_GPIO_Init+0xe0>)
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	4a25      	ldr	r2, [pc, #148]	; (8000e98 <MX_GPIO_Init+0xe0>)
 8000e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e08:	6153      	str	r3, [r2, #20]
 8000e0a:	4b23      	ldr	r3, [pc, #140]	; (8000e98 <MX_GPIO_Init+0xe0>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2103      	movs	r1, #3
 8000e1a:	4820      	ldr	r0, [pc, #128]	; (8000e9c <MX_GPIO_Init+0xe4>)
 8000e1c:	f000 fcd4 	bl	80017c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FS_Pin|MD2_Pin|CD_Pin|RESET_Pin 
 8000e20:	2200      	movs	r2, #0
 8000e22:	f641 711f 	movw	r1, #7967	; 0x1f1f
 8000e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2a:	f000 fccd 	bl	80017c8 <HAL_GPIO_WritePin>
                          |CE_Pin|D3_Pin|RD_Pin|WR_Pin 
                          |D2_Pin|OE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D6_Pin|D0_Pin|D1_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2133      	movs	r1, #51	; 0x33
 8000e32:	481b      	ldr	r0, [pc, #108]	; (8000ea0 <MX_GPIO_Init+0xe8>)
 8000e34:	f000 fcc8 	bl	80017c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = D5_Pin|D4_Pin;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4813      	ldr	r0, [pc, #76]	; (8000e9c <MX_GPIO_Init+0xe4>)
 8000e50:	f000 fb48 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = FS_Pin|MD2_Pin|CD_Pin|RESET_Pin 
 8000e54:	f641 731f 	movw	r3, #7967	; 0x1f1f
 8000e58:	60fb      	str	r3, [r7, #12]
                          |CE_Pin|D3_Pin|RD_Pin|WR_Pin 
                          |D2_Pin|OE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f107 030c 	add.w	r3, r7, #12
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e70:	f000 fb38 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D0_Pin|D1_Pin;
 8000e74:	2333      	movs	r3, #51	; 0x33
 8000e76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_GPIO_Init+0xe8>)
 8000e8c:	f000 fb2a 	bl	80014e4 <HAL_GPIO_Init>

}
 8000e90:	bf00      	nop
 8000e92:	3720      	adds	r7, #32
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	48001400 	.word	0x48001400
 8000ea0:	48000400 	.word	0x48000400

08000ea4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <MX_I2C1_Init+0x74>)
 8000eaa:	4a1c      	ldr	r2, [pc, #112]	; (8000f1c <MX_I2C1_Init+0x78>)
 8000eac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_I2C1_Init+0x74>)
 8000eb0:	4a1b      	ldr	r2, [pc, #108]	; (8000f20 <MX_I2C1_Init+0x7c>)
 8000eb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000eb4:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <MX_I2C1_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <MX_I2C1_Init+0x74>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <MX_I2C1_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_I2C1_Init+0x74>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <MX_I2C1_Init+0x74>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_I2C1_Init+0x74>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_I2C1_Init+0x74>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ede:	480e      	ldr	r0, [pc, #56]	; (8000f18 <MX_I2C1_Init+0x74>)
 8000ee0:	f000 fc8a 	bl	80017f8 <HAL_I2C_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000eea:	f000 f8d6 	bl	800109a <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4809      	ldr	r0, [pc, #36]	; (8000f18 <MX_I2C1_Init+0x74>)
 8000ef2:	f000 fd10 	bl	8001916 <HAL_I2CEx_ConfigAnalogFilter>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000efc:	f000 f8cd 	bl	800109a <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f00:	2100      	movs	r1, #0
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_I2C1_Init+0x74>)
 8000f04:	f000 fd52 	bl	80019ac <HAL_I2CEx_ConfigDigitalFilter>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f0e:	f000 f8c4 	bl	800109a <Error_Handler>
  }

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20001030 	.word	0x20001030
 8000f1c:	40005400 	.word	0x40005400
 8000f20:	00201d2b 	.word	0x00201d2b

08000f24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	; 0x28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a17      	ldr	r2, [pc, #92]	; (8000fa0 <HAL_I2C_MspInit+0x7c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d127      	bne.n	8000f96 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <HAL_I2C_MspInit+0x80>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	4a16      	ldr	r2, [pc, #88]	; (8000fa4 <HAL_I2C_MspInit+0x80>)
 8000f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f50:	6153      	str	r3, [r2, #20]
 8000f52:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <HAL_I2C_MspInit+0x80>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f5e:	23c0      	movs	r3, #192	; 0xc0
 8000f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f62:	2312      	movs	r3, #18
 8000f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f6e:	2304      	movs	r3, #4
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	480b      	ldr	r0, [pc, #44]	; (8000fa8 <HAL_I2C_MspInit+0x84>)
 8000f7a:	f000 fab3 	bl	80014e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <HAL_I2C_MspInit+0x80>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <HAL_I2C_MspInit+0x80>)
 8000f84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f88:	61d3      	str	r3, [r2, #28]
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_I2C_MspInit+0x80>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f96:	bf00      	nop
 8000f98:	3728      	adds	r7, #40	; 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40005400 	.word	0x40005400
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	48000400 	.word	0x48000400

08000fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000fb0:	f000 f92a 	bl	8001208 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb4:	f000 f80a 	bl	8000fcc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb8:	f7ff fefe 	bl	8000db8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fbc:	f7ff ff72 	bl	8000ea4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
 // HAL_I2C_MspInit(&hi2c1);
  appMain.main();
 8000fc0:	4801      	ldr	r0, [pc, #4]	; (8000fc8 <main+0x1c>)
 8000fc2:	f7ff f915 	bl	80001f0 <_ZN7AppMain4mainEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <main+0x1a>
 8000fc8:	20000028 	.word	0x20000028

08000fcc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b096      	sub	sp, #88	; 0x58
 8000fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fd6:	2228      	movs	r2, #40	; 0x28
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f001 ff6a 	bl	8002eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]
 8000ffe:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001000:	2302      	movs	r3, #2
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001004:	2301      	movs	r3, #1
 8001006:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001008:	2310      	movs	r3, #16
 800100a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100c:	2302      	movs	r3, #2
 800100e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001010:	2300      	movs	r3, #0
 8001012:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001014:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001018:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800101e:	4618      	mov	r0, r3
 8001020:	f000 fd10 	bl	8001a44 <HAL_RCC_OscConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	bf14      	ite	ne
 800102a:	2301      	movne	r3, #1
 800102c:	2300      	moveq	r3, #0
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <_Z18SystemClock_Configv+0x6c>
  {
    Error_Handler();
 8001034:	f000 f831 	bl	800109a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001038:	230f      	movs	r3, #15
 800103a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103c:	2302      	movs	r3, #2
 800103e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001044:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	2102      	movs	r1, #2
 8001054:	4618      	mov	r0, r3
 8001056:	f001 fbfd 	bl	8002854 <HAL_RCC_ClockConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	bf14      	ite	ne
 8001060:	2301      	movne	r3, #1
 8001062:	2300      	moveq	r3, #0
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800106a:	f000 f816 	bl	800109a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800106e:	2320      	movs	r3, #32
 8001070:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	4618      	mov	r0, r3
 800107a:	f001 fdd1 	bl	8002c20 <HAL_RCCEx_PeriphCLKConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	bf14      	ite	ne
 8001084:	2301      	movne	r3, #1
 8001086:	2300      	moveq	r3, #0
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 800108e:	f000 f804 	bl	800109a <Error_Handler>
  }
}
 8001092:	bf00      	nop
 8001094:	3758      	adds	r7, #88	; 0x58
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <_Z41__static_initialization_and_destruction_0ii>:
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d107      	bne.n	80010c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010be:	4293      	cmp	r3, r2
 80010c0:	d102      	bne.n	80010c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
static AppMain appMain;
 80010c2:	4803      	ldr	r0, [pc, #12]	; (80010d0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80010c4:	f7ff f880 	bl	80001c8 <_ZN7AppMainC1Ev>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000028 	.word	0x20000028

080010d4 <_GLOBAL__sub_I_main>:
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010dc:	2001      	movs	r0, #1
 80010de:	f7ff ffe3 	bl	80010a8 <_Z41__static_initialization_and_destruction_0ii>
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <HAL_MspInit+0x44>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <HAL_MspInit+0x44>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6193      	str	r3, [r2, #24]
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <HAL_MspInit+0x44>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <HAL_MspInit+0x44>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	4a08      	ldr	r2, [pc, #32]	; (8001128 <HAL_MspInit+0x44>)
 8001108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110c:	61d3      	str	r3, [r2, #28]
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_MspInit+0x44>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000

0800112c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <HardFault_Handler+0x4>

08001140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <MemManage_Handler+0x4>

08001146 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <BusFault_Handler+0x4>

0800114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <UsageFault_Handler+0x4>

08001152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001180:	f000 f888 	bl	8001294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <SystemInit+0x28>)
 800118e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001192:	4a07      	ldr	r2, [pc, #28]	; (80011b0 <SystemInit+0x28>)
 8001194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <SystemInit+0x28>)
 800119e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011a2:	609a      	str	r2, [r3, #8]
#endif
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011ec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011ba:	e003      	b.n	80011c4 <LoopCopyDataInit>

080011bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80011be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011c2:	3104      	adds	r1, #4

080011c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011c4:	480b      	ldr	r0, [pc, #44]	; (80011f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80011c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011cc:	d3f6      	bcc.n	80011bc <CopyDataInit>
	ldr	r2, =_sbss
 80011ce:	4a0b      	ldr	r2, [pc, #44]	; (80011fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80011d0:	e002      	b.n	80011d8 <LoopFillZerobss>

080011d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011d4:	f842 3b04 	str.w	r3, [r2], #4

080011d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <LoopForever+0x16>)
	cmp	r2, r3
 80011da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011dc:	d3f9      	bcc.n	80011d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011de:	f7ff ffd3 	bl	8001188 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011e2:	f001 fe43 	bl	8002e6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011e6:	f7ff fee1 	bl	8000fac <main>

080011ea <LoopForever>:

LoopForever:
    b LoopForever
 80011ea:	e7fe      	b.n	80011ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011ec:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80011f0:	08002f18 	.word	0x08002f18
	ldr	r0, =_sdata
 80011f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011f8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80011fc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001200:	20001080 	.word	0x20001080

08001204 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001204:	e7fe      	b.n	8001204 <ADC1_2_IRQHandler>
	...

08001208 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <HAL_Init+0x28>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a07      	ldr	r2, [pc, #28]	; (8001230 <HAL_Init+0x28>)
 8001212:	f043 0310 	orr.w	r3, r3, #16
 8001216:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001218:	2003      	movs	r0, #3
 800121a:	f000 f92f 	bl	800147c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800121e:	2000      	movs	r0, #0
 8001220:	f000 f808 	bl	8001234 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001224:	f7ff ff5e 	bl	80010e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40022000 	.word	0x40022000

08001234 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_InitTick+0x54>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_InitTick+0x58>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124a:	fbb3 f3f1 	udiv	r3, r3, r1
 800124e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f939 	bl	80014ca <HAL_SYSTICK_Config>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e00e      	b.n	8001280 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b0f      	cmp	r3, #15
 8001266:	d80a      	bhi.n	800127e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001268:	2200      	movs	r2, #0
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	f04f 30ff 	mov.w	r0, #4294967295
 8001270:	f000 f90f 	bl	8001492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001274:	4a06      	ldr	r2, [pc, #24]	; (8001290 <HAL_InitTick+0x5c>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	e000      	b.n	8001280 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000000 	.word	0x20000000
 800128c:	20000008 	.word	0x20000008
 8001290:	20000004 	.word	0x20000004

08001294 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x20>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_IncTick+0x24>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000008 	.word	0x20000008
 80012b8:	2000107c 	.word	0x2000107c

080012bc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;  
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	2000107c 	.word	0x2000107c

080012d4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012dc:	f7ff ffee 	bl	80012bc <HAL_GetTick>
 80012e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ec:	d005      	beq.n	80012fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_Delay+0x40>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012fa:	bf00      	nop
 80012fc:	f7ff ffde 	bl	80012bc <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	429a      	cmp	r2, r3
 800130a:	d8f7      	bhi.n	80012fc <HAL_Delay+0x28>
  {
  }
}
 800130c:	bf00      	nop
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000008 	.word	0x20000008

08001318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <__NVIC_SetPriorityGrouping+0x44>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001334:	4013      	ands	r3, r2
 8001336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134a:	4a04      	ldr	r2, [pc, #16]	; (800135c <__NVIC_SetPriorityGrouping+0x44>)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	60d3      	str	r3, [r2, #12]
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <__NVIC_GetPriorityGrouping+0x18>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	0a1b      	lsrs	r3, r3, #8
 800136a:	f003 0307 	and.w	r3, r3, #7
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db0a      	blt.n	80013a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	490c      	ldr	r1, [pc, #48]	; (80013c8 <__NVIC_SetPriority+0x4c>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	0112      	lsls	r2, r2, #4
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	440b      	add	r3, r1
 80013a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a4:	e00a      	b.n	80013bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4908      	ldr	r1, [pc, #32]	; (80013cc <__NVIC_SetPriority+0x50>)
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	3b04      	subs	r3, #4
 80013b4:	0112      	lsls	r2, r2, #4
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	440b      	add	r3, r1
 80013ba:	761a      	strb	r2, [r3, #24]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000e100 	.word	0xe000e100
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	; 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f1c3 0307 	rsb	r3, r3, #7
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	bf28      	it	cs
 80013ee:	2304      	movcs	r3, #4
 80013f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3304      	adds	r3, #4
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	d902      	bls.n	8001400 <NVIC_EncodePriority+0x30>
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3b03      	subs	r3, #3
 80013fe:	e000      	b.n	8001402 <NVIC_EncodePriority+0x32>
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	f04f 32ff 	mov.w	r2, #4294967295
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43da      	mvns	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	401a      	ands	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001418:	f04f 31ff 	mov.w	r1, #4294967295
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	43d9      	mvns	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	4313      	orrs	r3, r2
         );
}
 800142a:	4618      	mov	r0, r3
 800142c:	3724      	adds	r7, #36	; 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001448:	d301      	bcc.n	800144e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144a:	2301      	movs	r3, #1
 800144c:	e00f      	b.n	800146e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <SysTick_Config+0x40>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001456:	210f      	movs	r1, #15
 8001458:	f04f 30ff 	mov.w	r0, #4294967295
 800145c:	f7ff ff8e 	bl	800137c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <SysTick_Config+0x40>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <SysTick_Config+0x40>)
 8001468:	2207      	movs	r2, #7
 800146a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	e000e010 	.word	0xe000e010

0800147c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ff47 	bl	8001318 <__NVIC_SetPriorityGrouping>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a4:	f7ff ff5c 	bl	8001360 <__NVIC_GetPriorityGrouping>
 80014a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	68b9      	ldr	r1, [r7, #8]
 80014ae:	6978      	ldr	r0, [r7, #20]
 80014b0:	f7ff ff8e 	bl	80013d0 <NVIC_EncodePriority>
 80014b4:	4602      	mov	r2, r0
 80014b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff5d 	bl	800137c <__NVIC_SetPriority>
}
 80014c2:	bf00      	nop
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ffb0 	bl	8001438 <SysTick_Config>
 80014d8:	4603      	mov	r3, r0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b087      	sub	sp, #28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f2:	e14e      	b.n	8001792 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	2101      	movs	r1, #1
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001500:	4013      	ands	r3, r2
 8001502:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 8140 	beq.w	800178c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b02      	cmp	r3, #2
 8001512:	d003      	beq.n	800151c <HAL_GPIO_Init+0x38>
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b12      	cmp	r3, #18
 800151a:	d123      	bne.n	8001564 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	08da      	lsrs	r2, r3, #3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3208      	adds	r2, #8
 8001524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001528:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	220f      	movs	r2, #15
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	691a      	ldr	r2, [r3, #16]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	08da      	lsrs	r2, r3, #3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3208      	adds	r2, #8
 800155e:	6939      	ldr	r1, [r7, #16]
 8001560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	2203      	movs	r2, #3
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0203 	and.w	r2, r3, #3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d00b      	beq.n	80015b8 <HAL_GPIO_Init+0xd4>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d007      	beq.n	80015b8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015ac:	2b11      	cmp	r3, #17
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b12      	cmp	r3, #18
 80015b6:	d130      	bne.n	800161a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015ee:	2201      	movs	r2, #1
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	f003 0201 	and.w	r2, r3, #1
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	2203      	movs	r2, #3
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 809a 	beq.w	800178c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001658:	4b55      	ldr	r3, [pc, #340]	; (80017b0 <HAL_GPIO_Init+0x2cc>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	4a54      	ldr	r2, [pc, #336]	; (80017b0 <HAL_GPIO_Init+0x2cc>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6193      	str	r3, [r2, #24]
 8001664:	4b52      	ldr	r3, [pc, #328]	; (80017b0 <HAL_GPIO_Init+0x2cc>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001670:	4a50      	ldr	r2, [pc, #320]	; (80017b4 <HAL_GPIO_Init+0x2d0>)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	089b      	lsrs	r3, r3, #2
 8001676:	3302      	adds	r3, #2
 8001678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	220f      	movs	r2, #15
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4013      	ands	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800169a:	d013      	beq.n	80016c4 <HAL_GPIO_Init+0x1e0>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a46      	ldr	r2, [pc, #280]	; (80017b8 <HAL_GPIO_Init+0x2d4>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d00d      	beq.n	80016c0 <HAL_GPIO_Init+0x1dc>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a45      	ldr	r2, [pc, #276]	; (80017bc <HAL_GPIO_Init+0x2d8>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d007      	beq.n	80016bc <HAL_GPIO_Init+0x1d8>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a44      	ldr	r2, [pc, #272]	; (80017c0 <HAL_GPIO_Init+0x2dc>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d101      	bne.n	80016b8 <HAL_GPIO_Init+0x1d4>
 80016b4:	2303      	movs	r3, #3
 80016b6:	e006      	b.n	80016c6 <HAL_GPIO_Init+0x1e2>
 80016b8:	2305      	movs	r3, #5
 80016ba:	e004      	b.n	80016c6 <HAL_GPIO_Init+0x1e2>
 80016bc:	2302      	movs	r3, #2
 80016be:	e002      	b.n	80016c6 <HAL_GPIO_Init+0x1e2>
 80016c0:	2301      	movs	r3, #1
 80016c2:	e000      	b.n	80016c6 <HAL_GPIO_Init+0x1e2>
 80016c4:	2300      	movs	r3, #0
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	f002 0203 	and.w	r2, r2, #3
 80016cc:	0092      	lsls	r2, r2, #2
 80016ce:	4093      	lsls	r3, r2
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016d6:	4937      	ldr	r1, [pc, #220]	; (80017b4 <HAL_GPIO_Init+0x2d0>)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	089b      	lsrs	r3, r3, #2
 80016dc:	3302      	adds	r3, #2
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016e4:	4b37      	ldr	r3, [pc, #220]	; (80017c4 <HAL_GPIO_Init+0x2e0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001708:	4a2e      	ldr	r2, [pc, #184]	; (80017c4 <HAL_GPIO_Init+0x2e0>)
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800170e:	4b2d      	ldr	r3, [pc, #180]	; (80017c4 <HAL_GPIO_Init+0x2e0>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	43db      	mvns	r3, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001732:	4a24      	ldr	r2, [pc, #144]	; (80017c4 <HAL_GPIO_Init+0x2e0>)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001738:	4b22      	ldr	r3, [pc, #136]	; (80017c4 <HAL_GPIO_Init+0x2e0>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	43db      	mvns	r3, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800175c:	4a19      	ldr	r2, [pc, #100]	; (80017c4 <HAL_GPIO_Init+0x2e0>)
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001762:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <HAL_GPIO_Init+0x2e0>)
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	43db      	mvns	r3, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001786:	4a0f      	ldr	r2, [pc, #60]	; (80017c4 <HAL_GPIO_Init+0x2e0>)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	3301      	adds	r3, #1
 8001790:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	fa22 f303 	lsr.w	r3, r2, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	f47f aea9 	bne.w	80014f4 <HAL_GPIO_Init+0x10>
  }
}
 80017a2:	bf00      	nop
 80017a4:	371c      	adds	r7, #28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40010000 	.word	0x40010000
 80017b8:	48000400 	.word	0x48000400
 80017bc:	48000800 	.word	0x48000800
 80017c0:	48000c00 	.word	0x48000c00
 80017c4:	40010400 	.word	0x40010400

080017c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	807b      	strh	r3, [r7, #2]
 80017d4:	4613      	mov	r3, r2
 80017d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017d8:	787b      	ldrb	r3, [r7, #1]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017de:	887a      	ldrh	r2, [r7, #2]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017e4:	e002      	b.n	80017ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017e6:	887a      	ldrh	r2, [r7, #2]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e081      	b.n	800190e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d106      	bne.n	8001824 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fb80 	bl	8000f24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2224      	movs	r2, #36	; 0x24
 8001828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0201 	bic.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001848:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001858:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d107      	bne.n	8001872 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	e006      	b.n	8001880 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800187e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d104      	bne.n	8001892 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001890:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691a      	ldr	r2, [r3, #16]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	ea42 0103 	orr.w	r1, r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	021a      	lsls	r2, r3, #8
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69d9      	ldr	r1, [r3, #28]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1a      	ldr	r2, [r3, #32]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 0201 	orr.w	r2, r2, #1
 80018ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2220      	movs	r2, #32
 80018fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b20      	cmp	r3, #32
 800192a:	d138      	bne.n	800199e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001932:	2b01      	cmp	r3, #1
 8001934:	d101      	bne.n	800193a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001936:	2302      	movs	r3, #2
 8001938:	e032      	b.n	80019a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2224      	movs	r2, #36	; 0x24
 8001946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0201 	bic.w	r2, r2, #1
 8001958:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001968:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6819      	ldr	r1, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f042 0201 	orr.w	r2, r2, #1
 8001988:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2220      	movs	r2, #32
 800198e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	e000      	b.n	80019a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800199e:	2302      	movs	r3, #2
  }
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b20      	cmp	r3, #32
 80019c0:	d139      	bne.n	8001a36 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d101      	bne.n	80019d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019cc:	2302      	movs	r3, #2
 80019ce:	e033      	b.n	8001a38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2224      	movs	r2, #36	; 0x24
 80019dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0201 	bic.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f042 0201 	orr.w	r2, r2, #1
 8001a20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2220      	movs	r2, #32
 8001a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e000      	b.n	8001a38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a36:	2302      	movs	r3, #2
  }
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d102      	bne.n	8001a5e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	f000 bef4 	b.w	8002846 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 816a 	beq.w	8001d42 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a6e:	4bb3      	ldr	r3, [pc, #716]	; (8001d3c <HAL_RCC_OscConfig+0x2f8>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 030c 	and.w	r3, r3, #12
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d00c      	beq.n	8001a94 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a7a:	4bb0      	ldr	r3, [pc, #704]	; (8001d3c <HAL_RCC_OscConfig+0x2f8>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d159      	bne.n	8001b3a <HAL_RCC_OscConfig+0xf6>
 8001a86:	4bad      	ldr	r3, [pc, #692]	; (8001d3c <HAL_RCC_OscConfig+0x2f8>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a92:	d152      	bne.n	8001b3a <HAL_RCC_OscConfig+0xf6>
 8001a94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a98:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001aa8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aac:	fab3 f383 	clz	r3, r3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d102      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x82>
 8001ac0:	4b9e      	ldr	r3, [pc, #632]	; (8001d3c <HAL_RCC_OscConfig+0x2f8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	e015      	b.n	8001af2 <HAL_RCC_OscConfig+0xae>
 8001ac6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aca:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001ada:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ade:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001ae2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001ae6:	fa93 f3a3 	rbit	r3, r3
 8001aea:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001aee:	4b93      	ldr	r3, [pc, #588]	; (8001d3c <HAL_RCC_OscConfig+0x2f8>)
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001af6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001afa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001afe:	fa92 f2a2 	rbit	r2, r2
 8001b02:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001b06:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001b0a:	fab2 f282 	clz	r2, r2
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	f042 0220 	orr.w	r2, r2, #32
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	f002 021f 	and.w	r2, r2, #31
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 810c 	beq.w	8001d40 <HAL_RCC_OscConfig+0x2fc>
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f040 8106 	bne.w	8001d40 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	f000 be86 	b.w	8002846 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b44:	d106      	bne.n	8001b54 <HAL_RCC_OscConfig+0x110>
 8001b46:	4b7d      	ldr	r3, [pc, #500]	; (8001d3c <HAL_RCC_OscConfig+0x2f8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a7c      	ldr	r2, [pc, #496]	; (8001d3c <HAL_RCC_OscConfig+0x2f8>)
 8001b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e030      	b.n	8001bb6 <HAL_RCC_OscConfig+0x172>
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10c      	bne.n	8001b78 <HAL_RCC_OscConfig+0x134>
 8001b5e:	4b77      	ldr	r3, [pc, #476]	; (8001d3c <HAL_RCC_OscConfig+0x2f8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a76      	ldr	r2, [pc, #472]	; (8001d3c <HAL_RCC_OscConfig+0x2f8>)
 8001b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b74      	ldr	r3, [pc, #464]	; (8001d3c <HAL_RCC_OscConfig+0x2f8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a73      	ldr	r2, [pc, #460]	; (8001d3c <HAL_RCC_OscConfig+0x2f8>)
 8001b70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e01e      	b.n	8001bb6 <HAL_RCC_OscConfig+0x172>
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b82:	d10c      	bne.n	8001b9e <HAL_RCC_OscConfig+0x15a>
 8001b84:	4b6d      	ldr	r3, [pc, #436]	; (8001d3c <HAL_RCC_OscConfig+0x2f8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a6c      	ldr	r2, [pc, #432]	; (8001d3c <HAL_RCC_OscConfig+0x2f8>)
 8001b8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	4b6a      	ldr	r3, [pc, #424]	; (8001d3c <HAL_RCC_OscConfig+0x2f8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a69      	ldr	r2, [pc, #420]	; (8001d3c <HAL_RCC_OscConfig+0x2f8>)
 8001b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	e00b      	b.n	8001bb6 <HAL_RCC_OscConfig+0x172>
 8001b9e:	4b67      	ldr	r3, [pc, #412]	; (8001d3c <HAL_RCC_OscConfig+0x2f8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a66      	ldr	r2, [pc, #408]	; (8001d3c <HAL_RCC_OscConfig+0x2f8>)
 8001ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	4b64      	ldr	r3, [pc, #400]	; (8001d3c <HAL_RCC_OscConfig+0x2f8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a63      	ldr	r2, [pc, #396]	; (8001d3c <HAL_RCC_OscConfig+0x2f8>)
 8001bb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bb6:	4b61      	ldr	r3, [pc, #388]	; (8001d3c <HAL_RCC_OscConfig+0x2f8>)
 8001bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bba:	f023 020f 	bic.w	r2, r3, #15
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	495d      	ldr	r1, [pc, #372]	; (8001d3c <HAL_RCC_OscConfig+0x2f8>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d059      	beq.n	8001c88 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd4:	f7ff fb72 	bl	80012bc <HAL_GetTick>
 8001bd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bdc:	e00a      	b.n	8001bf4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bde:	f7ff fb6d 	bl	80012bc <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b64      	cmp	r3, #100	; 0x64
 8001bec:	d902      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	f000 be29 	b.w	8002846 <HAL_RCC_OscConfig+0xe02>
 8001bf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bf8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001c00:	fa93 f3a3 	rbit	r3, r3
 8001c04:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001c08:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0c:	fab3 f383 	clz	r3, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	095b      	lsrs	r3, r3, #5
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d102      	bne.n	8001c26 <HAL_RCC_OscConfig+0x1e2>
 8001c20:	4b46      	ldr	r3, [pc, #280]	; (8001d3c <HAL_RCC_OscConfig+0x2f8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	e015      	b.n	8001c52 <HAL_RCC_OscConfig+0x20e>
 8001c26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c2a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001c32:	fa93 f3a3 	rbit	r3, r3
 8001c36:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001c3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c3e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001c42:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001c46:	fa93 f3a3 	rbit	r3, r3
 8001c4a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001c4e:	4b3b      	ldr	r3, [pc, #236]	; (8001d3c <HAL_RCC_OscConfig+0x2f8>)
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c56:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001c5a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001c5e:	fa92 f2a2 	rbit	r2, r2
 8001c62:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001c66:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001c6a:	fab2 f282 	clz	r2, r2
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	f042 0220 	orr.w	r2, r2, #32
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	f002 021f 	and.w	r2, r2, #31
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0ab      	beq.n	8001bde <HAL_RCC_OscConfig+0x19a>
 8001c86:	e05c      	b.n	8001d42 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7ff fb18 	bl	80012bc <HAL_GetTick>
 8001c8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c90:	e00a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c92:	f7ff fb13 	bl	80012bc <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b64      	cmp	r3, #100	; 0x64
 8001ca0:	d902      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	f000 bdcf 	b.w	8002846 <HAL_RCC_OscConfig+0xe02>
 8001ca8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cac:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001cbc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc0:	fab3 f383 	clz	r3, r3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d102      	bne.n	8001cda <HAL_RCC_OscConfig+0x296>
 8001cd4:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <HAL_RCC_OscConfig+0x2f8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	e015      	b.n	8001d06 <HAL_RCC_OscConfig+0x2c2>
 8001cda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cde:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001cee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cf2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001cf6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001cfa:	fa93 f3a3 	rbit	r3, r3
 8001cfe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <HAL_RCC_OscConfig+0x2f8>)
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d0a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001d0e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d12:	fa92 f2a2 	rbit	r2, r2
 8001d16:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001d1a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001d1e:	fab2 f282 	clz	r2, r2
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	f042 0220 	orr.w	r2, r2, #32
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	f002 021f 	and.w	r2, r2, #31
 8001d2e:	2101      	movs	r1, #1
 8001d30:	fa01 f202 	lsl.w	r2, r1, r2
 8001d34:	4013      	ands	r3, r2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1ab      	bne.n	8001c92 <HAL_RCC_OscConfig+0x24e>
 8001d3a:	e002      	b.n	8001d42 <HAL_RCC_OscConfig+0x2fe>
 8001d3c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 816f 	beq.w	8002030 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d52:	4bd0      	ldr	r3, [pc, #832]	; (8002094 <HAL_RCC_OscConfig+0x650>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00b      	beq.n	8001d76 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d5e:	4bcd      	ldr	r3, [pc, #820]	; (8002094 <HAL_RCC_OscConfig+0x650>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d16c      	bne.n	8001e44 <HAL_RCC_OscConfig+0x400>
 8001d6a:	4bca      	ldr	r3, [pc, #808]	; (8002094 <HAL_RCC_OscConfig+0x650>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d166      	bne.n	8001e44 <HAL_RCC_OscConfig+0x400>
 8001d76:	2302      	movs	r3, #2
 8001d78:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001d88:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8c:	fab3 f383 	clz	r3, r3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d102      	bne.n	8001da6 <HAL_RCC_OscConfig+0x362>
 8001da0:	4bbc      	ldr	r3, [pc, #752]	; (8002094 <HAL_RCC_OscConfig+0x650>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	e013      	b.n	8001dce <HAL_RCC_OscConfig+0x38a>
 8001da6:	2302      	movs	r3, #2
 8001da8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001db0:	fa93 f3a3 	rbit	r3, r3
 8001db4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001db8:	2302      	movs	r3, #2
 8001dba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001dbe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001dc2:	fa93 f3a3 	rbit	r3, r3
 8001dc6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001dca:	4bb2      	ldr	r3, [pc, #712]	; (8002094 <HAL_RCC_OscConfig+0x650>)
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001dd4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001dd8:	fa92 f2a2 	rbit	r2, r2
 8001ddc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001de0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001de4:	fab2 f282 	clz	r2, r2
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	f042 0220 	orr.w	r2, r2, #32
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	f002 021f 	and.w	r2, r2, #31
 8001df4:	2101      	movs	r1, #1
 8001df6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d007      	beq.n	8001e10 <HAL_RCC_OscConfig+0x3cc>
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d002      	beq.n	8001e10 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f000 bd1b 	b.w	8002846 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e10:	4ba0      	ldr	r3, [pc, #640]	; (8002094 <HAL_RCC_OscConfig+0x650>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	21f8      	movs	r1, #248	; 0xf8
 8001e20:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001e28:	fa91 f1a1 	rbit	r1, r1
 8001e2c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001e30:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001e34:	fab1 f181 	clz	r1, r1
 8001e38:	b2c9      	uxtb	r1, r1
 8001e3a:	408b      	lsls	r3, r1
 8001e3c:	4995      	ldr	r1, [pc, #596]	; (8002094 <HAL_RCC_OscConfig+0x650>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e42:	e0f5      	b.n	8002030 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 8085 	beq.w	8001f5a <HAL_RCC_OscConfig+0x516>
 8001e50:	2301      	movs	r3, #1
 8001e52:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001e62:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e66:	fab3 f383 	clz	r3, r3
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	461a      	mov	r2, r3
 8001e78:	2301      	movs	r3, #1
 8001e7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7ff fa1e 	bl	80012bc <HAL_GetTick>
 8001e80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e84:	e00a      	b.n	8001e9c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e86:	f7ff fa19 	bl	80012bc <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d902      	bls.n	8001e9c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	f000 bcd5 	b.w	8002846 <HAL_RCC_OscConfig+0xe02>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001eae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	095b      	lsrs	r3, r3, #5
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d102      	bne.n	8001ecc <HAL_RCC_OscConfig+0x488>
 8001ec6:	4b73      	ldr	r3, [pc, #460]	; (8002094 <HAL_RCC_OscConfig+0x650>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	e013      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4b0>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001ede:	2302      	movs	r3, #2
 8001ee0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001ee4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001ee8:	fa93 f3a3 	rbit	r3, r3
 8001eec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001ef0:	4b68      	ldr	r3, [pc, #416]	; (8002094 <HAL_RCC_OscConfig+0x650>)
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001efa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001efe:	fa92 f2a2 	rbit	r2, r2
 8001f02:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001f06:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001f0a:	fab2 f282 	clz	r2, r2
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	f042 0220 	orr.w	r2, r2, #32
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	f002 021f 	and.w	r2, r2, #31
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0af      	beq.n	8001e86 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f26:	4b5b      	ldr	r3, [pc, #364]	; (8002094 <HAL_RCC_OscConfig+0x650>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	21f8      	movs	r1, #248	; 0xf8
 8001f36:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001f3e:	fa91 f1a1 	rbit	r1, r1
 8001f42:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001f46:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001f4a:	fab1 f181 	clz	r1, r1
 8001f4e:	b2c9      	uxtb	r1, r1
 8001f50:	408b      	lsls	r3, r1
 8001f52:	4950      	ldr	r1, [pc, #320]	; (8002094 <HAL_RCC_OscConfig+0x650>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	600b      	str	r3, [r1, #0]
 8001f58:	e06a      	b.n	8002030 <HAL_RCC_OscConfig+0x5ec>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001f6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f70:	fab3 f383 	clz	r3, r3
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	461a      	mov	r2, r3
 8001f82:	2300      	movs	r3, #0
 8001f84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f86:	f7ff f999 	bl	80012bc <HAL_GetTick>
 8001f8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8e:	e00a      	b.n	8001fa6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f90:	f7ff f994 	bl	80012bc <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d902      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	f000 bc50 	b.w	8002846 <HAL_RCC_OscConfig+0xe02>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001fb0:	fa93 f3a3 	rbit	r3, r3
 8001fb4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001fb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fbc:	fab3 f383 	clz	r3, r3
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d102      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x592>
 8001fd0:	4b30      	ldr	r3, [pc, #192]	; (8002094 <HAL_RCC_OscConfig+0x650>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	e013      	b.n	8001ffe <HAL_RCC_OscConfig+0x5ba>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001fe8:	2302      	movs	r3, #2
 8001fea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001fee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001ffa:	4b26      	ldr	r3, [pc, #152]	; (8002094 <HAL_RCC_OscConfig+0x650>)
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	2202      	movs	r2, #2
 8002000:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002004:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002008:	fa92 f2a2 	rbit	r2, r2
 800200c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002010:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002014:	fab2 f282 	clz	r2, r2
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	f042 0220 	orr.w	r2, r2, #32
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	f002 021f 	and.w	r2, r2, #31
 8002024:	2101      	movs	r1, #1
 8002026:	fa01 f202 	lsl.w	r2, r1, r2
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1af      	bne.n	8001f90 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 80da 	beq.w	80021f4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d069      	beq.n	800211e <HAL_RCC_OscConfig+0x6da>
 800204a:	2301      	movs	r3, #1
 800204c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002050:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002054:	fa93 f3a3 	rbit	r3, r3
 8002058:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800205c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002060:	fab3 f383 	clz	r3, r3
 8002064:	b2db      	uxtb	r3, r3
 8002066:	461a      	mov	r2, r3
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_RCC_OscConfig+0x654>)
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	461a      	mov	r2, r3
 8002070:	2301      	movs	r3, #1
 8002072:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002074:	f7ff f922 	bl	80012bc <HAL_GetTick>
 8002078:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207c:	e00e      	b.n	800209c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800207e:	f7ff f91d 	bl	80012bc <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d906      	bls.n	800209c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e3d9      	b.n	8002846 <HAL_RCC_OscConfig+0xe02>
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	10908120 	.word	0x10908120
 800209c:	2302      	movs	r3, #2
 800209e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80020ae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80020b2:	2202      	movs	r2, #2
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	fa93 f2a3 	rbit	r2, r3
 80020c0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80020ca:	2202      	movs	r2, #2
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	fa93 f2a3 	rbit	r2, r3
 80020d8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80020dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020de:	4ba5      	ldr	r3, [pc, #660]	; (8002374 <HAL_RCC_OscConfig+0x930>)
 80020e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020e2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80020e6:	2102      	movs	r1, #2
 80020e8:	6019      	str	r1, [r3, #0]
 80020ea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	fa93 f1a3 	rbit	r1, r3
 80020f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80020f8:	6019      	str	r1, [r3, #0]
  return result;
 80020fa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	fab3 f383 	clz	r3, r3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800210a:	b2db      	uxtb	r3, r3
 800210c:	f003 031f 	and.w	r3, r3, #31
 8002110:	2101      	movs	r1, #1
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0b0      	beq.n	800207e <HAL_RCC_OscConfig+0x63a>
 800211c:	e06a      	b.n	80021f4 <HAL_RCC_OscConfig+0x7b0>
 800211e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002122:	2201      	movs	r2, #1
 8002124:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002126:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	fa93 f2a3 	rbit	r2, r3
 8002130:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002134:	601a      	str	r2, [r3, #0]
  return result;
 8002136:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800213a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800213c:	fab3 f383 	clz	r3, r3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	461a      	mov	r2, r3
 8002144:	4b8c      	ldr	r3, [pc, #560]	; (8002378 <HAL_RCC_OscConfig+0x934>)
 8002146:	4413      	add	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	461a      	mov	r2, r3
 800214c:	2300      	movs	r3, #0
 800214e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002150:	f7ff f8b4 	bl	80012bc <HAL_GetTick>
 8002154:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002158:	e009      	b.n	800216e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800215a:	f7ff f8af 	bl	80012bc <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e36b      	b.n	8002846 <HAL_RCC_OscConfig+0xe02>
 800216e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002172:	2202      	movs	r2, #2
 8002174:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002176:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	fa93 f2a3 	rbit	r2, r3
 8002180:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800218a:	2202      	movs	r2, #2
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	fa93 f2a3 	rbit	r2, r3
 8002198:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80021a2:	2202      	movs	r2, #2
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	fa93 f2a3 	rbit	r2, r3
 80021b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b6:	4b6f      	ldr	r3, [pc, #444]	; (8002374 <HAL_RCC_OscConfig+0x930>)
 80021b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80021be:	2102      	movs	r1, #2
 80021c0:	6019      	str	r1, [r3, #0]
 80021c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	fa93 f1a3 	rbit	r1, r3
 80021cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80021d0:	6019      	str	r1, [r3, #0]
  return result;
 80021d2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	fab3 f383 	clz	r3, r3
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	f003 031f 	and.w	r3, r3, #31
 80021e8:	2101      	movs	r1, #1
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1b2      	bne.n	800215a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f4:	1d3b      	adds	r3, r7, #4
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 8158 	beq.w	80024b4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002204:	2300      	movs	r3, #0
 8002206:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220a:	4b5a      	ldr	r3, [pc, #360]	; (8002374 <HAL_RCC_OscConfig+0x930>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d112      	bne.n	800223c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002216:	4b57      	ldr	r3, [pc, #348]	; (8002374 <HAL_RCC_OscConfig+0x930>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4a56      	ldr	r2, [pc, #344]	; (8002374 <HAL_RCC_OscConfig+0x930>)
 800221c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002220:	61d3      	str	r3, [r2, #28]
 8002222:	4b54      	ldr	r3, [pc, #336]	; (8002374 <HAL_RCC_OscConfig+0x930>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800222a:	f107 0308 	add.w	r3, r7, #8
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	f107 0308 	add.w	r3, r7, #8
 8002234:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002236:	2301      	movs	r3, #1
 8002238:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223c:	4b4f      	ldr	r3, [pc, #316]	; (800237c <HAL_RCC_OscConfig+0x938>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002244:	2b00      	cmp	r3, #0
 8002246:	d11a      	bne.n	800227e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002248:	4b4c      	ldr	r3, [pc, #304]	; (800237c <HAL_RCC_OscConfig+0x938>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a4b      	ldr	r2, [pc, #300]	; (800237c <HAL_RCC_OscConfig+0x938>)
 800224e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002252:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002254:	f7ff f832 	bl	80012bc <HAL_GetTick>
 8002258:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225c:	e009      	b.n	8002272 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225e:	f7ff f82d 	bl	80012bc <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b64      	cmp	r3, #100	; 0x64
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e2e9      	b.n	8002846 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002272:	4b42      	ldr	r3, [pc, #264]	; (800237c <HAL_RCC_OscConfig+0x938>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0ef      	beq.n	800225e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800227e:	1d3b      	adds	r3, r7, #4
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d106      	bne.n	8002296 <HAL_RCC_OscConfig+0x852>
 8002288:	4b3a      	ldr	r3, [pc, #232]	; (8002374 <HAL_RCC_OscConfig+0x930>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	4a39      	ldr	r2, [pc, #228]	; (8002374 <HAL_RCC_OscConfig+0x930>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6213      	str	r3, [r2, #32]
 8002294:	e02f      	b.n	80022f6 <HAL_RCC_OscConfig+0x8b2>
 8002296:	1d3b      	adds	r3, r7, #4
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10c      	bne.n	80022ba <HAL_RCC_OscConfig+0x876>
 80022a0:	4b34      	ldr	r3, [pc, #208]	; (8002374 <HAL_RCC_OscConfig+0x930>)
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	4a33      	ldr	r2, [pc, #204]	; (8002374 <HAL_RCC_OscConfig+0x930>)
 80022a6:	f023 0301 	bic.w	r3, r3, #1
 80022aa:	6213      	str	r3, [r2, #32]
 80022ac:	4b31      	ldr	r3, [pc, #196]	; (8002374 <HAL_RCC_OscConfig+0x930>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	4a30      	ldr	r2, [pc, #192]	; (8002374 <HAL_RCC_OscConfig+0x930>)
 80022b2:	f023 0304 	bic.w	r3, r3, #4
 80022b6:	6213      	str	r3, [r2, #32]
 80022b8:	e01d      	b.n	80022f6 <HAL_RCC_OscConfig+0x8b2>
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	2b05      	cmp	r3, #5
 80022c2:	d10c      	bne.n	80022de <HAL_RCC_OscConfig+0x89a>
 80022c4:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <HAL_RCC_OscConfig+0x930>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	4a2a      	ldr	r2, [pc, #168]	; (8002374 <HAL_RCC_OscConfig+0x930>)
 80022ca:	f043 0304 	orr.w	r3, r3, #4
 80022ce:	6213      	str	r3, [r2, #32]
 80022d0:	4b28      	ldr	r3, [pc, #160]	; (8002374 <HAL_RCC_OscConfig+0x930>)
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	4a27      	ldr	r2, [pc, #156]	; (8002374 <HAL_RCC_OscConfig+0x930>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	6213      	str	r3, [r2, #32]
 80022dc:	e00b      	b.n	80022f6 <HAL_RCC_OscConfig+0x8b2>
 80022de:	4b25      	ldr	r3, [pc, #148]	; (8002374 <HAL_RCC_OscConfig+0x930>)
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	4a24      	ldr	r2, [pc, #144]	; (8002374 <HAL_RCC_OscConfig+0x930>)
 80022e4:	f023 0301 	bic.w	r3, r3, #1
 80022e8:	6213      	str	r3, [r2, #32]
 80022ea:	4b22      	ldr	r3, [pc, #136]	; (8002374 <HAL_RCC_OscConfig+0x930>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	4a21      	ldr	r2, [pc, #132]	; (8002374 <HAL_RCC_OscConfig+0x930>)
 80022f0:	f023 0304 	bic.w	r3, r3, #4
 80022f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022f6:	1d3b      	adds	r3, r7, #4
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d06b      	beq.n	80023d8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002300:	f7fe ffdc 	bl	80012bc <HAL_GetTick>
 8002304:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002308:	e00b      	b.n	8002322 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800230a:	f7fe ffd7 	bl	80012bc <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	f241 3288 	movw	r2, #5000	; 0x1388
 800231a:	4293      	cmp	r3, r2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e291      	b.n	8002846 <HAL_RCC_OscConfig+0xe02>
 8002322:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002326:	2202      	movs	r2, #2
 8002328:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	fa93 f2a3 	rbit	r2, r3
 8002334:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800233e:	2202      	movs	r2, #2
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	fa93 f2a3 	rbit	r2, r3
 800234c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002350:	601a      	str	r2, [r3, #0]
  return result;
 8002352:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002356:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002358:	fab3 f383 	clz	r3, r3
 800235c:	b2db      	uxtb	r3, r3
 800235e:	095b      	lsrs	r3, r3, #5
 8002360:	b2db      	uxtb	r3, r3
 8002362:	f043 0302 	orr.w	r3, r3, #2
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d109      	bne.n	8002380 <HAL_RCC_OscConfig+0x93c>
 800236c:	4b01      	ldr	r3, [pc, #4]	; (8002374 <HAL_RCC_OscConfig+0x930>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	e014      	b.n	800239c <HAL_RCC_OscConfig+0x958>
 8002372:	bf00      	nop
 8002374:	40021000 	.word	0x40021000
 8002378:	10908120 	.word	0x10908120
 800237c:	40007000 	.word	0x40007000
 8002380:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002384:	2202      	movs	r2, #2
 8002386:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	fa93 f2a3 	rbit	r2, r3
 8002392:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	4bbb      	ldr	r3, [pc, #748]	; (8002688 <HAL_RCC_OscConfig+0xc44>)
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80023a0:	2102      	movs	r1, #2
 80023a2:	6011      	str	r1, [r2, #0]
 80023a4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	fa92 f1a2 	rbit	r1, r2
 80023ae:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80023b2:	6011      	str	r1, [r2, #0]
  return result;
 80023b4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	fab2 f282 	clz	r2, r2
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	f002 021f 	and.w	r2, r2, #31
 80023ca:	2101      	movs	r1, #1
 80023cc:	fa01 f202 	lsl.w	r2, r1, r2
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d099      	beq.n	800230a <HAL_RCC_OscConfig+0x8c6>
 80023d6:	e063      	b.n	80024a0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d8:	f7fe ff70 	bl	80012bc <HAL_GetTick>
 80023dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e0:	e00b      	b.n	80023fa <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e2:	f7fe ff6b 	bl	80012bc <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e225      	b.n	8002846 <HAL_RCC_OscConfig+0xe02>
 80023fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80023fe:	2202      	movs	r2, #2
 8002400:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	fa93 f2a3 	rbit	r2, r3
 800240c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002416:	2202      	movs	r2, #2
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	fa93 f2a3 	rbit	r2, r3
 8002424:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002428:	601a      	str	r2, [r3, #0]
  return result;
 800242a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800242e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002430:	fab3 f383 	clz	r3, r3
 8002434:	b2db      	uxtb	r3, r3
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	b2db      	uxtb	r3, r3
 800243a:	f043 0302 	orr.w	r3, r3, #2
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d102      	bne.n	800244a <HAL_RCC_OscConfig+0xa06>
 8002444:	4b90      	ldr	r3, [pc, #576]	; (8002688 <HAL_RCC_OscConfig+0xc44>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	e00d      	b.n	8002466 <HAL_RCC_OscConfig+0xa22>
 800244a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800244e:	2202      	movs	r2, #2
 8002450:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	fa93 f2a3 	rbit	r2, r3
 800245c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	4b89      	ldr	r3, [pc, #548]	; (8002688 <HAL_RCC_OscConfig+0xc44>)
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800246a:	2102      	movs	r1, #2
 800246c:	6011      	str	r1, [r2, #0]
 800246e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	fa92 f1a2 	rbit	r1, r2
 8002478:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800247c:	6011      	str	r1, [r2, #0]
  return result;
 800247e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	fab2 f282 	clz	r2, r2
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	f002 021f 	and.w	r2, r2, #31
 8002494:	2101      	movs	r1, #1
 8002496:	fa01 f202 	lsl.w	r2, r1, r2
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1a0      	bne.n	80023e2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024a0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d105      	bne.n	80024b4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a8:	4b77      	ldr	r3, [pc, #476]	; (8002688 <HAL_RCC_OscConfig+0xc44>)
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	4a76      	ldr	r2, [pc, #472]	; (8002688 <HAL_RCC_OscConfig+0xc44>)
 80024ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024b4:	1d3b      	adds	r3, r7, #4
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 81c2 	beq.w	8002844 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024c0:	4b71      	ldr	r3, [pc, #452]	; (8002688 <HAL_RCC_OscConfig+0xc44>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 030c 	and.w	r3, r3, #12
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	f000 819c 	beq.w	8002806 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	f040 8114 	bne.w	8002702 <HAL_RCC_OscConfig+0xcbe>
 80024da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80024de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	fa93 f2a3 	rbit	r2, r3
 80024ee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80024f2:	601a      	str	r2, [r3, #0]
  return result;
 80024f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80024f8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002504:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	461a      	mov	r2, r3
 800250c:	2300      	movs	r3, #0
 800250e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7fe fed4 	bl	80012bc <HAL_GetTick>
 8002514:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002518:	e009      	b.n	800252e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800251a:	f7fe fecf 	bl	80012bc <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e18b      	b.n	8002846 <HAL_RCC_OscConfig+0xe02>
 800252e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002532:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002536:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	fa93 f2a3 	rbit	r2, r3
 8002542:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002546:	601a      	str	r2, [r3, #0]
  return result;
 8002548:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800254c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254e:	fab3 f383 	clz	r3, r3
 8002552:	b2db      	uxtb	r3, r3
 8002554:	095b      	lsrs	r3, r3, #5
 8002556:	b2db      	uxtb	r3, r3
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b01      	cmp	r3, #1
 8002560:	d102      	bne.n	8002568 <HAL_RCC_OscConfig+0xb24>
 8002562:	4b49      	ldr	r3, [pc, #292]	; (8002688 <HAL_RCC_OscConfig+0xc44>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	e01b      	b.n	80025a0 <HAL_RCC_OscConfig+0xb5c>
 8002568:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800256c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002570:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	fa93 f2a3 	rbit	r2, r3
 800257c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002586:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	fa93 f2a3 	rbit	r2, r3
 8002596:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	4b3a      	ldr	r3, [pc, #232]	; (8002688 <HAL_RCC_OscConfig+0xc44>)
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80025a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025a8:	6011      	str	r1, [r2, #0]
 80025aa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	fa92 f1a2 	rbit	r1, r2
 80025b4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80025b8:	6011      	str	r1, [r2, #0]
  return result;
 80025ba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	fab2 f282 	clz	r2, r2
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	f042 0220 	orr.w	r2, r2, #32
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	f002 021f 	and.w	r2, r2, #31
 80025d0:	2101      	movs	r1, #1
 80025d2:	fa01 f202 	lsl.w	r2, r1, r2
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d19e      	bne.n	800251a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025dc:	4b2a      	ldr	r3, [pc, #168]	; (8002688 <HAL_RCC_OscConfig+0xc44>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025e4:	1d3b      	adds	r3, r7, #4
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80025ea:	1d3b      	adds	r3, r7, #4
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	430b      	orrs	r3, r1
 80025f2:	4925      	ldr	r1, [pc, #148]	; (8002688 <HAL_RCC_OscConfig+0xc44>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]
 80025f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80025fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002600:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	fa93 f2a3 	rbit	r2, r3
 800260c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002610:	601a      	str	r2, [r3, #0]
  return result;
 8002612:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002616:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002622:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	461a      	mov	r2, r3
 800262a:	2301      	movs	r3, #1
 800262c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262e:	f7fe fe45 	bl	80012bc <HAL_GetTick>
 8002632:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002636:	e009      	b.n	800264c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002638:	f7fe fe40 	bl	80012bc <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e0fc      	b.n	8002846 <HAL_RCC_OscConfig+0xe02>
 800264c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002650:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002654:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	fa93 f2a3 	rbit	r2, r3
 8002660:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002664:	601a      	str	r2, [r3, #0]
  return result;
 8002666:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800266a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800266c:	fab3 f383 	clz	r3, r3
 8002670:	b2db      	uxtb	r3, r3
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	b2db      	uxtb	r3, r3
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b01      	cmp	r3, #1
 800267e:	d105      	bne.n	800268c <HAL_RCC_OscConfig+0xc48>
 8002680:	4b01      	ldr	r3, [pc, #4]	; (8002688 <HAL_RCC_OscConfig+0xc44>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	e01e      	b.n	80026c4 <HAL_RCC_OscConfig+0xc80>
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000
 800268c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002690:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002694:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	fa93 f2a3 	rbit	r2, r3
 80026a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	fa93 f2a3 	rbit	r2, r3
 80026ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	4b63      	ldr	r3, [pc, #396]	; (8002850 <HAL_RCC_OscConfig+0xe0c>)
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80026c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026cc:	6011      	str	r1, [r2, #0]
 80026ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	fa92 f1a2 	rbit	r1, r2
 80026d8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80026dc:	6011      	str	r1, [r2, #0]
  return result;
 80026de:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	fab2 f282 	clz	r2, r2
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	f042 0220 	orr.w	r2, r2, #32
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	f002 021f 	and.w	r2, r2, #31
 80026f4:	2101      	movs	r1, #1
 80026f6:	fa01 f202 	lsl.w	r2, r1, r2
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d09b      	beq.n	8002638 <HAL_RCC_OscConfig+0xbf4>
 8002700:	e0a0      	b.n	8002844 <HAL_RCC_OscConfig+0xe00>
 8002702:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002706:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800270a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	fa93 f2a3 	rbit	r2, r3
 8002716:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800271a:	601a      	str	r2, [r3, #0]
  return result;
 800271c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002720:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800272c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	461a      	mov	r2, r3
 8002734:	2300      	movs	r3, #0
 8002736:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7fe fdc0 	bl	80012bc <HAL_GetTick>
 800273c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002740:	e009      	b.n	8002756 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002742:	f7fe fdbb 	bl	80012bc <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e077      	b.n	8002846 <HAL_RCC_OscConfig+0xe02>
 8002756:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800275a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800275e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	fa93 f2a3 	rbit	r2, r3
 800276a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800276e:	601a      	str	r2, [r3, #0]
  return result;
 8002770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002774:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d102      	bne.n	8002790 <HAL_RCC_OscConfig+0xd4c>
 800278a:	4b31      	ldr	r3, [pc, #196]	; (8002850 <HAL_RCC_OscConfig+0xe0c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	e01b      	b.n	80027c8 <HAL_RCC_OscConfig+0xd84>
 8002790:	f107 0320 	add.w	r3, r7, #32
 8002794:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002798:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	f107 0320 	add.w	r3, r7, #32
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	fa93 f2a3 	rbit	r2, r3
 80027a4:	f107 031c 	add.w	r3, r7, #28
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	f107 0318 	add.w	r3, r7, #24
 80027ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	f107 0318 	add.w	r3, r7, #24
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	fa93 f2a3 	rbit	r2, r3
 80027be:	f107 0314 	add.w	r3, r7, #20
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	4b22      	ldr	r3, [pc, #136]	; (8002850 <HAL_RCC_OscConfig+0xe0c>)
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	f107 0210 	add.w	r2, r7, #16
 80027cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027d0:	6011      	str	r1, [r2, #0]
 80027d2:	f107 0210 	add.w	r2, r7, #16
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	fa92 f1a2 	rbit	r1, r2
 80027dc:	f107 020c 	add.w	r2, r7, #12
 80027e0:	6011      	str	r1, [r2, #0]
  return result;
 80027e2:	f107 020c 	add.w	r2, r7, #12
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	fab2 f282 	clz	r2, r2
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	f042 0220 	orr.w	r2, r2, #32
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	f002 021f 	and.w	r2, r2, #31
 80027f8:	2101      	movs	r1, #1
 80027fa:	fa01 f202 	lsl.w	r2, r1, r2
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d19e      	bne.n	8002742 <HAL_RCC_OscConfig+0xcfe>
 8002804:	e01e      	b.n	8002844 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002806:	1d3b      	adds	r3, r7, #4
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e018      	b.n	8002846 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002814:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <HAL_RCC_OscConfig+0xe0c>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800281c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002820:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002824:	1d3b      	adds	r3, r7, #4
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	429a      	cmp	r2, r3
 800282c:	d108      	bne.n	8002840 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800282e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002832:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002836:	1d3b      	adds	r3, r7, #4
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800283c:	429a      	cmp	r2, r3
 800283e:	d001      	beq.n	8002844 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40021000 	.word	0x40021000

08002854 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b09e      	sub	sp, #120	; 0x78
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800285e:	2300      	movs	r3, #0
 8002860:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e162      	b.n	8002b32 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800286c:	4b90      	ldr	r3, [pc, #576]	; (8002ab0 <HAL_RCC_ClockConfig+0x25c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d910      	bls.n	800289c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287a:	4b8d      	ldr	r3, [pc, #564]	; (8002ab0 <HAL_RCC_ClockConfig+0x25c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 0207 	bic.w	r2, r3, #7
 8002882:	498b      	ldr	r1, [pc, #556]	; (8002ab0 <HAL_RCC_ClockConfig+0x25c>)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	4313      	orrs	r3, r2
 8002888:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800288a:	4b89      	ldr	r3, [pc, #548]	; (8002ab0 <HAL_RCC_ClockConfig+0x25c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e14a      	b.n	8002b32 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d008      	beq.n	80028ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a8:	4b82      	ldr	r3, [pc, #520]	; (8002ab4 <HAL_RCC_ClockConfig+0x260>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	497f      	ldr	r1, [pc, #508]	; (8002ab4 <HAL_RCC_ClockConfig+0x260>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 80dc 	beq.w	8002a80 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d13c      	bne.n	800294a <HAL_RCC_ClockConfig+0xf6>
 80028d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028d8:	fa93 f3a3 	rbit	r3, r3
 80028dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80028de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e0:	fab3 f383 	clz	r3, r3
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d102      	bne.n	80028fa <HAL_RCC_ClockConfig+0xa6>
 80028f4:	4b6f      	ldr	r3, [pc, #444]	; (8002ab4 <HAL_RCC_ClockConfig+0x260>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	e00f      	b.n	800291a <HAL_RCC_ClockConfig+0xc6>
 80028fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002902:	fa93 f3a3 	rbit	r3, r3
 8002906:	667b      	str	r3, [r7, #100]	; 0x64
 8002908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800290c:	663b      	str	r3, [r7, #96]	; 0x60
 800290e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002910:	fa93 f3a3 	rbit	r3, r3
 8002914:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002916:	4b67      	ldr	r3, [pc, #412]	; (8002ab4 <HAL_RCC_ClockConfig+0x260>)
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800291e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002920:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002922:	fa92 f2a2 	rbit	r2, r2
 8002926:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002928:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800292a:	fab2 f282 	clz	r2, r2
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	f042 0220 	orr.w	r2, r2, #32
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	f002 021f 	and.w	r2, r2, #31
 800293a:	2101      	movs	r1, #1
 800293c:	fa01 f202 	lsl.w	r2, r1, r2
 8002940:	4013      	ands	r3, r2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d17b      	bne.n	8002a3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e0f3      	b.n	8002b32 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d13c      	bne.n	80029cc <HAL_RCC_ClockConfig+0x178>
 8002952:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002956:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002962:	fab3 f383 	clz	r3, r3
 8002966:	b2db      	uxtb	r3, r3
 8002968:	095b      	lsrs	r3, r3, #5
 800296a:	b2db      	uxtb	r3, r3
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b01      	cmp	r3, #1
 8002974:	d102      	bne.n	800297c <HAL_RCC_ClockConfig+0x128>
 8002976:	4b4f      	ldr	r3, [pc, #316]	; (8002ab4 <HAL_RCC_ClockConfig+0x260>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	e00f      	b.n	800299c <HAL_RCC_ClockConfig+0x148>
 800297c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002980:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002984:	fa93 f3a3 	rbit	r3, r3
 8002988:	647b      	str	r3, [r7, #68]	; 0x44
 800298a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800298e:	643b      	str	r3, [r7, #64]	; 0x40
 8002990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002998:	4b46      	ldr	r3, [pc, #280]	; (8002ab4 <HAL_RCC_ClockConfig+0x260>)
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80029a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029a4:	fa92 f2a2 	rbit	r2, r2
 80029a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80029aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029ac:	fab2 f282 	clz	r2, r2
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	f042 0220 	orr.w	r2, r2, #32
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	f002 021f 	and.w	r2, r2, #31
 80029bc:	2101      	movs	r1, #1
 80029be:	fa01 f202 	lsl.w	r2, r1, r2
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d13a      	bne.n	8002a3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0b2      	b.n	8002b32 <HAL_RCC_ClockConfig+0x2de>
 80029cc:	2302      	movs	r3, #2
 80029ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80029d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	095b      	lsrs	r3, r3, #5
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d102      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x1a0>
 80029ee:	4b31      	ldr	r3, [pc, #196]	; (8002ab4 <HAL_RCC_ClockConfig+0x260>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	e00d      	b.n	8002a10 <HAL_RCC_ClockConfig+0x1bc>
 80029f4:	2302      	movs	r3, #2
 80029f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002a00:	2302      	movs	r3, #2
 8002a02:	623b      	str	r3, [r7, #32]
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	fa93 f3a3 	rbit	r3, r3
 8002a0a:	61fb      	str	r3, [r7, #28]
 8002a0c:	4b29      	ldr	r3, [pc, #164]	; (8002ab4 <HAL_RCC_ClockConfig+0x260>)
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	2202      	movs	r2, #2
 8002a12:	61ba      	str	r2, [r7, #24]
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	fa92 f2a2 	rbit	r2, r2
 8002a1a:	617a      	str	r2, [r7, #20]
  return result;
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	fab2 f282 	clz	r2, r2
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	f042 0220 	orr.w	r2, r2, #32
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	f002 021f 	and.w	r2, r2, #31
 8002a2e:	2101      	movs	r1, #1
 8002a30:	fa01 f202 	lsl.w	r2, r1, r2
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e079      	b.n	8002b32 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a3e:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <HAL_RCC_ClockConfig+0x260>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f023 0203 	bic.w	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	491a      	ldr	r1, [pc, #104]	; (8002ab4 <HAL_RCC_ClockConfig+0x260>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a50:	f7fe fc34 	bl	80012bc <HAL_GetTick>
 8002a54:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a56:	e00a      	b.n	8002a6e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a58:	f7fe fc30 	bl	80012bc <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e061      	b.n	8002b32 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6e:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <HAL_RCC_ClockConfig+0x260>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 020c 	and.w	r2, r3, #12
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d1eb      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_RCC_ClockConfig+0x25c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d214      	bcs.n	8002ab8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8e:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <HAL_RCC_ClockConfig+0x25c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f023 0207 	bic.w	r2, r3, #7
 8002a96:	4906      	ldr	r1, [pc, #24]	; (8002ab0 <HAL_RCC_ClockConfig+0x25c>)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9e:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <HAL_RCC_ClockConfig+0x25c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d005      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e040      	b.n	8002b32 <HAL_RCC_ClockConfig+0x2de>
 8002ab0:	40022000 	.word	0x40022000
 8002ab4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac4:	4b1d      	ldr	r3, [pc, #116]	; (8002b3c <HAL_RCC_ClockConfig+0x2e8>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	491a      	ldr	r1, [pc, #104]	; (8002b3c <HAL_RCC_ClockConfig+0x2e8>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d009      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ae2:	4b16      	ldr	r3, [pc, #88]	; (8002b3c <HAL_RCC_ClockConfig+0x2e8>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4912      	ldr	r1, [pc, #72]	; (8002b3c <HAL_RCC_ClockConfig+0x2e8>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002af6:	f000 f829 	bl	8002b4c <HAL_RCC_GetSysClockFreq>
 8002afa:	4601      	mov	r1, r0
 8002afc:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <HAL_RCC_ClockConfig+0x2e8>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b04:	22f0      	movs	r2, #240	; 0xf0
 8002b06:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	fa92 f2a2 	rbit	r2, r2
 8002b0e:	60fa      	str	r2, [r7, #12]
  return result;
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	fab2 f282 	clz	r2, r2
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	40d3      	lsrs	r3, r2
 8002b1a:	4a09      	ldr	r2, [pc, #36]	; (8002b40 <HAL_RCC_ClockConfig+0x2ec>)
 8002b1c:	5cd3      	ldrb	r3, [r2, r3]
 8002b1e:	fa21 f303 	lsr.w	r3, r1, r3
 8002b22:	4a08      	ldr	r2, [pc, #32]	; (8002b44 <HAL_RCC_ClockConfig+0x2f0>)
 8002b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b26:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <HAL_RCC_ClockConfig+0x2f4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe fb82 	bl	8001234 <HAL_InitTick>
  
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3778      	adds	r7, #120	; 0x78
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	08002edc 	.word	0x08002edc
 8002b44:	20000000 	.word	0x20000000
 8002b48:	20000004 	.word	0x20000004

08002b4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b08b      	sub	sp, #44	; 0x2c
 8002b50:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	2300      	movs	r3, #0
 8002b58:	61bb      	str	r3, [r7, #24]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002b66:	4b29      	ldr	r3, [pc, #164]	; (8002c0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d002      	beq.n	8002b7c <HAL_RCC_GetSysClockFreq+0x30>
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d003      	beq.n	8002b82 <HAL_RCC_GetSysClockFreq+0x36>
 8002b7a:	e03c      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b7c:	4b24      	ldr	r3, [pc, #144]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b7e:	623b      	str	r3, [r7, #32]
      break;
 8002b80:	e03c      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002b88:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002b8c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	fa92 f2a2 	rbit	r2, r2
 8002b94:	607a      	str	r2, [r7, #4]
  return result;
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	fab2 f282 	clz	r2, r2
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	40d3      	lsrs	r3, r2
 8002ba0:	4a1c      	ldr	r2, [pc, #112]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ba2:	5cd3      	ldrb	r3, [r2, r3]
 8002ba4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002ba6:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	220f      	movs	r2, #15
 8002bb0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	fa92 f2a2 	rbit	r2, r2
 8002bb8:	60fa      	str	r2, [r7, #12]
  return result;
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	fab2 f282 	clz	r2, r2
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	40d3      	lsrs	r3, r2
 8002bc4:	4a14      	ldr	r2, [pc, #80]	; (8002c18 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002bc6:	5cd3      	ldrb	r3, [r2, r3]
 8002bc8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d008      	beq.n	8002be6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002bd4:	4a0e      	ldr	r2, [pc, #56]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	fb02 f303 	mul.w	r3, r2, r3
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
 8002be4:	e004      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	4a0c      	ldr	r2, [pc, #48]	; (8002c1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002bea:	fb02 f303 	mul.w	r3, r2, r3
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	623b      	str	r3, [r7, #32]
      break;
 8002bf4:	e002      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bf6:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bf8:	623b      	str	r3, [r7, #32]
      break;
 8002bfa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	372c      	adds	r7, #44	; 0x2c
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	007a1200 	.word	0x007a1200
 8002c14:	08002eec 	.word	0x08002eec
 8002c18:	08002efc 	.word	0x08002efc
 8002c1c:	003d0900 	.word	0x003d0900

08002c20 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b092      	sub	sp, #72	; 0x48
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80d0 	beq.w	8002dde <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c44:	4b86      	ldr	r3, [pc, #536]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10e      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c50:	4b83      	ldr	r3, [pc, #524]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	4a82      	ldr	r2, [pc, #520]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	61d3      	str	r3, [r2, #28]
 8002c5c:	4b80      	ldr	r3, [pc, #512]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6e:	4b7d      	ldr	r3, [pc, #500]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d118      	bne.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c7a:	4b7a      	ldr	r3, [pc, #488]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a79      	ldr	r2, [pc, #484]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c84:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c86:	f7fe fb19 	bl	80012bc <HAL_GetTick>
 8002c8a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c8e:	f7fe fb15 	bl	80012bc <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b64      	cmp	r3, #100	; 0x64
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e0db      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca0:	4b70      	ldr	r3, [pc, #448]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0f0      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cac:	4b6c      	ldr	r3, [pc, #432]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d07d      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d076      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cca:	4b65      	ldr	r3, [pc, #404]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cd8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ce4:	fab3 f383 	clz	r3, r3
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	461a      	mov	r2, r3
 8002cec:	4b5e      	ldr	r3, [pc, #376]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cee:	4413      	add	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d00:	fa93 f3a3 	rbit	r3, r3
 8002d04:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d08:	fab3 f383 	clz	r3, r3
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	461a      	mov	r2, r3
 8002d10:	4b55      	ldr	r3, [pc, #340]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	461a      	mov	r2, r3
 8002d18:	2300      	movs	r3, #0
 8002d1a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d1c:	4a50      	ldr	r2, [pc, #320]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d20:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d045      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7fe fac6 	bl	80012bc <HAL_GetTick>
 8002d30:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d32:	e00a      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d34:	f7fe fac2 	bl	80012bc <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e086      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d50:	fa93 f3a3 	rbit	r3, r3
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
 8002d56:	2302      	movs	r3, #2
 8002d58:	623b      	str	r3, [r7, #32]
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	fa93 f3a3 	rbit	r3, r3
 8002d60:	61fb      	str	r3, [r7, #28]
  return result;
 8002d62:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d64:	fab3 f383 	clz	r3, r3
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	f043 0302 	orr.w	r3, r3, #2
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d102      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002d78:	4b39      	ldr	r3, [pc, #228]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	e007      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	4b35      	ldr	r3, [pc, #212]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	2202      	movs	r2, #2
 8002d90:	613a      	str	r2, [r7, #16]
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	fa92 f2a2 	rbit	r2, r2
 8002d98:	60fa      	str	r2, [r7, #12]
  return result;
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	fab2 f282 	clz	r2, r2
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	f002 021f 	and.w	r2, r2, #31
 8002dac:	2101      	movs	r1, #1
 8002dae:	fa01 f202 	lsl.w	r2, r1, r2
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0bd      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002db8:	4b29      	ldr	r3, [pc, #164]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	4926      	ldr	r1, [pc, #152]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d105      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd2:	4b23      	ldr	r3, [pc, #140]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	4a22      	ldr	r2, [pc, #136]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d008      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dea:	4b1d      	ldr	r3, [pc, #116]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	f023 0203 	bic.w	r2, r3, #3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	491a      	ldr	r1, [pc, #104]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0320 	and.w	r3, r3, #32
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e08:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	f023 0210 	bic.w	r2, r3, #16
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	4912      	ldr	r1, [pc, #72]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d008      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e26:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	490b      	ldr	r1, [pc, #44]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	4903      	ldr	r1, [pc, #12]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3748      	adds	r7, #72	; 0x48
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40007000 	.word	0x40007000
 8002e68:	10908100 	.word	0x10908100

08002e6c <__libc_init_array>:
 8002e6c:	b570      	push	{r4, r5, r6, lr}
 8002e6e:	4e0d      	ldr	r6, [pc, #52]	; (8002ea4 <__libc_init_array+0x38>)
 8002e70:	4c0d      	ldr	r4, [pc, #52]	; (8002ea8 <__libc_init_array+0x3c>)
 8002e72:	1ba4      	subs	r4, r4, r6
 8002e74:	10a4      	asrs	r4, r4, #2
 8002e76:	2500      	movs	r5, #0
 8002e78:	42a5      	cmp	r5, r4
 8002e7a:	d109      	bne.n	8002e90 <__libc_init_array+0x24>
 8002e7c:	4e0b      	ldr	r6, [pc, #44]	; (8002eac <__libc_init_array+0x40>)
 8002e7e:	4c0c      	ldr	r4, [pc, #48]	; (8002eb0 <__libc_init_array+0x44>)
 8002e80:	f000 f820 	bl	8002ec4 <_init>
 8002e84:	1ba4      	subs	r4, r4, r6
 8002e86:	10a4      	asrs	r4, r4, #2
 8002e88:	2500      	movs	r5, #0
 8002e8a:	42a5      	cmp	r5, r4
 8002e8c:	d105      	bne.n	8002e9a <__libc_init_array+0x2e>
 8002e8e:	bd70      	pop	{r4, r5, r6, pc}
 8002e90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e94:	4798      	blx	r3
 8002e96:	3501      	adds	r5, #1
 8002e98:	e7ee      	b.n	8002e78 <__libc_init_array+0xc>
 8002e9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e9e:	4798      	blx	r3
 8002ea0:	3501      	adds	r5, #1
 8002ea2:	e7f2      	b.n	8002e8a <__libc_init_array+0x1e>
 8002ea4:	08002f0c 	.word	0x08002f0c
 8002ea8:	08002f0c 	.word	0x08002f0c
 8002eac:	08002f0c 	.word	0x08002f0c
 8002eb0:	08002f14 	.word	0x08002f14

08002eb4 <memset>:
 8002eb4:	4402      	add	r2, r0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d100      	bne.n	8002ebe <memset+0xa>
 8002ebc:	4770      	bx	lr
 8002ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8002ec2:	e7f9      	b.n	8002eb8 <memset+0x4>

08002ec4 <_init>:
 8002ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec6:	bf00      	nop
 8002ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eca:	bc08      	pop	{r3}
 8002ecc:	469e      	mov	lr, r3
 8002ece:	4770      	bx	lr

08002ed0 <_fini>:
 8002ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed2:	bf00      	nop
 8002ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ed6:	bc08      	pop	{r3}
 8002ed8:	469e      	mov	lr, r3
 8002eda:	4770      	bx	lr
